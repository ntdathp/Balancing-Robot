
Balance.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb44  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000838  0800ec58  0800ec58  0001ec58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f490  0800f490  00020274  2**0
                  CONTENTS
  4 .ARM          00000000  0800f490  0800f490  00020274  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f490  0800f490  00020274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f490  0800f490  0001f490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f494  0800f494  0001f494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000274  20000000  0800f498  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000838  20000278  0800f70c  00020278  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000ab0  0800f70c  00020ab0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019e02  00000000  00000000  0002029d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000381f  00000000  00000000  0003a09f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001740  00000000  00000000  0003d8c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015c8  00000000  00000000  0003f000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b600  00000000  00000000  000405c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bc4b  00000000  00000000  0005bbc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000941a2  00000000  00000000  00077813  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010b9b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a84  00000000  00000000  0010ba08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000278 	.word	0x20000278
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ec3c 	.word	0x0800ec3c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000027c 	.word	0x2000027c
 800014c:	0800ec3c 	.word	0x0800ec3c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <__aeabi_f2uiz>:
 800115c:	0042      	lsls	r2, r0, #1
 800115e:	d20e      	bcs.n	800117e <__aeabi_f2uiz+0x22>
 8001160:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001164:	d30b      	bcc.n	800117e <__aeabi_f2uiz+0x22>
 8001166:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800116a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800116e:	d409      	bmi.n	8001184 <__aeabi_f2uiz+0x28>
 8001170:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001174:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001178:	fa23 f002 	lsr.w	r0, r3, r2
 800117c:	4770      	bx	lr
 800117e:	f04f 0000 	mov.w	r0, #0
 8001182:	4770      	bx	lr
 8001184:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001188:	d101      	bne.n	800118e <__aeabi_f2uiz+0x32>
 800118a:	0242      	lsls	r2, r0, #9
 800118c:	d102      	bne.n	8001194 <__aeabi_f2uiz+0x38>
 800118e:	f04f 30ff 	mov.w	r0, #4294967295
 8001192:	4770      	bx	lr
 8001194:	f04f 0000 	mov.w	r0, #0
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop

0800119c <__aeabi_d2lz>:
 800119c:	b538      	push	{r3, r4, r5, lr}
 800119e:	4605      	mov	r5, r0
 80011a0:	460c      	mov	r4, r1
 80011a2:	2200      	movs	r2, #0
 80011a4:	2300      	movs	r3, #0
 80011a6:	4628      	mov	r0, r5
 80011a8:	4621      	mov	r1, r4
 80011aa:	f7ff fc07 	bl	80009bc <__aeabi_dcmplt>
 80011ae:	b928      	cbnz	r0, 80011bc <__aeabi_d2lz+0x20>
 80011b0:	4628      	mov	r0, r5
 80011b2:	4621      	mov	r1, r4
 80011b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011b8:	f000 b80a 	b.w	80011d0 <__aeabi_d2ulz>
 80011bc:	4628      	mov	r0, r5
 80011be:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80011c2:	f000 f805 	bl	80011d0 <__aeabi_d2ulz>
 80011c6:	4240      	negs	r0, r0
 80011c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011cc:	bd38      	pop	{r3, r4, r5, pc}
 80011ce:	bf00      	nop

080011d0 <__aeabi_d2ulz>:
 80011d0:	b5d0      	push	{r4, r6, r7, lr}
 80011d2:	2200      	movs	r2, #0
 80011d4:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <__aeabi_d2ulz+0x34>)
 80011d6:	4606      	mov	r6, r0
 80011d8:	460f      	mov	r7, r1
 80011da:	f7ff f97d 	bl	80004d8 <__aeabi_dmul>
 80011de:	f7ff fc53 	bl	8000a88 <__aeabi_d2uiz>
 80011e2:	4604      	mov	r4, r0
 80011e4:	f7ff f8fe 	bl	80003e4 <__aeabi_ui2d>
 80011e8:	2200      	movs	r2, #0
 80011ea:	4b07      	ldr	r3, [pc, #28]	; (8001208 <__aeabi_d2ulz+0x38>)
 80011ec:	f7ff f974 	bl	80004d8 <__aeabi_dmul>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4630      	mov	r0, r6
 80011f6:	4639      	mov	r1, r7
 80011f8:	f7fe ffb6 	bl	8000168 <__aeabi_dsub>
 80011fc:	f7ff fc44 	bl	8000a88 <__aeabi_d2uiz>
 8001200:	4621      	mov	r1, r4
 8001202:	bdd0      	pop	{r4, r6, r7, pc}
 8001204:	3df00000 	.word	0x3df00000
 8001208:	41f00000 	.word	0x41f00000

0800120c <Balance_init>:
static const float u_ZE_p[] = { 0.0000f };
static const float u_PS_p[] = { 0.4500f };
static const float u_PM_p[] = { 0.7500f };
static const float u_PB_p[] = { 1.0000f };

void Balance_init( void ){
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	; 0x28
 8001210:	af0a      	add	r7, sp, #40	; 0x28
    /* Set inputs */
    qFIS_InputSetup( Balance_inputs, e, -1.0000f, 1.0000f );
 8001212:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001216:	4a91      	ldr	r2, [pc, #580]	; (800145c <Balance_init+0x250>)
 8001218:	2100      	movs	r1, #0
 800121a:	4891      	ldr	r0, [pc, #580]	; (8001460 <Balance_init+0x254>)
 800121c:	f001 ff5e 	bl	80030dc <qFIS_InputSetup>
    qFIS_InputSetup( Balance_inputs, edot, -1.0000f, 1.0000f );
 8001220:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001224:	4a8d      	ldr	r2, [pc, #564]	; (800145c <Balance_init+0x250>)
 8001226:	2101      	movs	r1, #1
 8001228:	488d      	ldr	r0, [pc, #564]	; (8001460 <Balance_init+0x254>)
 800122a:	f001 ff57 	bl	80030dc <qFIS_InputSetup>
    /* Set outputs */
    qFIS_OutputSetup( Balance_outputs, u, -1.0000f, 1.0000f );
 800122e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001232:	4a8a      	ldr	r2, [pc, #552]	; (800145c <Balance_init+0x250>)
 8001234:	2100      	movs	r1, #0
 8001236:	488b      	ldr	r0, [pc, #556]	; (8001464 <Balance_init+0x258>)
 8001238:	f001 ff7b 	bl	8003132 <qFIS_OutputSetup>
    /* Set membership functions for the inputs */
    qFIS_SetMF( MFin, e, e_NB, trapmf, NULL, e_NB_p, 1.0f );
 800123c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001240:	9302      	str	r3, [sp, #8]
 8001242:	4b89      	ldr	r3, [pc, #548]	; (8001468 <Balance_init+0x25c>)
 8001244:	9301      	str	r3, [sp, #4]
 8001246:	2300      	movs	r3, #0
 8001248:	9300      	str	r3, [sp, #0]
 800124a:	2302      	movs	r3, #2
 800124c:	2200      	movs	r2, #0
 800124e:	2100      	movs	r1, #0
 8001250:	4886      	ldr	r0, [pc, #536]	; (800146c <Balance_init+0x260>)
 8001252:	f002 f817 	bl	8003284 <qFIS_SetMF>
    qFIS_SetMF( MFin, e, e_ZE, trapmf, NULL, e_ZE_p, 1.0f );
 8001256:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800125a:	9302      	str	r3, [sp, #8]
 800125c:	4b84      	ldr	r3, [pc, #528]	; (8001470 <Balance_init+0x264>)
 800125e:	9301      	str	r3, [sp, #4]
 8001260:	2300      	movs	r3, #0
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	2302      	movs	r3, #2
 8001266:	2201      	movs	r2, #1
 8001268:	2100      	movs	r1, #0
 800126a:	4880      	ldr	r0, [pc, #512]	; (800146c <Balance_init+0x260>)
 800126c:	f002 f80a 	bl	8003284 <qFIS_SetMF>
    qFIS_SetMF( MFin, e, e_PB, trapmf, NULL, e_PB_p, 1.0f );
 8001270:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001274:	9302      	str	r3, [sp, #8]
 8001276:	4b7f      	ldr	r3, [pc, #508]	; (8001474 <Balance_init+0x268>)
 8001278:	9301      	str	r3, [sp, #4]
 800127a:	2300      	movs	r3, #0
 800127c:	9300      	str	r3, [sp, #0]
 800127e:	2302      	movs	r3, #2
 8001280:	2202      	movs	r2, #2
 8001282:	2100      	movs	r1, #0
 8001284:	4879      	ldr	r0, [pc, #484]	; (800146c <Balance_init+0x260>)
 8001286:	f001 fffd 	bl	8003284 <qFIS_SetMF>
    qFIS_SetMF( MFin, e, e_NS, trapmf, NULL, e_NS_p, 1.0f );
 800128a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800128e:	9302      	str	r3, [sp, #8]
 8001290:	4b79      	ldr	r3, [pc, #484]	; (8001478 <Balance_init+0x26c>)
 8001292:	9301      	str	r3, [sp, #4]
 8001294:	2300      	movs	r3, #0
 8001296:	9300      	str	r3, [sp, #0]
 8001298:	2302      	movs	r3, #2
 800129a:	2203      	movs	r2, #3
 800129c:	2100      	movs	r1, #0
 800129e:	4873      	ldr	r0, [pc, #460]	; (800146c <Balance_init+0x260>)
 80012a0:	f001 fff0 	bl	8003284 <qFIS_SetMF>
    qFIS_SetMF( MFin, e, e_PS, trapmf, NULL, e_PS_p, 1.0f );
 80012a4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012a8:	9302      	str	r3, [sp, #8]
 80012aa:	4b74      	ldr	r3, [pc, #464]	; (800147c <Balance_init+0x270>)
 80012ac:	9301      	str	r3, [sp, #4]
 80012ae:	2300      	movs	r3, #0
 80012b0:	9300      	str	r3, [sp, #0]
 80012b2:	2302      	movs	r3, #2
 80012b4:	2204      	movs	r2, #4
 80012b6:	2100      	movs	r1, #0
 80012b8:	486c      	ldr	r0, [pc, #432]	; (800146c <Balance_init+0x260>)
 80012ba:	f001 ffe3 	bl	8003284 <qFIS_SetMF>
    qFIS_SetMF( MFin, edot, edot_NB, trimf, NULL, edot_NB_p, 1.0f );
 80012be:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012c2:	9302      	str	r3, [sp, #8]
 80012c4:	4b6e      	ldr	r3, [pc, #440]	; (8001480 <Balance_init+0x274>)
 80012c6:	9301      	str	r3, [sp, #4]
 80012c8:	2300      	movs	r3, #0
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	2301      	movs	r3, #1
 80012ce:	2205      	movs	r2, #5
 80012d0:	2101      	movs	r1, #1
 80012d2:	4866      	ldr	r0, [pc, #408]	; (800146c <Balance_init+0x260>)
 80012d4:	f001 ffd6 	bl	8003284 <qFIS_SetMF>
    qFIS_SetMF( MFin, edot, edot_ZE, trapmf, NULL, edot_ZE_p, 1.0f );
 80012d8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012dc:	9302      	str	r3, [sp, #8]
 80012de:	4b69      	ldr	r3, [pc, #420]	; (8001484 <Balance_init+0x278>)
 80012e0:	9301      	str	r3, [sp, #4]
 80012e2:	2300      	movs	r3, #0
 80012e4:	9300      	str	r3, [sp, #0]
 80012e6:	2302      	movs	r3, #2
 80012e8:	2206      	movs	r2, #6
 80012ea:	2101      	movs	r1, #1
 80012ec:	485f      	ldr	r0, [pc, #380]	; (800146c <Balance_init+0x260>)
 80012ee:	f001 ffc9 	bl	8003284 <qFIS_SetMF>
    qFIS_SetMF( MFin, edot, edot_PB, trimf, NULL, edot_PB_p, 1.0f );
 80012f2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012f6:	9302      	str	r3, [sp, #8]
 80012f8:	4b63      	ldr	r3, [pc, #396]	; (8001488 <Balance_init+0x27c>)
 80012fa:	9301      	str	r3, [sp, #4]
 80012fc:	2300      	movs	r3, #0
 80012fe:	9300      	str	r3, [sp, #0]
 8001300:	2301      	movs	r3, #1
 8001302:	2207      	movs	r2, #7
 8001304:	2101      	movs	r1, #1
 8001306:	4859      	ldr	r0, [pc, #356]	; (800146c <Balance_init+0x260>)
 8001308:	f001 ffbc 	bl	8003284 <qFIS_SetMF>
    qFIS_SetMF( MFin, edot, edot_NS, trimf, NULL, edot_NS_p, 1.0f );
 800130c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001310:	9302      	str	r3, [sp, #8]
 8001312:	4b5e      	ldr	r3, [pc, #376]	; (800148c <Balance_init+0x280>)
 8001314:	9301      	str	r3, [sp, #4]
 8001316:	2300      	movs	r3, #0
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	2301      	movs	r3, #1
 800131c:	2208      	movs	r2, #8
 800131e:	2101      	movs	r1, #1
 8001320:	4852      	ldr	r0, [pc, #328]	; (800146c <Balance_init+0x260>)
 8001322:	f001 ffaf 	bl	8003284 <qFIS_SetMF>
    qFIS_SetMF( MFin, edot, edot_PS, trimf, NULL, edot_PS_p, 1.0f );
 8001326:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800132a:	9302      	str	r3, [sp, #8]
 800132c:	4b58      	ldr	r3, [pc, #352]	; (8001490 <Balance_init+0x284>)
 800132e:	9301      	str	r3, [sp, #4]
 8001330:	2300      	movs	r3, #0
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	2301      	movs	r3, #1
 8001336:	2209      	movs	r2, #9
 8001338:	2101      	movs	r1, #1
 800133a:	484c      	ldr	r0, [pc, #304]	; (800146c <Balance_init+0x260>)
 800133c:	f001 ffa2 	bl	8003284 <qFIS_SetMF>
    /* Set membership functions for the outputs */
    qFIS_SetMF( MFout, u, u_NB, constantmf, NULL, u_NB_p, 1.0f );
 8001340:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001344:	9302      	str	r3, [sp, #8]
 8001346:	4b53      	ldr	r3, [pc, #332]	; (8001494 <Balance_init+0x288>)
 8001348:	9301      	str	r3, [sp, #4]
 800134a:	2300      	movs	r3, #0
 800134c:	9300      	str	r3, [sp, #0]
 800134e:	2313      	movs	r3, #19
 8001350:	2200      	movs	r2, #0
 8001352:	2100      	movs	r1, #0
 8001354:	4850      	ldr	r0, [pc, #320]	; (8001498 <Balance_init+0x28c>)
 8001356:	f001 ff95 	bl	8003284 <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_NM, constantmf, NULL, u_NM_p, 1.0f );
 800135a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800135e:	9302      	str	r3, [sp, #8]
 8001360:	4b4e      	ldr	r3, [pc, #312]	; (800149c <Balance_init+0x290>)
 8001362:	9301      	str	r3, [sp, #4]
 8001364:	2300      	movs	r3, #0
 8001366:	9300      	str	r3, [sp, #0]
 8001368:	2313      	movs	r3, #19
 800136a:	2201      	movs	r2, #1
 800136c:	2100      	movs	r1, #0
 800136e:	484a      	ldr	r0, [pc, #296]	; (8001498 <Balance_init+0x28c>)
 8001370:	f001 ff88 	bl	8003284 <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_NS, constantmf, NULL, u_NS_p, 1.0f );
 8001374:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001378:	9302      	str	r3, [sp, #8]
 800137a:	4b49      	ldr	r3, [pc, #292]	; (80014a0 <Balance_init+0x294>)
 800137c:	9301      	str	r3, [sp, #4]
 800137e:	2300      	movs	r3, #0
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	2313      	movs	r3, #19
 8001384:	2202      	movs	r2, #2
 8001386:	2100      	movs	r1, #0
 8001388:	4843      	ldr	r0, [pc, #268]	; (8001498 <Balance_init+0x28c>)
 800138a:	f001 ff7b 	bl	8003284 <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_ZE, constantmf, NULL, u_ZE_p, 1.0f );
 800138e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001392:	9302      	str	r3, [sp, #8]
 8001394:	4b43      	ldr	r3, [pc, #268]	; (80014a4 <Balance_init+0x298>)
 8001396:	9301      	str	r3, [sp, #4]
 8001398:	2300      	movs	r3, #0
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	2313      	movs	r3, #19
 800139e:	2203      	movs	r2, #3
 80013a0:	2100      	movs	r1, #0
 80013a2:	483d      	ldr	r0, [pc, #244]	; (8001498 <Balance_init+0x28c>)
 80013a4:	f001 ff6e 	bl	8003284 <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_PS, constantmf, NULL, u_PS_p, 1.0f );
 80013a8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80013ac:	9302      	str	r3, [sp, #8]
 80013ae:	4b3e      	ldr	r3, [pc, #248]	; (80014a8 <Balance_init+0x29c>)
 80013b0:	9301      	str	r3, [sp, #4]
 80013b2:	2300      	movs	r3, #0
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	2313      	movs	r3, #19
 80013b8:	2204      	movs	r2, #4
 80013ba:	2100      	movs	r1, #0
 80013bc:	4836      	ldr	r0, [pc, #216]	; (8001498 <Balance_init+0x28c>)
 80013be:	f001 ff61 	bl	8003284 <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_PM, constantmf, NULL, u_PM_p, 1.0f );
 80013c2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80013c6:	9302      	str	r3, [sp, #8]
 80013c8:	4b38      	ldr	r3, [pc, #224]	; (80014ac <Balance_init+0x2a0>)
 80013ca:	9301      	str	r3, [sp, #4]
 80013cc:	2300      	movs	r3, #0
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	2313      	movs	r3, #19
 80013d2:	2205      	movs	r2, #5
 80013d4:	2100      	movs	r1, #0
 80013d6:	4830      	ldr	r0, [pc, #192]	; (8001498 <Balance_init+0x28c>)
 80013d8:	f001 ff54 	bl	8003284 <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_PB, constantmf, NULL, u_PB_p, 1.0f );
 80013dc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80013e0:	9302      	str	r3, [sp, #8]
 80013e2:	4b33      	ldr	r3, [pc, #204]	; (80014b0 <Balance_init+0x2a4>)
 80013e4:	9301      	str	r3, [sp, #4]
 80013e6:	2300      	movs	r3, #0
 80013e8:	9300      	str	r3, [sp, #0]
 80013ea:	2313      	movs	r3, #19
 80013ec:	2206      	movs	r2, #6
 80013ee:	2100      	movs	r1, #0
 80013f0:	4829      	ldr	r0, [pc, #164]	; (8001498 <Balance_init+0x28c>)
 80013f2:	f001 ff47 	bl	8003284 <qFIS_SetMF>

    /* Configure the Inference System */
    qFIS_Setup( &Balance, Sugeno,
 80013f6:	2319      	movs	r3, #25
 80013f8:	9308      	str	r3, [sp, #32]
 80013fa:	4b2e      	ldr	r3, [pc, #184]	; (80014b4 <Balance_init+0x2a8>)
 80013fc:	9307      	str	r3, [sp, #28]
 80013fe:	4b2e      	ldr	r3, [pc, #184]	; (80014b8 <Balance_init+0x2ac>)
 8001400:	9306      	str	r3, [sp, #24]
 8001402:	238c      	movs	r3, #140	; 0x8c
 8001404:	9305      	str	r3, [sp, #20]
 8001406:	4b24      	ldr	r3, [pc, #144]	; (8001498 <Balance_init+0x28c>)
 8001408:	9304      	str	r3, [sp, #16]
 800140a:	23c8      	movs	r3, #200	; 0xc8
 800140c:	9303      	str	r3, [sp, #12]
 800140e:	4b17      	ldr	r3, [pc, #92]	; (800146c <Balance_init+0x260>)
 8001410:	9302      	str	r3, [sp, #8]
 8001412:	2334      	movs	r3, #52	; 0x34
 8001414:	9301      	str	r3, [sp, #4]
 8001416:	4b13      	ldr	r3, [pc, #76]	; (8001464 <Balance_init+0x258>)
 8001418:	9300      	str	r3, [sp, #0]
 800141a:	2318      	movs	r3, #24
 800141c:	4a10      	ldr	r2, [pc, #64]	; (8001460 <Balance_init+0x254>)
 800141e:	2101      	movs	r1, #1
 8001420:	4826      	ldr	r0, [pc, #152]	; (80014bc <Balance_init+0x2b0>)
 8001422:	f001 fd83 	bl	8002f2c <qFIS_Setup>
                Balance_inputs, sizeof(Balance_inputs),
                Balance_outputs, sizeof(Balance_outputs),
                MFin, sizeof(MFin), MFout, sizeof(MFout),
                rules, rStrength, 25u );
    qFIS_SetDeFuzzMethod( &Balance, wtsum );
 8001426:	2106      	movs	r1, #6
 8001428:	4824      	ldr	r0, [pc, #144]	; (80014bc <Balance_init+0x2b0>)
 800142a:	f001 fd45 	bl	8002eb8 <qFIS_SetDeFuzzMethod>
    qFIS_SetParameter( &Balance, qFIS_AND, qFIS_PROD );
 800142e:	2201      	movs	r2, #1
 8001430:	2102      	movs	r1, #2
 8001432:	4822      	ldr	r0, [pc, #136]	; (80014bc <Balance_init+0x2b0>)
 8001434:	f001 fcce 	bl	8002dd4 <qFIS_SetParameter>
    qFIS_SetParameter( &Balance, qFIS_OR, qFIS_PROBOR );
 8001438:	2203      	movs	r2, #3
 800143a:	2103      	movs	r1, #3
 800143c:	481f      	ldr	r0, [pc, #124]	; (80014bc <Balance_init+0x2b0>)
 800143e:	f001 fcc9 	bl	8002dd4 <qFIS_SetParameter>
    qFIS_SetParameter( &Balance, qFIS_Implication, qFIS_PROD );
 8001442:	2201      	movs	r2, #1
 8001444:	2100      	movs	r1, #0
 8001446:	481d      	ldr	r0, [pc, #116]	; (80014bc <Balance_init+0x2b0>)
 8001448:	f001 fcc4 	bl	8002dd4 <qFIS_SetParameter>
    qFIS_SetParameter( &Balance, qFIS_Aggregation, qFIS_SUM );
 800144c:	2204      	movs	r2, #4
 800144e:	2101      	movs	r1, #1
 8001450:	481a      	ldr	r0, [pc, #104]	; (80014bc <Balance_init+0x2b0>)
 8001452:	f001 fcbf 	bl	8002dd4 <qFIS_SetParameter>
}
 8001456:	bf00      	nop
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	bf800000 	.word	0xbf800000
 8001460:	200002f4 	.word	0x200002f4
 8001464:	2000030c 	.word	0x2000030c
 8001468:	0800edfc 	.word	0x0800edfc
 800146c:	20000340 	.word	0x20000340
 8001470:	0800ee0c 	.word	0x0800ee0c
 8001474:	0800ee1c 	.word	0x0800ee1c
 8001478:	0800ee2c 	.word	0x0800ee2c
 800147c:	0800ee3c 	.word	0x0800ee3c
 8001480:	0800ee4c 	.word	0x0800ee4c
 8001484:	0800ee58 	.word	0x0800ee58
 8001488:	0800ee68 	.word	0x0800ee68
 800148c:	0800ee74 	.word	0x0800ee74
 8001490:	0800ee80 	.word	0x0800ee80
 8001494:	0800ee8c 	.word	0x0800ee8c
 8001498:	20000408 	.word	0x20000408
 800149c:	0800ee90 	.word	0x0800ee90
 80014a0:	0800ee94 	.word	0x0800ee94
 80014a4:	0800ee98 	.word	0x0800ee98
 80014a8:	0800ee9c 	.word	0x0800ee9c
 80014ac:	0800eea0 	.word	0x0800eea0
 80014b0:	0800eea4 	.word	0x0800eea4
 80014b4:	20000494 	.word	0x20000494
 80014b8:	0800ec68 	.word	0x0800ec68
 80014bc:	20000294 	.word	0x20000294

080014c0 <Balance_run>:

void Balance_run( float *inputs, float *outputs ) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
    /* Set the crips inputs */
    qFIS_SetInput( Balance_inputs, e, inputs[ e ] );
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	461a      	mov	r2, r3
 80014d0:	2100      	movs	r1, #0
 80014d2:	4811      	ldr	r0, [pc, #68]	; (8001518 <Balance_run+0x58>)
 80014d4:	f001 fe9a 	bl	800320c <qFIS_SetInput>
    qFIS_SetInput( Balance_inputs, edot, inputs[ edot ] );
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3304      	adds	r3, #4
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	461a      	mov	r2, r3
 80014e0:	2101      	movs	r1, #1
 80014e2:	480d      	ldr	r0, [pc, #52]	; (8001518 <Balance_run+0x58>)
 80014e4:	f001 fe92 	bl	800320c <qFIS_SetInput>

    qFIS_Fuzzify( &Balance );
 80014e8:	480c      	ldr	r0, [pc, #48]	; (800151c <Balance_run+0x5c>)
 80014ea:	f001 ffaa 	bl	8003442 <qFIS_Fuzzify>
    if ( qFIS_Inference( &Balance ) > 0 ) {
 80014ee:	480b      	ldr	r0, [pc, #44]	; (800151c <Balance_run+0x5c>)
 80014f0:	f002 fd5c 	bl	8003fac <qFIS_Inference>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	dd02      	ble.n	8001500 <Balance_run+0x40>
        qFIS_DeFuzzify( &Balance );
 80014fa:	4808      	ldr	r0, [pc, #32]	; (800151c <Balance_run+0x5c>)
 80014fc:	f002 fc14 	bl	8003d28 <qFIS_DeFuzzify>
    else {
        /* Error! */
    }

    /* Get the crips outputs */
    outputs[ u ] = qFIS_GetOutput( Balance_outputs, u );
 8001500:	2100      	movs	r1, #0
 8001502:	4807      	ldr	r0, [pc, #28]	; (8001520 <Balance_run+0x60>)
 8001504:	f001 fea2 	bl	800324c <qFIS_GetOutput>
 8001508:	4602      	mov	r2, r0
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	601a      	str	r2, [r3, #0]
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	200002f4 	.word	0x200002f4
 800151c:	20000294 	.word	0x20000294
 8001520:	2000030c 	.word	0x2000030c

08001524 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b088      	sub	sp, #32
 8001528:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152a:	f107 0310 	add.w	r3, r7, #16
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001538:	4b24      	ldr	r3, [pc, #144]	; (80015cc <MX_GPIO_Init+0xa8>)
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	4a23      	ldr	r2, [pc, #140]	; (80015cc <MX_GPIO_Init+0xa8>)
 800153e:	f043 0310 	orr.w	r3, r3, #16
 8001542:	6193      	str	r3, [r2, #24]
 8001544:	4b21      	ldr	r3, [pc, #132]	; (80015cc <MX_GPIO_Init+0xa8>)
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	f003 0310 	and.w	r3, r3, #16
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001550:	4b1e      	ldr	r3, [pc, #120]	; (80015cc <MX_GPIO_Init+0xa8>)
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	4a1d      	ldr	r2, [pc, #116]	; (80015cc <MX_GPIO_Init+0xa8>)
 8001556:	f043 0320 	orr.w	r3, r3, #32
 800155a:	6193      	str	r3, [r2, #24]
 800155c:	4b1b      	ldr	r3, [pc, #108]	; (80015cc <MX_GPIO_Init+0xa8>)
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	f003 0320 	and.w	r3, r3, #32
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001568:	4b18      	ldr	r3, [pc, #96]	; (80015cc <MX_GPIO_Init+0xa8>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	4a17      	ldr	r2, [pc, #92]	; (80015cc <MX_GPIO_Init+0xa8>)
 800156e:	f043 0304 	orr.w	r3, r3, #4
 8001572:	6193      	str	r3, [r2, #24]
 8001574:	4b15      	ldr	r3, [pc, #84]	; (80015cc <MX_GPIO_Init+0xa8>)
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	f003 0304 	and.w	r3, r3, #4
 800157c:	607b      	str	r3, [r7, #4]
 800157e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001580:	4b12      	ldr	r3, [pc, #72]	; (80015cc <MX_GPIO_Init+0xa8>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	4a11      	ldr	r2, [pc, #68]	; (80015cc <MX_GPIO_Init+0xa8>)
 8001586:	f043 0308 	orr.w	r3, r3, #8
 800158a:	6193      	str	r3, [r2, #24]
 800158c:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <MX_GPIO_Init+0xa8>)
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	f003 0308 	and.w	r3, r3, #8
 8001594:	603b      	str	r3, [r7, #0]
 8001596:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001598:	2200      	movs	r2, #0
 800159a:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800159e:	480c      	ldr	r0, [pc, #48]	; (80015d0 <MX_GPIO_Init+0xac>)
 80015a0:	f004 fe5a 	bl	8006258 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80015a4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80015a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015aa:	2301      	movs	r3, #1
 80015ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b2:	2302      	movs	r3, #2
 80015b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015b6:	f107 0310 	add.w	r3, r7, #16
 80015ba:	4619      	mov	r1, r3
 80015bc:	4804      	ldr	r0, [pc, #16]	; (80015d0 <MX_GPIO_Init+0xac>)
 80015be:	f004 fcc7 	bl	8005f50 <HAL_GPIO_Init>

}
 80015c2:	bf00      	nop
 80015c4:	3720      	adds	r7, #32
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40021000 	.word	0x40021000
 80015d0:	40011000 	.word	0x40011000

080015d4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015d8:	4b12      	ldr	r3, [pc, #72]	; (8001624 <MX_I2C1_Init+0x50>)
 80015da:	4a13      	ldr	r2, [pc, #76]	; (8001628 <MX_I2C1_Init+0x54>)
 80015dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015de:	4b11      	ldr	r3, [pc, #68]	; (8001624 <MX_I2C1_Init+0x50>)
 80015e0:	4a12      	ldr	r2, [pc, #72]	; (800162c <MX_I2C1_Init+0x58>)
 80015e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015e4:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <MX_I2C1_Init+0x50>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015ea:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <MX_I2C1_Init+0x50>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015f0:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <MX_I2C1_Init+0x50>)
 80015f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015f8:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <MX_I2C1_Init+0x50>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015fe:	4b09      	ldr	r3, [pc, #36]	; (8001624 <MX_I2C1_Init+0x50>)
 8001600:	2200      	movs	r2, #0
 8001602:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001604:	4b07      	ldr	r3, [pc, #28]	; (8001624 <MX_I2C1_Init+0x50>)
 8001606:	2200      	movs	r2, #0
 8001608:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <MX_I2C1_Init+0x50>)
 800160c:	2200      	movs	r2, #0
 800160e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001610:	4804      	ldr	r0, [pc, #16]	; (8001624 <MX_I2C1_Init+0x50>)
 8001612:	f004 fe39 	bl	8006288 <HAL_I2C_Init>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800161c:	f000 fd4a 	bl	80020b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001620:	bf00      	nop
 8001622:	bd80      	pop	{r7, pc}
 8001624:	200004f8 	.word	0x200004f8
 8001628:	40005400 	.word	0x40005400
 800162c:	000186a0 	.word	0x000186a0

08001630 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08a      	sub	sp, #40	; 0x28
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a1d      	ldr	r2, [pc, #116]	; (80016c0 <HAL_I2C_MspInit+0x90>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d132      	bne.n	80016b6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001650:	4b1c      	ldr	r3, [pc, #112]	; (80016c4 <HAL_I2C_MspInit+0x94>)
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	4a1b      	ldr	r2, [pc, #108]	; (80016c4 <HAL_I2C_MspInit+0x94>)
 8001656:	f043 0308 	orr.w	r3, r3, #8
 800165a:	6193      	str	r3, [r2, #24]
 800165c:	4b19      	ldr	r3, [pc, #100]	; (80016c4 <HAL_I2C_MspInit+0x94>)
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	f003 0308 	and.w	r3, r3, #8
 8001664:	613b      	str	r3, [r7, #16]
 8001666:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001668:	f44f 7340 	mov.w	r3, #768	; 0x300
 800166c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800166e:	2312      	movs	r3, #18
 8001670:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001672:	2303      	movs	r3, #3
 8001674:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001676:	f107 0314 	add.w	r3, r7, #20
 800167a:	4619      	mov	r1, r3
 800167c:	4812      	ldr	r0, [pc, #72]	; (80016c8 <HAL_I2C_MspInit+0x98>)
 800167e:	f004 fc67 	bl	8005f50 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001682:	4b12      	ldr	r3, [pc, #72]	; (80016cc <HAL_I2C_MspInit+0x9c>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	627b      	str	r3, [r7, #36]	; 0x24
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
 8001690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001692:	f043 0302 	orr.w	r3, r3, #2
 8001696:	627b      	str	r3, [r7, #36]	; 0x24
 8001698:	4a0c      	ldr	r2, [pc, #48]	; (80016cc <HAL_I2C_MspInit+0x9c>)
 800169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169c:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800169e:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <HAL_I2C_MspInit+0x94>)
 80016a0:	69db      	ldr	r3, [r3, #28]
 80016a2:	4a08      	ldr	r2, [pc, #32]	; (80016c4 <HAL_I2C_MspInit+0x94>)
 80016a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016a8:	61d3      	str	r3, [r2, #28]
 80016aa:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <HAL_I2C_MspInit+0x94>)
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80016b6:	bf00      	nop
 80016b8:	3728      	adds	r7, #40	; 0x28
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40005400 	.word	0x40005400
 80016c4:	40021000 	.word	0x40021000
 80016c8:	40010c00 	.word	0x40010c00
 80016cc:	40010000 	.word	0x40010000

080016d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016d4:	f004 fa1a 	bl	8005b0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016d8:	f000 f84a 	bl	8001770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016dc:	f7ff ff22 	bl	8001524 <MX_GPIO_Init>
  MX_TIM2_Init();
 80016e0:	f003 fea2 	bl	8005428 <MX_TIM2_Init>
  MX_TIM3_Init();
 80016e4:	f003 feec 	bl	80054c0 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80016e8:	f004 f8c8 	bl	800587c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80016ec:	f7ff ff72 	bl	80015d4 <MX_I2C1_Init>
  MX_TIM1_Init();
 80016f0:	f003 fe42 	bl	8005378 <MX_TIM1_Init>
  MX_TIM4_Init();
 80016f4:	f003 ff7c 	bl	80055f0 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 80016f8:	f004 f8ea 	bl	80058d0 <MX_USART3_UART_Init>
  MX_USB_PCD_Init();
 80016fc:	f004 f9a0 	bl	8005a40 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001700:	4813      	ldr	r0, [pc, #76]	; (8001750 <main+0x80>)
 8001702:	f006 fc2f 	bl	8007f64 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001706:	2100      	movs	r1, #0
 8001708:	4812      	ldr	r0, [pc, #72]	; (8001754 <main+0x84>)
 800170a:	f006 fcd5 	bl	80080b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800170e:	2104      	movs	r1, #4
 8001710:	4810      	ldr	r0, [pc, #64]	; (8001754 <main+0x84>)
 8001712:	f006 fcd1 	bl	80080b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001716:	2108      	movs	r1, #8
 8001718:	480e      	ldr	r0, [pc, #56]	; (8001754 <main+0x84>)
 800171a:	f006 fccd 	bl	80080b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800171e:	210c      	movs	r1, #12
 8001720:	480c      	ldr	r0, [pc, #48]	; (8001754 <main+0x84>)
 8001722:	f006 fcc9 	bl	80080b8 <HAL_TIM_PWM_Start>

  HAL_UART_Receive_IT(&huart2,(uint8_t*)buff, 1);
 8001726:	2201      	movs	r2, #1
 8001728:	490b      	ldr	r1, [pc, #44]	; (8001758 <main+0x88>)
 800172a:	480c      	ldr	r0, [pc, #48]	; (800175c <main+0x8c>)
 800172c:	f007 fca5 	bl	800907a <HAL_UART_Receive_IT>
  HAL_UART_Transmit(&huart3, (uint8_t *)result, sizeof(result), 100);
 8001730:	2364      	movs	r3, #100	; 0x64
 8001732:	2214      	movs	r2, #20
 8001734:	490a      	ldr	r1, [pc, #40]	; (8001760 <main+0x90>)
 8001736:	480b      	ldr	r0, [pc, #44]	; (8001764 <main+0x94>)
 8001738:	f007 fc1c 	bl	8008f74 <HAL_UART_Transmit>

  MPU6050_Init(&hi2c1);
 800173c:	480a      	ldr	r0, [pc, #40]	; (8001768 <main+0x98>)
 800173e:	f000 fd29 	bl	8002194 <MPU6050_Init>

  Balance_init();
 8001742:	f7ff fd63 	bl	800120c <Balance_init>


  current = CF;
 8001746:	4b09      	ldr	r3, [pc, #36]	; (800176c <main+0x9c>)
 8001748:	2201      	movs	r2, #1
 800174a:	701a      	strb	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800174c:	e7fe      	b.n	800174c <main+0x7c>
 800174e:	bf00      	nop
 8001750:	20000644 	.word	0x20000644
 8001754:	2000068c 	.word	0x2000068c
 8001758:	200005d4 	.word	0x200005d4
 800175c:	2000071c 	.word	0x2000071c
 8001760:	200005d8 	.word	0x200005d8
 8001764:	20000764 	.word	0x20000764
 8001768:	200004f8 	.word	0x200004f8
 800176c:	2000054c 	.word	0x2000054c

08001770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b094      	sub	sp, #80	; 0x50
 8001774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001776:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800177a:	2228      	movs	r2, #40	; 0x28
 800177c:	2100      	movs	r1, #0
 800177e:	4618      	mov	r0, r3
 8001780:	f008 faaa 	bl	8009cd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001784:	f107 0314 	add.w	r3, r7, #20
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
 8001792:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001794:	1d3b      	adds	r3, r7, #4
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017a0:	2301      	movs	r3, #1
 80017a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80017aa:	2300      	movs	r3, #0
 80017ac:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017ae:	2301      	movs	r3, #1
 80017b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017b2:	2302      	movs	r3, #2
 80017b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80017bc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80017c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017c6:	4618      	mov	r0, r3
 80017c8:	f005 feb6 	bl	8007538 <HAL_RCC_OscConfig>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80017d2:	f000 fc6f 	bl	80020b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017d6:	230f      	movs	r3, #15
 80017d8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017da:	2302      	movs	r3, #2
 80017dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017de:	2300      	movs	r3, #0
 80017e0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017e6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017e8:	2300      	movs	r3, #0
 80017ea:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017ec:	f107 0314 	add.w	r3, r7, #20
 80017f0:	2102      	movs	r1, #2
 80017f2:	4618      	mov	r0, r3
 80017f4:	f006 f922 	bl	8007a3c <HAL_RCC_ClockConfig>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80017fe:	f000 fc59 	bl	80020b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001802:	2310      	movs	r3, #16
 8001804:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001806:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800180a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800180c:	1d3b      	adds	r3, r7, #4
 800180e:	4618      	mov	r0, r3
 8001810:	f006 faa2 	bl	8007d58 <HAL_RCCEx_PeriphCLKConfig>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800181a:	f000 fc4b 	bl	80020b4 <Error_Handler>
  }
}
 800181e:	bf00      	nop
 8001820:	3750      	adds	r7, #80	; 0x50
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]

	    if(huart ->Instance == huart2.Instance)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	4b19      	ldr	r3, [pc, #100]	; (800189c <HAL_UART_RxCpltCallback+0x74>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	429a      	cmp	r2, r3
 800183a:	d126      	bne.n	800188a <HAL_UART_RxCpltCallback+0x62>
	    {


	    	if(buff[0] == 'R')
 800183c:	4b18      	ldr	r3, [pc, #96]	; (80018a0 <HAL_UART_RxCpltCallback+0x78>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b52      	cmp	r3, #82	; 0x52
 8001842:	d103      	bne.n	800184c <HAL_UART_RxCpltCallback+0x24>
	    		{
	    			current = R;
 8001844:	4b17      	ldr	r3, [pc, #92]	; (80018a4 <HAL_UART_RxCpltCallback+0x7c>)
 8001846:	2202      	movs	r2, #2
 8001848:	701a      	strb	r2, [r3, #0]
 800184a:	e01e      	b.n	800188a <HAL_UART_RxCpltCallback+0x62>
	    		}
	    	else if(buff[0] == 'L')
 800184c:	4b14      	ldr	r3, [pc, #80]	; (80018a0 <HAL_UART_RxCpltCallback+0x78>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b4c      	cmp	r3, #76	; 0x4c
 8001852:	d103      	bne.n	800185c <HAL_UART_RxCpltCallback+0x34>
	    		{
	    			current = L;
 8001854:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <HAL_UART_RxCpltCallback+0x7c>)
 8001856:	2203      	movs	r2, #3
 8001858:	701a      	strb	r2, [r3, #0]
 800185a:	e016      	b.n	800188a <HAL_UART_RxCpltCallback+0x62>
	    		}
	    	else if(buff[0] == 'F')
 800185c:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <HAL_UART_RxCpltCallback+0x78>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b46      	cmp	r3, #70	; 0x46
 8001862:	d103      	bne.n	800186c <HAL_UART_RxCpltCallback+0x44>
	    		{
	    			current = F;
 8001864:	4b0f      	ldr	r3, [pc, #60]	; (80018a4 <HAL_UART_RxCpltCallback+0x7c>)
 8001866:	2204      	movs	r2, #4
 8001868:	701a      	strb	r2, [r3, #0]
 800186a:	e00e      	b.n	800188a <HAL_UART_RxCpltCallback+0x62>
	    		}
	    	else if(buff[0] == 'D')
 800186c:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <HAL_UART_RxCpltCallback+0x78>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b44      	cmp	r3, #68	; 0x44
 8001872:	d103      	bne.n	800187c <HAL_UART_RxCpltCallback+0x54>
	    		{
	    		    current = D;
 8001874:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <HAL_UART_RxCpltCallback+0x7c>)
 8001876:	2205      	movs	r2, #5
 8001878:	701a      	strb	r2, [r3, #0]
 800187a:	e006      	b.n	800188a <HAL_UART_RxCpltCallback+0x62>
	    		}
	    	else if (buff[0] == 'C')
 800187c:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <HAL_UART_RxCpltCallback+0x78>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b43      	cmp	r3, #67	; 0x43
 8001882:	d102      	bne.n	800188a <HAL_UART_RxCpltCallback+0x62>
	    	{
	    		current = CF;
 8001884:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <HAL_UART_RxCpltCallback+0x7c>)
 8001886:	2201      	movs	r2, #1
 8001888:	701a      	strb	r2, [r3, #0]
	    	}
	    	}
	    HAL_UART_Receive_IT(&huart2,(uint8_t*)buff, 1);
 800188a:	2201      	movs	r2, #1
 800188c:	4904      	ldr	r1, [pc, #16]	; (80018a0 <HAL_UART_RxCpltCallback+0x78>)
 800188e:	4803      	ldr	r0, [pc, #12]	; (800189c <HAL_UART_RxCpltCallback+0x74>)
 8001890:	f007 fbf3 	bl	800907a <HAL_UART_Receive_IT>

}
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	2000071c 	.word	0x2000071c
 80018a0:	200005d4 	.word	0x200005d4
 80018a4:	2000054c 	.word	0x2000054c

080018a8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018a8:	b5b0      	push	{r4, r5, r7, lr}
 80018aa:	b094      	sub	sp, #80	; 0x50
 80018ac:	af02      	add	r7, sp, #8
 80018ae:	6078      	str	r0, [r7, #4]

	  if(htim->Instance == htim2.Instance)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	4ba2      	ldr	r3, [pc, #648]	; (8001b40 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	f040 83e0 	bne.w	800207e <HAL_TIM_PeriodElapsedCallback+0x7d6>
	  {

		  double dt = (double)(HAL_GetTick() - tim) / 1000;
 80018be:	f004 f97d 	bl	8005bbc <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	4b9f      	ldr	r3, [pc, #636]	; (8001b44 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7fe fd8a 	bl	80003e4 <__aeabi_ui2d>
 80018d0:	f04f 0200 	mov.w	r2, #0
 80018d4:	4b9c      	ldr	r3, [pc, #624]	; (8001b48 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80018d6:	f7fe ff29 	bl	800072c <__aeabi_ddiv>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
		  tim = HAL_GetTick();
 80018e2:	f004 f96b 	bl	8005bbc <HAL_GetTick>
 80018e6:	4603      	mov	r3, r0
 80018e8:	4a96      	ldr	r2, [pc, #600]	; (8001b44 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80018ea:	6013      	str	r3, [r2, #0]

		  MPU6050_Read_All(&hi2c1, &MPU);
 80018ec:	4997      	ldr	r1, [pc, #604]	; (8001b4c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80018ee:	4898      	ldr	r0, [pc, #608]	; (8001b50 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80018f0:	f000 fcaa 	bl	8002248 <MPU6050_Read_All>

		  switch(current){
 80018f4:	4b97      	ldr	r3, [pc, #604]	; (8001b54 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b05      	cmp	r3, #5
 80018fa:	f200 83bd 	bhi.w	8002078 <HAL_TIM_PeriodElapsedCallback+0x7d0>
 80018fe:	a201      	add	r2, pc, #4	; (adr r2, 8001904 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001904:	0800191d 	.word	0x0800191d
 8001908:	08001a2d 	.word	0x08001a2d
 800190c:	08001bf7 	.word	0x08001bf7
 8001910:	08001d0b 	.word	0x08001d0b
 8001914:	08001e65 	.word	0x08001e65
 8001918:	08001f6f 	.word	0x08001f6f

		  case Kalman:
			  MPU.KalmanAngleY += 1.12;
 800191c:	4b8b      	ldr	r3, [pc, #556]	; (8001b4c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800191e:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8001922:	a385      	add	r3, pc, #532	; (adr r3, 8001b38 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001928:	f7fe fc20 	bl	800016c <__adddf3>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	4986      	ldr	r1, [pc, #536]	; (8001b4c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001932:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

			  Balance.pitch_dot = (MPU.KalmanAngleY - Balance.pitch) / dt ;
 8001936:	4b85      	ldr	r3, [pc, #532]	; (8001b4c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001938:	e9d3 4518 	ldrd	r4, r5, [r3, #96]	; 0x60
 800193c:	4b86      	ldr	r3, [pc, #536]	; (8001b58 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	4618      	mov	r0, r3
 8001942:	f7fe fd71 	bl	8000428 <__aeabi_f2d>
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	4620      	mov	r0, r4
 800194c:	4629      	mov	r1, r5
 800194e:	f7fe fc0b 	bl	8000168 <__aeabi_dsub>
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	4610      	mov	r0, r2
 8001958:	4619      	mov	r1, r3
 800195a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800195e:	f7fe fee5 	bl	800072c <__aeabi_ddiv>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4610      	mov	r0, r2
 8001968:	4619      	mov	r1, r3
 800196a:	f7ff f8ad 	bl	8000ac8 <__aeabi_d2f>
 800196e:	4603      	mov	r3, r0
 8001970:	4a79      	ldr	r2, [pc, #484]	; (8001b58 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001972:	6013      	str	r3, [r2, #0]


			  Balance.input[0] = MPU.KalmanAngleY *  K_pitch;
 8001974:	4b75      	ldr	r3, [pc, #468]	; (8001b4c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001976:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 800197a:	f04f 0200 	mov.w	r2, #0
 800197e:	4b77      	ldr	r3, [pc, #476]	; (8001b5c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001980:	f7fe fed4 	bl	800072c <__aeabi_ddiv>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4610      	mov	r0, r2
 800198a:	4619      	mov	r1, r3
 800198c:	f7ff f89c 	bl	8000ac8 <__aeabi_d2f>
 8001990:	4603      	mov	r3, r0
 8001992:	4a71      	ldr	r2, [pc, #452]	; (8001b58 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001994:	6093      	str	r3, [r2, #8]
			  Balance.input[1] = Balance.pitch_dot * K_pitch_dot;
 8001996:	4b70      	ldr	r3, [pc, #448]	; (8001b58 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4971      	ldr	r1, [pc, #452]	; (8001b60 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff faa5 	bl	8000eec <__aeabi_fdiv>
 80019a2:	4603      	mov	r3, r0
 80019a4:	461a      	mov	r2, r3
 80019a6:	4b6c      	ldr	r3, [pc, #432]	; (8001b58 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80019a8:	60da      	str	r2, [r3, #12]

			  Balance.pitch = MPU.KalmanAngleY;
 80019aa:	4b68      	ldr	r3, [pc, #416]	; (8001b4c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80019ac:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80019b0:	4610      	mov	r0, r2
 80019b2:	4619      	mov	r1, r3
 80019b4:	f7ff f888 	bl	8000ac8 <__aeabi_d2f>
 80019b8:	4603      	mov	r3, r0
 80019ba:	4a67      	ldr	r2, [pc, #412]	; (8001b58 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80019bc:	6053      	str	r3, [r2, #4]

			  Balance_run(Balance.input, &Balance.output);
 80019be:	4969      	ldr	r1, [pc, #420]	; (8001b64 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80019c0:	4869      	ldr	r0, [pc, #420]	; (8001b68 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80019c2:	f7ff fd7d 	bl	80014c0 <Balance_run>

			  if(Balance.input[0] < -10 || Balance.input[0] > 10)
 80019c6:	4b64      	ldr	r3, [pc, #400]	; (8001b58 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	4968      	ldr	r1, [pc, #416]	; (8001b6c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff fb77 	bl	80010c0 <__aeabi_fcmplt>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d108      	bne.n	80019ea <HAL_TIM_PeriodElapsedCallback+0x142>
 80019d8:	4b5f      	ldr	r3, [pc, #380]	; (8001b58 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	4964      	ldr	r1, [pc, #400]	; (8001b70 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff fb8c 	bl	80010fc <__aeabi_fcmpgt>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <HAL_TIM_PeriodElapsedCallback+0x14a>
				  	  {
					  	  Balance.output = 0;
 80019ea:	4b5b      	ldr	r3, [pc, #364]	; (8001b58 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80019ec:	f04f 0200 	mov.w	r2, #0
 80019f0:	611a      	str	r2, [r3, #16]
				  	  }


			  MotorSetDuty1(Balance.output * K_u);
 80019f2:	4b59      	ldr	r3, [pc, #356]	; (8001b58 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80019f4:	691b      	ldr	r3, [r3, #16]
 80019f6:	495f      	ldr	r1, [pc, #380]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff f9c3 	bl	8000d84 <__aeabi_fmul>
 80019fe:	4603      	mov	r3, r0
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff fb85 	bl	8001110 <__aeabi_f2iz>
 8001a06:	4603      	mov	r3, r0
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f000 fb59 	bl	80020c0 <MotorSetDuty1>
			  MotorSetDuty2(Balance.output * K_u);
 8001a0e:	4b52      	ldr	r3, [pc, #328]	; (8001b58 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	4958      	ldr	r1, [pc, #352]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff f9b5 	bl	8000d84 <__aeabi_fmul>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff fb77 	bl	8001110 <__aeabi_f2iz>
 8001a22:	4603      	mov	r3, r0
 8001a24:	4618      	mov	r0, r3
 8001a26:	f000 fb83 	bl	8002130 <MotorSetDuty2>
			  break;
 8001a2a:	e325      	b.n	8002078 <HAL_TIM_PeriodElapsedCallback+0x7d0>

		  case CF:

			  Balance.pitch_dot = MPU.Gy;
 8001a2c:	4b47      	ldr	r3, [pc, #284]	; (8001b4c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001a2e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001a32:	4610      	mov	r0, r2
 8001a34:	4619      	mov	r1, r3
 8001a36:	f7ff f847 	bl	8000ac8 <__aeabi_d2f>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	4a46      	ldr	r2, [pc, #280]	; (8001b58 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001a3e:	6013      	str	r3, [r2, #0]

			  Balance.input[0] = MPU.CFAngleY *  K_pitch;
 8001a40:	4b42      	ldr	r3, [pc, #264]	; (8001b4c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001a42:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	4b44      	ldr	r3, [pc, #272]	; (8001b5c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001a4c:	f7fe fe6e 	bl	800072c <__aeabi_ddiv>
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	4610      	mov	r0, r2
 8001a56:	4619      	mov	r1, r3
 8001a58:	f7ff f836 	bl	8000ac8 <__aeabi_d2f>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	4a3e      	ldr	r2, [pc, #248]	; (8001b58 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001a60:	6093      	str	r3, [r2, #8]
			  Balance.input[1] = Balance.pitch_dot * K_pitch_dot;
 8001a62:	4b3d      	ldr	r3, [pc, #244]	; (8001b58 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	493e      	ldr	r1, [pc, #248]	; (8001b60 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff fa3f 	bl	8000eec <__aeabi_fdiv>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	461a      	mov	r2, r3
 8001a72:	4b39      	ldr	r3, [pc, #228]	; (8001b58 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001a74:	60da      	str	r2, [r3, #12]

			  Balance.pitch = MPU.CFAngleY;
 8001a76:	4b35      	ldr	r3, [pc, #212]	; (8001b4c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001a78:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001a7c:	4610      	mov	r0, r2
 8001a7e:	4619      	mov	r1, r3
 8001a80:	f7ff f822 	bl	8000ac8 <__aeabi_d2f>
 8001a84:	4603      	mov	r3, r0
 8001a86:	4a34      	ldr	r2, [pc, #208]	; (8001b58 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001a88:	6053      	str	r3, [r2, #4]

			  Balance_run(Balance.input, &Balance.output);
 8001a8a:	4936      	ldr	r1, [pc, #216]	; (8001b64 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001a8c:	4836      	ldr	r0, [pc, #216]	; (8001b68 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001a8e:	f7ff fd17 	bl	80014c0 <Balance_run>

			  if(Balance.input[0] < -10 || Balance.input[0] > 10)
 8001a92:	4b31      	ldr	r3, [pc, #196]	; (8001b58 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	4935      	ldr	r1, [pc, #212]	; (8001b6c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff fb11 	bl	80010c0 <__aeabi_fcmplt>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d108      	bne.n	8001ab6 <HAL_TIM_PeriodElapsedCallback+0x20e>
 8001aa4:	4b2c      	ldr	r3, [pc, #176]	; (8001b58 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	4931      	ldr	r1, [pc, #196]	; (8001b70 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff fb26 	bl	80010fc <__aeabi_fcmpgt>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d003      	beq.n	8001abe <HAL_TIM_PeriodElapsedCallback+0x216>
				  	  {
					  	  Balance.output = 0;
 8001ab6:	4b28      	ldr	r3, [pc, #160]	; (8001b58 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001ab8:	f04f 0200 	mov.w	r2, #0
 8001abc:	611a      	str	r2, [r3, #16]
				  	  }


			  MotorSetDuty1(Balance.output * K_u);
 8001abe:	4b26      	ldr	r3, [pc, #152]	; (8001b58 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	492c      	ldr	r1, [pc, #176]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff f95d 	bl	8000d84 <__aeabi_fmul>
 8001aca:	4603      	mov	r3, r0
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff fb1f 	bl	8001110 <__aeabi_f2iz>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f000 faf3 	bl	80020c0 <MotorSetDuty1>
			  MotorSetDuty2(Balance.output * K_u);
 8001ada:	4b1f      	ldr	r3, [pc, #124]	; (8001b58 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	4925      	ldr	r1, [pc, #148]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff f94f 	bl	8000d84 <__aeabi_fmul>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff fb11 	bl	8001110 <__aeabi_f2iz>
 8001aee:	4603      	mov	r3, r0
 8001af0:	4618      	mov	r0, r3
 8001af2:	f000 fb1d 	bl	8002130 <MotorSetDuty2>


			    double real[3] = {Balance.input[0], Balance.input[1], Balance.output};
 8001af6:	4b18      	ldr	r3, [pc, #96]	; (8001b58 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7fe fc94 	bl	8000428 <__aeabi_f2d>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001b08:	4b13      	ldr	r3, [pc, #76]	; (8001b58 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7fe fc8b 	bl	8000428 <__aeabi_f2d>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001b1a:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7fe fc82 	bl	8000428 <__aeabi_f2d>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

			    strcpy(result, "=");
 8001b2c:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001b2e:	223d      	movs	r2, #61	; 0x3d
 8001b30:	801a      	strh	r2, [r3, #0]
			    for (int i = 0; i < 3; i++) {
 8001b32:	2300      	movs	r3, #0
 8001b34:	647b      	str	r3, [r7, #68]	; 0x44
 8001b36:	e048      	b.n	8001bca <HAL_TIM_PeriodElapsedCallback+0x322>
 8001b38:	1eb851ec 	.word	0x1eb851ec
 8001b3c:	3ff1eb85 	.word	0x3ff1eb85
 8001b40:	20000644 	.word	0x20000644
 8001b44:	20000550 	.word	0x20000550
 8001b48:	408f4000 	.word	0x408f4000
 8001b4c:	20000558 	.word	0x20000558
 8001b50:	200004f8 	.word	0x200004f8
 8001b54:	2000054c 	.word	0x2000054c
 8001b58:	200005c0 	.word	0x200005c0
 8001b5c:	40140000 	.word	0x40140000
 8001b60:	42c80000 	.word	0x42c80000
 8001b64:	200005d0 	.word	0x200005d0
 8001b68:	200005c8 	.word	0x200005c8
 8001b6c:	c1200000 	.word	0xc1200000
 8001b70:	41200000 	.word	0x41200000
 8001b74:	453b8000 	.word	0x453b8000
 8001b78:	200005d8 	.word	0x200005d8
			          char buffer[20];
			          snprintf(buffer, sizeof(buffer), "%.2f", creal(real[i]));
 8001b7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	3348      	adds	r3, #72	; 0x48
 8001b82:	443b      	add	r3, r7
 8001b84:	3b28      	subs	r3, #40	; 0x28
 8001b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b8a:	f107 000c 	add.w	r0, r7, #12
 8001b8e:	e9cd 2300 	strd	r2, r3, [sp]
 8001b92:	4aa3      	ldr	r2, [pc, #652]	; (8001e20 <HAL_TIM_PeriodElapsedCallback+0x578>)
 8001b94:	2114      	movs	r1, #20
 8001b96:	f008 ff19 	bl	800a9cc <sniprintf>
			          strcat(result, buffer);
 8001b9a:	f107 030c 	add.w	r3, r7, #12
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	48a0      	ldr	r0, [pc, #640]	; (8001e24 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8001ba2:	f008 ff67 	bl	800aa74 <strcat>

			          if (i < 2) {
 8001ba6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	dc0b      	bgt.n	8001bc4 <HAL_TIM_PeriodElapsedCallback+0x31c>
			              strcat(result, ",");
 8001bac:	489d      	ldr	r0, [pc, #628]	; (8001e24 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8001bae:	f7fe facf 	bl	8000150 <strlen>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	4b9b      	ldr	r3, [pc, #620]	; (8001e24 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8001bb8:	4413      	add	r3, r2
 8001bba:	499b      	ldr	r1, [pc, #620]	; (8001e28 <HAL_TIM_PeriodElapsedCallback+0x580>)
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	881b      	ldrh	r3, [r3, #0]
 8001bc2:	8013      	strh	r3, [r2, #0]
			    for (int i = 0; i < 3; i++) {
 8001bc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	647b      	str	r3, [r7, #68]	; 0x44
 8001bca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	ddd5      	ble.n	8001b7c <HAL_TIM_PeriodElapsedCallback+0x2d4>
			          }
			      }
			    strcat(result, "!");
 8001bd0:	4894      	ldr	r0, [pc, #592]	; (8001e24 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8001bd2:	f7fe fabd 	bl	8000150 <strlen>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	461a      	mov	r2, r3
 8001bda:	4b92      	ldr	r3, [pc, #584]	; (8001e24 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8001bdc:	4413      	add	r3, r2
 8001bde:	4993      	ldr	r1, [pc, #588]	; (8001e2c <HAL_TIM_PeriodElapsedCallback+0x584>)
 8001be0:	461a      	mov	r2, r3
 8001be2:	460b      	mov	r3, r1
 8001be4:	881b      	ldrh	r3, [r3, #0]
 8001be6:	8013      	strh	r3, [r2, #0]
			    HAL_UART_Transmit(&huart3, (uint8_t *)result, sizeof(result), 100);
 8001be8:	2364      	movs	r3, #100	; 0x64
 8001bea:	2214      	movs	r2, #20
 8001bec:	498d      	ldr	r1, [pc, #564]	; (8001e24 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8001bee:	4890      	ldr	r0, [pc, #576]	; (8001e30 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8001bf0:	f007 f9c0 	bl	8008f74 <HAL_UART_Transmit>

			   break;
 8001bf4:	e240      	b.n	8002078 <HAL_TIM_PeriodElapsedCallback+0x7d0>
		   case R:
			              Balance.pitch_dot = MPU.Gy + 2;
 8001bf6:	4b8f      	ldr	r3, [pc, #572]	; (8001e34 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8001bf8:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001bfc:	f04f 0200 	mov.w	r2, #0
 8001c00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c04:	f7fe fab2 	bl	800016c <__adddf3>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4610      	mov	r0, r2
 8001c0e:	4619      	mov	r1, r3
 8001c10:	f7fe ff5a 	bl	8000ac8 <__aeabi_d2f>
 8001c14:	4603      	mov	r3, r0
 8001c16:	4a88      	ldr	r2, [pc, #544]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8001c18:	6013      	str	r3, [r2, #0]

			 			  Balance.input[0] = MPU.CFAngleY *  K_pitch;
 8001c1a:	4b86      	ldr	r3, [pc, #536]	; (8001e34 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8001c1c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001c20:	f04f 0200 	mov.w	r2, #0
 8001c24:	4b85      	ldr	r3, [pc, #532]	; (8001e3c <HAL_TIM_PeriodElapsedCallback+0x594>)
 8001c26:	f7fe fd81 	bl	800072c <__aeabi_ddiv>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	4610      	mov	r0, r2
 8001c30:	4619      	mov	r1, r3
 8001c32:	f7fe ff49 	bl	8000ac8 <__aeabi_d2f>
 8001c36:	4603      	mov	r3, r0
 8001c38:	4a7f      	ldr	r2, [pc, #508]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8001c3a:	6093      	str	r3, [r2, #8]
			 			  Balance.input[1] = Balance.pitch_dot * K_pitch_dot;
 8001c3c:	4b7e      	ldr	r3, [pc, #504]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	497f      	ldr	r1, [pc, #508]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff f952 	bl	8000eec <__aeabi_fdiv>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	4b7a      	ldr	r3, [pc, #488]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8001c4e:	60da      	str	r2, [r3, #12]

			 			  Balance.pitch = MPU.CFAngleY;
 8001c50:	4b78      	ldr	r3, [pc, #480]	; (8001e34 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8001c52:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001c56:	4610      	mov	r0, r2
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f7fe ff35 	bl	8000ac8 <__aeabi_d2f>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	4a75      	ldr	r2, [pc, #468]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8001c62:	6053      	str	r3, [r2, #4]

			 			  Balance_run(Balance.input, &Balance.output);
 8001c64:	4977      	ldr	r1, [pc, #476]	; (8001e44 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8001c66:	4878      	ldr	r0, [pc, #480]	; (8001e48 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8001c68:	f7ff fc2a 	bl	80014c0 <Balance_run>

			 			  if(Balance.input[0] < -10 || Balance.input[0] > 10)
 8001c6c:	4b72      	ldr	r3, [pc, #456]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	4976      	ldr	r1, [pc, #472]	; (8001e4c <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff fa24 	bl	80010c0 <__aeabi_fcmplt>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d108      	bne.n	8001c90 <HAL_TIM_PeriodElapsedCallback+0x3e8>
 8001c7e:	4b6e      	ldr	r3, [pc, #440]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	4973      	ldr	r1, [pc, #460]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff fa39 	bl	80010fc <__aeabi_fcmpgt>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <HAL_TIM_PeriodElapsedCallback+0x3f0>
			 				  	  {
			 					  	  Balance.output = 0;
 8001c90:	4b69      	ldr	r3, [pc, #420]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8001c92:	f04f 0200 	mov.w	r2, #0
 8001c96:	611a      	str	r2, [r3, #16]
			 				  	  }


			 			  MotorSetDuty1(Balance.output * K_u - 1000);
 8001c98:	4b67      	ldr	r3, [pc, #412]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8001c9a:	691b      	ldr	r3, [r3, #16]
 8001c9c:	496d      	ldr	r1, [pc, #436]	; (8001e54 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff f870 	bl	8000d84 <__aeabi_fmul>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	496c      	ldr	r1, [pc, #432]	; (8001e58 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7fe ff61 	bl	8000b70 <__aeabi_fsub>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff fa2d 	bl	8001110 <__aeabi_f2iz>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f000 fa01 	bl	80020c0 <MotorSetDuty1>
			 			  MotorSetDuty2(Balance.output * K_u);
 8001cbe:	4b5e      	ldr	r3, [pc, #376]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	4964      	ldr	r1, [pc, #400]	; (8001e54 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff f85d 	bl	8000d84 <__aeabi_fmul>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff fa1f 	bl	8001110 <__aeabi_f2iz>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f000 fa2b 	bl	8002130 <MotorSetDuty2>

				  if(Balance.input[0] < -0.75 || Balance.input[0] > 0.75)
 8001cda:	4b57      	ldr	r3, [pc, #348]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	495f      	ldr	r1, [pc, #380]	; (8001e5c <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff f9ed 	bl	80010c0 <__aeabi_fcmplt>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d10a      	bne.n	8001d02 <HAL_TIM_PeriodElapsedCallback+0x45a>
 8001cec:	4b52      	ldr	r3, [pc, #328]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f04f 517d 	mov.w	r1, #1061158912	; 0x3f400000
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff fa01 	bl	80010fc <__aeabi_fcmpgt>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d100      	bne.n	8001d02 <HAL_TIM_PeriodElapsedCallback+0x45a>
					  	  {
						  	  current = CF;
					  	  }


			   break;
 8001d00:	e1ba      	b.n	8002078 <HAL_TIM_PeriodElapsedCallback+0x7d0>
						  	  current = CF;
 8001d02:	4b57      	ldr	r3, [pc, #348]	; (8001e60 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001d04:	2201      	movs	r2, #1
 8001d06:	701a      	strb	r2, [r3, #0]
			   break;
 8001d08:	e1b6      	b.n	8002078 <HAL_TIM_PeriodElapsedCallback+0x7d0>
		   case L:
			                          Balance.pitch_dot = MPU.Gy + 2;
 8001d0a:	4b4a      	ldr	r3, [pc, #296]	; (8001e34 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8001d0c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001d10:	f04f 0200 	mov.w	r2, #0
 8001d14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d18:	f7fe fa28 	bl	800016c <__adddf3>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	4610      	mov	r0, r2
 8001d22:	4619      	mov	r1, r3
 8001d24:	f7fe fed0 	bl	8000ac8 <__aeabi_d2f>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	4a43      	ldr	r2, [pc, #268]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8001d2c:	6013      	str	r3, [r2, #0]

			  			 			  Balance.input[0] = MPU.CFAngleY *  K_pitch;
 8001d2e:	4b41      	ldr	r3, [pc, #260]	; (8001e34 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8001d30:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001d34:	f04f 0200 	mov.w	r2, #0
 8001d38:	4b40      	ldr	r3, [pc, #256]	; (8001e3c <HAL_TIM_PeriodElapsedCallback+0x594>)
 8001d3a:	f7fe fcf7 	bl	800072c <__aeabi_ddiv>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	460b      	mov	r3, r1
 8001d42:	4610      	mov	r0, r2
 8001d44:	4619      	mov	r1, r3
 8001d46:	f7fe febf 	bl	8000ac8 <__aeabi_d2f>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	4a3a      	ldr	r2, [pc, #232]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8001d4e:	6093      	str	r3, [r2, #8]
			  			 			  Balance.input[1] = Balance.pitch_dot * K_pitch_dot;
 8001d50:	4b39      	ldr	r3, [pc, #228]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	493a      	ldr	r1, [pc, #232]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff f8c8 	bl	8000eec <__aeabi_fdiv>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	461a      	mov	r2, r3
 8001d60:	4b35      	ldr	r3, [pc, #212]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8001d62:	60da      	str	r2, [r3, #12]

			  			 			  Balance.pitch = MPU.CFAngleY;
 8001d64:	4b33      	ldr	r3, [pc, #204]	; (8001e34 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8001d66:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001d6a:	4610      	mov	r0, r2
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	f7fe feab 	bl	8000ac8 <__aeabi_d2f>
 8001d72:	4603      	mov	r3, r0
 8001d74:	4a30      	ldr	r2, [pc, #192]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8001d76:	6053      	str	r3, [r2, #4]

			  			 			  Balance_run(Balance.input, &Balance.output);
 8001d78:	4932      	ldr	r1, [pc, #200]	; (8001e44 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8001d7a:	4833      	ldr	r0, [pc, #204]	; (8001e48 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8001d7c:	f7ff fba0 	bl	80014c0 <Balance_run>

			  			 			  if(Balance.input[0] < -10 || Balance.input[0] > 10)
 8001d80:	4b2d      	ldr	r3, [pc, #180]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	4931      	ldr	r1, [pc, #196]	; (8001e4c <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff f99a 	bl	80010c0 <__aeabi_fcmplt>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d108      	bne.n	8001da4 <HAL_TIM_PeriodElapsedCallback+0x4fc>
 8001d92:	4b29      	ldr	r3, [pc, #164]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	492e      	ldr	r1, [pc, #184]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff f9af 	bl	80010fc <__aeabi_fcmpgt>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d003      	beq.n	8001dac <HAL_TIM_PeriodElapsedCallback+0x504>
			  			 				  	  {
			  			 					  	  Balance.output = 0;
 8001da4:	4b24      	ldr	r3, [pc, #144]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8001da6:	f04f 0200 	mov.w	r2, #0
 8001daa:	611a      	str	r2, [r3, #16]
			  			 				  	  }


			  			 			  MotorSetDuty1(Balance.output * K_u );
 8001dac:	4b22      	ldr	r3, [pc, #136]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	4928      	ldr	r1, [pc, #160]	; (8001e54 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7fe ffe6 	bl	8000d84 <__aeabi_fmul>
 8001db8:	4603      	mov	r3, r0
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff f9a8 	bl	8001110 <__aeabi_f2iz>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f000 f97c 	bl	80020c0 <MotorSetDuty1>
			  			 			  MotorSetDuty2(Balance.output * K_u - 1000);
 8001dc8:	4b1b      	ldr	r3, [pc, #108]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	4921      	ldr	r1, [pc, #132]	; (8001e54 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7fe ffd8 	bl	8000d84 <__aeabi_fmul>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	4920      	ldr	r1, [pc, #128]	; (8001e58 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7fe fec9 	bl	8000b70 <__aeabi_fsub>
 8001dde:	4603      	mov	r3, r0
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff f995 	bl	8001110 <__aeabi_f2iz>
 8001de6:	4603      	mov	r3, r0
 8001de8:	4618      	mov	r0, r3
 8001dea:	f000 f9a1 	bl	8002130 <MotorSetDuty2>
				  if(Balance.input[0] < -0.75 || Balance.input[0] > 0.75)
 8001dee:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	491a      	ldr	r1, [pc, #104]	; (8001e5c <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff f963 	bl	80010c0 <__aeabi_fcmplt>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d10a      	bne.n	8001e16 <HAL_TIM_PeriodElapsedCallback+0x56e>
 8001e00:	4b0d      	ldr	r3, [pc, #52]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f04f 517d 	mov.w	r1, #1061158912	; 0x3f400000
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff f977 	bl	80010fc <__aeabi_fcmpgt>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d100      	bne.n	8001e16 <HAL_TIM_PeriodElapsedCallback+0x56e>
					  	  {
						  	  current = CF;
					  	  }


			   break;
 8001e14:	e130      	b.n	8002078 <HAL_TIM_PeriodElapsedCallback+0x7d0>
						  	  current = CF;
 8001e16:	4b12      	ldr	r3, [pc, #72]	; (8001e60 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001e18:	2201      	movs	r2, #1
 8001e1a:	701a      	strb	r2, [r3, #0]
			   break;
 8001e1c:	e12c      	b.n	8002078 <HAL_TIM_PeriodElapsedCallback+0x7d0>
 8001e1e:	bf00      	nop
 8001e20:	0800ec58 	.word	0x0800ec58
 8001e24:	200005d8 	.word	0x200005d8
 8001e28:	0800ec60 	.word	0x0800ec60
 8001e2c:	0800ec64 	.word	0x0800ec64
 8001e30:	20000764 	.word	0x20000764
 8001e34:	20000558 	.word	0x20000558
 8001e38:	200005c0 	.word	0x200005c0
 8001e3c:	40140000 	.word	0x40140000
 8001e40:	42c80000 	.word	0x42c80000
 8001e44:	200005d0 	.word	0x200005d0
 8001e48:	200005c8 	.word	0x200005c8
 8001e4c:	c1200000 	.word	0xc1200000
 8001e50:	41200000 	.word	0x41200000
 8001e54:	453b8000 	.word	0x453b8000
 8001e58:	447a0000 	.word	0x447a0000
 8001e5c:	bf400000 	.word	0xbf400000
 8001e60:	2000054c 	.word	0x2000054c
		   case F:
			                                      Balance.pitch_dot = MPU.Gy + 2;
 8001e64:	4b88      	ldr	r3, [pc, #544]	; (8002088 <HAL_TIM_PeriodElapsedCallback+0x7e0>)
 8001e66:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001e6a:	f04f 0200 	mov.w	r2, #0
 8001e6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e72:	f7fe f97b 	bl	800016c <__adddf3>
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	4610      	mov	r0, r2
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f7fe fe23 	bl	8000ac8 <__aeabi_d2f>
 8001e82:	4603      	mov	r3, r0
 8001e84:	4a81      	ldr	r2, [pc, #516]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x7e4>)
 8001e86:	6013      	str	r3, [r2, #0]

			   			  			 			  Balance.input[0] = MPU.CFAngleY *  K_pitch;
 8001e88:	4b7f      	ldr	r3, [pc, #508]	; (8002088 <HAL_TIM_PeriodElapsedCallback+0x7e0>)
 8001e8a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001e8e:	f04f 0200 	mov.w	r2, #0
 8001e92:	4b7f      	ldr	r3, [pc, #508]	; (8002090 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 8001e94:	f7fe fc4a 	bl	800072c <__aeabi_ddiv>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	4610      	mov	r0, r2
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	f7fe fe12 	bl	8000ac8 <__aeabi_d2f>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	4a79      	ldr	r2, [pc, #484]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x7e4>)
 8001ea8:	6093      	str	r3, [r2, #8]
			   			  			 			  Balance.input[1] = Balance.pitch_dot * K_pitch_dot;
 8001eaa:	4b78      	ldr	r3, [pc, #480]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x7e4>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4979      	ldr	r1, [pc, #484]	; (8002094 <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff f81b 	bl	8000eec <__aeabi_fdiv>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	461a      	mov	r2, r3
 8001eba:	4b74      	ldr	r3, [pc, #464]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x7e4>)
 8001ebc:	60da      	str	r2, [r3, #12]

			   			  			 			  Balance.pitch = MPU.CFAngleY;
 8001ebe:	4b72      	ldr	r3, [pc, #456]	; (8002088 <HAL_TIM_PeriodElapsedCallback+0x7e0>)
 8001ec0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001ec4:	4610      	mov	r0, r2
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	f7fe fdfe 	bl	8000ac8 <__aeabi_d2f>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	4a6f      	ldr	r2, [pc, #444]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x7e4>)
 8001ed0:	6053      	str	r3, [r2, #4]

			   			  			 			  Balance_run(Balance.input, &Balance.output);
 8001ed2:	4971      	ldr	r1, [pc, #452]	; (8002098 <HAL_TIM_PeriodElapsedCallback+0x7f0>)
 8001ed4:	4871      	ldr	r0, [pc, #452]	; (800209c <HAL_TIM_PeriodElapsedCallback+0x7f4>)
 8001ed6:	f7ff faf3 	bl	80014c0 <Balance_run>

			   			  			 			  if(Balance.input[0] < -10 || Balance.input[0] > 10)
 8001eda:	4b6c      	ldr	r3, [pc, #432]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x7e4>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	4970      	ldr	r1, [pc, #448]	; (80020a0 <HAL_TIM_PeriodElapsedCallback+0x7f8>)
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff f8ed 	bl	80010c0 <__aeabi_fcmplt>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d108      	bne.n	8001efe <HAL_TIM_PeriodElapsedCallback+0x656>
 8001eec:	4b67      	ldr	r3, [pc, #412]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x7e4>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	496c      	ldr	r1, [pc, #432]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0x7fc>)
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff f902 	bl	80010fc <__aeabi_fcmpgt>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <HAL_TIM_PeriodElapsedCallback+0x65e>
			   			  			 				  	  {
			   			  			 					  	  Balance.output = 0;
 8001efe:	4b63      	ldr	r3, [pc, #396]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x7e4>)
 8001f00:	f04f 0200 	mov.w	r2, #0
 8001f04:	611a      	str	r2, [r3, #16]
			   			  			 				  	  }


			   			  			 			  MotorSetDuty1(Balance.output * K_u );
 8001f06:	4b61      	ldr	r3, [pc, #388]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x7e4>)
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	4967      	ldr	r1, [pc, #412]	; (80020a8 <HAL_TIM_PeriodElapsedCallback+0x800>)
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7fe ff39 	bl	8000d84 <__aeabi_fmul>
 8001f12:	4603      	mov	r3, r0
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff f8fb 	bl	8001110 <__aeabi_f2iz>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f000 f8cf 	bl	80020c0 <MotorSetDuty1>
			   			  			 			  MotorSetDuty2(Balance.output * K_u);
 8001f22:	4b5a      	ldr	r3, [pc, #360]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x7e4>)
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	4960      	ldr	r1, [pc, #384]	; (80020a8 <HAL_TIM_PeriodElapsedCallback+0x800>)
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7fe ff2b 	bl	8000d84 <__aeabi_fmul>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff f8ed 	bl	8001110 <__aeabi_f2iz>
 8001f36:	4603      	mov	r3, r0
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f000 f8f9 	bl	8002130 <MotorSetDuty2>
				  if(Balance.input[0] < -0.75 || Balance.input[0] > 0.75)
 8001f3e:	4b53      	ldr	r3, [pc, #332]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x7e4>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	495a      	ldr	r1, [pc, #360]	; (80020ac <HAL_TIM_PeriodElapsedCallback+0x804>)
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff f8bb 	bl	80010c0 <__aeabi_fcmplt>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d10a      	bne.n	8001f66 <HAL_TIM_PeriodElapsedCallback+0x6be>
 8001f50:	4b4e      	ldr	r3, [pc, #312]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x7e4>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f04f 517d 	mov.w	r1, #1061158912	; 0x3f400000
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff f8cf 	bl	80010fc <__aeabi_fcmpgt>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d100      	bne.n	8001f66 <HAL_TIM_PeriodElapsedCallback+0x6be>
					  	  {
						  	  current = CF;
					  	  }


			   break;
 8001f64:	e088      	b.n	8002078 <HAL_TIM_PeriodElapsedCallback+0x7d0>
						  	  current = CF;
 8001f66:	4b52      	ldr	r3, [pc, #328]	; (80020b0 <HAL_TIM_PeriodElapsedCallback+0x808>)
 8001f68:	2201      	movs	r2, #1
 8001f6a:	701a      	strb	r2, [r3, #0]
			   break;
 8001f6c:	e084      	b.n	8002078 <HAL_TIM_PeriodElapsedCallback+0x7d0>
		   case D:
			   Balance.pitch_dot = MPU.Gy - 2;
 8001f6e:	4b46      	ldr	r3, [pc, #280]	; (8002088 <HAL_TIM_PeriodElapsedCallback+0x7e0>)
 8001f70:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001f74:	f04f 0200 	mov.w	r2, #0
 8001f78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f7c:	f7fe f8f4 	bl	8000168 <__aeabi_dsub>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	4610      	mov	r0, r2
 8001f86:	4619      	mov	r1, r3
 8001f88:	f7fe fd9e 	bl	8000ac8 <__aeabi_d2f>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	4a3f      	ldr	r2, [pc, #252]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x7e4>)
 8001f90:	6013      	str	r3, [r2, #0]

			 			   			  			 			  Balance.input[0] = MPU.CFAngleY *  K_pitch;
 8001f92:	4b3d      	ldr	r3, [pc, #244]	; (8002088 <HAL_TIM_PeriodElapsedCallback+0x7e0>)
 8001f94:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001f98:	f04f 0200 	mov.w	r2, #0
 8001f9c:	4b3c      	ldr	r3, [pc, #240]	; (8002090 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 8001f9e:	f7fe fbc5 	bl	800072c <__aeabi_ddiv>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	4610      	mov	r0, r2
 8001fa8:	4619      	mov	r1, r3
 8001faa:	f7fe fd8d 	bl	8000ac8 <__aeabi_d2f>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	4a36      	ldr	r2, [pc, #216]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x7e4>)
 8001fb2:	6093      	str	r3, [r2, #8]
			 			   			  			 			  Balance.input[1] = Balance.pitch_dot * K_pitch_dot;
 8001fb4:	4b35      	ldr	r3, [pc, #212]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x7e4>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4936      	ldr	r1, [pc, #216]	; (8002094 <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7fe ff96 	bl	8000eec <__aeabi_fdiv>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	4b31      	ldr	r3, [pc, #196]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x7e4>)
 8001fc6:	60da      	str	r2, [r3, #12]

			 			   			  			 			  Balance.pitch = MPU.CFAngleY;
 8001fc8:	4b2f      	ldr	r3, [pc, #188]	; (8002088 <HAL_TIM_PeriodElapsedCallback+0x7e0>)
 8001fca:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001fce:	4610      	mov	r0, r2
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	f7fe fd79 	bl	8000ac8 <__aeabi_d2f>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	4a2c      	ldr	r2, [pc, #176]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x7e4>)
 8001fda:	6053      	str	r3, [r2, #4]

			 			   			  			 			  Balance_run(Balance.input, &Balance.output);
 8001fdc:	492e      	ldr	r1, [pc, #184]	; (8002098 <HAL_TIM_PeriodElapsedCallback+0x7f0>)
 8001fde:	482f      	ldr	r0, [pc, #188]	; (800209c <HAL_TIM_PeriodElapsedCallback+0x7f4>)
 8001fe0:	f7ff fa6e 	bl	80014c0 <Balance_run>

			 			   			  			 			  if(Balance.input[0] < -10 || Balance.input[0] > 10)
 8001fe4:	4b29      	ldr	r3, [pc, #164]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x7e4>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	492d      	ldr	r1, [pc, #180]	; (80020a0 <HAL_TIM_PeriodElapsedCallback+0x7f8>)
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff f868 	bl	80010c0 <__aeabi_fcmplt>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d108      	bne.n	8002008 <HAL_TIM_PeriodElapsedCallback+0x760>
 8001ff6:	4b25      	ldr	r3, [pc, #148]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x7e4>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	492a      	ldr	r1, [pc, #168]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0x7fc>)
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff f87d 	bl	80010fc <__aeabi_fcmpgt>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d003      	beq.n	8002010 <HAL_TIM_PeriodElapsedCallback+0x768>
			 			   			  			 				  	  {
			 			   			  			 					  	  Balance.output = 0;
 8002008:	4b20      	ldr	r3, [pc, #128]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x7e4>)
 800200a:	f04f 0200 	mov.w	r2, #0
 800200e:	611a      	str	r2, [r3, #16]
			 			   			  			 				  	  }


			 			   			  			 			  MotorSetDuty1(Balance.output * K_u );
 8002010:	4b1e      	ldr	r3, [pc, #120]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x7e4>)
 8002012:	691b      	ldr	r3, [r3, #16]
 8002014:	4924      	ldr	r1, [pc, #144]	; (80020a8 <HAL_TIM_PeriodElapsedCallback+0x800>)
 8002016:	4618      	mov	r0, r3
 8002018:	f7fe feb4 	bl	8000d84 <__aeabi_fmul>
 800201c:	4603      	mov	r3, r0
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff f876 	bl	8001110 <__aeabi_f2iz>
 8002024:	4603      	mov	r3, r0
 8002026:	4618      	mov	r0, r3
 8002028:	f000 f84a 	bl	80020c0 <MotorSetDuty1>
			 			   			  			 			  MotorSetDuty2(Balance.output * K_u);
 800202c:	4b17      	ldr	r3, [pc, #92]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x7e4>)
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	491d      	ldr	r1, [pc, #116]	; (80020a8 <HAL_TIM_PeriodElapsedCallback+0x800>)
 8002032:	4618      	mov	r0, r3
 8002034:	f7fe fea6 	bl	8000d84 <__aeabi_fmul>
 8002038:	4603      	mov	r3, r0
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff f868 	bl	8001110 <__aeabi_f2iz>
 8002040:	4603      	mov	r3, r0
 8002042:	4618      	mov	r0, r3
 8002044:	f000 f874 	bl	8002130 <MotorSetDuty2>
				  if(Balance.input[0] < -0.75 || Balance.input[0] > 0.75)
 8002048:	4b10      	ldr	r3, [pc, #64]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x7e4>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	4917      	ldr	r1, [pc, #92]	; (80020ac <HAL_TIM_PeriodElapsedCallback+0x804>)
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff f836 	bl	80010c0 <__aeabi_fcmplt>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10a      	bne.n	8002070 <HAL_TIM_PeriodElapsedCallback+0x7c8>
 800205a:	4b0c      	ldr	r3, [pc, #48]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x7e4>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f04f 517d 	mov.w	r1, #1061158912	; 0x3f400000
 8002062:	4618      	mov	r0, r3
 8002064:	f7ff f84a 	bl	80010fc <__aeabi_fcmpgt>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d100      	bne.n	8002070 <HAL_TIM_PeriodElapsedCallback+0x7c8>
					  	  {
						  	  current = CF;
					  	  }


			   break;
 800206e:	e002      	b.n	8002076 <HAL_TIM_PeriodElapsedCallback+0x7ce>
						  	  current = CF;
 8002070:	4b0f      	ldr	r3, [pc, #60]	; (80020b0 <HAL_TIM_PeriodElapsedCallback+0x808>)
 8002072:	2201      	movs	r2, #1
 8002074:	701a      	strb	r2, [r3, #0]
			   break;
 8002076:	bf00      	nop

		  }

		  		  current = CF;
 8002078:	4b0d      	ldr	r3, [pc, #52]	; (80020b0 <HAL_TIM_PeriodElapsedCallback+0x808>)
 800207a:	2201      	movs	r2, #1
 800207c:	701a      	strb	r2, [r3, #0]
	  }
}
 800207e:	bf00      	nop
 8002080:	3748      	adds	r7, #72	; 0x48
 8002082:	46bd      	mov	sp, r7
 8002084:	bdb0      	pop	{r4, r5, r7, pc}
 8002086:	bf00      	nop
 8002088:	20000558 	.word	0x20000558
 800208c:	200005c0 	.word	0x200005c0
 8002090:	40140000 	.word	0x40140000
 8002094:	42c80000 	.word	0x42c80000
 8002098:	200005d0 	.word	0x200005d0
 800209c:	200005c8 	.word	0x200005c8
 80020a0:	c1200000 	.word	0xc1200000
 80020a4:	41200000 	.word	0x41200000
 80020a8:	453b8000 	.word	0x453b8000
 80020ac:	bf400000 	.word	0xbf400000
 80020b0:	2000054c 	.word	0x2000054c

080020b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020b8:	b672      	cpsid	i
}
 80020ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020bc:	e7fe      	b.n	80020bc <Error_Handler+0x8>
	...

080020c0 <MotorSetDuty1>:
	tmotor->position = 0;
}

//duty cycle of motor
void MotorSetDuty1(int nDuty)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
	if(nDuty == 0){
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d108      	bne.n	80020e0 <MotorSetDuty1+0x20>
		htim3.Instance->CCR1 = 0;
 80020ce:	4b16      	ldr	r3, [pc, #88]	; (8002128 <MotorSetDuty1+0x68>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2200      	movs	r2, #0
 80020d4:	635a      	str	r2, [r3, #52]	; 0x34
		htim3.Instance->CCR2 = 0;
 80020d6:	4b14      	ldr	r3, [pc, #80]	; (8002128 <MotorSetDuty1+0x68>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2200      	movs	r2, #0
 80020dc:	639a      	str	r2, [r3, #56]	; 0x38
	else if(nDuty < 0){
		htim3.Instance->CCR2 = 0;
		htim3.Instance->CCR1 = abs(nDuty-500);
	}

}
 80020de:	e01e      	b.n	800211e <MotorSetDuty1+0x5e>
	else if(nDuty > 0){
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	dd0a      	ble.n	80020fc <MotorSetDuty1+0x3c>
		htim3.Instance->CCR2 = nDuty+500;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 80020ec:	4b0e      	ldr	r3, [pc, #56]	; (8002128 <MotorSetDuty1+0x68>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	639a      	str	r2, [r3, #56]	; 0x38
		htim2.Instance->CCR1 = 0;
 80020f2:	4b0e      	ldr	r3, [pc, #56]	; (800212c <MotorSetDuty1+0x6c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2200      	movs	r2, #0
 80020f8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80020fa:	e010      	b.n	800211e <MotorSetDuty1+0x5e>
	else if(nDuty < 0){
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	da0d      	bge.n	800211e <MotorSetDuty1+0x5e>
		htim3.Instance->CCR2 = 0;
 8002102:	4b09      	ldr	r3, [pc, #36]	; (8002128 <MotorSetDuty1+0x68>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2200      	movs	r2, #0
 8002108:	639a      	str	r2, [r3, #56]	; 0x38
		htim3.Instance->CCR1 = abs(nDuty-500);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8002110:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002114:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002118:	4b03      	ldr	r3, [pc, #12]	; (8002128 <MotorSetDuty1+0x68>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	bc80      	pop	{r7}
 8002126:	4770      	bx	lr
 8002128:	2000068c 	.word	0x2000068c
 800212c:	20000644 	.word	0x20000644

08002130 <MotorSetDuty2>:

void MotorSetDuty2(int nDuty)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
	if(nDuty == 0){
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d108      	bne.n	8002150 <MotorSetDuty2+0x20>
		htim3.Instance->CCR3 = 0;
 800213e:	4b14      	ldr	r3, [pc, #80]	; (8002190 <MotorSetDuty2+0x60>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2200      	movs	r2, #0
 8002144:	63da      	str	r2, [r3, #60]	; 0x3c
		htim3.Instance->CCR4 = 0;
 8002146:	4b12      	ldr	r3, [pc, #72]	; (8002190 <MotorSetDuty2+0x60>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2200      	movs	r2, #0
 800214c:	641a      	str	r2, [r3, #64]	; 0x40
	else if(nDuty<0){
		htim3.Instance->CCR4 = 0;
		htim3.Instance->CCR3 = abs(nDuty);
	}

}
 800214e:	e01a      	b.n	8002186 <MotorSetDuty2+0x56>
	else if(nDuty>0){
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	dd08      	ble.n	8002168 <MotorSetDuty2+0x38>
		htim3.Instance->CCR4 = nDuty;
 8002156:	4b0e      	ldr	r3, [pc, #56]	; (8002190 <MotorSetDuty2+0x60>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	641a      	str	r2, [r3, #64]	; 0x40
		htim3.Instance->CCR3 = 0;
 800215e:	4b0c      	ldr	r3, [pc, #48]	; (8002190 <MotorSetDuty2+0x60>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2200      	movs	r2, #0
 8002164:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002166:	e00e      	b.n	8002186 <MotorSetDuty2+0x56>
	else if(nDuty<0){
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	da0b      	bge.n	8002186 <MotorSetDuty2+0x56>
		htim3.Instance->CCR4 = 0;
 800216e:	4b08      	ldr	r3, [pc, #32]	; (8002190 <MotorSetDuty2+0x60>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2200      	movs	r2, #0
 8002174:	641a      	str	r2, [r3, #64]	; 0x40
		htim3.Instance->CCR3 = abs(nDuty);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800217c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002180:	4b03      	ldr	r3, [pc, #12]	; (8002190 <MotorSetDuty2+0x60>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	bc80      	pop	{r7}
 800218e:	4770      	bx	lr
 8002190:	2000068c 	.word	0x2000068c

08002194 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b088      	sub	sp, #32
 8002198:	af04      	add	r7, sp, #16
 800219a:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 800219c:	2364      	movs	r3, #100	; 0x64
 800219e:	9302      	str	r3, [sp, #8]
 80021a0:	2301      	movs	r3, #1
 80021a2:	9301      	str	r3, [sp, #4]
 80021a4:	f107 030f 	add.w	r3, r7, #15
 80021a8:	9300      	str	r3, [sp, #0]
 80021aa:	2301      	movs	r3, #1
 80021ac:	2275      	movs	r2, #117	; 0x75
 80021ae:	21d0      	movs	r1, #208	; 0xd0
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f004 faa7 	bl	8006704 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 80021b6:	7bfb      	ldrb	r3, [r7, #15]
 80021b8:	2b68      	cmp	r3, #104	; 0x68
 80021ba:	d13d      	bne.n	8002238 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80021bc:	2300      	movs	r3, #0
 80021be:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80021c0:	2364      	movs	r3, #100	; 0x64
 80021c2:	9302      	str	r3, [sp, #8]
 80021c4:	2301      	movs	r3, #1
 80021c6:	9301      	str	r3, [sp, #4]
 80021c8:	f107 030e 	add.w	r3, r7, #14
 80021cc:	9300      	str	r3, [sp, #0]
 80021ce:	2301      	movs	r3, #1
 80021d0:	226b      	movs	r2, #107	; 0x6b
 80021d2:	21d0      	movs	r1, #208	; 0xd0
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f004 f99b 	bl	8006510 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 80021da:	2307      	movs	r3, #7
 80021dc:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 80021de:	2364      	movs	r3, #100	; 0x64
 80021e0:	9302      	str	r3, [sp, #8]
 80021e2:	2301      	movs	r3, #1
 80021e4:	9301      	str	r3, [sp, #4]
 80021e6:	f107 030e 	add.w	r3, r7, #14
 80021ea:	9300      	str	r3, [sp, #0]
 80021ec:	2301      	movs	r3, #1
 80021ee:	2219      	movs	r2, #25
 80021f0:	21d0      	movs	r1, #208	; 0xd0
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f004 f98c 	bl	8006510 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 80021f8:	2300      	movs	r3, #0
 80021fa:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80021fc:	2364      	movs	r3, #100	; 0x64
 80021fe:	9302      	str	r3, [sp, #8]
 8002200:	2301      	movs	r3, #1
 8002202:	9301      	str	r3, [sp, #4]
 8002204:	f107 030e 	add.w	r3, r7, #14
 8002208:	9300      	str	r3, [sp, #0]
 800220a:	2301      	movs	r3, #1
 800220c:	221c      	movs	r2, #28
 800220e:	21d0      	movs	r1, #208	; 0xd0
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f004 f97d 	bl	8006510 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8002216:	2300      	movs	r3, #0
 8002218:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800221a:	2364      	movs	r3, #100	; 0x64
 800221c:	9302      	str	r3, [sp, #8]
 800221e:	2301      	movs	r3, #1
 8002220:	9301      	str	r3, [sp, #4]
 8002222:	f107 030e 	add.w	r3, r7, #14
 8002226:	9300      	str	r3, [sp, #0]
 8002228:	2301      	movs	r3, #1
 800222a:	221b      	movs	r2, #27
 800222c:	21d0      	movs	r1, #208	; 0xd0
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f004 f96e 	bl	8006510 <HAL_I2C_Mem_Write>
        return 0;
 8002234:	2300      	movs	r3, #0
 8002236:	e000      	b.n	800223a <MPU6050_Init+0xa6>
    }
    return 1;
 8002238:	2301      	movs	r3, #1
}
 800223a:	4618      	mov	r0, r3
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	0000      	movs	r0, r0
 8002244:	0000      	movs	r0, r0
	...

08002248 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8002248:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800224c:	b094      	sub	sp, #80	; 0x50
 800224e:	af04      	add	r7, sp, #16
 8002250:	6078      	str	r0, [r7, #4]
 8002252:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8002254:	2364      	movs	r3, #100	; 0x64
 8002256:	9302      	str	r3, [sp, #8]
 8002258:	230e      	movs	r3, #14
 800225a:	9301      	str	r3, [sp, #4]
 800225c:	f107 0308 	add.w	r3, r7, #8
 8002260:	9300      	str	r3, [sp, #0]
 8002262:	2301      	movs	r3, #1
 8002264:	223b      	movs	r2, #59	; 0x3b
 8002266:	21d0      	movs	r1, #208	; 0xd0
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f004 fa4b 	bl	8006704 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 800226e:	7a3b      	ldrb	r3, [r7, #8]
 8002270:	021b      	lsls	r3, r3, #8
 8002272:	b21a      	sxth	r2, r3
 8002274:	7a7b      	ldrb	r3, [r7, #9]
 8002276:	b21b      	sxth	r3, r3
 8002278:	4313      	orrs	r3, r2
 800227a:	b21a      	sxth	r2, r3
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8002280:	7abb      	ldrb	r3, [r7, #10]
 8002282:	021b      	lsls	r3, r3, #8
 8002284:	b21a      	sxth	r2, r3
 8002286:	7afb      	ldrb	r3, [r7, #11]
 8002288:	b21b      	sxth	r3, r3
 800228a:	4313      	orrs	r3, r2
 800228c:	b21a      	sxth	r2, r3
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8002292:	7b3b      	ldrb	r3, [r7, #12]
 8002294:	021b      	lsls	r3, r3, #8
 8002296:	b21a      	sxth	r2, r3
 8002298:	7b7b      	ldrb	r3, [r7, #13]
 800229a:	b21b      	sxth	r3, r3
 800229c:	4313      	orrs	r3, r2
 800229e:	b21a      	sxth	r2, r3
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 80022a4:	7bbb      	ldrb	r3, [r7, #14]
 80022a6:	021b      	lsls	r3, r3, #8
 80022a8:	b21a      	sxth	r2, r3
 80022aa:	7bfb      	ldrb	r3, [r7, #15]
 80022ac:	b21b      	sxth	r3, r3
 80022ae:	4313      	orrs	r3, r2
 80022b0:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 80022b2:	7c3b      	ldrb	r3, [r7, #16]
 80022b4:	021b      	lsls	r3, r3, #8
 80022b6:	b21a      	sxth	r2, r3
 80022b8:	7c7b      	ldrb	r3, [r7, #17]
 80022ba:	b21b      	sxth	r3, r3
 80022bc:	4313      	orrs	r3, r2
 80022be:	b21a      	sxth	r2, r3
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 80022c4:	7cbb      	ldrb	r3, [r7, #18]
 80022c6:	021b      	lsls	r3, r3, #8
 80022c8:	b21a      	sxth	r2, r3
 80022ca:	7cfb      	ldrb	r3, [r7, #19]
 80022cc:	b21b      	sxth	r3, r3
 80022ce:	4313      	orrs	r3, r2
 80022d0:	b21a      	sxth	r2, r3
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 80022d6:	7d3b      	ldrb	r3, [r7, #20]
 80022d8:	021b      	lsls	r3, r3, #8
 80022da:	b21a      	sxth	r2, r3
 80022dc:	7d7b      	ldrb	r3, [r7, #21]
 80022de:	b21b      	sxth	r3, r3
 80022e0:	4313      	orrs	r3, r2
 80022e2:	b21a      	sxth	r2, r3
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7fe f888 	bl	8000404 <__aeabi_i2d>
 80022f4:	f04f 0200 	mov.w	r2, #0
 80022f8:	4b97      	ldr	r3, [pc, #604]	; (8002558 <MPU6050_Read_All+0x310>)
 80022fa:	f7fe fa17 	bl	800072c <__aeabi_ddiv>
 80022fe:	4602      	mov	r2, r0
 8002300:	460b      	mov	r3, r1
 8002302:	6839      	ldr	r1, [r7, #0]
 8002304:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800230e:	4618      	mov	r0, r3
 8002310:	f7fe f878 	bl	8000404 <__aeabi_i2d>
 8002314:	f04f 0200 	mov.w	r2, #0
 8002318:	4b8f      	ldr	r3, [pc, #572]	; (8002558 <MPU6050_Read_All+0x310>)
 800231a:	f7fe fa07 	bl	800072c <__aeabi_ddiv>
 800231e:	4602      	mov	r2, r0
 8002320:	460b      	mov	r3, r1
 8002322:	6839      	ldr	r1, [r7, #0]
 8002324:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800232e:	4618      	mov	r0, r3
 8002330:	f7fe f868 	bl	8000404 <__aeabi_i2d>
 8002334:	a382      	add	r3, pc, #520	; (adr r3, 8002540 <MPU6050_Read_All+0x2f8>)
 8002336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800233a:	f7fe f9f7 	bl	800072c <__aeabi_ddiv>
 800233e:	4602      	mov	r2, r0
 8002340:	460b      	mov	r3, r1
 8002342:	6839      	ldr	r1, [r7, #0]
 8002344:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8002348:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800234c:	4618      	mov	r0, r3
 800234e:	f7fe fcc5 	bl	8000cdc <__aeabi_i2f>
 8002352:	4603      	mov	r3, r0
 8002354:	4981      	ldr	r1, [pc, #516]	; (800255c <MPU6050_Read_All+0x314>)
 8002356:	4618      	mov	r0, r3
 8002358:	f7fe fdc8 	bl	8000eec <__aeabi_fdiv>
 800235c:	4603      	mov	r3, r0
 800235e:	4980      	ldr	r1, [pc, #512]	; (8002560 <MPU6050_Read_All+0x318>)
 8002360:	4618      	mov	r0, r3
 8002362:	f7fe fc07 	bl	8000b74 <__addsf3>
 8002366:	4603      	mov	r3, r0
 8002368:	461a      	mov	r2, r3
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	641a      	str	r2, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002374:	4618      	mov	r0, r3
 8002376:	f7fe f845 	bl	8000404 <__aeabi_i2d>
 800237a:	a373      	add	r3, pc, #460	; (adr r3, 8002548 <MPU6050_Read_All+0x300>)
 800237c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002380:	f7fe f9d4 	bl	800072c <__aeabi_ddiv>
 8002384:	4602      	mov	r2, r0
 8002386:	460b      	mov	r3, r1
 8002388:	6839      	ldr	r1, [r7, #0]
 800238a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002394:	4618      	mov	r0, r3
 8002396:	f7fe f835 	bl	8000404 <__aeabi_i2d>
 800239a:	a36b      	add	r3, pc, #428	; (adr r3, 8002548 <MPU6050_Read_All+0x300>)
 800239c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a0:	f7fe f9c4 	bl	800072c <__aeabi_ddiv>
 80023a4:	4602      	mov	r2, r0
 80023a6:	460b      	mov	r3, r1
 80023a8:	6839      	ldr	r1, [r7, #0]
 80023aa:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7fe f825 	bl	8000404 <__aeabi_i2d>
 80023ba:	a363      	add	r3, pc, #396	; (adr r3, 8002548 <MPU6050_Read_All+0x300>)
 80023bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c0:	f7fe f9b4 	bl	800072c <__aeabi_ddiv>
 80023c4:	4602      	mov	r2, r0
 80023c6:	460b      	mov	r3, r1
 80023c8:	6839      	ldr	r1, [r7, #0]
 80023ca:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 80023ce:	f003 fbf5 	bl	8005bbc <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	4b63      	ldr	r3, [pc, #396]	; (8002564 <MPU6050_Read_All+0x31c>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	4618      	mov	r0, r3
 80023dc:	f7fe f802 	bl	80003e4 <__aeabi_ui2d>
 80023e0:	f04f 0200 	mov.w	r2, #0
 80023e4:	4b60      	ldr	r3, [pc, #384]	; (8002568 <MPU6050_Read_All+0x320>)
 80023e6:	f7fe f9a1 	bl	800072c <__aeabi_ddiv>
 80023ea:	4602      	mov	r2, r0
 80023ec:	460b      	mov	r3, r1
 80023ee:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 80023f2:	f003 fbe3 	bl	8005bbc <HAL_GetTick>
 80023f6:	4603      	mov	r3, r0
 80023f8:	4a5a      	ldr	r2, [pc, #360]	; (8002564 <MPU6050_Read_All+0x31c>)
 80023fa:	6013      	str	r3, [r2, #0]

    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002402:	461a      	mov	r2, r3
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	f9b3 3000 	ldrsh.w	r3, [r3]
 800240a:	fb03 f202 	mul.w	r2, r3, r2
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002414:	4619      	mov	r1, r3
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800241c:	fb01 f303 	mul.w	r3, r1, r3
 8002420:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8002422:	4618      	mov	r0, r3
 8002424:	f7fd ffee 	bl	8000404 <__aeabi_i2d>
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	4610      	mov	r0, r2
 800242e:	4619      	mov	r1, r3
 8002430:	f00c fa5d 	bl	800e8ee <sqrt>
 8002434:	e9c7 0108 	strd	r0, r1, [r7, #32]
    if (roll_sqrt != 0.0)
 8002438:	f04f 0200 	mov.w	r2, #0
 800243c:	f04f 0300 	mov.w	r3, #0
 8002440:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002444:	f7fe fab0 	bl	80009a8 <__aeabi_dcmpeq>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d119      	bne.n	8002482 <MPU6050_Read_All+0x23a>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002454:	4618      	mov	r0, r3
 8002456:	f7fd ffd5 	bl	8000404 <__aeabi_i2d>
 800245a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800245e:	f7fe f965 	bl	800072c <__aeabi_ddiv>
 8002462:	4602      	mov	r2, r0
 8002464:	460b      	mov	r3, r1
 8002466:	4610      	mov	r0, r2
 8002468:	4619      	mov	r1, r3
 800246a:	f00c f8b1 	bl	800e5d0 <atan>
 800246e:	a338      	add	r3, pc, #224	; (adr r3, 8002550 <MPU6050_Read_All+0x308>)
 8002470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002474:	f7fe f830 	bl	80004d8 <__aeabi_dmul>
 8002478:	4602      	mov	r2, r0
 800247a:	460b      	mov	r3, r1
 800247c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8002480:	e005      	b.n	800248e <MPU6050_Read_All+0x246>
    }
    else
    {
        roll = 0.0;
 8002482:	f04f 0200 	mov.w	r2, #0
 8002486:	f04f 0300 	mov.w	r3, #0
 800248a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002494:	425b      	negs	r3, r3
 8002496:	4618      	mov	r0, r3
 8002498:	f7fd ffb4 	bl	8000404 <__aeabi_i2d>
 800249c:	4682      	mov	sl, r0
 800249e:	468b      	mov	fp, r1
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7fd ffac 	bl	8000404 <__aeabi_i2d>
 80024ac:	4602      	mov	r2, r0
 80024ae:	460b      	mov	r3, r1
 80024b0:	4650      	mov	r0, sl
 80024b2:	4659      	mov	r1, fp
 80024b4:	f00c fa19 	bl	800e8ea <atan2>
 80024b8:	a325      	add	r3, pc, #148	; (adr r3, 8002550 <MPU6050_Read_All+0x308>)
 80024ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024be:	f7fe f80b 	bl	80004d8 <__aeabi_dmul>
 80024c2:	4602      	mov	r2, r0
 80024c4:	460b      	mov	r3, r1
 80024c6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 80024ca:	f04f 0200 	mov.w	r2, #0
 80024ce:	4b27      	ldr	r3, [pc, #156]	; (800256c <MPU6050_Read_All+0x324>)
 80024d0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80024d4:	f7fe fa72 	bl	80009bc <__aeabi_dcmplt>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00a      	beq.n	80024f4 <MPU6050_Read_All+0x2ac>
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80024e4:	f04f 0200 	mov.w	r2, #0
 80024e8:	4b21      	ldr	r3, [pc, #132]	; (8002570 <MPU6050_Read_All+0x328>)
 80024ea:	f7fe fa85 	bl	80009f8 <__aeabi_dcmpgt>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d114      	bne.n	800251e <MPU6050_Read_All+0x2d6>
 80024f4:	f04f 0200 	mov.w	r2, #0
 80024f8:	4b1d      	ldr	r3, [pc, #116]	; (8002570 <MPU6050_Read_All+0x328>)
 80024fa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80024fe:	f7fe fa7b 	bl	80009f8 <__aeabi_dcmpgt>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d037      	beq.n	8002578 <MPU6050_Read_All+0x330>
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 800250e:	f04f 0200 	mov.w	r2, #0
 8002512:	4b16      	ldr	r3, [pc, #88]	; (800256c <MPU6050_Read_All+0x324>)
 8002514:	f7fe fa52 	bl	80009bc <__aeabi_dcmplt>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d02c      	beq.n	8002578 <MPU6050_Read_All+0x330>
    {
        KalmanY.angle = pitch;
 800251e:	4915      	ldr	r1, [pc, #84]	; (8002574 <MPU6050_Read_All+0x32c>)
 8002520:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002524:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8002528:	6839      	ldr	r1, [r7, #0]
 800252a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800252e:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
        DataStruct->CFAngleY = pitch;
 8002532:	6839      	ldr	r1, [r7, #0]
 8002534:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002538:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800253c:	e05e      	b.n	80025fc <MPU6050_Read_All+0x3b4>
 800253e:	bf00      	nop
 8002540:	00000000 	.word	0x00000000
 8002544:	40cc2900 	.word	0x40cc2900
 8002548:	00000000 	.word	0x00000000
 800254c:	40606000 	.word	0x40606000
 8002550:	1a63c1f8 	.word	0x1a63c1f8
 8002554:	404ca5dc 	.word	0x404ca5dc
 8002558:	40d00000 	.word	0x40d00000
 800255c:	43aa0000 	.word	0x43aa0000
 8002560:	42121eb8 	.word	0x42121eb8
 8002564:	200005ec 	.word	0x200005ec
 8002568:	408f4000 	.word	0x408f4000
 800256c:	c0568000 	.word	0xc0568000
 8002570:	40568000 	.word	0x40568000
 8002574:	20000048 	.word	0x20000048
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800257e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002582:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002586:	e9cd 2300 	strd	r2, r3, [sp]
 800258a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800258e:	4850      	ldr	r0, [pc, #320]	; (80026d0 <MPU6050_Read_All+0x488>)
 8002590:	f000 f8a4 	bl	80026dc <Kalman_getAngle>
 8002594:	4602      	mov	r2, r0
 8002596:	460b      	mov	r3, r1
 8002598:	6839      	ldr	r1, [r7, #0]
 800259a:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
        DataStruct->CFAngleY = 0.98 * ( DataStruct->CFAngleY + DataStruct->Gy * dt ) +0.02 * pitch;
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	e9d3 ab14 	ldrd	sl, fp, [r3, #80]	; 0x50
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80025aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025ae:	f7fd ff93 	bl	80004d8 <__aeabi_dmul>
 80025b2:	4602      	mov	r2, r0
 80025b4:	460b      	mov	r3, r1
 80025b6:	4650      	mov	r0, sl
 80025b8:	4659      	mov	r1, fp
 80025ba:	f7fd fdd7 	bl	800016c <__adddf3>
 80025be:	4602      	mov	r2, r0
 80025c0:	460b      	mov	r3, r1
 80025c2:	4610      	mov	r0, r2
 80025c4:	4619      	mov	r1, r3
 80025c6:	a33e      	add	r3, pc, #248	; (adr r3, 80026c0 <MPU6050_Read_All+0x478>)
 80025c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025cc:	f7fd ff84 	bl	80004d8 <__aeabi_dmul>
 80025d0:	4602      	mov	r2, r0
 80025d2:	460b      	mov	r3, r1
 80025d4:	4692      	mov	sl, r2
 80025d6:	469b      	mov	fp, r3
 80025d8:	a33b      	add	r3, pc, #236	; (adr r3, 80026c8 <MPU6050_Read_All+0x480>)
 80025da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025de:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025e2:	f7fd ff79 	bl	80004d8 <__aeabi_dmul>
 80025e6:	4602      	mov	r2, r0
 80025e8:	460b      	mov	r3, r1
 80025ea:	4650      	mov	r0, sl
 80025ec:	4659      	mov	r1, fp
 80025ee:	f7fd fdbd 	bl	800016c <__adddf3>
 80025f2:	4602      	mov	r2, r0
 80025f4:	460b      	mov	r3, r1
 80025f6:	6839      	ldr	r1, [r7, #0]
 80025f8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002602:	4690      	mov	r8, r2
 8002604:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8002608:	f04f 0200 	mov.w	r2, #0
 800260c:	4b31      	ldr	r3, [pc, #196]	; (80026d4 <MPU6050_Read_All+0x48c>)
 800260e:	4640      	mov	r0, r8
 8002610:	4649      	mov	r1, r9
 8002612:	f7fe f9f1 	bl	80009f8 <__aeabi_dcmpgt>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d008      	beq.n	800262e <MPU6050_Read_All+0x3e6>
    {
        DataStruct->Gx = -DataStruct->Gx;
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002622:	4614      	mov	r4, r2
 8002624:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    }
    	DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002634:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002638:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800263c:	e9cd 2300 	strd	r2, r3, [sp]
 8002640:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002644:	4824      	ldr	r0, [pc, #144]	; (80026d8 <MPU6050_Read_All+0x490>)
 8002646:	f000 f849 	bl	80026dc <Kalman_getAngle>
 800264a:	4602      	mov	r2, r0
 800264c:	460b      	mov	r3, r1
 800264e:	6839      	ldr	r1, [r7, #0]
 8002650:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    	DataStruct->CFAngleX = 0.98 * ( DataStruct->CFAngleX + DataStruct->Gx * dt ) +0.02 * roll;
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002660:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002664:	f7fd ff38 	bl	80004d8 <__aeabi_dmul>
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	4620      	mov	r0, r4
 800266e:	4629      	mov	r1, r5
 8002670:	f7fd fd7c 	bl	800016c <__adddf3>
 8002674:	4602      	mov	r2, r0
 8002676:	460b      	mov	r3, r1
 8002678:	4610      	mov	r0, r2
 800267a:	4619      	mov	r1, r3
 800267c:	a310      	add	r3, pc, #64	; (adr r3, 80026c0 <MPU6050_Read_All+0x478>)
 800267e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002682:	f7fd ff29 	bl	80004d8 <__aeabi_dmul>
 8002686:	4602      	mov	r2, r0
 8002688:	460b      	mov	r3, r1
 800268a:	4614      	mov	r4, r2
 800268c:	461d      	mov	r5, r3
 800268e:	a30e      	add	r3, pc, #56	; (adr r3, 80026c8 <MPU6050_Read_All+0x480>)
 8002690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002694:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002698:	f7fd ff1e 	bl	80004d8 <__aeabi_dmul>
 800269c:	4602      	mov	r2, r0
 800269e:	460b      	mov	r3, r1
 80026a0:	4620      	mov	r0, r4
 80026a2:	4629      	mov	r1, r5
 80026a4:	f7fd fd62 	bl	800016c <__adddf3>
 80026a8:	4602      	mov	r2, r0
 80026aa:	460b      	mov	r3, r1
 80026ac:	6839      	ldr	r1, [r7, #0]
 80026ae:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

}
 80026b2:	bf00      	nop
 80026b4:	3740      	adds	r7, #64	; 0x40
 80026b6:	46bd      	mov	sp, r7
 80026b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026bc:	f3af 8000 	nop.w
 80026c0:	f5c28f5c 	.word	0xf5c28f5c
 80026c4:	3fef5c28 	.word	0x3fef5c28
 80026c8:	47ae147b 	.word	0x47ae147b
 80026cc:	3f947ae1 	.word	0x3f947ae1
 80026d0:	20000048 	.word	0x20000048
 80026d4:	40568000 	.word	0x40568000
 80026d8:	20000000 	.word	0x20000000

080026dc <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 80026dc:	b5b0      	push	{r4, r5, r7, lr}
 80026de:	b092      	sub	sp, #72	; 0x48
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80026ee:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80026f2:	f7fd fd39 	bl	8000168 <__aeabi_dsub>
 80026f6:	4602      	mov	r2, r0
 80026f8:	460b      	mov	r3, r1
 80026fa:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += dt * rate;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002704:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002708:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800270c:	f7fd fee4 	bl	80004d8 <__aeabi_dmul>
 8002710:	4602      	mov	r2, r0
 8002712:	460b      	mov	r3, r1
 8002714:	4620      	mov	r0, r4
 8002716:	4629      	mov	r1, r5
 8002718:	f7fd fd28 	bl	800016c <__adddf3>
 800271c:	4602      	mov	r2, r0
 800271e:	460b      	mov	r3, r1
 8002720:	68f9      	ldr	r1, [r7, #12]
 8002722:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002732:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002736:	f7fd fecf 	bl	80004d8 <__aeabi_dmul>
 800273a:	4602      	mov	r2, r0
 800273c:	460b      	mov	r3, r1
 800273e:	4610      	mov	r0, r2
 8002740:	4619      	mov	r1, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002748:	f7fd fd0e 	bl	8000168 <__aeabi_dsub>
 800274c:	4602      	mov	r2, r0
 800274e:	460b      	mov	r3, r1
 8002750:	4610      	mov	r0, r2
 8002752:	4619      	mov	r1, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800275a:	f7fd fd05 	bl	8000168 <__aeabi_dsub>
 800275e:	4602      	mov	r2, r0
 8002760:	460b      	mov	r3, r1
 8002762:	4610      	mov	r0, r2
 8002764:	4619      	mov	r1, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800276c:	f7fd fcfe 	bl	800016c <__adddf3>
 8002770:	4602      	mov	r2, r0
 8002772:	460b      	mov	r3, r1
 8002774:	4610      	mov	r0, r2
 8002776:	4619      	mov	r1, r3
 8002778:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800277c:	f7fd feac 	bl	80004d8 <__aeabi_dmul>
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	4620      	mov	r0, r4
 8002786:	4629      	mov	r1, r5
 8002788:	f7fd fcf0 	bl	800016c <__adddf3>
 800278c:	4602      	mov	r2, r0
 800278e:	460b      	mov	r3, r1
 8002790:	68f9      	ldr	r1, [r7, #12]
 8002792:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80027a2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80027a6:	f7fd fe97 	bl	80004d8 <__aeabi_dmul>
 80027aa:	4602      	mov	r2, r0
 80027ac:	460b      	mov	r3, r1
 80027ae:	4620      	mov	r0, r4
 80027b0:	4629      	mov	r1, r5
 80027b2:	f7fd fcd9 	bl	8000168 <__aeabi_dsub>
 80027b6:	4602      	mov	r2, r0
 80027b8:	460b      	mov	r3, r1
 80027ba:	68f9      	ldr	r1, [r7, #12]
 80027bc:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80027cc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80027d0:	f7fd fe82 	bl	80004d8 <__aeabi_dmul>
 80027d4:	4602      	mov	r2, r0
 80027d6:	460b      	mov	r3, r1
 80027d8:	4620      	mov	r0, r4
 80027da:	4629      	mov	r1, r5
 80027dc:	f7fd fcc4 	bl	8000168 <__aeabi_dsub>
 80027e0:	4602      	mov	r2, r0
 80027e2:	460b      	mov	r3, r1
 80027e4:	68f9      	ldr	r1, [r7, #12]
 80027e6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80027f6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80027fa:	f7fd fe6d 	bl	80004d8 <__aeabi_dmul>
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	4620      	mov	r0, r4
 8002804:	4629      	mov	r1, r5
 8002806:	f7fd fcb1 	bl	800016c <__adddf3>
 800280a:	4602      	mov	r2, r0
 800280c:	460b      	mov	r3, r1
 800280e:	68f9      	ldr	r1, [r7, #12]
 8002810:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002820:	f7fd fca4 	bl	800016c <__adddf3>
 8002824:	4602      	mov	r2, r0
 8002826:	460b      	mov	r3, r1
 8002828:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002832:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002836:	f7fd ff79 	bl	800072c <__aeabi_ddiv>
 800283a:	4602      	mov	r2, r0
 800283c:	460b      	mov	r3, r1
 800283e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002848:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800284c:	f7fd ff6e 	bl	800072c <__aeabi_ddiv>
 8002850:	4602      	mov	r2, r0
 8002852:	460b      	mov	r3, r1
 8002854:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double y = newAngle - Kalman->angle;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800285e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002862:	f7fd fc81 	bl	8000168 <__aeabi_dsub>
 8002866:	4602      	mov	r2, r0
 8002868:	460b      	mov	r3, r1
 800286a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    Kalman->angle += K[0] * y;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002874:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002878:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800287c:	f7fd fe2c 	bl	80004d8 <__aeabi_dmul>
 8002880:	4602      	mov	r2, r0
 8002882:	460b      	mov	r3, r1
 8002884:	4620      	mov	r0, r4
 8002886:	4629      	mov	r1, r5
 8002888:	f7fd fc70 	bl	800016c <__adddf3>
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
 8002890:	68f9      	ldr	r1, [r7, #12]
 8002892:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800289c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80028a0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80028a4:	f7fd fe18 	bl	80004d8 <__aeabi_dmul>
 80028a8:	4602      	mov	r2, r0
 80028aa:	460b      	mov	r3, r1
 80028ac:	4620      	mov	r0, r4
 80028ae:	4629      	mov	r1, r5
 80028b0:	f7fd fc5c 	bl	800016c <__adddf3>
 80028b4:	4602      	mov	r2, r0
 80028b6:	460b      	mov	r3, r1
 80028b8:	68f9      	ldr	r1, [r7, #12]
 80028ba:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80028c4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double P01_temp = Kalman->P[0][1];
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80028ce:	e9c7 2308 	strd	r2, r3, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80028d8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80028dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80028e0:	f7fd fdfa 	bl	80004d8 <__aeabi_dmul>
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	4620      	mov	r0, r4
 80028ea:	4629      	mov	r1, r5
 80028ec:	f7fd fc3c 	bl	8000168 <__aeabi_dsub>
 80028f0:	4602      	mov	r2, r0
 80028f2:	460b      	mov	r3, r1
 80028f4:	68f9      	ldr	r1, [r7, #12]
 80028f6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002900:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002904:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002908:	f7fd fde6 	bl	80004d8 <__aeabi_dmul>
 800290c:	4602      	mov	r2, r0
 800290e:	460b      	mov	r3, r1
 8002910:	4620      	mov	r0, r4
 8002912:	4629      	mov	r1, r5
 8002914:	f7fd fc28 	bl	8000168 <__aeabi_dsub>
 8002918:	4602      	mov	r2, r0
 800291a:	460b      	mov	r3, r1
 800291c:	68f9      	ldr	r1, [r7, #12]
 800291e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002928:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800292c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002930:	f7fd fdd2 	bl	80004d8 <__aeabi_dmul>
 8002934:	4602      	mov	r2, r0
 8002936:	460b      	mov	r3, r1
 8002938:	4620      	mov	r0, r4
 800293a:	4629      	mov	r1, r5
 800293c:	f7fd fc14 	bl	8000168 <__aeabi_dsub>
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	68f9      	ldr	r1, [r7, #12]
 8002946:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002950:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002954:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002958:	f7fd fdbe 	bl	80004d8 <__aeabi_dmul>
 800295c:	4602      	mov	r2, r0
 800295e:	460b      	mov	r3, r1
 8002960:	4620      	mov	r0, r4
 8002962:	4629      	mov	r1, r5
 8002964:	f7fd fc00 	bl	8000168 <__aeabi_dsub>
 8002968:	4602      	mov	r2, r0
 800296a:	460b      	mov	r3, r1
 800296c:	68f9      	ldr	r1, [r7, #12]
 800296e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 8002978:	4610      	mov	r0, r2
 800297a:	4619      	mov	r1, r3
 800297c:	3748      	adds	r7, #72	; 0x48
 800297e:	46bd      	mov	sp, r7
 8002980:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002984 <_qFFMath_GetAbnormal>:
(void)memcpy( &dst, &src, sizeof(dst_type) )                                \

static float qFFMath_CalcCbrt( float x , bool r );
/*============================================================================*/
float _qFFMath_GetAbnormal( const int i )
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
    static const uint32_t u_ab[ 2 ] = { 0x7F800000u, 0x7FBFFFFFu };
    static float f_ab[ 2 ] = { 0.0f, 0.0f };
    static bool init = true;
    
    if ( init ) {
 800298c:	4b0a      	ldr	r3, [pc, #40]	; (80029b8 <_qFFMath_GetAbnormal+0x34>)
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d008      	beq.n	80029a6 <_qFFMath_GetAbnormal+0x22>
        /*cppcheck-suppress misra-c2012-21.15 */
        (void)memcpy( f_ab, u_ab, sizeof(f_ab) );
 8002994:	4b09      	ldr	r3, [pc, #36]	; (80029bc <_qFFMath_GetAbnormal+0x38>)
 8002996:	4a0a      	ldr	r2, [pc, #40]	; (80029c0 <_qFFMath_GetAbnormal+0x3c>)
 8002998:	e892 0003 	ldmia.w	r2, {r0, r1}
 800299c:	e883 0003 	stmia.w	r3, {r0, r1}
        init = false;
 80029a0:	4b05      	ldr	r3, [pc, #20]	; (80029b8 <_qFFMath_GetAbnormal+0x34>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	701a      	strb	r2, [r3, #0]
    }
    
    return f_ab[ i ]; 
 80029a6:	4a05      	ldr	r2, [pc, #20]	; (80029bc <_qFFMath_GetAbnormal+0x38>)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bc80      	pop	{r7}
 80029b6:	4770      	bx	lr
 80029b8:	20000090 	.word	0x20000090
 80029bc:	200005f0 	.word	0x200005f0
 80029c0:	0800eea8 	.word	0x0800eea8

080029c4 <qFFMath_FPClassify>:
/*============================================================================*/
int qFFMath_FPClassify( const float f ) 
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
    uint32_t u = 0u;
 80029cc:	2300      	movs	r3, #0
 80029ce:	60bb      	str	r3, [r7, #8]
 80029d0:	687b      	ldr	r3, [r7, #4]
    int retVal;

    /*cppcheck-suppress misra-c2012-21.15 */
    cast_reinterpret( u, f, uint32_t );
 80029d2:	60bb      	str	r3, [r7, #8]
    u &= 0x7FFFFFFFu;
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029da:	60bb      	str	r3, [r7, #8]

    if ( 0u == u ) {
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d102      	bne.n	80029e8 <qFFMath_FPClassify+0x24>
        retVal = QFFM_FP_ZERO;
 80029e2:	2300      	movs	r3, #0
 80029e4:	60fb      	str	r3, [r7, #12]
 80029e6:	e016      	b.n	8002a16 <qFFMath_FPClassify+0x52>
    }
    else if ( u < 0x00800000u ) {
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029ee:	d202      	bcs.n	80029f6 <qFFMath_FPClassify+0x32>
        retVal = QFFM_FP_SUBNORMAL;
 80029f0:	2301      	movs	r3, #1
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	e00f      	b.n	8002a16 <qFFMath_FPClassify+0x52>
    }
    else if ( u < 0x7F800000u ) {
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80029fc:	d202      	bcs.n	8002a04 <qFFMath_FPClassify+0x40>
        retVal = QFFM_FP_NORMAL;
 80029fe:	2302      	movs	r3, #2
 8002a00:	60fb      	str	r3, [r7, #12]
 8002a02:	e008      	b.n	8002a16 <qFFMath_FPClassify+0x52>
    }
    else if ( 0x7F800000U == u ) {
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8002a0a:	d102      	bne.n	8002a12 <qFFMath_FPClassify+0x4e>
        retVal = QFFM_FP_INFINITE;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	e001      	b.n	8002a16 <qFFMath_FPClassify+0x52>
    }
    else {
        retVal = QFFM_FP_NAN;
 8002a12:	2304      	movs	r3, #4
 8002a14:	60fb      	str	r3, [r7, #12]
    }

    return retVal;
 8002a16:	68fb      	ldr	r3, [r7, #12]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3714      	adds	r7, #20
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bc80      	pop	{r7}
 8002a20:	4770      	bx	lr

08002a22 <qFFMath_IsNaN>:
/*============================================================================*/
bool qFFMath_IsNaN( const float x )
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b082      	sub	sp, #8
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
    return ( QFFM_FP_NAN == qFFMath_FPClassify( x ) );
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7ff ffca 	bl	80029c4 <qFFMath_FPClassify>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b04      	cmp	r3, #4
 8002a34:	bf0c      	ite	eq
 8002a36:	2301      	moveq	r3, #1
 8002a38:	2300      	movne	r3, #0
 8002a3a:	b2db      	uxtb	r3, r3
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3708      	adds	r7, #8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <qFFMath_Abs>:
{
    return ( qFFMath_FPClassify( x ) == QFFM_FP_NORMAL );
}
/*============================================================================*/
float qFFMath_Abs( float x )
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
    return ( x < 0.0f ) ? -x : x;
 8002a4c:	f04f 0100 	mov.w	r1, #0
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f7fe fb35 	bl	80010c0 <__aeabi_fcmplt>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d003      	beq.n	8002a64 <qFFMath_Abs+0x20>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002a62:	e000      	b.n	8002a66 <qFFMath_Abs+0x22>
 8002a64:	687b      	ldr	r3, [r7, #4]
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <qFFMath_Sqrt>:
    
    return z*( 2.0f - ( x*z ) );
}
/*============================================================================*/
float qFFMath_Sqrt( float x )
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b086      	sub	sp, #24
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
    float retVal;

    if ( x < 0.0f ) {
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f04f 0100 	mov.w	r1, #0
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7fe fb1f 	bl	80010c0 <__aeabi_fcmplt>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d004      	beq.n	8002a92 <qFFMath_Sqrt+0x24>
        retVal = QFFM_NAN;
 8002a88:	2001      	movs	r0, #1
 8002a8a:	f7ff ff7b 	bl	8002984 <_qFFMath_GetAbnormal>
 8002a8e:	6178      	str	r0, [r7, #20]
 8002a90:	e02f      	b.n	8002af2 <qFFMath_Sqrt+0x84>
    }
    else if ( QFFM_FP_ZERO == qFFMath_FPClassify( x ) ) {
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff ff95 	bl	80029c4 <qFFMath_FPClassify>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d103      	bne.n	8002aa8 <qFFMath_Sqrt+0x3a>
        retVal = 0.0f;
 8002aa0:	f04f 0300 	mov.w	r3, #0
 8002aa4:	617b      	str	r3, [r7, #20]
 8002aa6:	e024      	b.n	8002af2 <qFFMath_Sqrt+0x84>
    }
    else {
        uint32_t y = 0u;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	613b      	str	r3, [r7, #16]
        float z = 0.0f;
 8002aac:	f04f 0300 	mov.w	r3, #0
 8002ab0:	60fb      	str	r3, [r7, #12]
 8002ab2:	687b      	ldr	r3, [r7, #4]
        /*cppcheck-suppress misra-c2012-21.15 */
        cast_reinterpret( y, x, uint32_t );
 8002ab4:	613b      	str	r3, [r7, #16]
        y = ( ( y - 0x00800000u ) >> 1u ) + 0x20000000u;
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8002abc:	085b      	lsrs	r3, r3, #1
 8002abe:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8002ac2:	613b      	str	r3, [r7, #16]
 8002ac4:	693b      	ldr	r3, [r7, #16]
        /*cppcheck-suppress misra-c2012-21.15 */
        cast_reinterpret( z, y, float );
 8002ac6:	60fb      	str	r3, [r7, #12]
        retVal = ( ( x/z ) + z ) * 0.5f;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	4611      	mov	r1, r2
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7fe fa0c 	bl	8000eec <__aeabi_fdiv>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	4619      	mov	r1, r3
 8002adc:	4610      	mov	r0, r2
 8002ade:	f7fe f849 	bl	8000b74 <__addsf3>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7fe f94b 	bl	8000d84 <__aeabi_fmul>
 8002aee:	4603      	mov	r3, r0
 8002af0:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 8002af2:	697b      	ldr	r3, [r7, #20]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3718      	adds	r7, #24
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <qFFMath_Sin>:
    return ( QFFM_FP_ZERO == qFFMath_FPClassify( x )) ? QFFM_NAN
                                                      : ( x - ( y*qFFMath_Trunc( x/y ) ) );
}
/*============================================================================*/
float qFFMath_Sin( float x )
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
    float y;

    x *= -QFFM_1_PI;
 8002b04:	491e      	ldr	r1, [pc, #120]	; (8002b80 <qFFMath_Sin+0x84>)
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f7fe f93c 	bl	8000d84 <__aeabi_fmul>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	607b      	str	r3, [r7, #4]
    y = x + 25165824.0f;
 8002b10:	491c      	ldr	r1, [pc, #112]	; (8002b84 <qFFMath_Sin+0x88>)
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f7fe f82e 	bl	8000b74 <__addsf3>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	60fb      	str	r3, [r7, #12]
    x -= y - 25165824.0f;
 8002b1c:	4919      	ldr	r1, [pc, #100]	; (8002b84 <qFFMath_Sin+0x88>)
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f7fe f826 	bl	8000b70 <__aeabi_fsub>
 8002b24:	4603      	mov	r3, r0
 8002b26:	4619      	mov	r1, r3
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f7fe f821 	bl	8000b70 <__aeabi_fsub>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	607b      	str	r3, [r7, #4]
    x *= qFFMath_Abs( x ) - 1.0f;
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7ff ff86 	bl	8002a44 <qFFMath_Abs>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7fe f816 	bl	8000b70 <__aeabi_fsub>
 8002b44:	4603      	mov	r3, r0
 8002b46:	4619      	mov	r1, r3
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f7fe f91b 	bl	8000d84 <__aeabi_fmul>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	607b      	str	r3, [r7, #4]

    return x*( ( 3.5841304553896f*qFFMath_Abs( x ) ) + 3.1039673861526f );
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f7ff ff76 	bl	8002a44 <qFFMath_Abs>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	490b      	ldr	r1, [pc, #44]	; (8002b88 <qFFMath_Sin+0x8c>)
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7fe f911 	bl	8000d84 <__aeabi_fmul>
 8002b62:	4603      	mov	r3, r0
 8002b64:	4909      	ldr	r1, [pc, #36]	; (8002b8c <qFFMath_Sin+0x90>)
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fe f804 	bl	8000b74 <__addsf3>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	6879      	ldr	r1, [r7, #4]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7fe f907 	bl	8000d84 <__aeabi_fmul>
 8002b76:	4603      	mov	r3, r0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	bea2f983 	.word	0xbea2f983
 8002b84:	4bc00000 	.word	0x4bc00000
 8002b88:	40656265 	.word	0x40656265
 8002b8c:	4046a767 	.word	0x4046a767

08002b90 <qFFMath_Cos>:
/*============================================================================*/
float qFFMath_Cos( float x )
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
    return qFFMath_Sin( x + QFFM_PI_2 );
 8002b98:	4906      	ldr	r1, [pc, #24]	; (8002bb4 <qFFMath_Cos+0x24>)
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7fd ffea 	bl	8000b74 <__addsf3>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff ffaa 	bl	8002afc <qFFMath_Sin>
 8002ba8:	4603      	mov	r3, r0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	3fc90fdb 	.word	0x3fc90fdb

08002bb8 <qFFMath_Exp2>:

    return y + ( f*( ( 0.5f*t ) - y ) );
}
/*============================================================================*/
float qFFMath_Exp2( float x )
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
    float retVal;

    if ( x <= -126.0f ) {
 8002bc0:	492e      	ldr	r1, [pc, #184]	; (8002c7c <qFFMath_Exp2+0xc4>)
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f7fe fa86 	bl	80010d4 <__aeabi_fcmple>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <qFFMath_Exp2+0x1e>
        retVal = 0.0f;
 8002bce:	f04f 0300 	mov.w	r3, #0
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	e04c      	b.n	8002c70 <qFFMath_Exp2+0xb8>
    }
    else if ( x > 128.0f ) {
 8002bd6:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f7fe fa8e 	bl	80010fc <__aeabi_fcmpgt>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d004      	beq.n	8002bf0 <qFFMath_Exp2+0x38>
        retVal = QFFM_INFINITY;
 8002be6:	2000      	movs	r0, #0
 8002be8:	f7ff fecc 	bl	8002984 <_qFFMath_GetAbnormal>
 8002bec:	6178      	str	r0, [r7, #20]
 8002bee:	e03f      	b.n	8002c70 <qFFMath_Exp2+0xb8>
    }
    else {
        float y = 0.0f;
 8002bf0:	f04f 0300 	mov.w	r3, #0
 8002bf4:	613b      	str	r3, [r7, #16]
        uint32_t exponent;
        /*cstat -CERT-FLP34-C -MISRAC2012-Rule-10.8*/
        exponent = (uint32_t)( x + 127.0f );
 8002bf6:	4922      	ldr	r1, [pc, #136]	; (8002c80 <qFFMath_Exp2+0xc8>)
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f7fd ffbb 	bl	8000b74 <__addsf3>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7fe faab 	bl	800115c <__aeabi_f2uiz>
 8002c06:	4603      	mov	r3, r0
 8002c08:	60fb      	str	r3, [r7, #12]
        /*cstat +CERT-FLP34-C +MISRAC2012-Rule-10.8 -CERT-FLP36-C*/
        x += 127.0f - (float)exponent;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7fe f861 	bl	8000cd4 <__aeabi_ui2f>
 8002c12:	4603      	mov	r3, r0
 8002c14:	4619      	mov	r1, r3
 8002c16:	481a      	ldr	r0, [pc, #104]	; (8002c80 <qFFMath_Exp2+0xc8>)
 8002c18:	f7fd ffaa 	bl	8000b70 <__aeabi_fsub>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	4619      	mov	r1, r3
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f7fd ffa7 	bl	8000b74 <__addsf3>
 8002c26:	4603      	mov	r3, r0
 8002c28:	607b      	str	r3, [r7, #4]
        /*cstat +CERT-FLP36-C*/
        exponent <<= 23u;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	05db      	lsls	r3, r3, #23
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	68fb      	ldr	r3, [r7, #12]
        /*cppcheck-suppress misra-c2012-21.15 */
        cast_reinterpret( y, exponent, float );
 8002c32:	613b      	str	r3, [r7, #16]
        x *= ( x*0.339766027f ) + 0.660233972f;
 8002c34:	4913      	ldr	r1, [pc, #76]	; (8002c84 <qFFMath_Exp2+0xcc>)
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7fe f8a4 	bl	8000d84 <__aeabi_fmul>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	4912      	ldr	r1, [pc, #72]	; (8002c88 <qFFMath_Exp2+0xd0>)
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7fd ff97 	bl	8000b74 <__addsf3>
 8002c46:	4603      	mov	r3, r0
 8002c48:	4619      	mov	r1, r3
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f7fe f89a 	bl	8000d84 <__aeabi_fmul>
 8002c50:	4603      	mov	r3, r0
 8002c52:	607b      	str	r3, [r7, #4]
        retVal = y*( x + 1.0f );
 8002c54:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f7fd ff8b 	bl	8000b74 <__addsf3>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	461a      	mov	r2, r3
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	4619      	mov	r1, r3
 8002c66:	4610      	mov	r0, r2
 8002c68:	f7fe f88c 	bl	8000d84 <__aeabi_fmul>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 8002c70:	697b      	ldr	r3, [r7, #20]
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3718      	adds	r7, #24
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	c2fc0000 	.word	0xc2fc0000
 8002c80:	42fe0000 	.word	0x42fe0000
 8002c84:	3eadf5d0 	.word	0x3eadf5d0
 8002c88:	3f290518 	.word	0x3f290518

08002c8c <qFFMath_Log2>:
/*============================================================================*/
float qFFMath_Log2( float x )
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
    float retVal;

    if ( x < 0.0f ) {
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f04f 0100 	mov.w	r1, #0
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fe fa10 	bl	80010c0 <__aeabi_fcmplt>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d004      	beq.n	8002cb0 <qFFMath_Log2+0x24>
        retVal = QFFM_NAN;
 8002ca6:	2001      	movs	r0, #1
 8002ca8:	f7ff fe6c 	bl	8002984 <_qFFMath_GetAbnormal>
 8002cac:	6178      	str	r0, [r7, #20]
 8002cae:	e049      	b.n	8002d44 <qFFMath_Log2+0xb8>
    }
    else if ( QFFM_FP_ZERO == qFFMath_FPClassify( x ) ) {
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7ff fe86 	bl	80029c4 <qFFMath_FPClassify>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d107      	bne.n	8002cce <qFFMath_Log2+0x42>
        retVal = -QFFM_INFINITY;
 8002cbe:	2000      	movs	r0, #0
 8002cc0:	f7ff fe60 	bl	8002984 <_qFFMath_GetAbnormal>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002cca:	617b      	str	r3, [r7, #20]
 8002ccc:	e03a      	b.n	8002d44 <qFFMath_Log2+0xb8>
    }
    else {
        uint32_t y = 0u, y2;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	60fb      	str	r3, [r7, #12]
 8002cd2:	687b      	ldr	r3, [r7, #4]
        /*cppcheck-suppress misra-c2012-21.15 */
        cast_reinterpret( y, x, uint32_t );
 8002cd4:	60fb      	str	r3, [r7, #12]
        y2 = y;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	613b      	str	r3, [r7, #16]
        y >>= 23u;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	0ddb      	lsrs	r3, r3, #23
 8002cde:	60fb      	str	r3, [r7, #12]
        /*cstat -CERT-FLP36-C*/
        retVal = (float)y;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7fd fff6 	bl	8000cd4 <__aeabi_ui2f>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	617b      	str	r3, [r7, #20]
        /*cstat +CERT-FLP36-C*/
        y = ( y2 & 0x007FFFFFu ) | 0x3F800000u;
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8002cf2:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
        /*cppcheck-suppress misra-c2012-21.15 */
        cast_reinterpret( x, y, float );
 8002cfa:	607b      	str	r3, [r7, #4]
        retVal += -128.0f + ( x*( ( -0.333333333f*x ) + 2.0f ) ) - 0.666666666f;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4914      	ldr	r1, [pc, #80]	; (8002d50 <qFFMath_Log2+0xc4>)
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7fe f83f 	bl	8000d84 <__aeabi_fmul>
 8002d06:	4603      	mov	r3, r0
 8002d08:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7fd ff31 	bl	8000b74 <__addsf3>
 8002d12:	4603      	mov	r3, r0
 8002d14:	461a      	mov	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4619      	mov	r1, r3
 8002d1a:	4610      	mov	r0, r2
 8002d1c:	f7fe f832 	bl	8000d84 <__aeabi_fmul>
 8002d20:	4603      	mov	r3, r0
 8002d22:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7fd ff22 	bl	8000b70 <__aeabi_fsub>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	4909      	ldr	r1, [pc, #36]	; (8002d54 <qFFMath_Log2+0xc8>)
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7fd ff1d 	bl	8000b70 <__aeabi_fsub>
 8002d36:	4603      	mov	r3, r0
 8002d38:	4619      	mov	r1, r3
 8002d3a:	6978      	ldr	r0, [r7, #20]
 8002d3c:	f7fd ff1a 	bl	8000b74 <__addsf3>
 8002d40:	4603      	mov	r3, r0
 8002d42:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 8002d44:	697b      	ldr	r3, [r7, #20]
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3718      	adds	r7, #24
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	beaaaaab 	.word	0xbeaaaaab
 8002d54:	3f2aaaab 	.word	0x3f2aaaab

08002d58 <qFFMath_Exp>:
/*============================================================================*/
float qFFMath_Exp( float x )
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
    return qFFMath_Exp2( QFFM_LOG2E*x );
 8002d60:	4906      	ldr	r1, [pc, #24]	; (8002d7c <qFFMath_Exp+0x24>)
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7fe f80e 	bl	8000d84 <__aeabi_fmul>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7ff ff24 	bl	8002bb8 <qFFMath_Exp2>
 8002d70:	4603      	mov	r3, r0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	3fb8aa3b 	.word	0x3fb8aa3b

08002d80 <qFFMath_Log>:
{
    return qFFMath_Exp2( 3.32192809f*x );
}
/*============================================================================*/
float qFFMath_Log( float x )
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
    return QFFM_LN2*qFFMath_Log2(x);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f7ff ff7f 	bl	8002c8c <qFFMath_Log2>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	4904      	ldr	r1, [pc, #16]	; (8002da4 <qFFMath_Log+0x24>)
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7fd fff6 	bl	8000d84 <__aeabi_fmul>
 8002d98:	4603      	mov	r3, r0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	3f317218 	.word	0x3f317218

08002da8 <qFFMath_Pow>:
    return 0.301029996f*qFFMath_Log2(x);
}
/*============================================================================*/
float qFFMath_Pow( float b,
                   float e )
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
    return qFFMath_Exp2( e*qFFMath_Log2( b ) );
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f7ff ff6a 	bl	8002c8c <qFFMath_Log2>
 8002db8:	4603      	mov	r3, r0
 8002dba:	6839      	ldr	r1, [r7, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7fd ffe1 	bl	8000d84 <__aeabi_fmul>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff fef7 	bl	8002bb8 <qFFMath_Exp2>
 8002dca:	4603      	mov	r3, r0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3708      	adds	r7, #8
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <qFIS_SetParameter>:

/*============================================================================*/
int qFIS_SetParameter( qFIS_t * const f,
                       const qFIS_Parameter_t p,
                       const qFIS_ParamValue_t x )
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	460b      	mov	r3, r1
 8002dde:	70fb      	strb	r3, [r7, #3]
 8002de0:	4613      	mov	r3, r2
 8002de2:	70bb      	strb	r3, [r7, #2]
    int retVal = 0;
 8002de4:	2300      	movs	r3, #0
 8002de6:	60fb      	str	r3, [r7, #12]
    typedef float (*methods_fcn)( const float a, const float b );
    static const methods_fcn method[ 5 ] = { &qFIS_Min, &qFIS_Prod, &qFIS_Max,
                                             &qFIS_ProbOR, &qFIS_Sum
                                           };

    if ( NULL != f ) {
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d04f      	beq.n	8002e8e <qFIS_SetParameter+0xba>
        switch ( p ) {
 8002dee:	78fb      	ldrb	r3, [r7, #3]
 8002df0:	2b04      	cmp	r3, #4
 8002df2:	d84e      	bhi.n	8002e92 <qFIS_SetParameter+0xbe>
 8002df4:	a201      	add	r2, pc, #4	; (adr r2, 8002dfc <qFIS_SetParameter+0x28>)
 8002df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dfa:	bf00      	nop
 8002dfc:	08002e11 	.word	0x08002e11
 8002e00:	08002e29 	.word	0x08002e29
 8002e04:	08002e47 	.word	0x08002e47
 8002e08:	08002e5f 	.word	0x08002e5f
 8002e0c:	08002e7d 	.word	0x08002e7d
            case qFIS_Implication:
                if ( x <= qFIS_PROD ) {
 8002e10:	78bb      	ldrb	r3, [r7, #2]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d83f      	bhi.n	8002e96 <qFIS_SetParameter+0xc2>
                    /*cppcheck-suppress misra-c2012-11.1 */
                    f->implicate = method[ x ];
 8002e16:	78bb      	ldrb	r3, [r7, #2]
 8002e18:	4a26      	ldr	r2, [pc, #152]	; (8002eb4 <qFIS_SetParameter+0xe0>)
 8002e1a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	619a      	str	r2, [r3, #24]
                    retVal = 1;
 8002e22:	2301      	movs	r3, #1
 8002e24:	60fb      	str	r3, [r7, #12]
                }
                break;
 8002e26:	e036      	b.n	8002e96 <qFIS_SetParameter+0xc2>
            case qFIS_Aggregation:
                if ( ( x >= qFIS_MAX ) && ( x <= qFIS_SUM ) ) {
 8002e28:	78bb      	ldrb	r3, [r7, #2]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d935      	bls.n	8002e9a <qFIS_SetParameter+0xc6>
 8002e2e:	78bb      	ldrb	r3, [r7, #2]
 8002e30:	2b04      	cmp	r3, #4
 8002e32:	d832      	bhi.n	8002e9a <qFIS_SetParameter+0xc6>
                    /*cppcheck-suppress misra-c2012-11.1 */
                    f->aggregate = method[ x ];
 8002e34:	78bb      	ldrb	r3, [r7, #2]
 8002e36:	4a1f      	ldr	r2, [pc, #124]	; (8002eb4 <qFIS_SetParameter+0xe0>)
 8002e38:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	61da      	str	r2, [r3, #28]
                    retVal = 1;
 8002e40:	2301      	movs	r3, #1
 8002e42:	60fb      	str	r3, [r7, #12]
                }
                break;
 8002e44:	e029      	b.n	8002e9a <qFIS_SetParameter+0xc6>
            case qFIS_AND:
                if ( x <= qFIS_PROD ) {
 8002e46:	78bb      	ldrb	r3, [r7, #2]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d828      	bhi.n	8002e9e <qFIS_SetParameter+0xca>
                    /*cppcheck-suppress misra-c2012-11.1 */
                    f->andOp = method[ x ];
 8002e4c:	78bb      	ldrb	r3, [r7, #2]
 8002e4e:	4a19      	ldr	r2, [pc, #100]	; (8002eb4 <qFIS_SetParameter+0xe0>)
 8002e50:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	611a      	str	r2, [r3, #16]
                    retVal = 1;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	60fb      	str	r3, [r7, #12]
                }
                break;
 8002e5c:	e01f      	b.n	8002e9e <qFIS_SetParameter+0xca>
            case qFIS_OR:
                if ( ( x >= qFIS_MAX ) && ( x <= qFIS_PROBOR ) ) {
 8002e5e:	78bb      	ldrb	r3, [r7, #2]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d91e      	bls.n	8002ea2 <qFIS_SetParameter+0xce>
 8002e64:	78bb      	ldrb	r3, [r7, #2]
 8002e66:	2b03      	cmp	r3, #3
 8002e68:	d81b      	bhi.n	8002ea2 <qFIS_SetParameter+0xce>
                    /*cppcheck-suppress misra-c2012-11.1 */
                    f->orOp = method[ x ];
 8002e6a:	78bb      	ldrb	r3, [r7, #2]
 8002e6c:	4a11      	ldr	r2, [pc, #68]	; (8002eb4 <qFIS_SetParameter+0xe0>)
 8002e6e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	615a      	str	r2, [r3, #20]
                    retVal = 1;
 8002e76:	2301      	movs	r3, #1
 8002e78:	60fb      	str	r3, [r7, #12]
                }
                break;
 8002e7a:	e012      	b.n	8002ea2 <qFIS_SetParameter+0xce>
            case qFIS_EvalPoints:
                if ( (int)x >= 20 ) {
 8002e7c:	78bb      	ldrb	r3, [r7, #2]
 8002e7e:	2b13      	cmp	r3, #19
 8002e80:	d911      	bls.n	8002ea6 <qFIS_SetParameter+0xd2>
                    f->nPoints = (size_t)x;
 8002e82:	78ba      	ldrb	r2, [r7, #2]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	64da      	str	r2, [r3, #76]	; 0x4c
                    retVal = 1;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	60fb      	str	r3, [r7, #12]
                }
                break;
 8002e8c:	e00b      	b.n	8002ea6 <qFIS_SetParameter+0xd2>
            default:
                break;
        }
    }
 8002e8e:	bf00      	nop
 8002e90:	e00a      	b.n	8002ea8 <qFIS_SetParameter+0xd4>
                break;
 8002e92:	bf00      	nop
 8002e94:	e008      	b.n	8002ea8 <qFIS_SetParameter+0xd4>
                break;
 8002e96:	bf00      	nop
 8002e98:	e006      	b.n	8002ea8 <qFIS_SetParameter+0xd4>
                break;
 8002e9a:	bf00      	nop
 8002e9c:	e004      	b.n	8002ea8 <qFIS_SetParameter+0xd4>
                break;
 8002e9e:	bf00      	nop
 8002ea0:	e002      	b.n	8002ea8 <qFIS_SetParameter+0xd4>
                break;
 8002ea2:	bf00      	nop
 8002ea4:	e000      	b.n	8002ea8 <qFIS_SetParameter+0xd4>
                break;
 8002ea6:	bf00      	nop

    return retVal;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3714      	adds	r7, #20
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bc80      	pop	{r7}
 8002eb2:	4770      	bx	lr
 8002eb4:	0800eeb0 	.word	0x0800eeb0

08002eb8 <qFIS_SetDeFuzzMethod>:
/*============================================================================*/
int qFIS_SetDeFuzzMethod( qFIS_t * const f,
                          qFIS_DeFuzz_Method_t m )
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	70fb      	strb	r3, [r7, #3]
    int retVal = 0;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	60fb      	str	r3, [r7, #12]
                                                            &qFIS_DeFuzz_SOM,
                                                            &qFIS_DeFuzz_WtAverage,
                                                            &qFIS_DeFuzz_WtSum
                                                          };

    if ( ( NULL != f ) || ( m < _NUM_DFUZZ ) ) {
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d102      	bne.n	8002ed4 <qFIS_SetDeFuzzMethod+0x1c>
 8002ece:	78fb      	ldrb	r3, [r7, #3]
 8002ed0:	2b06      	cmp	r3, #6
 8002ed2:	d822      	bhi.n	8002f1a <qFIS_SetDeFuzzMethod+0x62>
        if ( ( ( Mamdani == f->type ) && ( m <= som ) ) ||
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d102      	bne.n	8002ee4 <qFIS_SetDeFuzzMethod+0x2c>
 8002ede:	78fb      	ldrb	r3, [r7, #3]
 8002ee0:	2b04      	cmp	r3, #4
 8002ee2:	d912      	bls.n	8002f0a <qFIS_SetDeFuzzMethod+0x52>
             ( ( Sugeno == f->type ) && ( m >= wtaver ) && ( m <= wtsum ) ) ||
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
        if ( ( ( Mamdani == f->type ) && ( m <= som ) ) ||
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d105      	bne.n	8002efa <qFIS_SetDeFuzzMethod+0x42>
             ( ( Sugeno == f->type ) && ( m >= wtaver ) && ( m <= wtsum ) ) ||
 8002eee:	78fb      	ldrb	r3, [r7, #3]
 8002ef0:	2b04      	cmp	r3, #4
 8002ef2:	d902      	bls.n	8002efa <qFIS_SetDeFuzzMethod+0x42>
 8002ef4:	78fb      	ldrb	r3, [r7, #3]
 8002ef6:	2b06      	cmp	r3, #6
 8002ef8:	d907      	bls.n	8002f0a <qFIS_SetDeFuzzMethod+0x52>
             ( ( Tsukamoto == f->type ) && ( wtaver == m ) )) {
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
             ( ( Sugeno == f->type ) && ( m >= wtaver ) && ( m <= wtsum ) ) ||
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d10a      	bne.n	8002f1a <qFIS_SetDeFuzzMethod+0x62>
             ( ( Tsukamoto == f->type ) && ( wtaver == m ) )) {
 8002f04:	78fb      	ldrb	r3, [r7, #3]
 8002f06:	2b05      	cmp	r3, #5
 8002f08:	d107      	bne.n	8002f1a <qFIS_SetDeFuzzMethod+0x62>
            /*cppcheck-suppress misra-c2012-11.1 */
            f->deFuzz = method[ m ];
 8002f0a:	78fb      	ldrb	r3, [r7, #3]
 8002f0c:	4a06      	ldr	r2, [pc, #24]	; (8002f28 <qFIS_SetDeFuzzMethod+0x70>)
 8002f0e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	629a      	str	r2, [r3, #40]	; 0x28
            retVal = 1;
 8002f16:	2301      	movs	r3, #1
 8002f18:	60fb      	str	r3, [r7, #12]
        }
    }
    return retVal;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3714      	adds	r7, #20
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bc80      	pop	{r7}
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	0800eec4 	.word	0x0800eec4

08002f2c <qFIS_Setup>:
                qFIS_MF_t *const mf_outputs,
                const size_t nmo,
                const qFIS_Rules_t * const r,
                float *wi,
                const size_t n )
{
 8002f2c:	b5b0      	push	{r4, r5, r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	607a      	str	r2, [r7, #4]
 8002f36:	603b      	str	r3, [r7, #0]
 8002f38:	460b      	mov	r3, r1
 8002f3a:	72fb      	strb	r3, [r7, #11]
    int retVal = 0;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	617b      	str	r3, [r7, #20]

    if ( ( NULL != f ) && ( t <= Tsukamoto ) && ( NULL != r ) && ( NULL != wi ) ) {
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f000 80bb 	beq.w	80030be <qFIS_Setup+0x192>
 8002f48:	7afb      	ldrb	r3, [r7, #11]
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	f200 80b7 	bhi.w	80030be <qFIS_Setup+0x192>
 8002f50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f000 80b3 	beq.w	80030be <qFIS_Setup+0x192>
 8002f58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 80af 	beq.w	80030be <qFIS_Setup+0x192>
        size_t i;

        f->nInputs = ni/sizeof(qFIS_Input_t);
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	4a59      	ldr	r2, [pc, #356]	; (80030c8 <qFIS_Setup+0x19c>)
 8002f64:	fba2 2303 	umull	r2, r3, r2, r3
 8002f68:	08da      	lsrs	r2, r3, #3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	63da      	str	r2, [r3, #60]	; 0x3c
        f->nOutputs = no/sizeof(qFIS_Output_t);
 8002f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f70:	4a56      	ldr	r2, [pc, #344]	; (80030cc <qFIS_Setup+0x1a0>)
 8002f72:	fba2 2303 	umull	r2, r3, r2, r3
 8002f76:	091a      	lsrs	r2, r3, #4
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	641a      	str	r2, [r3, #64]	; 0x40
        f->nMFInputs = nmi/sizeof(qFIS_MF_t);
 8002f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f7e:	4a54      	ldr	r2, [pc, #336]	; (80030d0 <qFIS_Setup+0x1a4>)
 8002f80:	fba2 2303 	umull	r2, r3, r2, r3
 8002f84:	091a      	lsrs	r2, r3, #4
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	645a      	str	r2, [r3, #68]	; 0x44
        f->nMFOutputs = nmo/sizeof(qFIS_MF_t);
 8002f8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f8c:	4a50      	ldr	r2, [pc, #320]	; (80030d0 <qFIS_Setup+0x1a4>)
 8002f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f92:	091a      	lsrs	r2, r3, #4
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	649a      	str	r2, [r3, #72]	; 0x48
        f->input = inputs;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	601a      	str	r2, [r3, #0]
        f->output = outputs;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fa2:	605a      	str	r2, [r3, #4]
        f->inMF = mf_inputs;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fa8:	609a      	str	r2, [r3, #8]
        f->outMF = mf_outputs;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fae:	60da      	str	r2, [r3, #12]
        f->wi = wi;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002fb4:	631a      	str	r2, [r3, #48]	; 0x30
        f->rules = r;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002fba:	635a      	str	r2, [r3, #52]	; 0x34
        f->nRules = n;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fc0:	651a      	str	r2, [r3, #80]	; 0x50
        f->type = t;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	7afa      	ldrb	r2, [r7, #11]
 8002fc6:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
        retVal += qFIS_SetParameter( f, qFIS_EvalPoints, (qFIS_ParamValue_t)100 );
 8002fca:	2264      	movs	r2, #100	; 0x64
 8002fcc:	2104      	movs	r1, #4
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f7ff ff00 	bl	8002dd4 <qFIS_SetParameter>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	4413      	add	r3, r2
 8002fda:	617b      	str	r3, [r7, #20]
        retVal += qFIS_SetParameter( f, qFIS_AND, qFIS_MIN );
 8002fdc:	2200      	movs	r2, #0
 8002fde:	2102      	movs	r1, #2
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f7ff fef7 	bl	8002dd4 <qFIS_SetParameter>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	4413      	add	r3, r2
 8002fec:	617b      	str	r3, [r7, #20]
        retVal += qFIS_SetParameter( f, qFIS_OR, qFIS_MAX );
 8002fee:	2202      	movs	r2, #2
 8002ff0:	2103      	movs	r1, #3
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f7ff feee 	bl	8002dd4 <qFIS_SetParameter>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	617b      	str	r3, [r7, #20]
        retVal += qFIS_SetParameter( f, qFIS_Implication, qFIS_MIN );
 8003000:	2200      	movs	r2, #0
 8003002:	2100      	movs	r1, #0
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f7ff fee5 	bl	8002dd4 <qFIS_SetParameter>
 800300a:	4602      	mov	r2, r0
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	4413      	add	r3, r2
 8003010:	617b      	str	r3, [r7, #20]
        retVal += qFIS_SetParameter( f, qFIS_Aggregation, qFIS_MAX );
 8003012:	2202      	movs	r2, #2
 8003014:	2101      	movs	r1, #1
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f7ff fedc 	bl	8002dd4 <qFIS_SetParameter>
 800301c:	4602      	mov	r2, r0
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	4413      	add	r3, r2
 8003022:	617b      	str	r3, [r7, #20]
        /*cppcheck-suppress misra-c2012-10.6 */
        retVal = ( 5 == retVal ) ? 1 : 0;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	2b05      	cmp	r3, #5
 8003028:	bf0c      	ite	eq
 800302a:	2301      	moveq	r3, #1
 800302c:	2300      	movne	r3, #0
 800302e:	b2db      	uxtb	r3, r3
 8003030:	617b      	str	r3, [r7, #20]
        f->deFuzz = ( Mamdani == t ) ? &qFIS_DeFuzz_Centroid
                                     : &qFIS_DeFuzz_WtAverage;
 8003032:	7afb      	ldrb	r3, [r7, #11]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d101      	bne.n	800303c <qFIS_Setup+0x110>
 8003038:	4a26      	ldr	r2, [pc, #152]	; (80030d4 <qFIS_Setup+0x1a8>)
 800303a:	e000      	b.n	800303e <qFIS_Setup+0x112>
 800303c:	4a26      	ldr	r2, [pc, #152]	; (80030d8 <qFIS_Setup+0x1ac>)
        f->deFuzz = ( Mamdani == t ) ? &qFIS_DeFuzz_Centroid
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	629a      	str	r2, [r3, #40]	; 0x28
        f->ruleWeight = NULL;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	62da      	str	r2, [r3, #44]	; 0x2c
        for ( i = 0u ; i < f->nOutputs ; ++i ) {
 8003048:	2300      	movs	r3, #0
 800304a:	613b      	str	r3, [r7, #16]
 800304c:	e032      	b.n	80030b4 <qFIS_Setup+0x188>
            /*cstat -CERT-FLP36-C*/
            f->output[ i ].res = ( f->output[ i ].b.max - f->output[ i ].b.min )/(float)f->nPoints;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	685a      	ldr	r2, [r3, #4]
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	2134      	movs	r1, #52	; 0x34
 8003056:	fb01 f303 	mul.w	r3, r1, r3
 800305a:	4413      	add	r3, r2
 800305c:	6858      	ldr	r0, [r3, #4]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	2134      	movs	r1, #52	; 0x34
 8003066:	fb01 f303 	mul.w	r3, r1, r3
 800306a:	4413      	add	r3, r2
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4619      	mov	r1, r3
 8003070:	f7fd fd7e 	bl	8000b70 <__aeabi_fsub>
 8003074:	4603      	mov	r3, r0
 8003076:	461d      	mov	r5, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800307c:	4618      	mov	r0, r3
 800307e:	f7fd fe29 	bl	8000cd4 <__aeabi_ui2f>
 8003082:	4601      	mov	r1, r0
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	2034      	movs	r0, #52	; 0x34
 800308c:	fb00 f303 	mul.w	r3, r0, r3
 8003090:	18d4      	adds	r4, r2, r3
 8003092:	4628      	mov	r0, r5
 8003094:	f7fd ff2a 	bl	8000eec <__aeabi_fdiv>
 8003098:	4603      	mov	r3, r0
 800309a:	61a3      	str	r3, [r4, #24]
            /*cstat +CERT-FLP36-C*/
            f->output[ i ].owner = f;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	2134      	movs	r1, #52	; 0x34
 80030a4:	fb01 f303 	mul.w	r3, r1, r3
 80030a8:	4413      	add	r3, r2
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	60da      	str	r2, [r3, #12]
        for ( i = 0u ; i < f->nOutputs ; ++i ) {
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	3301      	adds	r3, #1
 80030b2:	613b      	str	r3, [r7, #16]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d3c7      	bcc.n	800304e <qFIS_Setup+0x122>
        }
    }

    return retVal;
 80030be:	697b      	ldr	r3, [r7, #20]
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3718      	adds	r7, #24
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bdb0      	pop	{r4, r5, r7, pc}
 80030c8:	aaaaaaab 	.word	0xaaaaaaab
 80030cc:	4ec4ec4f 	.word	0x4ec4ec4f
 80030d0:	cccccccd 	.word	0xcccccccd
 80030d4:	08003955 	.word	0x08003955
 80030d8:	08003cc9 	.word	0x08003cc9

080030dc <qFIS_InputSetup>:
/*============================================================================*/
int qFIS_InputSetup( qFIS_Input_t * const v,
                     const qFIS_Tag_t t,
                     const float min,
                     const float max )
{
 80030dc:	b480      	push	{r7}
 80030de:	b087      	sub	sp, #28
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
 80030e8:	603b      	str	r3, [r7, #0]
    int retVal = 0;
 80030ea:	2300      	movs	r3, #0
 80030ec:	617b      	str	r3, [r7, #20]

    if ( ( NULL != v ) && ( t >= 0 ) ) {
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d018      	beq.n	8003126 <qFIS_InputSetup+0x4a>
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	db15      	blt.n	8003126 <qFIS_InputSetup+0x4a>
        v[ t ].b.min = min;
 80030fa:	68ba      	ldr	r2, [r7, #8]
 80030fc:	4613      	mov	r3, r2
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	4413      	add	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	461a      	mov	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	4413      	add	r3, r2
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	601a      	str	r2, [r3, #0]
        v[ t ].b.max = max;
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	4613      	mov	r3, r2
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	4413      	add	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	461a      	mov	r2, r3
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	4413      	add	r3, r2
 800311e:	683a      	ldr	r2, [r7, #0]
 8003120:	605a      	str	r2, [r3, #4]
        retVal = 1;
 8003122:	2301      	movs	r3, #1
 8003124:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 8003126:	697b      	ldr	r3, [r7, #20]
}
 8003128:	4618      	mov	r0, r3
 800312a:	371c      	adds	r7, #28
 800312c:	46bd      	mov	sp, r7
 800312e:	bc80      	pop	{r7}
 8003130:	4770      	bx	lr

08003132 <qFIS_OutputSetup>:
/*============================================================================*/
int qFIS_OutputSetup( qFIS_Output_t * const v,
                      const qFIS_Tag_t t,
                      const float min,
                      const float max )
{
 8003132:	b480      	push	{r7}
 8003134:	b087      	sub	sp, #28
 8003136:	af00      	add	r7, sp, #0
 8003138:	60f8      	str	r0, [r7, #12]
 800313a:	60b9      	str	r1, [r7, #8]
 800313c:	607a      	str	r2, [r7, #4]
 800313e:	603b      	str	r3, [r7, #0]
    int retVal = 0;
 8003140:	2300      	movs	r3, #0
 8003142:	617b      	str	r3, [r7, #20]

    if ( ( NULL != v ) && ( t >= 0 ) ) {
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d05a      	beq.n	8003200 <qFIS_OutputSetup+0xce>
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	2b00      	cmp	r3, #0
 800314e:	db57      	blt.n	8003200 <qFIS_OutputSetup+0xce>
        v[ t ].data[ 0 ] = 0.0f;
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	2234      	movs	r2, #52	; 0x34
 8003154:	fb02 f303 	mul.w	r3, r2, r3
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	4413      	add	r3, r2
 800315c:	f04f 0200 	mov.w	r2, #0
 8003160:	625a      	str	r2, [r3, #36]	; 0x24
        v[ t ].data[ 1 ] = 0.0f;
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	2234      	movs	r2, #52	; 0x34
 8003166:	fb02 f303 	mul.w	r3, r2, r3
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	4413      	add	r3, r2
 800316e:	f04f 0200 	mov.w	r2, #0
 8003172:	629a      	str	r2, [r3, #40]	; 0x28
        v[ t ].data[ 2 ] = 0.0f;
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	2234      	movs	r2, #52	; 0x34
 8003178:	fb02 f303 	mul.w	r3, r2, r3
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	4413      	add	r3, r2
 8003180:	f04f 0200 	mov.w	r2, #0
 8003184:	62da      	str	r2, [r3, #44]	; 0x2c
        v[ t ].data[ 3 ] = 0.0f;
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	2234      	movs	r2, #52	; 0x34
 800318a:	fb02 f303 	mul.w	r3, r2, r3
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	4413      	add	r3, r2
 8003192:	f04f 0200 	mov.w	r2, #0
 8003196:	631a      	str	r2, [r3, #48]	; 0x30
        v[ t ].x = 0.0f;
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	2234      	movs	r2, #52	; 0x34
 800319c:	fb02 f303 	mul.w	r3, r2, r3
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	4413      	add	r3, r2
 80031a4:	f04f 0200 	mov.w	r2, #0
 80031a8:	61da      	str	r2, [r3, #28]
        v[ t ].y = 0.0f;
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	2234      	movs	r2, #52	; 0x34
 80031ae:	fb02 f303 	mul.w	r3, r2, r3
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	4413      	add	r3, r2
 80031b6:	f04f 0200 	mov.w	r2, #0
 80031ba:	621a      	str	r2, [r3, #32]
        v[ t ].b.min = min;
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	2234      	movs	r2, #52	; 0x34
 80031c0:	fb02 f303 	mul.w	r3, r2, r3
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	4413      	add	r3, r2
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	601a      	str	r2, [r3, #0]
        v[ t ].b.max = max;
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	2234      	movs	r2, #52	; 0x34
 80031d0:	fb02 f303 	mul.w	r3, r2, r3
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	4413      	add	r3, r2
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	605a      	str	r2, [r3, #4]
        v[ t ].xag = NULL;
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	2234      	movs	r2, #52	; 0x34
 80031e0:	fb02 f303 	mul.w	r3, r2, r3
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	4413      	add	r3, r2
 80031e8:	2200      	movs	r2, #0
 80031ea:	611a      	str	r2, [r3, #16]
        v[ t ].yag = NULL;
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	2234      	movs	r2, #52	; 0x34
 80031f0:	fb02 f303 	mul.w	r3, r2, r3
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	4413      	add	r3, r2
 80031f8:	2200      	movs	r2, #0
 80031fa:	615a      	str	r2, [r3, #20]
        retVal = 1;
 80031fc:	2301      	movs	r3, #1
 80031fe:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 8003200:	697b      	ldr	r3, [r7, #20]
}
 8003202:	4618      	mov	r0, r3
 8003204:	371c      	adds	r7, #28
 8003206:	46bd      	mov	sp, r7
 8003208:	bc80      	pop	{r7}
 800320a:	4770      	bx	lr

0800320c <qFIS_SetInput>:
/*============================================================================*/
int qFIS_SetInput( qFIS_Input_t * const v,
                   const qFIS_Tag_t t,
                   const float value )
{
 800320c:	b480      	push	{r7}
 800320e:	b087      	sub	sp, #28
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
    int retVal = 0;
 8003218:	2300      	movs	r3, #0
 800321a:	617b      	str	r3, [r7, #20]

    if ( ( NULL != v ) && ( t >= 0 ) ) {
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00e      	beq.n	8003240 <qFIS_SetInput+0x34>
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	2b00      	cmp	r3, #0
 8003226:	db0b      	blt.n	8003240 <qFIS_SetInput+0x34>
        v[ t ].b.value = value;
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	4613      	mov	r3, r2
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	4413      	add	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	461a      	mov	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	4413      	add	r3, r2
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	609a      	str	r2, [r3, #8]
        retVal = 1;
 800323c:	2301      	movs	r3, #1
 800323e:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 8003240:	697b      	ldr	r3, [r7, #20]
}
 8003242:	4618      	mov	r0, r3
 8003244:	371c      	adds	r7, #28
 8003246:	46bd      	mov	sp, r7
 8003248:	bc80      	pop	{r7}
 800324a:	4770      	bx	lr

0800324c <qFIS_GetOutput>:
/*============================================================================*/
float qFIS_GetOutput( const qFIS_Output_t * const v,
                      const qFIS_Tag_t t )
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
    float retVal = 0.0f;
 8003256:	f04f 0300 	mov.w	r3, #0
 800325a:	60fb      	str	r3, [r7, #12]

    if ( ( NULL != v ) && ( t >= 0 ) ) {
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00a      	beq.n	8003278 <qFIS_GetOutput+0x2c>
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	db07      	blt.n	8003278 <qFIS_GetOutput+0x2c>
        retVal = v[ t ].b.value;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	2234      	movs	r2, #52	; 0x34
 800326c:	fb02 f303 	mul.w	r3, r2, r3
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	4413      	add	r3, r2
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	60fb      	str	r3, [r7, #12]
    }

    return retVal;
 8003278:	68fb      	ldr	r3, [r7, #12]
}
 800327a:	4618      	mov	r0, r3
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	bc80      	pop	{r7}
 8003282:	4770      	bx	lr

08003284 <qFIS_SetMF>:
                const qFIS_Tag_t mf,
                const qFIS_MF_Name_t s,
                qFIS_MF_Fcn_t custom_mf,
                const float *cp,
                float h )
{
 8003284:	b590      	push	{r4, r7, lr}
 8003286:	b087      	sub	sp, #28
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
 8003290:	70fb      	strb	r3, [r7, #3]
    int retVal = 0;
 8003292:	2300      	movs	r3, #0
 8003294:	617b      	str	r3, [r7, #20]
    /* Only for Tsukamoto consequents*/
    &qFIS_TLinSMF, &qFIS_TLinZMF, &qFIS_TConcaveMF,&qFIS_TSigMF, &qFIS_TSMF,
    &qFIS_TZMF
    };

    if ( ( NULL != m ) && ( io >= 0 ) && ( mf >= 0 ) && ( s < _NUM_MFS ) ) {
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d055      	beq.n	8003348 <qFIS_SetMF+0xc4>
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	db52      	blt.n	8003348 <qFIS_SetMF+0xc4>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	db4f      	blt.n	8003348 <qFIS_SetMF+0xc4>
 80032a8:	78fb      	ldrb	r3, [r7, #3]
 80032aa:	2b1a      	cmp	r3, #26
 80032ac:	d84c      	bhi.n	8003348 <qFIS_SetMF+0xc4>
        if ( NULL != custom_mf ) {
 80032ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00a      	beq.n	80032ca <qFIS_SetMF+0x46>
            m[ mf ].shape = custom_mf; /*user-defined membership function*/
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	4613      	mov	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	4413      	add	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	461a      	mov	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	4413      	add	r3, r2
 80032c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	e00c      	b.n	80032e4 <qFIS_SetMF+0x60>
        }
        else {
            /*cppcheck-suppress misra-c2012-11.1 */
            m[ mf ].shape = fShape[ s ];
 80032ca:	78f9      	ldrb	r1, [r7, #3]
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	4613      	mov	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4413      	add	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	461a      	mov	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	4413      	add	r3, r2
 80032dc:	4a1d      	ldr	r2, [pc, #116]	; (8003354 <qFIS_SetMF+0xd0>)
 80032de:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80032e2:	601a      	str	r2, [r3, #0]
        }
        m[ mf ].index = (size_t)io;
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	4613      	mov	r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	4413      	add	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	461a      	mov	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	4413      	add	r3, r2
 80032f4:	68ba      	ldr	r2, [r7, #8]
 80032f6:	611a      	str	r2, [r3, #16]
        m[ mf ].points = cp;
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	4613      	mov	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	4413      	add	r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	461a      	mov	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	4413      	add	r3, r2
 8003308:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800330a:	605a      	str	r2, [r3, #4]
        m[ mf ].fx = 0.0f;
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	4613      	mov	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4413      	add	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	461a      	mov	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	4413      	add	r3, r2
 800331c:	f04f 0200 	mov.w	r2, #0
 8003320:	609a      	str	r2, [r3, #8]
        m[ mf ].h = qFIS_Bound( h, 0.0f, 1.0f );
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	4613      	mov	r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	4413      	add	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	461a      	mov	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	189c      	adds	r4, r3, r2
 8003332:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003336:	f04f 0100 	mov.w	r1, #0
 800333a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800333c:	f001 fe6d 	bl	800501a <qFIS_Bound>
 8003340:	4603      	mov	r3, r0
 8003342:	60e3      	str	r3, [r4, #12]
        retVal = 1;
 8003344:	2301      	movs	r3, #1
 8003346:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 8003348:	697b      	ldr	r3, [r7, #20]
}
 800334a:	4618      	mov	r0, r3
 800334c:	371c      	adds	r7, #28
 800334e:	46bd      	mov	sp, r7
 8003350:	bd90      	pop	{r4, r7, pc}
 8003352:	bf00      	nop
 8003354:	0800eee0 	.word	0x0800eee0

08003358 <qFIS_EvalInputMFs>:

    return retVal;
}
/*============================================================================*/
static void qFIS_EvalInputMFs( qFIS_t * const f )
{
 8003358:	b5b0      	push	{r4, r5, r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
    size_t i;
    qFIS_MF_t *mf;

    for ( i = 0 ; i < f->nMFInputs ; ++i ) {
 8003360:	2300      	movs	r3, #0
 8003362:	60fb      	str	r3, [r7, #12]
 8003364:	e026      	b.n	80033b4 <qFIS_EvalInputMFs+0x5c>
        mf = &f->inMF[ i ];
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6899      	ldr	r1, [r3, #8]
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	4613      	mov	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4413      	add	r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	440b      	add	r3, r1
 8003376:	60bb      	str	r3, [r7, #8]
        /*cstat -MISRAC2012-Rule-11.3 -CERT-EXP39-C_d*/
        /*cppcheck-suppress misra-c2012-11.3 */
        mf->fx = mf->h*mf->shape( (qFIS_IO_Base_t*)&f->input[ mf->index ],
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	68dd      	ldr	r5, [r3, #12]
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	681c      	ldr	r4, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6819      	ldr	r1, [r3, #0]
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	691a      	ldr	r2, [r3, #16]
 8003388:	4613      	mov	r3, r2
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	4413      	add	r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	18c8      	adds	r0, r1, r3
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	4619      	mov	r1, r3
 800339a:	47a0      	blx	r4
 800339c:	4603      	mov	r3, r0
 800339e:	4619      	mov	r1, r3
 80033a0:	4628      	mov	r0, r5
 80033a2:	f7fd fcef 	bl	8000d84 <__aeabi_fmul>
 80033a6:	4603      	mov	r3, r0
 80033a8:	461a      	mov	r2, r3
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	609a      	str	r2, [r3, #8]
    for ( i = 0 ; i < f->nMFInputs ; ++i ) {
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	3301      	adds	r3, #1
 80033b2:	60fb      	str	r3, [r7, #12]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d3d3      	bcc.n	8003366 <qFIS_EvalInputMFs+0xe>
                                  mf->points,
                                  1u );
        /*cstat +MISRAC2012-Rule-11.3 +CERT-EXP39-C_d*/
    }
}
 80033be:	bf00      	nop
 80033c0:	bf00      	nop
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bdb0      	pop	{r4, r5, r7, pc}

080033c8 <qFIS_TruncateInputs>:
/*============================================================================*/
static void qFIS_TruncateInputs( qFIS_t * const f )
{
 80033c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
    size_t i;

    for ( i = 0 ; i < f->nInputs ; ++i ) {
 80033d0:	2300      	movs	r3, #0
 80033d2:	60fb      	str	r3, [r7, #12]
 80033d4:	e02b      	b.n	800342e <qFIS_TruncateInputs+0x66>
        f->input[ i ].b.value = qFIS_Bound( f->input[ i ].b.value,
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6819      	ldr	r1, [r3, #0]
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	4613      	mov	r3, r2
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	4413      	add	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	440b      	add	r3, r1
 80033e6:	6898      	ldr	r0, [r3, #8]
                                            f->input[ i ].b.min,
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6819      	ldr	r1, [r3, #0]
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	4613      	mov	r3, r2
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	4413      	add	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	440b      	add	r3, r1
        f->input[ i ].b.value = qFIS_Bound( f->input[ i ].b.value,
 80033f8:	681d      	ldr	r5, [r3, #0]
                                            f->input[ i ].b.max );
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6819      	ldr	r1, [r3, #0]
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	4613      	mov	r3, r2
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	4413      	add	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
        f->input[ i ].b.value = qFIS_Bound( f->input[ i ].b.value,
 800340a:	685e      	ldr	r6, [r3, #4]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6819      	ldr	r1, [r3, #0]
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	4613      	mov	r3, r2
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	4413      	add	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	18cc      	adds	r4, r1, r3
 800341c:	4632      	mov	r2, r6
 800341e:	4629      	mov	r1, r5
 8003420:	f001 fdfb 	bl	800501a <qFIS_Bound>
 8003424:	4603      	mov	r3, r0
 8003426:	60a3      	str	r3, [r4, #8]
    for ( i = 0 ; i < f->nInputs ; ++i ) {
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	3301      	adds	r3, #1
 800342c:	60fb      	str	r3, [r7, #12]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	429a      	cmp	r2, r3
 8003436:	d3ce      	bcc.n	80033d6 <qFIS_TruncateInputs+0xe>
    }
}
 8003438:	bf00      	nop
 800343a:	bf00      	nop
 800343c:	3714      	adds	r7, #20
 800343e:	46bd      	mov	sp, r7
 8003440:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003442 <qFIS_Fuzzify>:
/*============================================================================*/
int qFIS_Fuzzify( qFIS_t * const f )
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b084      	sub	sp, #16
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
    int retVal = 0;
 800344a:	2300      	movs	r3, #0
 800344c:	60fb      	str	r3, [r7, #12]

    if ( NULL != f ) {
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d007      	beq.n	8003464 <qFIS_Fuzzify+0x22>
        qFIS_TruncateInputs( f );
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f7ff ffb7 	bl	80033c8 <qFIS_TruncateInputs>
        qFIS_EvalInputMFs( f );
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f7ff ff7c 	bl	8003358 <qFIS_EvalInputMFs>
        retVal = 1;
 8003460:	2301      	movs	r3, #1
 8003462:	60fb      	str	r3, [r7, #12]
    }

    return retVal;
 8003464:	68fb      	ldr	r3, [r7, #12]
}
 8003466:	4618      	mov	r0, r3
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <qFIS_ParseFuzzValue>:
/*============================================================================*/
static float qFIS_ParseFuzzValue( qFIS_MF_t * const mfIO,
                                  qFIS_Rules_t index )
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b084      	sub	sp, #16
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
 8003476:	460b      	mov	r3, r1
 8003478:	807b      	strh	r3, [r7, #2]
    uint8_t neg = ( index < 0 ) ? 1u : 0u ;
 800347a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800347e:	13db      	asrs	r3, r3, #15
 8003480:	b21b      	sxth	r3, r3
 8003482:	b2db      	uxtb	r3, r3
 8003484:	f003 0301 	and.w	r3, r3, #1
 8003488:	73fb      	strb	r3, [r7, #15]
    float y;

    if ( 0u != neg ) {
 800348a:	7bfb      	ldrb	r3, [r7, #15]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d003      	beq.n	8003498 <qFIS_ParseFuzzValue+0x2a>
        index = -index;
 8003490:	887b      	ldrh	r3, [r7, #2]
 8003492:	425b      	negs	r3, r3
 8003494:	b29b      	uxth	r3, r3
 8003496:	807b      	strh	r3, [r7, #2]
    }
    /*cstat -CERT-INT32-C_a*/
    y = qFIS_Bound( mfIO[ index - 1 ].fx, 0.0f, 1.0f );
 8003498:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800349c:	4613      	mov	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4413      	add	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	3b14      	subs	r3, #20
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	4413      	add	r3, r2
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80034b0:	f04f 0100 	mov.w	r1, #0
 80034b4:	4618      	mov	r0, r3
 80034b6:	f001 fdb0 	bl	800501a <qFIS_Bound>
 80034ba:	60b8      	str	r0, [r7, #8]
    /*cstat +CERT-INT32-C_a*/
    /*cppcheck-suppress misra-c2012-12.1 */
    y = ( 0u != neg ) ? ( 1.0f - y ) : y ;
 80034bc:	7bfb      	ldrb	r3, [r7, #15]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d006      	beq.n	80034d0 <qFIS_ParseFuzzValue+0x62>
 80034c2:	68b9      	ldr	r1, [r7, #8]
 80034c4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80034c8:	f7fd fb52 	bl	8000b70 <__aeabi_fsub>
 80034cc:	4603      	mov	r3, r0
 80034ce:	e000      	b.n	80034d2 <qFIS_ParseFuzzValue+0x64>
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	60bb      	str	r3, [r7, #8]

    return y;
 80034d4:	68bb      	ldr	r3, [r7, #8]
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3710      	adds	r7, #16
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
	...

080034e0 <qFIS_GetFuzzOperator>:
/*============================================================================*/
static qFIS_FuzzyOperator_t qFIS_GetFuzzOperator( const qFIS_t * const f )
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
    qFIS_FuzzyOperator_t oper;

    switch ( f->lastConnector ) {
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 80034ee:	4a0c      	ldr	r2, [pc, #48]	; (8003520 <qFIS_GetFuzzOperator+0x40>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d003      	beq.n	80034fc <qFIS_GetFuzzOperator+0x1c>
 80034f4:	4a0b      	ldr	r2, [pc, #44]	; (8003524 <qFIS_GetFuzzOperator+0x44>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d004      	beq.n	8003504 <qFIS_GetFuzzOperator+0x24>
 80034fa:	e007      	b.n	800350c <qFIS_GetFuzzOperator+0x2c>
        case _QFIS_AND:
            oper = f->andOp;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	691b      	ldr	r3, [r3, #16]
 8003500:	60fb      	str	r3, [r7, #12]
            break;
 8003502:	e006      	b.n	8003512 <qFIS_GetFuzzOperator+0x32>
        case _QFIS_OR:
            oper = f->orOp;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	60fb      	str	r3, [r7, #12]
            break;
 800350a:	e002      	b.n	8003512 <qFIS_GetFuzzOperator+0x32>
        default: 
            oper = &qFIS_Sum;
 800350c:	4b06      	ldr	r3, [pc, #24]	; (8003528 <qFIS_GetFuzzOperator+0x48>)
 800350e:	60fb      	str	r3, [r7, #12]
            break;
 8003510:	bf00      	nop
    }

    return oper;
 8003512:	68fb      	ldr	r3, [r7, #12]
}
 8003514:	4618      	mov	r0, r3
 8003516:	3714      	adds	r7, #20
 8003518:	46bd      	mov	sp, r7
 800351a:	bc80      	pop	{r7}
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	ffff8002 	.word	0xffff8002
 8003524:	ffff8003 	.word	0xffff8003
 8003528:	08004fef 	.word	0x08004fef

0800352c <qFIS_InferenceAntecedent>:
/*============================================================================*/
static size_t qFIS_InferenceAntecedent( struct _qFIS_s * const f,
                                        size_t i )
{
 800352c:	b590      	push	{r4, r7, lr}
 800352e:	b087      	sub	sp, #28
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
    int16_t inIndex, MFInIndex, connector;
    qFIS_FuzzyOperator_t op;
    /*cstat -CERT-INT30-C_a*/
    inIndex = f->rules[ i ];
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	4413      	add	r3, r2
 8003540:	881b      	ldrh	r3, [r3, #0]
 8003542:	82fb      	strh	r3, [r7, #22]
    MFInIndex = f->rules[ i + 1u ];
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	3301      	adds	r3, #1
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	4413      	add	r3, r2
 8003550:	881b      	ldrh	r3, [r3, #0]
 8003552:	82bb      	strh	r3, [r7, #20]
    connector = f->rules[ i + 2u ];
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	3302      	adds	r3, #2
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	4413      	add	r3, r2
 8003560:	881b      	ldrh	r3, [r3, #0]
 8003562:	827b      	strh	r3, [r7, #18]
    /*cstat -CERT-INT30-C_a*/
    op = qFIS_GetFuzzOperator( f );
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f7ff ffbb 	bl	80034e0 <qFIS_GetFuzzOperator>
 800356a:	60f8      	str	r0, [r7, #12]
    f->rStrength = op( f->rStrength, qFIS_ParseFuzzValue( f->inMF, MFInIndex ) );
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003578:	4611      	mov	r1, r2
 800357a:	4618      	mov	r0, r3
 800357c:	f7ff ff77 	bl	800346e <qFIS_ParseFuzzValue>
 8003580:	4602      	mov	r2, r0
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	4611      	mov	r1, r2
 8003586:	4620      	mov	r0, r4
 8003588:	4798      	blx	r3
 800358a:	4602      	mov	r2, r0
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	659a      	str	r2, [r3, #88]	; 0x58

    if ( ( inIndex < 0 ) || ( (size_t)inIndex > f->nInputs ) ) {
 8003590:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003594:	2b00      	cmp	r3, #0
 8003596:	db05      	blt.n	80035a4 <qFIS_InferenceAntecedent+0x78>
 8003598:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d902      	bls.n	80035aa <qFIS_InferenceAntecedent+0x7e>
        i = QFIS_INFERENCE_ERROR;
 80035a4:	2300      	movs	r3, #0
 80035a6:	603b      	str	r3, [r7, #0]
 80035a8:	e022      	b.n	80035f0 <qFIS_InferenceAntecedent+0xc4>
    }
    else {
        if ( ( _QFIS_AND == connector ) || ( _QFIS_OR == connector ) ) {
 80035aa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80035ae:	4a13      	ldr	r2, [pc, #76]	; (80035fc <qFIS_InferenceAntecedent+0xd0>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d004      	beq.n	80035be <qFIS_InferenceAntecedent+0x92>
 80035b4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80035b8:	4a11      	ldr	r2, [pc, #68]	; (8003600 <qFIS_InferenceAntecedent+0xd4>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d10a      	bne.n	80035d4 <qFIS_InferenceAntecedent+0xa8>
            f->lastConnector = connector;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	8a7a      	ldrh	r2, [r7, #18]
 80035c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
            f->inferenceState = &qFIS_InferenceAntecedent;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a0e      	ldr	r2, [pc, #56]	; (8003604 <qFIS_InferenceAntecedent+0xd8>)
 80035ca:	621a      	str	r2, [r3, #32]
            i += 2u;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	3302      	adds	r3, #2
 80035d0:	603b      	str	r3, [r7, #0]
 80035d2:	e00d      	b.n	80035f0 <qFIS_InferenceAntecedent+0xc4>
        }
        else if ( _QFIS_THEN == connector ) {
 80035d4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80035d8:	4a0b      	ldr	r2, [pc, #44]	; (8003608 <qFIS_InferenceAntecedent+0xdc>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d106      	bne.n	80035ec <qFIS_InferenceAntecedent+0xc0>
            f->inferenceState = &qFIS_InferenceReachEnd;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a0a      	ldr	r2, [pc, #40]	; (800360c <qFIS_InferenceAntecedent+0xe0>)
 80035e2:	621a      	str	r2, [r3, #32]
            i += 2u;
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	3302      	adds	r3, #2
 80035e8:	603b      	str	r3, [r7, #0]
 80035ea:	e001      	b.n	80035f0 <qFIS_InferenceAntecedent+0xc4>
        }
        else {
            i = QFIS_INFERENCE_ERROR;
 80035ec:	2300      	movs	r3, #0
 80035ee:	603b      	str	r3, [r7, #0]
        }
    }

    return i;
 80035f0:	683b      	ldr	r3, [r7, #0]
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	371c      	adds	r7, #28
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd90      	pop	{r4, r7, pc}
 80035fa:	bf00      	nop
 80035fc:	ffff8002 	.word	0xffff8002
 8003600:	ffff8003 	.word	0xffff8003
 8003604:	0800352d 	.word	0x0800352d
 8003608:	ffff8004 	.word	0xffff8004
 800360c:	08003611 	.word	0x08003611

08003610 <qFIS_InferenceReachEnd>:
/*============================================================================*/
static size_t qFIS_InferenceReachEnd( struct _qFIS_s * const f,
                                      size_t i )
{
 8003610:	b590      	push	{r4, r7, lr}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
    int16_t  connector;

    connector = ( f->nOutputs > 1u )? f->rules[ i + 2u ] : -1;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361e:	2b01      	cmp	r3, #1
 8003620:	d908      	bls.n	8003634 <qFIS_InferenceReachEnd+0x24>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	3302      	adds	r3, #2
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	4413      	add	r3, r2
 800362e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003632:	e001      	b.n	8003638 <qFIS_InferenceReachEnd+0x28>
 8003634:	f04f 33ff 	mov.w	r3, #4294967295
 8003638:	81fb      	strh	r3, [r7, #14]
    i += 2u;
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	3302      	adds	r3, #2
 800363e:	603b      	str	r3, [r7, #0]
    if ( _QFIS_AND != connector ) {
 8003640:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003644:	4a23      	ldr	r2, [pc, #140]	; (80036d4 <qFIS_InferenceReachEnd+0xc4>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d03f      	beq.n	80036ca <qFIS_InferenceReachEnd+0xba>
        f->inferenceState = &qFIS_InferenceAntecedent;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a22      	ldr	r2, [pc, #136]	; (80036d8 <qFIS_InferenceReachEnd+0xc8>)
 800364e:	621a      	str	r2, [r3, #32]
        f->lastConnector = -1;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003656:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
        f->wi[ f->ruleCount ] = f->rStrength;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800366a:	601a      	str	r2, [r3, #0]
        if ( NULL != f->ruleWeight ) {
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003670:	2b00      	cmp	r3, #0
 8003672:	d01e      	beq.n	80036b2 <qFIS_InferenceReachEnd+0xa2>
            f->wi[ f->ruleCount ] *= qFIS_Bound( f->ruleWeight[ f->ruleCount ], 0.0f, 1.0f );
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	4413      	add	r3, r2
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003686:	f04f 0100 	mov.w	r1, #0
 800368a:	4618      	mov	r0, r3
 800368c:	f001 fcc5 	bl	800501a <qFIS_Bound>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	6819      	ldr	r1, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	18d4      	adds	r4, r2, r3
 80036aa:	f7fd fb6b 	bl	8000d84 <__aeabi_fmul>
 80036ae:	4603      	mov	r3, r0
 80036b0:	6023      	str	r3, [r4, #0]
        }
        f->rStrength = 0.0f;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f04f 0200 	mov.w	r2, #0
 80036b8:	659a      	str	r2, [r3, #88]	; 0x58
        ++f->ruleCount;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036be:	1c5a      	adds	r2, r3, #1
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	655a      	str	r2, [r3, #84]	; 0x54
        --i;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	3b01      	subs	r3, #1
 80036c8:	603b      	str	r3, [r7, #0]
    }

    return i;
 80036ca:	683b      	ldr	r3, [r7, #0]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3714      	adds	r7, #20
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd90      	pop	{r4, r7, pc}
 80036d4:	ffff8002 	.word	0xffff8002
 80036d8:	0800352d 	.word	0x0800352d

080036dc <qFIS_AggregationFindConsequent>:
/*============================================================================*/
static size_t qFIS_AggregationFindConsequent( struct _qFIS_s * const f,
                                              size_t i )
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
    while ( _QFIS_THEN != f->rules[ i++ ] ) {}
 80036e6:	bf00      	nop
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	1c59      	adds	r1, r3, #1
 80036f0:	6039      	str	r1, [r7, #0]
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	4413      	add	r3, r2
 80036f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036fa:	4a07      	ldr	r2, [pc, #28]	; (8003718 <qFIS_AggregationFindConsequent+0x3c>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d1f3      	bne.n	80036e8 <qFIS_AggregationFindConsequent+0xc>
    f->aggregationState = &qFIS_InferenceConsequent;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a06      	ldr	r2, [pc, #24]	; (800371c <qFIS_AggregationFindConsequent+0x40>)
 8003704:	625a      	str	r2, [r3, #36]	; 0x24

    return --i;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	3b01      	subs	r3, #1
 800370a:	603b      	str	r3, [r7, #0]
 800370c:	683b      	ldr	r3, [r7, #0]
}
 800370e:	4618      	mov	r0, r3
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	bc80      	pop	{r7}
 8003716:	4770      	bx	lr
 8003718:	ffff8004 	.word	0xffff8004
 800371c:	08003721 	.word	0x08003721

08003720 <qFIS_InferenceConsequent>:
/*============================================================================*/
static size_t qFIS_InferenceConsequent( struct _qFIS_s * const f,
                                        size_t i )
{
 8003720:	b5b0      	push	{r4, r5, r7, lr}
 8003722:	b088      	sub	sp, #32
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
    int16_t outIndex, MFOutIndex, connector;
    uint8_t neg = 0u;
 800372a:	2300      	movs	r3, #0
 800372c:	777b      	strb	r3, [r7, #29]

    outIndex = f->rules[ i ];
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	4413      	add	r3, r2
 8003738:	881b      	ldrh	r3, [r3, #0]
 800373a:	837b      	strh	r3, [r7, #26]
    MFOutIndex = f->rules[ i + 1u ];
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	3301      	adds	r3, #1
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	4413      	add	r3, r2
 8003748:	881b      	ldrh	r3, [r3, #0]
 800374a:	83fb      	strh	r3, [r7, #30]
    connector = ( f->nOutputs > 1u )? f->rules[ i + 2u ] : -1;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003750:	2b01      	cmp	r3, #1
 8003752:	d908      	bls.n	8003766 <qFIS_InferenceConsequent+0x46>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	3302      	adds	r3, #2
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	4413      	add	r3, r2
 8003760:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003764:	e001      	b.n	800376a <qFIS_InferenceConsequent+0x4a>
 8003766:	f04f 33ff 	mov.w	r3, #4294967295
 800376a:	833b      	strh	r3, [r7, #24]
    if ( MFOutIndex < 0 ) {
 800376c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003770:	2b00      	cmp	r3, #0
 8003772:	da05      	bge.n	8003780 <qFIS_InferenceConsequent+0x60>
        MFOutIndex = -MFOutIndex;
 8003774:	8bfb      	ldrh	r3, [r7, #30]
 8003776:	425b      	negs	r3, r3
 8003778:	b29b      	uxth	r3, r3
 800377a:	83fb      	strh	r3, [r7, #30]
        neg = 1u;
 800377c:	2301      	movs	r3, #1
 800377e:	777b      	strb	r3, [r7, #29]
    }
    MFOutIndex -= 1;
 8003780:	8bfb      	ldrh	r3, [r7, #30]
 8003782:	3b01      	subs	r3, #1
 8003784:	b29b      	uxth	r3, r3
 8003786:	83fb      	strh	r3, [r7, #30]

    if ( f->wi[ f->ruleCount ] > 0.0f ) {
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	4413      	add	r3, r2
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f04f 0100 	mov.w	r1, #0
 800379a:	4618      	mov	r0, r3
 800379c:	f7fd fcae 	bl	80010fc <__aeabi_fcmpgt>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d07b      	beq.n	800389e <qFIS_InferenceConsequent+0x17e>
        qFIS_Output_t *o = &f->output[ outIndex ];
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685a      	ldr	r2, [r3, #4]
 80037aa:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80037ae:	2134      	movs	r1, #52	; 0x34
 80037b0:	fb01 f303 	mul.w	r3, r1, r3
 80037b4:	4413      	add	r3, r2
 80037b6:	617b      	str	r3, [r7, #20]
        qFIS_MF_t *m = &f->outMF[ MFOutIndex ];
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68d9      	ldr	r1, [r3, #12]
 80037bc:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80037c0:	4613      	mov	r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	4413      	add	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	440b      	add	r3, r1
 80037ca:	613b      	str	r3, [r7, #16]

        if ( Mamdani == f->type ) {
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d133      	bne.n	800383e <qFIS_InferenceConsequent+0x11e>
            float v;
            /*cstat -MISRAC2012-Rule-11.3 -CERT-EXP39-C_d*/
            /*cppcheck-suppress misra-c2012-11.3 */
            v = m->h*m->shape( (qFIS_IO_Base_t*)o, m->points, 1u );
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	68dc      	ldr	r4, [r3, #12]
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	6851      	ldr	r1, [r2, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	6978      	ldr	r0, [r7, #20]
 80037e6:	4798      	blx	r3
 80037e8:	4603      	mov	r3, r0
 80037ea:	4619      	mov	r1, r3
 80037ec:	4620      	mov	r0, r4
 80037ee:	f7fd fac9 	bl	8000d84 <__aeabi_fmul>
 80037f2:	4603      	mov	r3, r0
 80037f4:	60bb      	str	r3, [r7, #8]
            /*cstat +MISRAC2012-Rule-11.3 +CERT-EXP39-C_d*/
            /*cppcheck-suppress misra-c2012-12.1 */
            v = ( 1u == neg )? ( 1.0f - v ) : v;
 80037f6:	7f7b      	ldrb	r3, [r7, #29]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d106      	bne.n	800380a <qFIS_InferenceConsequent+0xea>
 80037fc:	68b9      	ldr	r1, [r7, #8]
 80037fe:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003802:	f7fd f9b5 	bl	8000b70 <__aeabi_fsub>
 8003806:	4603      	mov	r3, r0
 8003808:	e000      	b.n	800380c <qFIS_InferenceConsequent+0xec>
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	60bb      	str	r3, [r7, #8]
            o->y = f->aggregate( o->y, f->implicate( f->wi[ f->ruleCount ], v ) );
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	69dc      	ldr	r4, [r3, #28]
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	6a1d      	ldr	r5, [r3, #32]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003822:	0092      	lsls	r2, r2, #2
 8003824:	440a      	add	r2, r1
 8003826:	6812      	ldr	r2, [r2, #0]
 8003828:	68b9      	ldr	r1, [r7, #8]
 800382a:	4610      	mov	r0, r2
 800382c:	4798      	blx	r3
 800382e:	4603      	mov	r3, r0
 8003830:	4619      	mov	r1, r3
 8003832:	4628      	mov	r0, r5
 8003834:	47a0      	blx	r4
 8003836:	4602      	mov	r2, r0
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	621a      	str	r2, [r3, #32]
 800383c:	e02f      	b.n	800389e <qFIS_InferenceConsequent+0x17e>
        }
        else { /* Sugeno and Tsukamoto*/
            float zi;
            /*cstat -MISRAC2012-Rule-11.3 -CERT-EXP39-C_d*/
            /*cppcheck-suppress misra-c2012-11.3 */
            zi = m->shape( (qFIS_IO_Base_t*)f->input, m->points, f->nInputs );
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	6810      	ldr	r0, [r2, #0]
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	6851      	ldr	r1, [r2, #4]
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800384e:	4798      	blx	r3
 8003850:	60f8      	str	r0, [r7, #12]
            /*cstat +MISRAC2012-Rule-11.3 +CERT-EXP39-C_d*/
            o->data[ 0 ] += zi*f->wi[ f->ruleCount ];
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4413      	add	r3, r2
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68f9      	ldr	r1, [r7, #12]
 8003866:	4618      	mov	r0, r3
 8003868:	f7fd fa8c 	bl	8000d84 <__aeabi_fmul>
 800386c:	4603      	mov	r3, r0
 800386e:	4619      	mov	r1, r3
 8003870:	4620      	mov	r0, r4
 8003872:	f7fd f97f 	bl	8000b74 <__addsf3>
 8003876:	4603      	mov	r3, r0
 8003878:	461a      	mov	r2, r3
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	625a      	str	r2, [r3, #36]	; 0x24
            o->data[ 1 ] += f->wi[ f->ruleCount ];
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	4413      	add	r3, r2
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4619      	mov	r1, r3
 8003892:	f7fd f96f 	bl	8000b74 <__addsf3>
 8003896:	4603      	mov	r3, r0
 8003898:	461a      	mov	r2, r3
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	629a      	str	r2, [r3, #40]	; 0x28
        }
    }

    i += 2u;
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	3302      	adds	r3, #2
 80038a2:	603b      	str	r3, [r7, #0]
    if ( _QFIS_AND != connector ) {
 80038a4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80038a8:	4a09      	ldr	r2, [pc, #36]	; (80038d0 <qFIS_InferenceConsequent+0x1b0>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d00a      	beq.n	80038c4 <qFIS_InferenceConsequent+0x1a4>
        f->aggregationState = &qFIS_AggregationFindConsequent;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a08      	ldr	r2, [pc, #32]	; (80038d4 <qFIS_InferenceConsequent+0x1b4>)
 80038b2:	625a      	str	r2, [r3, #36]	; 0x24
        ++f->ruleCount;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b8:	1c5a      	adds	r2, r3, #1
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	655a      	str	r2, [r3, #84]	; 0x54
        --i;
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	3b01      	subs	r3, #1
 80038c2:	603b      	str	r3, [r7, #0]
    }

    return i;
 80038c4:	683b      	ldr	r3, [r7, #0]
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3720      	adds	r7, #32
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bdb0      	pop	{r4, r5, r7, pc}
 80038ce:	bf00      	nop
 80038d0:	ffff8002 	.word	0xffff8002
 80038d4:	080036dd 	.word	0x080036dd

080038d8 <qFIS_Aggregate>:
/*============================================================================*/
static void qFIS_Aggregate( qFIS_t * const f )
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
    if ( NULL != f ) {
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d02d      	beq.n	8003942 <qFIS_Aggregate+0x6a>
        if ( QFIS_RULES_BEGIN == f->rules[ 0 ] ) {
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038ee:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80038f2:	d126      	bne.n	8003942 <qFIS_Aggregate+0x6a>
            size_t i = 1u;
 80038f4:	2301      	movs	r3, #1
 80038f6:	60fb      	str	r3, [r7, #12]

            f->aggregationState = &qFIS_AggregationFindConsequent;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a14      	ldr	r2, [pc, #80]	; (800394c <qFIS_Aggregate+0x74>)
 80038fc:	625a      	str	r2, [r3, #36]	; 0x24
            f->ruleCount = 0u;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	655a      	str	r2, [r3, #84]	; 0x54
            while ( ( _QFIS_RULES_END != f->rules[ i ] ) && ( f->ruleCount < f->nRules ) ) {
 8003904:	e00b      	b.n	800391e <qFIS_Aggregate+0x46>
                i = f->aggregationState( f, i );
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	68f9      	ldr	r1, [r7, #12]
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	4798      	blx	r3
 8003910:	60f8      	str	r0, [r7, #12]
                if ( QFIS_INFERENCE_ERROR == i ) {
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d013      	beq.n	8003940 <qFIS_Aggregate+0x68>
                    break;
                }
                ++i;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	3301      	adds	r3, #1
 800391c:	60fb      	str	r3, [r7, #12]
            while ( ( _QFIS_RULES_END != f->rules[ i ] ) && ( f->ruleCount < f->nRules ) ) {
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	005b      	lsls	r3, r3, #1
 8003926:	4413      	add	r3, r2
 8003928:	f9b3 3000 	ldrsh.w	r3, [r3]
 800392c:	4a08      	ldr	r2, [pc, #32]	; (8003950 <qFIS_Aggregate+0x78>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d007      	beq.n	8003942 <qFIS_Aggregate+0x6a>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800393a:	429a      	cmp	r2, r3
 800393c:	d3e3      	bcc.n	8003906 <qFIS_Aggregate+0x2e>
            }
        }
    }
}
 800393e:	e000      	b.n	8003942 <qFIS_Aggregate+0x6a>
                    break;
 8003940:	bf00      	nop
}
 8003942:	bf00      	nop
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	080036dd 	.word	0x080036dd
 8003950:	ffff8001 	.word	0xffff8001

08003954 <qFIS_DeFuzz_Centroid>:
/*============================================================================*/
static float qFIS_DeFuzz_Centroid( qFIS_Output_t * const o,
                                   const qFIS_DeFuzzState_t stage )
{
 8003954:	b590      	push	{r4, r7, lr}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	460b      	mov	r3, r1
 800395e:	70fb      	strb	r3, [r7, #3]
    float d = 0.0f;
 8003960:	f04f 0300 	mov.w	r3, #0
 8003964:	60fb      	str	r3, [r7, #12]

    switch ( stage ) {
 8003966:	78fb      	ldrb	r3, [r7, #3]
 8003968:	2b02      	cmp	r3, #2
 800396a:	d02e      	beq.n	80039ca <qFIS_DeFuzz_Centroid+0x76>
 800396c:	2b02      	cmp	r3, #2
 800396e:	dc37      	bgt.n	80039e0 <qFIS_DeFuzz_Centroid+0x8c>
 8003970:	2b00      	cmp	r3, #0
 8003972:	d021      	beq.n	80039b8 <qFIS_DeFuzz_Centroid+0x64>
 8003974:	2b01      	cmp	r3, #1
 8003976:	d133      	bne.n	80039e0 <qFIS_DeFuzz_Centroid+0x8c>
        case DeFuzz_Compute:
            o->data[ 0 ] += o->x*o->y;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	69da      	ldr	r2, [r3, #28]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a1b      	ldr	r3, [r3, #32]
 8003984:	4619      	mov	r1, r3
 8003986:	4610      	mov	r0, r2
 8003988:	f7fd f9fc 	bl	8000d84 <__aeabi_fmul>
 800398c:	4603      	mov	r3, r0
 800398e:	4619      	mov	r1, r3
 8003990:	4620      	mov	r0, r4
 8003992:	f7fd f8ef 	bl	8000b74 <__addsf3>
 8003996:	4603      	mov	r3, r0
 8003998:	461a      	mov	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	625a      	str	r2, [r3, #36]	; 0x24
            o->data[ 1 ] += o->y;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	4619      	mov	r1, r3
 80039a8:	4610      	mov	r0, r2
 80039aa:	f7fd f8e3 	bl	8000b74 <__addsf3>
 80039ae:	4603      	mov	r3, r0
 80039b0:	461a      	mov	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	629a      	str	r2, [r3, #40]	; 0x28
            break;
 80039b6:	e014      	b.n	80039e2 <qFIS_DeFuzz_Centroid+0x8e>
        case DeFuzz_Init:
            o->data[ 0 ] = 0.0f; /*store sum(y)*/
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f04f 0200 	mov.w	r2, #0
 80039be:	625a      	str	r2, [r3, #36]	; 0x24
            o->data[ 1 ] = 0.0f; /*store sum(x*y)*/
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f04f 0200 	mov.w	r2, #0
 80039c6:	629a      	str	r2, [r3, #40]	; 0x28
            break;
 80039c8:	e00b      	b.n	80039e2 <qFIS_DeFuzz_Centroid+0x8e>
        case DeFuzz_End:
            d = o->data[ 0 ]/o->data[ 1 ]; /*sum(x*y)/sum(y)*/
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d2:	4619      	mov	r1, r3
 80039d4:	4610      	mov	r0, r2
 80039d6:	f7fd fa89 	bl	8000eec <__aeabi_fdiv>
 80039da:	4603      	mov	r3, r0
 80039dc:	60fb      	str	r3, [r7, #12]
            break;
 80039de:	e000      	b.n	80039e2 <qFIS_DeFuzz_Centroid+0x8e>
        default:
            break;
 80039e0:	bf00      	nop
    }

    return d;
 80039e2:	68fb      	ldr	r3, [r7, #12]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3714      	adds	r7, #20
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd90      	pop	{r4, r7, pc}

080039ec <qFIS_DeFuzz_Bisector>:
/*============================================================================*/
static float qFIS_DeFuzz_Bisector( qFIS_Output_t * const o,
                                   const qFIS_DeFuzzState_t stage )
{
 80039ec:	b590      	push	{r4, r7, lr}
 80039ee:	b087      	sub	sp, #28
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	460b      	mov	r3, r1
 80039f6:	70fb      	strb	r3, [r7, #3]
    size_t k;
    float d = 0.0f;
 80039f8:	f04f 0300 	mov.w	r3, #0
 80039fc:	613b      	str	r3, [r7, #16]
    qFIS_t *f;

    switch ( stage ) {
 80039fe:	78fb      	ldrb	r3, [r7, #3]
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d017      	beq.n	8003a34 <qFIS_DeFuzz_Bisector+0x48>
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	dc60      	bgt.n	8003aca <qFIS_DeFuzz_Bisector+0xde>
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d00e      	beq.n	8003a2a <qFIS_DeFuzz_Bisector+0x3e>
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d15c      	bne.n	8003aca <qFIS_DeFuzz_Bisector+0xde>
        case DeFuzz_Compute:
            o->data[ 0 ] += o->y;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	4619      	mov	r1, r3
 8003a1a:	4610      	mov	r0, r2
 8003a1c:	f7fd f8aa 	bl	8000b74 <__addsf3>
 8003a20:	4603      	mov	r3, r0
 8003a22:	461a      	mov	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	625a      	str	r2, [r3, #36]	; 0x24
            break;
 8003a28:	e050      	b.n	8003acc <qFIS_DeFuzz_Bisector+0xe0>
        case DeFuzz_Init:
            o->data[ 0 ] = 0.0f; /*store sum(y)*/
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f04f 0200 	mov.w	r2, #0
 8003a30:	625a      	str	r2, [r3, #36]	; 0x24
            break;
 8003a32:	e04b      	b.n	8003acc <qFIS_DeFuzz_Bisector+0xe0>
        case DeFuzz_End:
            o->data[ 1 ] = 0.0f;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f04f 0200 	mov.w	r2, #0
 8003a3a:	629a      	str	r2, [r3, #40]	; 0x28
            /*cstat -MISRAC2012-Rule-11.5 -CERT-EXP36-C_b*/
            /*cppcheck-suppress misra-c2012-11.5 */
            f = (qFIS_t *)o->owner;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	60fb      	str	r3, [r7, #12]
            /*cstat +MISRAC2012-Rule-11.5 +CERT-EXP36-C_b*/
            for ( k = 0u ; k < f->nPoints ; ++k ) {
 8003a42:	2300      	movs	r3, #0
 8003a44:	617b      	str	r3, [r7, #20]
 8003a46:	e035      	b.n	8003ab4 <qFIS_DeFuzz_Bisector+0xc8>
                o->y = 0.0f;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f04f 0200 	mov.w	r2, #0
 8003a4e:	621a      	str	r2, [r3, #32]
                o->x = qFIS_GetNextX( o->b.min, o->res, k );
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6818      	ldr	r0, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	f000 fb04 	bl	8004068 <qFIS_GetNextX>
 8003a60:	4602      	mov	r2, r0
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	61da      	str	r2, [r3, #28]
                o->b.value = o->x;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	69da      	ldr	r2, [r3, #28]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	609a      	str	r2, [r3, #8]
                qFIS_Aggregate( f );
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f7ff ff32 	bl	80038d8 <qFIS_Aggregate>
                o->data[ 1 ] += o->y;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	4610      	mov	r0, r2
 8003a80:	f7fd f878 	bl	8000b74 <__addsf3>
 8003a84:	4603      	mov	r3, r0
 8003a86:	461a      	mov	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	629a      	str	r2, [r3, #40]	; 0x28
                if ( o->data[ 1 ] >= ( 0.5f*o->data[ 0 ] ) ) {
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a94:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7fd f973 	bl	8000d84 <__aeabi_fmul>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	4620      	mov	r0, r4
 8003aa4:	f7fd fb20 	bl	80010e8 <__aeabi_fcmpge>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d108      	bne.n	8003ac0 <qFIS_DeFuzz_Bisector+0xd4>
            for ( k = 0u ; k < f->nPoints ; ++k ) {
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	617b      	str	r3, [r7, #20]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d3c4      	bcc.n	8003a48 <qFIS_DeFuzz_Bisector+0x5c>
 8003abe:	e000      	b.n	8003ac2 <qFIS_DeFuzz_Bisector+0xd6>
                    break;
 8003ac0:	bf00      	nop
                }
            }
            d = o->x;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	613b      	str	r3, [r7, #16]
            break;
 8003ac8:	e000      	b.n	8003acc <qFIS_DeFuzz_Bisector+0xe0>
        default:
            break;
 8003aca:	bf00      	nop
    }

    return d;
 8003acc:	693b      	ldr	r3, [r7, #16]
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	371c      	adds	r7, #28
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd90      	pop	{r4, r7, pc}
	...

08003ad8 <qFIS_DeFuzz_LOM>:
/*============================================================================*/
static float qFIS_DeFuzz_LOM( qFIS_Output_t * const o,
                              const qFIS_DeFuzzState_t stage )
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	70fb      	strb	r3, [r7, #3]
    float d = 0.0f;
 8003ae4:	f04f 0300 	mov.w	r3, #0
 8003ae8:	60fb      	str	r3, [r7, #12]

    switch ( stage ) {
 8003aea:	78fb      	ldrb	r3, [r7, #3]
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d022      	beq.n	8003b36 <qFIS_DeFuzz_LOM+0x5e>
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	dc24      	bgt.n	8003b3e <qFIS_DeFuzz_LOM+0x66>
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d016      	beq.n	8003b26 <qFIS_DeFuzz_LOM+0x4e>
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d120      	bne.n	8003b3e <qFIS_DeFuzz_LOM+0x66>
        case DeFuzz_Compute:
            if ( o->y >= o->data[ 0 ] ) {
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a1a      	ldr	r2, [r3, #32]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	4619      	mov	r1, r3
 8003b06:	4610      	mov	r0, r2
 8003b08:	f7fd faee 	bl	80010e8 <__aeabi_fcmpge>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d100      	bne.n	8003b14 <qFIS_DeFuzz_LOM+0x3c>
                o->data[ 0 ] = o->y;
                o->data[ 1 ] = o->x;
            }
            break;
 8003b12:	e015      	b.n	8003b40 <qFIS_DeFuzz_LOM+0x68>
                o->data[ 0 ] = o->y;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a1a      	ldr	r2, [r3, #32]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	625a      	str	r2, [r3, #36]	; 0x24
                o->data[ 1 ] = o->x;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	69da      	ldr	r2, [r3, #28]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	629a      	str	r2, [r3, #40]	; 0x28
            break;
 8003b24:	e00c      	b.n	8003b40 <qFIS_DeFuzz_LOM+0x68>
        case DeFuzz_Init:
            o->data[ 0 ] = -1.0f; /*yMax*/
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a08      	ldr	r2, [pc, #32]	; (8003b4c <qFIS_DeFuzz_LOM+0x74>)
 8003b2a:	625a      	str	r2, [r3, #36]	; 0x24
            o->data[ 1 ] = o->b.max; /*xLargest*/
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685a      	ldr	r2, [r3, #4]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	629a      	str	r2, [r3, #40]	; 0x28
            break;
 8003b34:	e004      	b.n	8003b40 <qFIS_DeFuzz_LOM+0x68>
        case DeFuzz_End:
            d = o->data[ 1 ];
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3a:	60fb      	str	r3, [r7, #12]
            break;
 8003b3c:	e000      	b.n	8003b40 <qFIS_DeFuzz_LOM+0x68>
        default:
            break;
 8003b3e:	bf00      	nop
    }

    return d;
 8003b40:	68fb      	ldr	r3, [r7, #12]
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	bf800000 	.word	0xbf800000

08003b50 <qFIS_DeFuzz_SOM>:
/*============================================================================*/
static float qFIS_DeFuzz_SOM( qFIS_Output_t * const o,
                              const qFIS_DeFuzzState_t stage )
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	460b      	mov	r3, r1
 8003b5a:	70fb      	strb	r3, [r7, #3]
    float d = 0.0f;
 8003b5c:	f04f 0300 	mov.w	r3, #0
 8003b60:	60fb      	str	r3, [r7, #12]

    switch ( stage ) {
 8003b62:	78fb      	ldrb	r3, [r7, #3]
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d022      	beq.n	8003bae <qFIS_DeFuzz_SOM+0x5e>
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	dc24      	bgt.n	8003bb6 <qFIS_DeFuzz_SOM+0x66>
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d016      	beq.n	8003b9e <qFIS_DeFuzz_SOM+0x4e>
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d120      	bne.n	8003bb6 <qFIS_DeFuzz_SOM+0x66>
        case DeFuzz_Compute:
            if ( o->y > o->data[ 0 ] ) {
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a1a      	ldr	r2, [r3, #32]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	4610      	mov	r0, r2
 8003b80:	f7fd fabc 	bl	80010fc <__aeabi_fcmpgt>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d100      	bne.n	8003b8c <qFIS_DeFuzz_SOM+0x3c>
                o->data[ 0 ] = o->y;
                o->data[ 1 ] = o->x;
            }
            break;
 8003b8a:	e015      	b.n	8003bb8 <qFIS_DeFuzz_SOM+0x68>
                o->data[ 0 ] = o->y;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a1a      	ldr	r2, [r3, #32]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	625a      	str	r2, [r3, #36]	; 0x24
                o->data[ 1 ] = o->x;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	69da      	ldr	r2, [r3, #28]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	629a      	str	r2, [r3, #40]	; 0x28
            break;
 8003b9c:	e00c      	b.n	8003bb8 <qFIS_DeFuzz_SOM+0x68>
        case DeFuzz_Init:
            o->data[ 0 ] = -1.0f; /*yMax*/
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a08      	ldr	r2, [pc, #32]	; (8003bc4 <qFIS_DeFuzz_SOM+0x74>)
 8003ba2:	625a      	str	r2, [r3, #36]	; 0x24
            o->data[ 1 ] = o->b.min; /*xSmallest*/
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	629a      	str	r2, [r3, #40]	; 0x28
            break;
 8003bac:	e004      	b.n	8003bb8 <qFIS_DeFuzz_SOM+0x68>
        case DeFuzz_End:
            d = o->data[ 1 ];
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb2:	60fb      	str	r3, [r7, #12]
            break;
 8003bb4:	e000      	b.n	8003bb8 <qFIS_DeFuzz_SOM+0x68>
        default:
            break;
 8003bb6:	bf00      	nop
    }

    return d;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	bf800000 	.word	0xbf800000

08003bc8 <qFIS_DeFuzz_MOM>:
/*============================================================================*/
static float qFIS_DeFuzz_MOM( qFIS_Output_t * const o,
                              const qFIS_DeFuzzState_t stage )
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	70fb      	strb	r3, [r7, #3]
    float d = 0.0f;
 8003bd4:	f04f 0300 	mov.w	r3, #0
 8003bd8:	60fb      	str	r3, [r7, #12]

    switch ( stage ) {
 8003bda:	78fb      	ldrb	r3, [r7, #3]
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d05a      	beq.n	8003c96 <qFIS_DeFuzz_MOM+0xce>
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	dc69      	bgt.n	8003cb8 <qFIS_DeFuzz_MOM+0xf0>
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d047      	beq.n	8003c78 <qFIS_DeFuzz_MOM+0xb0>
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d165      	bne.n	8003cb8 <qFIS_DeFuzz_MOM+0xf0>
        case DeFuzz_Compute:
            if ( o->y > o->data[ 0 ] ) {
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a1a      	ldr	r2, [r3, #32]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	4610      	mov	r0, r2
 8003bf8:	f7fd fa80 	bl	80010fc <__aeabi_fcmpgt>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d010      	beq.n	8003c24 <qFIS_DeFuzz_MOM+0x5c>
                o->data[ 0 ] = o->y;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a1a      	ldr	r2, [r3, #32]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	625a      	str	r2, [r3, #36]	; 0x24
                o->data[ 1 ] = o->x;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	69da      	ldr	r2, [r3, #28]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	629a      	str	r2, [r3, #40]	; 0x28
                o->data[ 2 ] = o->x;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	69da      	ldr	r2, [r3, #28]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	62da      	str	r2, [r3, #44]	; 0x2c
                o->data[ 3 ] = 1.0f;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003c20:	631a      	str	r2, [r3, #48]	; 0x30
                o->data[ 3 ] = -1.0f;
            }
            else {
                /*nothing to do*/
            }
            break;
 8003c22:	e04a      	b.n	8003cba <qFIS_DeFuzz_MOM+0xf2>
            else if ( qFMathEx_Equal( o->y , o->data[ 0 ] ) && ( o->data[ 3 ] > 0.0f ) ) {
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a1a      	ldr	r2, [r3, #32]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	4610      	mov	r0, r2
 8003c30:	f001 fa5d 	bl	80050ee <qFMathEx_Equal>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00e      	beq.n	8003c58 <qFIS_DeFuzz_MOM+0x90>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3e:	f04f 0100 	mov.w	r1, #0
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7fd fa5a 	bl	80010fc <__aeabi_fcmpgt>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d004      	beq.n	8003c58 <qFIS_DeFuzz_MOM+0x90>
                o->data[ 2 ] = o->x;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	69da      	ldr	r2, [r3, #28]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	62da      	str	r2, [r3, #44]	; 0x2c
            break;
 8003c56:	e030      	b.n	8003cba <qFIS_DeFuzz_MOM+0xf2>
            else if ( o->y < o->data[ 0 ] ) {
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a1a      	ldr	r2, [r3, #32]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c60:	4619      	mov	r1, r3
 8003c62:	4610      	mov	r0, r2
 8003c64:	f7fd fa2c 	bl	80010c0 <__aeabi_fcmplt>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d100      	bne.n	8003c70 <qFIS_DeFuzz_MOM+0xa8>
            break;
 8003c6e:	e024      	b.n	8003cba <qFIS_DeFuzz_MOM+0xf2>
                o->data[ 3 ] = -1.0f;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a14      	ldr	r2, [pc, #80]	; (8003cc4 <qFIS_DeFuzz_MOM+0xfc>)
 8003c74:	631a      	str	r2, [r3, #48]	; 0x30
            break;
 8003c76:	e020      	b.n	8003cba <qFIS_DeFuzz_MOM+0xf2>
        case DeFuzz_Init:
            o->data[ 0 ] = -1.0f; /* yMax */
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a12      	ldr	r2, [pc, #72]	; (8003cc4 <qFIS_DeFuzz_MOM+0xfc>)
 8003c7c:	625a      	str	r2, [r3, #36]	; 0x24
            o->data[ 1 ] = o->b.min; /*xSmallest*/
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	629a      	str	r2, [r3, #40]	; 0x28
            o->data[ 2 ] = o->b.max; /*xLargest*/
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	62da      	str	r2, [r3, #44]	; 0x2c
            o->data[ 3 ] = -1.0f; /*sp*/
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a0c      	ldr	r2, [pc, #48]	; (8003cc4 <qFIS_DeFuzz_MOM+0xfc>)
 8003c92:	631a      	str	r2, [r3, #48]	; 0x30
            break;
 8003c94:	e011      	b.n	8003cba <qFIS_DeFuzz_MOM+0xf2>
        case DeFuzz_End:
            d = 0.5f*( o->data[ 1 ] + o->data[ 2 ] );
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	4610      	mov	r0, r2
 8003ca2:	f7fc ff67 	bl	8000b74 <__addsf3>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003cac:	4618      	mov	r0, r3
 8003cae:	f7fd f869 	bl	8000d84 <__aeabi_fmul>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	60fb      	str	r3, [r7, #12]
            break;
 8003cb6:	e000      	b.n	8003cba <qFIS_DeFuzz_MOM+0xf2>
        default:
            break;
 8003cb8:	bf00      	nop
    }

    return d;
 8003cba:	68fb      	ldr	r3, [r7, #12]
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3710      	adds	r7, #16
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	bf800000 	.word	0xbf800000

08003cc8 <qFIS_DeFuzz_WtAverage>:
/*============================================================================*/
static float qFIS_DeFuzz_WtAverage( qFIS_Output_t * const o,
                                    const qFIS_DeFuzzState_t stage )
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	70fb      	strb	r3, [r7, #3]
    float d = 0.0f;
 8003cd4:	f04f 0300 	mov.w	r3, #0
 8003cd8:	60fb      	str	r3, [r7, #12]

    if ( DeFuzz_End == stage ) {
 8003cda:	78fb      	ldrb	r3, [r7, #3]
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d109      	bne.n	8003cf4 <qFIS_DeFuzz_WtAverage+0x2c>
        d = o->data[ 0 ]/o->data[ 1 ];
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce8:	4619      	mov	r1, r3
 8003cea:	4610      	mov	r0, r2
 8003cec:	f7fd f8fe 	bl	8000eec <__aeabi_fdiv>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	60fb      	str	r3, [r7, #12]
    }

    return d;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <qFIS_DeFuzz_WtSum>:
/*============================================================================*/
static float qFIS_DeFuzz_WtSum( qFIS_Output_t * const o,
                                const qFIS_DeFuzzState_t stage )
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b085      	sub	sp, #20
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
 8003d06:	460b      	mov	r3, r1
 8003d08:	70fb      	strb	r3, [r7, #3]
    float d = 0.0f;
 8003d0a:	f04f 0300 	mov.w	r3, #0
 8003d0e:	60fb      	str	r3, [r7, #12]

    if ( DeFuzz_End == stage ) {
 8003d10:	78fb      	ldrb	r3, [r7, #3]
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d102      	bne.n	8003d1c <qFIS_DeFuzz_WtSum+0x1e>
        d = o->data[ 0 ];
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	60fb      	str	r3, [r7, #12]
    }

    return d;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3714      	adds	r7, #20
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bc80      	pop	{r7}
 8003d26:	4770      	bx	lr

08003d28 <qFIS_DeFuzzify>:
/*============================================================================*/
int qFIS_DeFuzzify( qFIS_t * const f )
{
 8003d28:	b5b0      	push	{r4, r5, r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
    int retVal = 0;
 8003d30:	2300      	movs	r3, #0
 8003d32:	60fb      	str	r3, [r7, #12]

    if ( NULL != f ) {
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f000 8133 	beq.w	8003fa2 <qFIS_DeFuzzify+0x27a>
        size_t i;

        for ( i = 0; i < f->nOutputs ; ++i ) {
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	617b      	str	r3, [r7, #20]
 8003d40:	e00e      	b.n	8003d60 <qFIS_DeFuzzify+0x38>
            f->deFuzz( &f->output[ i ] , DeFuzz_Init );
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	6851      	ldr	r1, [r2, #4]
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	2034      	movs	r0, #52	; 0x34
 8003d4e:	fb00 f202 	mul.w	r2, r0, r2
 8003d52:	440a      	add	r2, r1
 8003d54:	2100      	movs	r1, #0
 8003d56:	4610      	mov	r0, r2
 8003d58:	4798      	blx	r3
        for ( i = 0; i < f->nOutputs ; ++i ) {
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	617b      	str	r3, [r7, #20]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d3eb      	bcc.n	8003d42 <qFIS_DeFuzzify+0x1a>
        }

        if ( Mamdani == f->type  ) {
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f040 809a 	bne.w	8003eaa <qFIS_DeFuzzify+0x182>
            size_t k;

            for ( k = 0u ; k < f->nPoints ; ++k ) {
 8003d76:	2300      	movs	r3, #0
 8003d78:	613b      	str	r3, [r7, #16]
 8003d7a:	e08f      	b.n	8003e9c <qFIS_DeFuzzify+0x174>
                for ( i = 0; i < f->nOutputs ; ++i ) { /* initialize*/
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	617b      	str	r3, [r7, #20]
 8003d80:	e038      	b.n	8003df4 <qFIS_DeFuzzify+0xcc>
                    f->output[ i ].y = 0.0f;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685a      	ldr	r2, [r3, #4]
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	2134      	movs	r1, #52	; 0x34
 8003d8a:	fb01 f303 	mul.w	r3, r1, r3
 8003d8e:	4413      	add	r3, r2
 8003d90:	f04f 0200 	mov.w	r2, #0
 8003d94:	621a      	str	r2, [r3, #32]
                    f->output[ i ].x = qFIS_GetNextX( f->output[ i ].b.min,
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685a      	ldr	r2, [r3, #4]
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	2134      	movs	r1, #52	; 0x34
 8003d9e:	fb01 f303 	mul.w	r3, r1, r3
 8003da2:	4413      	add	r3, r2
 8003da4:	6818      	ldr	r0, [r3, #0]
                                                      f->output[ i ].res,
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	2134      	movs	r1, #52	; 0x34
 8003dae:	fb01 f303 	mul.w	r3, r1, r3
 8003db2:	4413      	add	r3, r2
                    f->output[ i ].x = qFIS_GetNextX( f->output[ i ].b.min,
 8003db4:	6999      	ldr	r1, [r3, #24]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685a      	ldr	r2, [r3, #4]
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	2434      	movs	r4, #52	; 0x34
 8003dbe:	fb04 f303 	mul.w	r3, r4, r3
 8003dc2:	18d4      	adds	r4, r2, r3
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	f000 f94f 	bl	8004068 <qFIS_GetNextX>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	61e3      	str	r3, [r4, #28]
                                                      k );
                    f->output[ i ].b.value = f->output[ i ].x;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685a      	ldr	r2, [r3, #4]
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	2134      	movs	r1, #52	; 0x34
 8003dd6:	fb01 f303 	mul.w	r3, r1, r3
 8003dda:	441a      	add	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6859      	ldr	r1, [r3, #4]
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	2034      	movs	r0, #52	; 0x34
 8003de4:	fb00 f303 	mul.w	r3, r0, r3
 8003de8:	440b      	add	r3, r1
 8003dea:	69d2      	ldr	r2, [r2, #28]
 8003dec:	609a      	str	r2, [r3, #8]
                for ( i = 0; i < f->nOutputs ; ++i ) { /* initialize*/
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	3301      	adds	r3, #1
 8003df2:	617b      	str	r3, [r7, #20]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d3c1      	bcc.n	8003d82 <qFIS_DeFuzzify+0x5a>
                }
                qFIS_Aggregate( f );
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f7ff fd6a 	bl	80038d8 <qFIS_Aggregate>
                for ( i = 0; i < f->nOutputs ; ++i ) {
 8003e04:	2300      	movs	r3, #0
 8003e06:	617b      	str	r3, [r7, #20]
 8003e08:	e040      	b.n	8003e8c <qFIS_DeFuzzify+0x164>
                    f->deFuzz( &f->output[ i ] , DeFuzz_Compute );
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	6851      	ldr	r1, [r2, #4]
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	2034      	movs	r0, #52	; 0x34
 8003e16:	fb00 f202 	mul.w	r2, r0, r2
 8003e1a:	440a      	add	r2, r1
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	4610      	mov	r0, r2
 8003e20:	4798      	blx	r3
                    if ( NULL != f->output[ i ].xag ) { /*store aggregated*/
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685a      	ldr	r2, [r3, #4]
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	2134      	movs	r1, #52	; 0x34
 8003e2a:	fb01 f303 	mul.w	r3, r1, r3
 8003e2e:	4413      	add	r3, r2
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d027      	beq.n	8003e86 <qFIS_DeFuzzify+0x15e>
                        f->output[ i ].xag[ k ] = f->output[ i ].x;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685a      	ldr	r2, [r3, #4]
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	2134      	movs	r1, #52	; 0x34
 8003e3e:	fb01 f303 	mul.w	r3, r1, r3
 8003e42:	441a      	add	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6859      	ldr	r1, [r3, #4]
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	2034      	movs	r0, #52	; 0x34
 8003e4c:	fb00 f303 	mul.w	r3, r0, r3
 8003e50:	440b      	add	r3, r1
 8003e52:	6919      	ldr	r1, [r3, #16]
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	440b      	add	r3, r1
 8003e5a:	69d2      	ldr	r2, [r2, #28]
 8003e5c:	601a      	str	r2, [r3, #0]
                        f->output[ i ].yag[ k ] = f->output[ i ].y;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	2134      	movs	r1, #52	; 0x34
 8003e66:	fb01 f303 	mul.w	r3, r1, r3
 8003e6a:	441a      	add	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6859      	ldr	r1, [r3, #4]
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	2034      	movs	r0, #52	; 0x34
 8003e74:	fb00 f303 	mul.w	r3, r0, r3
 8003e78:	440b      	add	r3, r1
 8003e7a:	6959      	ldr	r1, [r3, #20]
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	440b      	add	r3, r1
 8003e82:	6a12      	ldr	r2, [r2, #32]
 8003e84:	601a      	str	r2, [r3, #0]
                for ( i = 0; i < f->nOutputs ; ++i ) {
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	3301      	adds	r3, #1
 8003e8a:	617b      	str	r3, [r7, #20]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d3b9      	bcc.n	8003e0a <qFIS_DeFuzzify+0xe2>
            for ( k = 0u ; k < f->nPoints ; ++k ) {
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	3301      	adds	r3, #1
 8003e9a:	613b      	str	r3, [r7, #16]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	f4ff af6a 	bcc.w	8003d7c <qFIS_DeFuzzify+0x54>
 8003ea8:	e038      	b.n	8003f1c <qFIS_DeFuzzify+0x1f4>
                    }
                }
            }
        }
        else { /*Sugeno and Tsukamoto systems*/
            for ( i = 0; i < f->nOutputs ; ++i ) { /* initialize*/
 8003eaa:	2300      	movs	r3, #0
 8003eac:	617b      	str	r3, [r7, #20]
 8003eae:	e016      	b.n	8003ede <qFIS_DeFuzzify+0x1b6>
                f->output[ i ].data[ 0 ] = 0.0f; /*store sum wi*/
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685a      	ldr	r2, [r3, #4]
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	2134      	movs	r1, #52	; 0x34
 8003eb8:	fb01 f303 	mul.w	r3, r1, r3
 8003ebc:	4413      	add	r3, r2
 8003ebe:	f04f 0200 	mov.w	r2, #0
 8003ec2:	625a      	str	r2, [r3, #36]	; 0x24
                f->output[ i ].data[ 1 ] = 0.0f; /*store sum zi*wi*/
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685a      	ldr	r2, [r3, #4]
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	2134      	movs	r1, #52	; 0x34
 8003ecc:	fb01 f303 	mul.w	r3, r1, r3
 8003ed0:	4413      	add	r3, r2
 8003ed2:	f04f 0200 	mov.w	r2, #0
 8003ed6:	629a      	str	r2, [r3, #40]	; 0x28
            for ( i = 0; i < f->nOutputs ; ++i ) { /* initialize*/
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	3301      	adds	r3, #1
 8003edc:	617b      	str	r3, [r7, #20]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee2:	697a      	ldr	r2, [r7, #20]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d3e3      	bcc.n	8003eb0 <qFIS_DeFuzzify+0x188>
            }
            qFIS_Aggregate( f );
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f7ff fcf5 	bl	80038d8 <qFIS_Aggregate>
            for ( i = 0; i < f->nOutputs ; ++i ) { /* initialize*/
 8003eee:	2300      	movs	r3, #0
 8003ef0:	617b      	str	r3, [r7, #20]
 8003ef2:	e00e      	b.n	8003f12 <qFIS_DeFuzzify+0x1ea>
                f->deFuzz( &f->output[ i ] , DeFuzz_Compute );
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	6851      	ldr	r1, [r2, #4]
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	2034      	movs	r0, #52	; 0x34
 8003f00:	fb00 f202 	mul.w	r2, r0, r2
 8003f04:	440a      	add	r2, r1
 8003f06:	2101      	movs	r1, #1
 8003f08:	4610      	mov	r0, r2
 8003f0a:	4798      	blx	r3
            for ( i = 0; i < f->nOutputs ; ++i ) { /* initialize*/
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	3301      	adds	r3, #1
 8003f10:	617b      	str	r3, [r7, #20]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d3eb      	bcc.n	8003ef4 <qFIS_DeFuzzify+0x1cc>
            }
        }

        for ( i = 0; i < f->nOutputs ; ++i ) {
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	617b      	str	r3, [r7, #20]
 8003f20:	e03a      	b.n	8003f98 <qFIS_DeFuzzify+0x270>
            f->output[ i ].b.value = f->deFuzz( &f->output[ i ] , DeFuzz_End );
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	6851      	ldr	r1, [r2, #4]
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	2034      	movs	r0, #52	; 0x34
 8003f2e:	fb00 f202 	mul.w	r2, r0, r2
 8003f32:	1888      	adds	r0, r1, r2
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	6851      	ldr	r1, [r2, #4]
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	2434      	movs	r4, #52	; 0x34
 8003f3c:	fb04 f202 	mul.w	r2, r4, r2
 8003f40:	188c      	adds	r4, r1, r2
 8003f42:	2102      	movs	r1, #2
 8003f44:	4798      	blx	r3
 8003f46:	4603      	mov	r3, r0
 8003f48:	60a3      	str	r3, [r4, #8]
            f->output[ i ].b.value = qFIS_Bound( f->output[ i ].b.value,
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685a      	ldr	r2, [r3, #4]
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	2134      	movs	r1, #52	; 0x34
 8003f52:	fb01 f303 	mul.w	r3, r1, r3
 8003f56:	4413      	add	r3, r2
 8003f58:	6898      	ldr	r0, [r3, #8]
                                                 f->output[ i ].b.min,
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685a      	ldr	r2, [r3, #4]
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	2134      	movs	r1, #52	; 0x34
 8003f62:	fb01 f303 	mul.w	r3, r1, r3
 8003f66:	4413      	add	r3, r2
            f->output[ i ].b.value = qFIS_Bound( f->output[ i ].b.value,
 8003f68:	6819      	ldr	r1, [r3, #0]
                                                 f->output[ i ].b.max );
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685a      	ldr	r2, [r3, #4]
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	2434      	movs	r4, #52	; 0x34
 8003f72:	fb04 f303 	mul.w	r3, r4, r3
 8003f76:	4413      	add	r3, r2
            f->output[ i ].b.value = qFIS_Bound( f->output[ i ].b.value,
 8003f78:	685d      	ldr	r5, [r3, #4]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685a      	ldr	r2, [r3, #4]
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	2434      	movs	r4, #52	; 0x34
 8003f82:	fb04 f303 	mul.w	r3, r4, r3
 8003f86:	18d4      	adds	r4, r2, r3
 8003f88:	462a      	mov	r2, r5
 8003f8a:	f001 f846 	bl	800501a <qFIS_Bound>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	60a3      	str	r3, [r4, #8]
        for ( i = 0; i < f->nOutputs ; ++i ) {
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	3301      	adds	r3, #1
 8003f96:	617b      	str	r3, [r7, #20]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d3bf      	bcc.n	8003f22 <qFIS_DeFuzzify+0x1fa>
        }
    }

    return retVal;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3718      	adds	r7, #24
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bdb0      	pop	{r4, r5, r7, pc}

08003fac <qFIS_Inference>:

    return retVal;
}
/*============================================================================*/
int qFIS_Inference( qFIS_t * const f )
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
    int retVal = 0;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	60fb      	str	r3, [r7, #12]

    if ( NULL != f  ) {
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d04a      	beq.n	8004054 <qFIS_Inference+0xa8>
        size_t i = 0u;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	60bb      	str	r3, [r7, #8]

        if ( QFIS_RULES_BEGIN == f->rules[ 0 ] ) {
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fca:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8003fce:	d12f      	bne.n	8004030 <qFIS_Inference+0x84>
            f->inferenceState = &qFIS_InferenceAntecedent;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a23      	ldr	r2, [pc, #140]	; (8004060 <qFIS_Inference+0xb4>)
 8003fd4:	621a      	str	r2, [r3, #32]
            f->rStrength = 0.0f;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f04f 0200 	mov.w	r2, #0
 8003fdc:	659a      	str	r2, [r3, #88]	; 0x58
            f->lastConnector = -1;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fe4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
            f->ruleCount = 0u;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	655a      	str	r2, [r3, #84]	; 0x54
            i = 1u;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	60bb      	str	r3, [r7, #8]
            while ( ( _QFIS_RULES_END != f->rules[ i ] ) && ( f->ruleCount < f->nRules ) ) {
 8003ff2:	e00b      	b.n	800400c <qFIS_Inference+0x60>
                i = f->inferenceState( f, i );
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a1b      	ldr	r3, [r3, #32]
 8003ff8:	68b9      	ldr	r1, [r7, #8]
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	4798      	blx	r3
 8003ffe:	60b8      	str	r0, [r7, #8]
                if ( QFIS_INFERENCE_ERROR == i ) {
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d013      	beq.n	800402e <qFIS_Inference+0x82>
                    break;
                }
                ++i;
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	3301      	adds	r3, #1
 800400a:	60bb      	str	r3, [r7, #8]
            while ( ( _QFIS_RULES_END != f->rules[ i ] ) && ( f->ruleCount < f->nRules ) ) {
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	4413      	add	r3, r2
 8004016:	f9b3 3000 	ldrsh.w	r3, [r3]
 800401a:	4a12      	ldr	r2, [pc, #72]	; (8004064 <qFIS_Inference+0xb8>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d007      	beq.n	8004030 <qFIS_Inference+0x84>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004028:	429a      	cmp	r2, r3
 800402a:	d3e3      	bcc.n	8003ff4 <qFIS_Inference+0x48>
 800402c:	e000      	b.n	8004030 <qFIS_Inference+0x84>
                    break;
 800402e:	bf00      	nop
            }
        }
        if ( ( _QFIS_RULES_END == f->rules[ i ] ) && ( f->ruleCount == f->nRules) ) {
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	4413      	add	r3, r2
 800403a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800403e:	4a09      	ldr	r2, [pc, #36]	; (8004064 <qFIS_Inference+0xb8>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d107      	bne.n	8004054 <qFIS_Inference+0xa8>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800404c:	429a      	cmp	r2, r3
 800404e:	d101      	bne.n	8004054 <qFIS_Inference+0xa8>
            retVal = 1;
 8004050:	2301      	movs	r3, #1
 8004052:	60fb      	str	r3, [r7, #12]
        }
    }

    return retVal;
 8004054:	68fb      	ldr	r3, [r7, #12]
}
 8004056:	4618      	mov	r0, r3
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	0800352d 	.word	0x0800352d
 8004064:	ffff8001 	.word	0xffff8001

08004068 <qFIS_GetNextX>:
/*============================================================================*/
static float qFIS_GetNextX( const float init,
                            const float res,
                            const size_t i )
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
    /*cstat -CERT-FLP36-C*/
    return init + ( ( (float)i + 0.5f )*res );
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f7fc fe2d 	bl	8000cd4 <__aeabi_ui2f>
 800407a:	4603      	mov	r3, r0
 800407c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004080:	4618      	mov	r0, r3
 8004082:	f7fc fd77 	bl	8000b74 <__addsf3>
 8004086:	4603      	mov	r3, r0
 8004088:	68b9      	ldr	r1, [r7, #8]
 800408a:	4618      	mov	r0, r3
 800408c:	f7fc fe7a 	bl	8000d84 <__aeabi_fmul>
 8004090:	4603      	mov	r3, r0
 8004092:	68f9      	ldr	r1, [r7, #12]
 8004094:	4618      	mov	r0, r3
 8004096:	f7fc fd6d 	bl	8000b74 <__addsf3>
 800409a:	4603      	mov	r3, r0
    /*cstat +CERT-FLP36-C*/
}
 800409c:	4618      	mov	r0, r3
 800409e:	3710      	adds	r7, #16
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <qFIS_TriMF>:
/*============================================================================*/
static float qFIS_TriMF( const qFIS_IO_Base_t * const in,
                         const float *p,
                         const size_t n )
{
 80040a4:	b5b0      	push	{r4, r5, r7, lr}
 80040a6:	b08a      	sub	sp, #40	; 0x28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
    float a, b, c, tmp;
    float x = in[ 0 ].value;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	627b      	str	r3, [r7, #36]	; 0x24
    (void)n;

    a = p[ 0 ];
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	623b      	str	r3, [r7, #32]
    b = p[ 1 ];
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	61fb      	str	r3, [r7, #28]
    c = p[ 2 ];
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	61bb      	str	r3, [r7, #24]
    tmp = qFIS_Min( ( x - a )/( b - a ) , ( c - x )/( c - b ) );
 80040c8:	6a39      	ldr	r1, [r7, #32]
 80040ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80040cc:	f7fc fd50 	bl	8000b70 <__aeabi_fsub>
 80040d0:	4603      	mov	r3, r0
 80040d2:	461c      	mov	r4, r3
 80040d4:	6a39      	ldr	r1, [r7, #32]
 80040d6:	69f8      	ldr	r0, [r7, #28]
 80040d8:	f7fc fd4a 	bl	8000b70 <__aeabi_fsub>
 80040dc:	4603      	mov	r3, r0
 80040de:	4619      	mov	r1, r3
 80040e0:	4620      	mov	r0, r4
 80040e2:	f7fc ff03 	bl	8000eec <__aeabi_fdiv>
 80040e6:	4603      	mov	r3, r0
 80040e8:	461c      	mov	r4, r3
 80040ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040ec:	69b8      	ldr	r0, [r7, #24]
 80040ee:	f7fc fd3f 	bl	8000b70 <__aeabi_fsub>
 80040f2:	4603      	mov	r3, r0
 80040f4:	461d      	mov	r5, r3
 80040f6:	69f9      	ldr	r1, [r7, #28]
 80040f8:	69b8      	ldr	r0, [r7, #24]
 80040fa:	f7fc fd39 	bl	8000b70 <__aeabi_fsub>
 80040fe:	4603      	mov	r3, r0
 8004100:	4619      	mov	r1, r3
 8004102:	4628      	mov	r0, r5
 8004104:	f7fc fef2 	bl	8000eec <__aeabi_fdiv>
 8004108:	4603      	mov	r3, r0
 800410a:	4619      	mov	r1, r3
 800410c:	4620      	mov	r0, r4
 800410e:	f000 ff01 	bl	8004f14 <qFIS_Min>
 8004112:	6178      	str	r0, [r7, #20]

    return qFIS_Max( tmp , 0.0f );
 8004114:	f04f 0100 	mov.w	r1, #0
 8004118:	6978      	ldr	r0, [r7, #20]
 800411a:	f000 ff16 	bl	8004f4a <qFIS_Max>
 800411e:	4603      	mov	r3, r0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3728      	adds	r7, #40	; 0x28
 8004124:	46bd      	mov	sp, r7
 8004126:	bdb0      	pop	{r4, r5, r7, pc}

08004128 <qFIS_TrapMF>:
/*============================================================================*/
static float qFIS_TrapMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 8004128:	b590      	push	{r4, r7, lr}
 800412a:	b08b      	sub	sp, #44	; 0x2c
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
    float a, b, c, d, tmp;
    float x = in[ 0 ].value;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	627b      	str	r3, [r7, #36]	; 0x24
    (void)n;

    a = p[ 0 ];
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	623b      	str	r3, [r7, #32]
    b = p[ 1 ];
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	61fb      	str	r3, [r7, #28]
    c = p[ 2 ];
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	61bb      	str	r3, [r7, #24]
    d = p[ 3 ];
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	617b      	str	r3, [r7, #20]
    tmp = qFIS_Min( ( x - a )/( b - a ) , 1.0f );
 8004152:	6a39      	ldr	r1, [r7, #32]
 8004154:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004156:	f7fc fd0b 	bl	8000b70 <__aeabi_fsub>
 800415a:	4603      	mov	r3, r0
 800415c:	461c      	mov	r4, r3
 800415e:	6a39      	ldr	r1, [r7, #32]
 8004160:	69f8      	ldr	r0, [r7, #28]
 8004162:	f7fc fd05 	bl	8000b70 <__aeabi_fsub>
 8004166:	4603      	mov	r3, r0
 8004168:	4619      	mov	r1, r3
 800416a:	4620      	mov	r0, r4
 800416c:	f7fc febe 	bl	8000eec <__aeabi_fdiv>
 8004170:	4603      	mov	r3, r0
 8004172:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004176:	4618      	mov	r0, r3
 8004178:	f000 fecc 	bl	8004f14 <qFIS_Min>
 800417c:	6138      	str	r0, [r7, #16]
    tmp = qFIS_Min( tmp, ( d - x )/( d - c ) ) ;
 800417e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004180:	6978      	ldr	r0, [r7, #20]
 8004182:	f7fc fcf5 	bl	8000b70 <__aeabi_fsub>
 8004186:	4603      	mov	r3, r0
 8004188:	461c      	mov	r4, r3
 800418a:	69b9      	ldr	r1, [r7, #24]
 800418c:	6978      	ldr	r0, [r7, #20]
 800418e:	f7fc fcef 	bl	8000b70 <__aeabi_fsub>
 8004192:	4603      	mov	r3, r0
 8004194:	4619      	mov	r1, r3
 8004196:	4620      	mov	r0, r4
 8004198:	f7fc fea8 	bl	8000eec <__aeabi_fdiv>
 800419c:	4603      	mov	r3, r0
 800419e:	4619      	mov	r1, r3
 80041a0:	6938      	ldr	r0, [r7, #16]
 80041a2:	f000 feb7 	bl	8004f14 <qFIS_Min>
 80041a6:	6138      	str	r0, [r7, #16]

    return qFIS_Max( tmp , 0.0f );
 80041a8:	f04f 0100 	mov.w	r1, #0
 80041ac:	6938      	ldr	r0, [r7, #16]
 80041ae:	f000 fecc 	bl	8004f4a <qFIS_Max>
 80041b2:	4603      	mov	r3, r0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	372c      	adds	r7, #44	; 0x2c
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd90      	pop	{r4, r7, pc}

080041bc <qFIS_GBellMF>:
/*============================================================================*/
static float qFIS_GBellMF( const qFIS_IO_Base_t * const in,
                           const float *p,
                           const size_t n )
{
 80041bc:	b590      	push	{r4, r7, lr}
 80041be:	b089      	sub	sp, #36	; 0x24
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
    float a, b, c;
    float x = in[ 0 ].value;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	61fb      	str	r3, [r7, #28]
    (void)n;

    a = p[ 0 ];
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	61bb      	str	r3, [r7, #24]
    b = p[ 1 ];
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	617b      	str	r3, [r7, #20]
    c = p[ 2 ];
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	613b      	str	r3, [r7, #16]
    
    return ( 1.0f/( 1.0f + QLIB_POW( QLIB_ABS( ( x - c )/a ) , 2.0f*b ) ) );
 80041e0:	6939      	ldr	r1, [r7, #16]
 80041e2:	69f8      	ldr	r0, [r7, #28]
 80041e4:	f7fc fcc4 	bl	8000b70 <__aeabi_fsub>
 80041e8:	4603      	mov	r3, r0
 80041ea:	69b9      	ldr	r1, [r7, #24]
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7fc fe7d 	bl	8000eec <__aeabi_fdiv>
 80041f2:	4603      	mov	r3, r0
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7fe fc25 	bl	8002a44 <qFFMath_Abs>
 80041fa:	4604      	mov	r4, r0
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	4619      	mov	r1, r3
 8004200:	4618      	mov	r0, r3
 8004202:	f7fc fcb7 	bl	8000b74 <__addsf3>
 8004206:	4603      	mov	r3, r0
 8004208:	4619      	mov	r1, r3
 800420a:	4620      	mov	r0, r4
 800420c:	f7fe fdcc 	bl	8002da8 <qFFMath_Pow>
 8004210:	4603      	mov	r3, r0
 8004212:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004216:	4618      	mov	r0, r3
 8004218:	f7fc fcac 	bl	8000b74 <__addsf3>
 800421c:	4603      	mov	r3, r0
 800421e:	4619      	mov	r1, r3
 8004220:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004224:	f7fc fe62 	bl	8000eec <__aeabi_fdiv>
 8004228:	4603      	mov	r3, r0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3724      	adds	r7, #36	; 0x24
 800422e:	46bd      	mov	sp, r7
 8004230:	bd90      	pop	{r4, r7, pc}

08004232 <qFIS_GaussMF>:
/*============================================================================*/
static float qFIS_GaussMF( const qFIS_IO_Base_t * const in,
                           const float *p,
                           const size_t n )
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b088      	sub	sp, #32
 8004236:	af00      	add	r7, sp, #0
 8004238:	60f8      	str	r0, [r7, #12]
 800423a:	60b9      	str	r1, [r7, #8]
 800423c:	607a      	str	r2, [r7, #4]
    float a, c, tmp;
    float x = in[ 0 ].value;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	61fb      	str	r3, [r7, #28]
    (void)n;

    a = p[ 0 ];
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	61bb      	str	r3, [r7, #24]
    c = p[ 1 ];
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	617b      	str	r3, [r7, #20]
    tmp = ( x - c )/a;
 8004250:	6979      	ldr	r1, [r7, #20]
 8004252:	69f8      	ldr	r0, [r7, #28]
 8004254:	f7fc fc8c 	bl	8000b70 <__aeabi_fsub>
 8004258:	4603      	mov	r3, r0
 800425a:	69b9      	ldr	r1, [r7, #24]
 800425c:	4618      	mov	r0, r3
 800425e:	f7fc fe45 	bl	8000eec <__aeabi_fdiv>
 8004262:	4603      	mov	r3, r0
 8004264:	613b      	str	r3, [r7, #16]

    return QLIB_EXP( -0.5f*tmp*tmp );
 8004266:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
 800426a:	6938      	ldr	r0, [r7, #16]
 800426c:	f7fc fd8a 	bl	8000d84 <__aeabi_fmul>
 8004270:	4603      	mov	r3, r0
 8004272:	6939      	ldr	r1, [r7, #16]
 8004274:	4618      	mov	r0, r3
 8004276:	f7fc fd85 	bl	8000d84 <__aeabi_fmul>
 800427a:	4603      	mov	r3, r0
 800427c:	4618      	mov	r0, r3
 800427e:	f7fe fd6b 	bl	8002d58 <qFFMath_Exp>
 8004282:	4603      	mov	r3, r0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3720      	adds	r7, #32
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <qFIS_Gauss2MF>:
/*============================================================================*/
static float qFIS_Gauss2MF( const qFIS_IO_Base_t * const in,
                            const float *p,
                            const size_t n )
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b08a      	sub	sp, #40	; 0x28
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
    float c1, c2, f1, f2;
    float x = in[ 0 ].value;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	627b      	str	r3, [r7, #36]	; 0x24

    c1 = p[ 1 ];
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	623b      	str	r3, [r7, #32]
    c2 = p[ 3 ];
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	61fb      	str	r3, [r7, #28]
    f1 = ( x <= c1 ) ? qFIS_GaussMF( in , p, n ) : 1.0f;
 80042aa:	6a39      	ldr	r1, [r7, #32]
 80042ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042ae:	f7fc ff11 	bl	80010d4 <__aeabi_fcmple>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d006      	beq.n	80042c6 <qFIS_Gauss2MF+0x3a>
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	68b9      	ldr	r1, [r7, #8]
 80042bc:	68f8      	ldr	r0, [r7, #12]
 80042be:	f7ff ffb8 	bl	8004232 <qFIS_GaussMF>
 80042c2:	4603      	mov	r3, r0
 80042c4:	e001      	b.n	80042ca <qFIS_Gauss2MF+0x3e>
 80042c6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80042ca:	61bb      	str	r3, [r7, #24]
    f2 = ( x <= c2 ) ? qFIS_GaussMF( in , &p[ 2 ], n ) : 1.0f;
 80042cc:	69f9      	ldr	r1, [r7, #28]
 80042ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042d0:	f7fc ff00 	bl	80010d4 <__aeabi_fcmple>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d008      	beq.n	80042ec <qFIS_Gauss2MF+0x60>
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	3308      	adds	r3, #8
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	4619      	mov	r1, r3
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f7ff ffa5 	bl	8004232 <qFIS_GaussMF>
 80042e8:	4603      	mov	r3, r0
 80042ea:	e001      	b.n	80042f0 <qFIS_Gauss2MF+0x64>
 80042ec:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80042f0:	617b      	str	r3, [r7, #20]

    return f1*f2;
 80042f2:	6979      	ldr	r1, [r7, #20]
 80042f4:	69b8      	ldr	r0, [r7, #24]
 80042f6:	f7fc fd45 	bl	8000d84 <__aeabi_fmul>
 80042fa:	4603      	mov	r3, r0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3728      	adds	r7, #40	; 0x28
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <qFIS_SigMF>:
/*============================================================================*/
static float qFIS_SigMF( const qFIS_IO_Base_t * const in,
                         const float *p,
                         const size_t n )
{
 8004304:	b590      	push	{r4, r7, lr}
 8004306:	b089      	sub	sp, #36	; 0x24
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
    float a, b;
    float x = in[ 0 ].value;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	61fb      	str	r3, [r7, #28]
    (void)n;

    a = p[ 0 ];
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	61bb      	str	r3, [r7, #24]
    b = p[ 1 ];
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	617b      	str	r3, [r7, #20]

    return 1.0f/( 1.0f + QLIB_EXP( -a*( x - b ) ) );
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8004328:	6979      	ldr	r1, [r7, #20]
 800432a:	69f8      	ldr	r0, [r7, #28]
 800432c:	f7fc fc20 	bl	8000b70 <__aeabi_fsub>
 8004330:	4603      	mov	r3, r0
 8004332:	4619      	mov	r1, r3
 8004334:	4620      	mov	r0, r4
 8004336:	f7fc fd25 	bl	8000d84 <__aeabi_fmul>
 800433a:	4603      	mov	r3, r0
 800433c:	4618      	mov	r0, r3
 800433e:	f7fe fd0b 	bl	8002d58 <qFFMath_Exp>
 8004342:	4603      	mov	r3, r0
 8004344:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004348:	4618      	mov	r0, r3
 800434a:	f7fc fc13 	bl	8000b74 <__addsf3>
 800434e:	4603      	mov	r3, r0
 8004350:	4619      	mov	r1, r3
 8004352:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004356:	f7fc fdc9 	bl	8000eec <__aeabi_fdiv>
 800435a:	4603      	mov	r3, r0
}
 800435c:	4618      	mov	r0, r3
 800435e:	3724      	adds	r7, #36	; 0x24
 8004360:	46bd      	mov	sp, r7
 8004362:	bd90      	pop	{r4, r7, pc}

08004364 <qFIS_TSigMF>:
/*============================================================================*/
static float qFIS_TSigMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b08a      	sub	sp, #40	; 0x28
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
    float a, b, y;
    float x = in[ 0 ].value;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	623b      	str	r3, [r7, #32]
    float min = in[ 0 ].min;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	61fb      	str	r3, [r7, #28]
    float max = in[ 0 ].max;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	61bb      	str	r3, [r7, #24]
    (void)n;

    a = p[ 0 ]; /*slope*/
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	617b      	str	r3, [r7, #20]
    b = p[ 1 ]; /*inflection*/
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	613b      	str	r3, [r7, #16]
    if ( qFMathEx_Equal( x, 1.0f ) ) {
 800438e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004392:	6a38      	ldr	r0, [r7, #32]
 8004394:	f000 feab 	bl	80050ee <qFMathEx_Equal>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00d      	beq.n	80043ba <qFIS_TSigMF+0x56>
        if ( a >= 0.0f ) {
 800439e:	f04f 0100 	mov.w	r1, #0
 80043a2:	6978      	ldr	r0, [r7, #20]
 80043a4:	f7fc fea0 	bl	80010e8 <__aeabi_fcmpge>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d002      	beq.n	80043b4 <qFIS_TSigMF+0x50>
            y = max;
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	627b      	str	r3, [r7, #36]	; 0x24
 80043b2:	e033      	b.n	800441c <qFIS_TSigMF+0xb8>
        }
        else {
            y = min;
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	627b      	str	r3, [r7, #36]	; 0x24
 80043b8:	e030      	b.n	800441c <qFIS_TSigMF+0xb8>
        }
    }
    else if ( qFMathEx_Equal( x, 0.0f ) ) {
 80043ba:	f04f 0100 	mov.w	r1, #0
 80043be:	6a38      	ldr	r0, [r7, #32]
 80043c0:	f000 fe95 	bl	80050ee <qFMathEx_Equal>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00d      	beq.n	80043e6 <qFIS_TSigMF+0x82>
        if ( a >= 0.0f ) {
 80043ca:	f04f 0100 	mov.w	r1, #0
 80043ce:	6978      	ldr	r0, [r7, #20]
 80043d0:	f7fc fe8a 	bl	80010e8 <__aeabi_fcmpge>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d002      	beq.n	80043e0 <qFIS_TSigMF+0x7c>
            y = min;
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	627b      	str	r3, [r7, #36]	; 0x24
 80043de:	e01d      	b.n	800441c <qFIS_TSigMF+0xb8>
        }
        else {
            y = max;
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	627b      	str	r3, [r7, #36]	; 0x24
 80043e4:	e01a      	b.n	800441c <qFIS_TSigMF+0xb8>
        }
    }
    else {
        /*cstat -MISRAC2012-Dir-4.11_a*/
        y = b - ( QLIB_LOG( ( 1.0f/x ) - 1.0f )/a );
 80043e6:	6a39      	ldr	r1, [r7, #32]
 80043e8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80043ec:	f7fc fd7e 	bl	8000eec <__aeabi_fdiv>
 80043f0:	4603      	mov	r3, r0
 80043f2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7fc fbba 	bl	8000b70 <__aeabi_fsub>
 80043fc:	4603      	mov	r3, r0
 80043fe:	4618      	mov	r0, r3
 8004400:	f7fe fcbe 	bl	8002d80 <qFFMath_Log>
 8004404:	4603      	mov	r3, r0
 8004406:	6979      	ldr	r1, [r7, #20]
 8004408:	4618      	mov	r0, r3
 800440a:	f7fc fd6f 	bl	8000eec <__aeabi_fdiv>
 800440e:	4603      	mov	r3, r0
 8004410:	4619      	mov	r1, r3
 8004412:	6938      	ldr	r0, [r7, #16]
 8004414:	f7fc fbac 	bl	8000b70 <__aeabi_fsub>
 8004418:	4603      	mov	r3, r0
 800441a:	627b      	str	r3, [r7, #36]	; 0x24
        /*cstat +MISRAC2012-Dir-4.11_a*/
    }

    return y;
 800441c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800441e:	4618      	mov	r0, r3
 8004420:	3728      	adds	r7, #40	; 0x28
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <qFIS_DSigMF>:
/*============================================================================*/
static float qFIS_DSigMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 8004426:	b590      	push	{r4, r7, lr}
 8004428:	b085      	sub	sp, #20
 800442a:	af00      	add	r7, sp, #0
 800442c:	60f8      	str	r0, [r7, #12]
 800442e:	60b9      	str	r1, [r7, #8]
 8004430:	607a      	str	r2, [r7, #4]
    return QLIB_ABS( qFIS_SigMF( in , p, n ) - qFIS_SigMF( in , &p[ 2 ], n ) );
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	68b9      	ldr	r1, [r7, #8]
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f7ff ff64 	bl	8004304 <qFIS_SigMF>
 800443c:	4604      	mov	r4, r0
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	3308      	adds	r3, #8
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	4619      	mov	r1, r3
 8004446:	68f8      	ldr	r0, [r7, #12]
 8004448:	f7ff ff5c 	bl	8004304 <qFIS_SigMF>
 800444c:	4603      	mov	r3, r0
 800444e:	4619      	mov	r1, r3
 8004450:	4620      	mov	r0, r4
 8004452:	f7fc fb8d 	bl	8000b70 <__aeabi_fsub>
 8004456:	4603      	mov	r3, r0
 8004458:	4618      	mov	r0, r3
 800445a:	f7fe faf3 	bl	8002a44 <qFFMath_Abs>
 800445e:	4603      	mov	r3, r0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3714      	adds	r7, #20
 8004464:	46bd      	mov	sp, r7
 8004466:	bd90      	pop	{r4, r7, pc}

08004468 <qFIS_PSigMF>:
/*============================================================================*/
static float qFIS_PSigMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 8004468:	b590      	push	{r4, r7, lr}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
    return QLIB_ABS( qFIS_SigMF( in , p, n )*qFIS_SigMF( in , &p[ 2 ], n ) );
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	68b9      	ldr	r1, [r7, #8]
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f7ff ff43 	bl	8004304 <qFIS_SigMF>
 800447e:	4604      	mov	r4, r0
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	3308      	adds	r3, #8
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	4619      	mov	r1, r3
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	f7ff ff3b 	bl	8004304 <qFIS_SigMF>
 800448e:	4603      	mov	r3, r0
 8004490:	4619      	mov	r1, r3
 8004492:	4620      	mov	r0, r4
 8004494:	f7fc fc76 	bl	8000d84 <__aeabi_fmul>
 8004498:	4603      	mov	r3, r0
 800449a:	4618      	mov	r0, r3
 800449c:	f7fe fad2 	bl	8002a44 <qFFMath_Abs>
 80044a0:	4603      	mov	r3, r0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3714      	adds	r7, #20
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd90      	pop	{r4, r7, pc}

080044aa <qFIS_SMF>:
/*============================================================================*/
static float qFIS_SMF( const qFIS_IO_Base_t * const in,
                       const float *p,
                       const size_t n )
{
 80044aa:	b590      	push	{r4, r7, lr}
 80044ac:	b08b      	sub	sp, #44	; 0x2c
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	60f8      	str	r0, [r7, #12]
 80044b2:	60b9      	str	r1, [r7, #8]
 80044b4:	607a      	str	r2, [r7, #4]
    float a, b, tmp, y;
    float x = in[ 0 ].value;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	623b      	str	r3, [r7, #32]
    (void)n;

    a = p[ 0 ];
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	61fb      	str	r3, [r7, #28]
    b = p[ 1 ];
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	61bb      	str	r3, [r7, #24]
    if ( x <= a ) {
 80044c8:	69f9      	ldr	r1, [r7, #28]
 80044ca:	6a38      	ldr	r0, [r7, #32]
 80044cc:	f7fc fe02 	bl	80010d4 <__aeabi_fcmple>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <qFIS_SMF+0x34>
        y =  0.0f;
 80044d6:	f04f 0300 	mov.w	r3, #0
 80044da:	627b      	str	r3, [r7, #36]	; 0x24
 80044dc:	e081      	b.n	80045e2 <qFIS_SMF+0x138>
    }
    else if ( x >= b ) {
 80044de:	69b9      	ldr	r1, [r7, #24]
 80044e0:	6a38      	ldr	r0, [r7, #32]
 80044e2:	f7fc fe01 	bl	80010e8 <__aeabi_fcmpge>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d003      	beq.n	80044f4 <qFIS_SMF+0x4a>
        y = 1.0f;
 80044ec:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80044f0:	627b      	str	r3, [r7, #36]	; 0x24
 80044f2:	e076      	b.n	80045e2 <qFIS_SMF+0x138>
    }
    else if ( ( x >= a ) && ( x <= ( ( a + b )*0.5f ) ) ) {
 80044f4:	69f9      	ldr	r1, [r7, #28]
 80044f6:	6a38      	ldr	r0, [r7, #32]
 80044f8:	f7fc fdf6 	bl	80010e8 <__aeabi_fcmpge>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d02f      	beq.n	8004562 <qFIS_SMF+0xb8>
 8004502:	69b9      	ldr	r1, [r7, #24]
 8004504:	69f8      	ldr	r0, [r7, #28]
 8004506:	f7fc fb35 	bl	8000b74 <__addsf3>
 800450a:	4603      	mov	r3, r0
 800450c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004510:	4618      	mov	r0, r3
 8004512:	f7fc fc37 	bl	8000d84 <__aeabi_fmul>
 8004516:	4603      	mov	r3, r0
 8004518:	4619      	mov	r1, r3
 800451a:	6a38      	ldr	r0, [r7, #32]
 800451c:	f7fc fdda 	bl	80010d4 <__aeabi_fcmple>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d01d      	beq.n	8004562 <qFIS_SMF+0xb8>
        tmp = ( x - a )/( b - a );
 8004526:	69f9      	ldr	r1, [r7, #28]
 8004528:	6a38      	ldr	r0, [r7, #32]
 800452a:	f7fc fb21 	bl	8000b70 <__aeabi_fsub>
 800452e:	4603      	mov	r3, r0
 8004530:	461c      	mov	r4, r3
 8004532:	69f9      	ldr	r1, [r7, #28]
 8004534:	69b8      	ldr	r0, [r7, #24]
 8004536:	f7fc fb1b 	bl	8000b70 <__aeabi_fsub>
 800453a:	4603      	mov	r3, r0
 800453c:	4619      	mov	r1, r3
 800453e:	4620      	mov	r0, r4
 8004540:	f7fc fcd4 	bl	8000eec <__aeabi_fdiv>
 8004544:	4603      	mov	r3, r0
 8004546:	617b      	str	r3, [r7, #20]
        y = 2.0f*tmp*tmp;
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	4619      	mov	r1, r3
 800454c:	4618      	mov	r0, r3
 800454e:	f7fc fb11 	bl	8000b74 <__addsf3>
 8004552:	4603      	mov	r3, r0
 8004554:	4619      	mov	r1, r3
 8004556:	6978      	ldr	r0, [r7, #20]
 8004558:	f7fc fc14 	bl	8000d84 <__aeabi_fmul>
 800455c:	4603      	mov	r3, r0
 800455e:	627b      	str	r3, [r7, #36]	; 0x24
 8004560:	e03f      	b.n	80045e2 <qFIS_SMF+0x138>
    }
    else if ( ( x <= b ) && ( x >= ( ( a + b )*0.5f ) ) ) {
 8004562:	69b9      	ldr	r1, [r7, #24]
 8004564:	6a38      	ldr	r0, [r7, #32]
 8004566:	f7fc fdb5 	bl	80010d4 <__aeabi_fcmple>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d035      	beq.n	80045dc <qFIS_SMF+0x132>
 8004570:	69b9      	ldr	r1, [r7, #24]
 8004572:	69f8      	ldr	r0, [r7, #28]
 8004574:	f7fc fafe 	bl	8000b74 <__addsf3>
 8004578:	4603      	mov	r3, r0
 800457a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800457e:	4618      	mov	r0, r3
 8004580:	f7fc fc00 	bl	8000d84 <__aeabi_fmul>
 8004584:	4603      	mov	r3, r0
 8004586:	4619      	mov	r1, r3
 8004588:	6a38      	ldr	r0, [r7, #32]
 800458a:	f7fc fdad 	bl	80010e8 <__aeabi_fcmpge>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d023      	beq.n	80045dc <qFIS_SMF+0x132>
        tmp = ( x - b )/( b - a );
 8004594:	69b9      	ldr	r1, [r7, #24]
 8004596:	6a38      	ldr	r0, [r7, #32]
 8004598:	f7fc faea 	bl	8000b70 <__aeabi_fsub>
 800459c:	4603      	mov	r3, r0
 800459e:	461c      	mov	r4, r3
 80045a0:	69f9      	ldr	r1, [r7, #28]
 80045a2:	69b8      	ldr	r0, [r7, #24]
 80045a4:	f7fc fae4 	bl	8000b70 <__aeabi_fsub>
 80045a8:	4603      	mov	r3, r0
 80045aa:	4619      	mov	r1, r3
 80045ac:	4620      	mov	r0, r4
 80045ae:	f7fc fc9d 	bl	8000eec <__aeabi_fdiv>
 80045b2:	4603      	mov	r3, r0
 80045b4:	617b      	str	r3, [r7, #20]
        y = ( 1.0f - ( 2.0f*tmp*tmp ) );
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	4619      	mov	r1, r3
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fc fada 	bl	8000b74 <__addsf3>
 80045c0:	4603      	mov	r3, r0
 80045c2:	6979      	ldr	r1, [r7, #20]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7fc fbdd 	bl	8000d84 <__aeabi_fmul>
 80045ca:	4603      	mov	r3, r0
 80045cc:	4619      	mov	r1, r3
 80045ce:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80045d2:	f7fc facd 	bl	8000b70 <__aeabi_fsub>
 80045d6:	4603      	mov	r3, r0
 80045d8:	627b      	str	r3, [r7, #36]	; 0x24
 80045da:	e002      	b.n	80045e2 <qFIS_SMF+0x138>
    }
    else {
        y = 0.0f;
 80045dc:	f04f 0300 	mov.w	r3, #0
 80045e0:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return y;
 80045e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	372c      	adds	r7, #44	; 0x2c
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd90      	pop	{r4, r7, pc}

080045ec <qFIS_TSMF>:
/*============================================================================*/
static float qFIS_TSMF( const qFIS_IO_Base_t * const in,
                        const float *p,
                        const size_t n )
{
 80045ec:	b590      	push	{r4, r7, lr}
 80045ee:	b091      	sub	sp, #68	; 0x44
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
    float diff, a, b, ta, tb, ma, mb;
    float x = in[ 0 ].value;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    (void)n;
    qFIS_IO_Base_t tmp = { 0.0f, 0.0f, 0.0f };
 80045fe:	f04f 0300 	mov.w	r3, #0
 8004602:	617b      	str	r3, [r7, #20]
 8004604:	f04f 0300 	mov.w	r3, #0
 8004608:	61bb      	str	r3, [r7, #24]
 800460a:	f04f 0300 	mov.w	r3, #0
 800460e:	61fb      	str	r3, [r7, #28]

    a = p[ 0 ]; /*start*/
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	63bb      	str	r3, [r7, #56]	; 0x38
    b = p[ 1 ]; /*end*/
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	637b      	str	r3, [r7, #52]	; 0x34
    diff = b - a;
 800461c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800461e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004620:	f7fc faa6 	bl	8000b70 <__aeabi_fsub>
 8004624:	4603      	mov	r3, r0
 8004626:	633b      	str	r3, [r7, #48]	; 0x30
    diff = 0.5f*diff*diff;
 8004628:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800462c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800462e:	f7fc fba9 	bl	8000d84 <__aeabi_fmul>
 8004632:	4603      	mov	r3, r0
 8004634:	4619      	mov	r1, r3
 8004636:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004638:	f7fc fba4 	bl	8000d84 <__aeabi_fmul>
 800463c:	4603      	mov	r3, r0
 800463e:	633b      	str	r3, [r7, #48]	; 0x30
    /*cstat -MISRAC2012-Dir-4.11_a -MISRAC2012-Dir-4.11_b*/
    ta = a + QLIB_SQRT( x*diff );
 8004640:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004642:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004644:	f7fc fb9e 	bl	8000d84 <__aeabi_fmul>
 8004648:	4603      	mov	r3, r0
 800464a:	4618      	mov	r0, r3
 800464c:	f7fe fa0f 	bl	8002a6e <qFFMath_Sqrt>
 8004650:	4603      	mov	r3, r0
 8004652:	4619      	mov	r1, r3
 8004654:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004656:	f7fc fa8d 	bl	8000b74 <__addsf3>
 800465a:	4603      	mov	r3, r0
 800465c:	62fb      	str	r3, [r7, #44]	; 0x2c
    tmp.value = ta;
 800465e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004660:	61fb      	str	r3, [r7, #28]
    ma = qFIS_SMF( &tmp, p, n );
 8004662:	f107 0314 	add.w	r3, r7, #20
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	68b9      	ldr	r1, [r7, #8]
 800466a:	4618      	mov	r0, r3
 800466c:	f7ff ff1d 	bl	80044aa <qFIS_SMF>
 8004670:	62b8      	str	r0, [r7, #40]	; 0x28
    tb = b + QLIB_SQRT( -( x - 1.0f )*diff );
 8004672:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004676:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004678:	f7fc fa7a 	bl	8000b70 <__aeabi_fsub>
 800467c:	4603      	mov	r3, r0
 800467e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004682:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004684:	4618      	mov	r0, r3
 8004686:	f7fc fb7d 	bl	8000d84 <__aeabi_fmul>
 800468a:	4603      	mov	r3, r0
 800468c:	4618      	mov	r0, r3
 800468e:	f7fe f9ee 	bl	8002a6e <qFFMath_Sqrt>
 8004692:	4603      	mov	r3, r0
 8004694:	4619      	mov	r1, r3
 8004696:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004698:	f7fc fa6c 	bl	8000b74 <__addsf3>
 800469c:	4603      	mov	r3, r0
 800469e:	627b      	str	r3, [r7, #36]	; 0x24
    tmp.value = tb;
 80046a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a2:	61fb      	str	r3, [r7, #28]
    mb = qFIS_SMF( &tmp, p, n );
 80046a4:	f107 0314 	add.w	r3, r7, #20
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	68b9      	ldr	r1, [r7, #8]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7ff fefc 	bl	80044aa <qFIS_SMF>
 80046b2:	6238      	str	r0, [r7, #32]
    /*cstat +MISRAC2012-Dir-4.11_a +MISRAC2012-Dir-4.11_b*/
    return  ( QLIB_ABS( x - ma ) < QLIB_ABS( x - mb ) ) ? ta : tb;
 80046b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046b6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80046b8:	f7fc fa5a 	bl	8000b70 <__aeabi_fsub>
 80046bc:	4603      	mov	r3, r0
 80046be:	4618      	mov	r0, r3
 80046c0:	f7fe f9c0 	bl	8002a44 <qFFMath_Abs>
 80046c4:	4604      	mov	r4, r0
 80046c6:	6a39      	ldr	r1, [r7, #32]
 80046c8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80046ca:	f7fc fa51 	bl	8000b70 <__aeabi_fsub>
 80046ce:	4603      	mov	r3, r0
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7fe f9b7 	bl	8002a44 <qFFMath_Abs>
 80046d6:	4603      	mov	r3, r0
 80046d8:	4619      	mov	r1, r3
 80046da:	4620      	mov	r0, r4
 80046dc:	f7fc fcf0 	bl	80010c0 <__aeabi_fcmplt>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d001      	beq.n	80046ea <qFIS_TSMF+0xfe>
 80046e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e8:	e000      	b.n	80046ec <qFIS_TSMF+0x100>
 80046ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3744      	adds	r7, #68	; 0x44
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd90      	pop	{r4, r7, pc}

080046f4 <qFIS_ZMF>:
/*============================================================================*/
static float qFIS_ZMF( const qFIS_IO_Base_t * const in,
                       const float *p,
                       const size_t n )
{
 80046f4:	b590      	push	{r4, r7, lr}
 80046f6:	b08b      	sub	sp, #44	; 0x2c
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
    float a, b, tmp, y;
    float x = in[ 0 ].value;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	623b      	str	r3, [r7, #32]
    (void)n;

    a = p[ 0 ];
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	61fb      	str	r3, [r7, #28]
    b = p[ 1 ];
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	61bb      	str	r3, [r7, #24]
    if ( x <= a ) {
 8004712:	69f9      	ldr	r1, [r7, #28]
 8004714:	6a38      	ldr	r0, [r7, #32]
 8004716:	f7fc fcdd 	bl	80010d4 <__aeabi_fcmple>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d003      	beq.n	8004728 <qFIS_ZMF+0x34>
        y = 1.0f;
 8004720:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004724:	627b      	str	r3, [r7, #36]	; 0x24
 8004726:	e081      	b.n	800482c <qFIS_ZMF+0x138>
    }
    else if ( x >= b ) {
 8004728:	69b9      	ldr	r1, [r7, #24]
 800472a:	6a38      	ldr	r0, [r7, #32]
 800472c:	f7fc fcdc 	bl	80010e8 <__aeabi_fcmpge>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d003      	beq.n	800473e <qFIS_ZMF+0x4a>
        y = 0.0f;
 8004736:	f04f 0300 	mov.w	r3, #0
 800473a:	627b      	str	r3, [r7, #36]	; 0x24
 800473c:	e076      	b.n	800482c <qFIS_ZMF+0x138>
    }
    else if ( ( x >= a ) && ( x <= ( ( a + b )*0.5f ) ) ) {
 800473e:	69f9      	ldr	r1, [r7, #28]
 8004740:	6a38      	ldr	r0, [r7, #32]
 8004742:	f7fc fcd1 	bl	80010e8 <__aeabi_fcmpge>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d035      	beq.n	80047b8 <qFIS_ZMF+0xc4>
 800474c:	69b9      	ldr	r1, [r7, #24]
 800474e:	69f8      	ldr	r0, [r7, #28]
 8004750:	f7fc fa10 	bl	8000b74 <__addsf3>
 8004754:	4603      	mov	r3, r0
 8004756:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800475a:	4618      	mov	r0, r3
 800475c:	f7fc fb12 	bl	8000d84 <__aeabi_fmul>
 8004760:	4603      	mov	r3, r0
 8004762:	4619      	mov	r1, r3
 8004764:	6a38      	ldr	r0, [r7, #32]
 8004766:	f7fc fcb5 	bl	80010d4 <__aeabi_fcmple>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d023      	beq.n	80047b8 <qFIS_ZMF+0xc4>
        tmp = ( x - a )/( b - a );
 8004770:	69f9      	ldr	r1, [r7, #28]
 8004772:	6a38      	ldr	r0, [r7, #32]
 8004774:	f7fc f9fc 	bl	8000b70 <__aeabi_fsub>
 8004778:	4603      	mov	r3, r0
 800477a:	461c      	mov	r4, r3
 800477c:	69f9      	ldr	r1, [r7, #28]
 800477e:	69b8      	ldr	r0, [r7, #24]
 8004780:	f7fc f9f6 	bl	8000b70 <__aeabi_fsub>
 8004784:	4603      	mov	r3, r0
 8004786:	4619      	mov	r1, r3
 8004788:	4620      	mov	r0, r4
 800478a:	f7fc fbaf 	bl	8000eec <__aeabi_fdiv>
 800478e:	4603      	mov	r3, r0
 8004790:	617b      	str	r3, [r7, #20]
        y = 1.0f - ( 2.0f*tmp*tmp );
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	4619      	mov	r1, r3
 8004796:	4618      	mov	r0, r3
 8004798:	f7fc f9ec 	bl	8000b74 <__addsf3>
 800479c:	4603      	mov	r3, r0
 800479e:	6979      	ldr	r1, [r7, #20]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7fc faef 	bl	8000d84 <__aeabi_fmul>
 80047a6:	4603      	mov	r3, r0
 80047a8:	4619      	mov	r1, r3
 80047aa:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80047ae:	f7fc f9df 	bl	8000b70 <__aeabi_fsub>
 80047b2:	4603      	mov	r3, r0
 80047b4:	627b      	str	r3, [r7, #36]	; 0x24
 80047b6:	e039      	b.n	800482c <qFIS_ZMF+0x138>
    }
    else if ( ( x <= b ) && ( x >= ( ( a + b )*0.5f ) ) ) {
 80047b8:	69b9      	ldr	r1, [r7, #24]
 80047ba:	6a38      	ldr	r0, [r7, #32]
 80047bc:	f7fc fc8a 	bl	80010d4 <__aeabi_fcmple>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d02f      	beq.n	8004826 <qFIS_ZMF+0x132>
 80047c6:	69b9      	ldr	r1, [r7, #24]
 80047c8:	69f8      	ldr	r0, [r7, #28]
 80047ca:	f7fc f9d3 	bl	8000b74 <__addsf3>
 80047ce:	4603      	mov	r3, r0
 80047d0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7fc fad5 	bl	8000d84 <__aeabi_fmul>
 80047da:	4603      	mov	r3, r0
 80047dc:	4619      	mov	r1, r3
 80047de:	6a38      	ldr	r0, [r7, #32]
 80047e0:	f7fc fc82 	bl	80010e8 <__aeabi_fcmpge>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d01d      	beq.n	8004826 <qFIS_ZMF+0x132>
        tmp = ( x - b )/( b - a );
 80047ea:	69b9      	ldr	r1, [r7, #24]
 80047ec:	6a38      	ldr	r0, [r7, #32]
 80047ee:	f7fc f9bf 	bl	8000b70 <__aeabi_fsub>
 80047f2:	4603      	mov	r3, r0
 80047f4:	461c      	mov	r4, r3
 80047f6:	69f9      	ldr	r1, [r7, #28]
 80047f8:	69b8      	ldr	r0, [r7, #24]
 80047fa:	f7fc f9b9 	bl	8000b70 <__aeabi_fsub>
 80047fe:	4603      	mov	r3, r0
 8004800:	4619      	mov	r1, r3
 8004802:	4620      	mov	r0, r4
 8004804:	f7fc fb72 	bl	8000eec <__aeabi_fdiv>
 8004808:	4603      	mov	r3, r0
 800480a:	617b      	str	r3, [r7, #20]
        y = 2.0f*tmp*tmp;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	4619      	mov	r1, r3
 8004810:	4618      	mov	r0, r3
 8004812:	f7fc f9af 	bl	8000b74 <__addsf3>
 8004816:	4603      	mov	r3, r0
 8004818:	4619      	mov	r1, r3
 800481a:	6978      	ldr	r0, [r7, #20]
 800481c:	f7fc fab2 	bl	8000d84 <__aeabi_fmul>
 8004820:	4603      	mov	r3, r0
 8004822:	627b      	str	r3, [r7, #36]	; 0x24
 8004824:	e002      	b.n	800482c <qFIS_ZMF+0x138>
    }
    else {
        y = 0.0f;
 8004826:	f04f 0300 	mov.w	r3, #0
 800482a:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return y;
 800482c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800482e:	4618      	mov	r0, r3
 8004830:	372c      	adds	r7, #44	; 0x2c
 8004832:	46bd      	mov	sp, r7
 8004834:	bd90      	pop	{r4, r7, pc}

08004836 <qFIS_LinSMF>:
/*============================================================================*/
static float qFIS_LinSMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 8004836:	b590      	push	{r4, r7, lr}
 8004838:	b089      	sub	sp, #36	; 0x24
 800483a:	af00      	add	r7, sp, #0
 800483c:	60f8      	str	r0, [r7, #12]
 800483e:	60b9      	str	r1, [r7, #8]
 8004840:	607a      	str	r2, [r7, #4]
    float a, b, y;
    float x = in[ 0 ].value;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	61bb      	str	r3, [r7, #24]
    (void)n;

    a = p[ 0 ];
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	617b      	str	r3, [r7, #20]
    b = p[ 1 ];
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	613b      	str	r3, [r7, #16]
    if ( a < b ) {
 8004854:	6939      	ldr	r1, [r7, #16]
 8004856:	6978      	ldr	r0, [r7, #20]
 8004858:	f7fc fc32 	bl	80010c0 <__aeabi_fcmplt>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d027      	beq.n	80048b2 <qFIS_LinSMF+0x7c>
        if ( x < a ) {
 8004862:	6979      	ldr	r1, [r7, #20]
 8004864:	69b8      	ldr	r0, [r7, #24]
 8004866:	f7fc fc2b 	bl	80010c0 <__aeabi_fcmplt>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d003      	beq.n	8004878 <qFIS_LinSMF+0x42>
            y = 0.0f;
 8004870:	f04f 0300 	mov.w	r3, #0
 8004874:	61fb      	str	r3, [r7, #28]
 8004876:	e034      	b.n	80048e2 <qFIS_LinSMF+0xac>
        }
        else if ( x > b ) {
 8004878:	6939      	ldr	r1, [r7, #16]
 800487a:	69b8      	ldr	r0, [r7, #24]
 800487c:	f7fc fc3e 	bl	80010fc <__aeabi_fcmpgt>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d003      	beq.n	800488e <qFIS_LinSMF+0x58>
            y = 1.0f;
 8004886:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800488a:	61fb      	str	r3, [r7, #28]
 800488c:	e029      	b.n	80048e2 <qFIS_LinSMF+0xac>
        }
        else {
            y = ( x - a )/( b - a );
 800488e:	6979      	ldr	r1, [r7, #20]
 8004890:	69b8      	ldr	r0, [r7, #24]
 8004892:	f7fc f96d 	bl	8000b70 <__aeabi_fsub>
 8004896:	4603      	mov	r3, r0
 8004898:	461c      	mov	r4, r3
 800489a:	6979      	ldr	r1, [r7, #20]
 800489c:	6938      	ldr	r0, [r7, #16]
 800489e:	f7fc f967 	bl	8000b70 <__aeabi_fsub>
 80048a2:	4603      	mov	r3, r0
 80048a4:	4619      	mov	r1, r3
 80048a6:	4620      	mov	r0, r4
 80048a8:	f7fc fb20 	bl	8000eec <__aeabi_fdiv>
 80048ac:	4603      	mov	r3, r0
 80048ae:	61fb      	str	r3, [r7, #28]
 80048b0:	e017      	b.n	80048e2 <qFIS_LinSMF+0xac>
        }
    }
    else if ( qFMathEx_Equal( a, b ) ) {
 80048b2:	6939      	ldr	r1, [r7, #16]
 80048b4:	6978      	ldr	r0, [r7, #20]
 80048b6:	f000 fc1a 	bl	80050ee <qFMathEx_Equal>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d00d      	beq.n	80048dc <qFIS_LinSMF+0xa6>
        y = ( x < a ) ? 0.0f : 1.0f;
 80048c0:	6979      	ldr	r1, [r7, #20]
 80048c2:	69b8      	ldr	r0, [r7, #24]
 80048c4:	f7fc fbfc 	bl	80010c0 <__aeabi_fcmplt>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d002      	beq.n	80048d4 <qFIS_LinSMF+0x9e>
 80048ce:	f04f 0300 	mov.w	r3, #0
 80048d2:	e001      	b.n	80048d8 <qFIS_LinSMF+0xa2>
 80048d4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80048d8:	61fb      	str	r3, [r7, #28]
 80048da:	e002      	b.n	80048e2 <qFIS_LinSMF+0xac>
    }
    else {
        y = 0.0f;
 80048dc:	f04f 0300 	mov.w	r3, #0
 80048e0:	61fb      	str	r3, [r7, #28]
    }

    return y;
 80048e2:	69fb      	ldr	r3, [r7, #28]
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3724      	adds	r7, #36	; 0x24
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd90      	pop	{r4, r7, pc}

080048ec <qFIS_LinZMF>:
/*============================================================================*/
static float qFIS_LinZMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 80048ec:	b590      	push	{r4, r7, lr}
 80048ee:	b089      	sub	sp, #36	; 0x24
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
    float a, b, y;
    float x = in[ 0 ].value;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	61bb      	str	r3, [r7, #24]
    (void)n;

    a = p[ 0 ];
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	617b      	str	r3, [r7, #20]
    b = p[ 1 ];
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	613b      	str	r3, [r7, #16]
    if ( a < b ) {
 800490a:	6939      	ldr	r1, [r7, #16]
 800490c:	6978      	ldr	r0, [r7, #20]
 800490e:	f7fc fbd7 	bl	80010c0 <__aeabi_fcmplt>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d027      	beq.n	8004968 <qFIS_LinZMF+0x7c>
        if ( x < a ) {
 8004918:	6979      	ldr	r1, [r7, #20]
 800491a:	69b8      	ldr	r0, [r7, #24]
 800491c:	f7fc fbd0 	bl	80010c0 <__aeabi_fcmplt>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d003      	beq.n	800492e <qFIS_LinZMF+0x42>
            y = 1.0f;
 8004926:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800492a:	61fb      	str	r3, [r7, #28]
 800492c:	e034      	b.n	8004998 <qFIS_LinZMF+0xac>
        }
        else if ( x > b ) {
 800492e:	6939      	ldr	r1, [r7, #16]
 8004930:	69b8      	ldr	r0, [r7, #24]
 8004932:	f7fc fbe3 	bl	80010fc <__aeabi_fcmpgt>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d003      	beq.n	8004944 <qFIS_LinZMF+0x58>
            y = 0.0f;
 800493c:	f04f 0300 	mov.w	r3, #0
 8004940:	61fb      	str	r3, [r7, #28]
 8004942:	e029      	b.n	8004998 <qFIS_LinZMF+0xac>
        }
        else {
            y = ( a - x )/( a - b );
 8004944:	69b9      	ldr	r1, [r7, #24]
 8004946:	6978      	ldr	r0, [r7, #20]
 8004948:	f7fc f912 	bl	8000b70 <__aeabi_fsub>
 800494c:	4603      	mov	r3, r0
 800494e:	461c      	mov	r4, r3
 8004950:	6939      	ldr	r1, [r7, #16]
 8004952:	6978      	ldr	r0, [r7, #20]
 8004954:	f7fc f90c 	bl	8000b70 <__aeabi_fsub>
 8004958:	4603      	mov	r3, r0
 800495a:	4619      	mov	r1, r3
 800495c:	4620      	mov	r0, r4
 800495e:	f7fc fac5 	bl	8000eec <__aeabi_fdiv>
 8004962:	4603      	mov	r3, r0
 8004964:	61fb      	str	r3, [r7, #28]
 8004966:	e017      	b.n	8004998 <qFIS_LinZMF+0xac>
        }
    }
    else if ( qFMathEx_Equal( a, b ) ) {
 8004968:	6939      	ldr	r1, [r7, #16]
 800496a:	6978      	ldr	r0, [r7, #20]
 800496c:	f000 fbbf 	bl	80050ee <qFMathEx_Equal>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00d      	beq.n	8004992 <qFIS_LinZMF+0xa6>
        y = ( x < a ) ? 1.0f : 0.0f;
 8004976:	6979      	ldr	r1, [r7, #20]
 8004978:	69b8      	ldr	r0, [r7, #24]
 800497a:	f7fc fba1 	bl	80010c0 <__aeabi_fcmplt>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d002      	beq.n	800498a <qFIS_LinZMF+0x9e>
 8004984:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004988:	e001      	b.n	800498e <qFIS_LinZMF+0xa2>
 800498a:	f04f 0300 	mov.w	r3, #0
 800498e:	61fb      	str	r3, [r7, #28]
 8004990:	e002      	b.n	8004998 <qFIS_LinZMF+0xac>
    }
    else {
        y = 0.0f;
 8004992:	f04f 0300 	mov.w	r3, #0
 8004996:	61fb      	str	r3, [r7, #28]
    }

    return y;
 8004998:	69fb      	ldr	r3, [r7, #28]
}
 800499a:	4618      	mov	r0, r3
 800499c:	3724      	adds	r7, #36	; 0x24
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd90      	pop	{r4, r7, pc}

080049a2 <qFIS_TZMF>:
/*============================================================================*/
static float qFIS_TZMF( const qFIS_IO_Base_t * const in,
                        const float *p,
                        const size_t n )
{
 80049a2:	b590      	push	{r4, r7, lr}
 80049a4:	b091      	sub	sp, #68	; 0x44
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	60f8      	str	r0, [r7, #12]
 80049aa:	60b9      	str	r1, [r7, #8]
 80049ac:	607a      	str	r2, [r7, #4]
    float diff, a, b, ta, tb, ma, mb;
    float x = in[ 0 ].value;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    (void)n;
    qFIS_IO_Base_t tmp = { 0.0f, 0.0f, 0.0f };
 80049b4:	f04f 0300 	mov.w	r3, #0
 80049b8:	617b      	str	r3, [r7, #20]
 80049ba:	f04f 0300 	mov.w	r3, #0
 80049be:	61bb      	str	r3, [r7, #24]
 80049c0:	f04f 0300 	mov.w	r3, #0
 80049c4:	61fb      	str	r3, [r7, #28]

    a = p[ 0 ]; /*start*/
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	63bb      	str	r3, [r7, #56]	; 0x38
    b = p[ 1 ]; /*end*/
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	637b      	str	r3, [r7, #52]	; 0x34
    diff = b - a;
 80049d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80049d4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80049d6:	f7fc f8cb 	bl	8000b70 <__aeabi_fsub>
 80049da:	4603      	mov	r3, r0
 80049dc:	633b      	str	r3, [r7, #48]	; 0x30
    diff = 0.5f*diff*diff;
 80049de:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80049e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049e4:	f7fc f9ce 	bl	8000d84 <__aeabi_fmul>
 80049e8:	4603      	mov	r3, r0
 80049ea:	4619      	mov	r1, r3
 80049ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049ee:	f7fc f9c9 	bl	8000d84 <__aeabi_fmul>
 80049f2:	4603      	mov	r3, r0
 80049f4:	633b      	str	r3, [r7, #48]	; 0x30
    /*cstat -MISRAC2012-Dir-4.11_a -MISRAC2012-Dir-4.11_b*/
    ta = a + QLIB_SQRT( -( x - 1.0f )*diff );
 80049f6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80049fa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80049fc:	f7fc f8b8 	bl	8000b70 <__aeabi_fsub>
 8004a00:	4603      	mov	r3, r0
 8004a02:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004a06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7fc f9bb 	bl	8000d84 <__aeabi_fmul>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7fe f82c 	bl	8002a6e <qFFMath_Sqrt>
 8004a16:	4603      	mov	r3, r0
 8004a18:	4619      	mov	r1, r3
 8004a1a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004a1c:	f7fc f8aa 	bl	8000b74 <__addsf3>
 8004a20:	4603      	mov	r3, r0
 8004a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    tmp.value = ta;
 8004a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a26:	61fb      	str	r3, [r7, #28]
    ma = qFIS_SMF( &tmp, p, n );
 8004a28:	f107 0314 	add.w	r3, r7, #20
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	68b9      	ldr	r1, [r7, #8]
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7ff fd3a 	bl	80044aa <qFIS_SMF>
 8004a36:	62b8      	str	r0, [r7, #40]	; 0x28
    tb = b + QLIB_SQRT( x*diff );
 8004a38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a3a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004a3c:	f7fc f9a2 	bl	8000d84 <__aeabi_fmul>
 8004a40:	4603      	mov	r3, r0
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7fe f813 	bl	8002a6e <qFFMath_Sqrt>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004a4e:	f7fc f891 	bl	8000b74 <__addsf3>
 8004a52:	4603      	mov	r3, r0
 8004a54:	627b      	str	r3, [r7, #36]	; 0x24
    tmp.value = tb;
 8004a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a58:	61fb      	str	r3, [r7, #28]
    mb = qFIS_SMF( &tmp, p, n );
 8004a5a:	f107 0314 	add.w	r3, r7, #20
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	68b9      	ldr	r1, [r7, #8]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7ff fd21 	bl	80044aa <qFIS_SMF>
 8004a68:	6238      	str	r0, [r7, #32]
    /*cstat +MISRAC2012-Dir-4.11_a +MISRAC2012-Dir-4.11_b*/
    return  ( QLIB_ABS( x - ma ) < QLIB_ABS( x - mb ) ) ? ta : tb;
 8004a6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a6c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004a6e:	f7fc f87f 	bl	8000b70 <__aeabi_fsub>
 8004a72:	4603      	mov	r3, r0
 8004a74:	4618      	mov	r0, r3
 8004a76:	f7fd ffe5 	bl	8002a44 <qFFMath_Abs>
 8004a7a:	4604      	mov	r4, r0
 8004a7c:	6a39      	ldr	r1, [r7, #32]
 8004a7e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004a80:	f7fc f876 	bl	8000b70 <__aeabi_fsub>
 8004a84:	4603      	mov	r3, r0
 8004a86:	4618      	mov	r0, r3
 8004a88:	f7fd ffdc 	bl	8002a44 <qFFMath_Abs>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	4619      	mov	r1, r3
 8004a90:	4620      	mov	r0, r4
 8004a92:	f7fc fb15 	bl	80010c0 <__aeabi_fcmplt>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d001      	beq.n	8004aa0 <qFIS_TZMF+0xfe>
 8004a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a9e:	e000      	b.n	8004aa2 <qFIS_TZMF+0x100>
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3744      	adds	r7, #68	; 0x44
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd90      	pop	{r4, r7, pc}

08004aaa <qFIS_PiMF>:
/*============================================================================*/
static float qFIS_PiMF( const qFIS_IO_Base_t * const in,
                        const float *p,
                        const size_t n )
{
 8004aaa:	b590      	push	{r4, r7, lr}
 8004aac:	b085      	sub	sp, #20
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	60f8      	str	r0, [r7, #12]
 8004ab2:	60b9      	str	r1, [r7, #8]
 8004ab4:	607a      	str	r2, [r7, #4]
    return QLIB_ABS( qFIS_SMF( in , p, n )*qFIS_ZMF( in , &p[ 2 ], n ) );
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	68b9      	ldr	r1, [r7, #8]
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	f7ff fcf5 	bl	80044aa <qFIS_SMF>
 8004ac0:	4604      	mov	r4, r0
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	3308      	adds	r3, #8
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	4619      	mov	r1, r3
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f7ff fe12 	bl	80046f4 <qFIS_ZMF>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	4620      	mov	r0, r4
 8004ad6:	f7fc f955 	bl	8000d84 <__aeabi_fmul>
 8004ada:	4603      	mov	r3, r0
 8004adc:	4618      	mov	r0, r3
 8004ade:	f7fd ffb1 	bl	8002a44 <qFFMath_Abs>
 8004ae2:	4603      	mov	r3, r0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3714      	adds	r7, #20
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd90      	pop	{r4, r7, pc}

08004aec <qFIS_SingletonMF>:
/*============================================================================*/
static float qFIS_SingletonMF( const qFIS_IO_Base_t * const in,
                               const float *p,
                               const size_t n )
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b086      	sub	sp, #24
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	617b      	str	r3, [r7, #20]
    (void)n;

    return ( qFMathEx_Equal( x, p[ 0 ] ) ) ? 1.0f : 0.0f;
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4619      	mov	r1, r3
 8004b04:	6978      	ldr	r0, [r7, #20]
 8004b06:	f000 faf2 	bl	80050ee <qFMathEx_Equal>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d002      	beq.n	8004b16 <qFIS_SingletonMF+0x2a>
 8004b10:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004b14:	e001      	b.n	8004b1a <qFIS_SingletonMF+0x2e>
 8004b16:	f04f 0300 	mov.w	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3718      	adds	r7, #24
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <qFIS_ConcaveMF>:
/*============================================================================*/
static float qFIS_ConcaveMF( const qFIS_IO_Base_t * const in,
                             const float *p,
                             const size_t n )
{
 8004b22:	b590      	push	{r4, r7, lr}
 8004b24:	b089      	sub	sp, #36	; 0x24
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	60f8      	str	r0, [r7, #12]
 8004b2a:	60b9      	str	r1, [r7, #8]
 8004b2c:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	61bb      	str	r3, [r7, #24]
    float i, e, y;
    (void)n;

    i = p[ 0 ];
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	617b      	str	r3, [r7, #20]
    e = p[ 1 ];
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	613b      	str	r3, [r7, #16]
    if ( ( i <= e ) && ( x < e ) ) {
 8004b40:	6939      	ldr	r1, [r7, #16]
 8004b42:	6978      	ldr	r0, [r7, #20]
 8004b44:	f7fc fac6 	bl	80010d4 <__aeabi_fcmple>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d023      	beq.n	8004b96 <qFIS_ConcaveMF+0x74>
 8004b4e:	6939      	ldr	r1, [r7, #16]
 8004b50:	69b8      	ldr	r0, [r7, #24]
 8004b52:	f7fc fab5 	bl	80010c0 <__aeabi_fcmplt>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d01c      	beq.n	8004b96 <qFIS_ConcaveMF+0x74>
        y = ( e - i )/( ( 2.0f*e ) - i -x );
 8004b5c:	6979      	ldr	r1, [r7, #20]
 8004b5e:	6938      	ldr	r0, [r7, #16]
 8004b60:	f7fc f806 	bl	8000b70 <__aeabi_fsub>
 8004b64:	4603      	mov	r3, r0
 8004b66:	461c      	mov	r4, r3
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f7fc f801 	bl	8000b74 <__addsf3>
 8004b72:	4603      	mov	r3, r0
 8004b74:	6979      	ldr	r1, [r7, #20]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7fb fffa 	bl	8000b70 <__aeabi_fsub>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	69b9      	ldr	r1, [r7, #24]
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7fb fff5 	bl	8000b70 <__aeabi_fsub>
 8004b86:	4603      	mov	r3, r0
 8004b88:	4619      	mov	r1, r3
 8004b8a:	4620      	mov	r0, r4
 8004b8c:	f7fc f9ae 	bl	8000eec <__aeabi_fdiv>
 8004b90:	4603      	mov	r3, r0
 8004b92:	61fb      	str	r3, [r7, #28]
 8004b94:	e02d      	b.n	8004bf2 <qFIS_ConcaveMF+0xd0>
    }
    else if ( ( i > e ) && ( x > e ) ) {
 8004b96:	6939      	ldr	r1, [r7, #16]
 8004b98:	6978      	ldr	r0, [r7, #20]
 8004b9a:	f7fc faaf 	bl	80010fc <__aeabi_fcmpgt>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d023      	beq.n	8004bec <qFIS_ConcaveMF+0xca>
 8004ba4:	6939      	ldr	r1, [r7, #16]
 8004ba6:	69b8      	ldr	r0, [r7, #24]
 8004ba8:	f7fc faa8 	bl	80010fc <__aeabi_fcmpgt>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d01c      	beq.n	8004bec <qFIS_ConcaveMF+0xca>
        y = ( i - e )/( -( 2.0f*e ) + i +x );
 8004bb2:	6939      	ldr	r1, [r7, #16]
 8004bb4:	6978      	ldr	r0, [r7, #20]
 8004bb6:	f7fb ffdb 	bl	8000b70 <__aeabi_fsub>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	461c      	mov	r4, r3
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7fb ffd6 	bl	8000b74 <__addsf3>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	4619      	mov	r1, r3
 8004bcc:	6978      	ldr	r0, [r7, #20]
 8004bce:	f7fb ffcf 	bl	8000b70 <__aeabi_fsub>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	69b9      	ldr	r1, [r7, #24]
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7fb ffcc 	bl	8000b74 <__addsf3>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	4619      	mov	r1, r3
 8004be0:	4620      	mov	r0, r4
 8004be2:	f7fc f983 	bl	8000eec <__aeabi_fdiv>
 8004be6:	4603      	mov	r3, r0
 8004be8:	61fb      	str	r3, [r7, #28]
 8004bea:	e002      	b.n	8004bf2 <qFIS_ConcaveMF+0xd0>
    }
    else {
        y = 1.0f;
 8004bec:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004bf0:	61fb      	str	r3, [r7, #28]
    }

    return y;
 8004bf2:	69fb      	ldr	r3, [r7, #28]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3724      	adds	r7, #36	; 0x24
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd90      	pop	{r4, r7, pc}

08004bfc <qFIS_TConcaveMF>:
/*============================================================================*/
static float qFIS_TConcaveMF( const qFIS_IO_Base_t * const in,
                              const float *p,
                              const size_t n )
{
 8004bfc:	b590      	push	{r4, r7, lr}
 8004bfe:	b087      	sub	sp, #28
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
    float i, e;

    i = p[ 0 ];
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	617b      	str	r3, [r7, #20]
    e = p[ 1 ];
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	613b      	str	r3, [r7, #16]

    return ( ( i - e )/qFIS_ConcaveMF( in, p, n ) ) + ( 2.0f*e ) - i;
 8004c14:	6939      	ldr	r1, [r7, #16]
 8004c16:	6978      	ldr	r0, [r7, #20]
 8004c18:	f7fb ffaa 	bl	8000b70 <__aeabi_fsub>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	461c      	mov	r4, r3
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	68b9      	ldr	r1, [r7, #8]
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f7ff ff7c 	bl	8004b22 <qFIS_ConcaveMF>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	4620      	mov	r0, r4
 8004c30:	f7fc f95c 	bl	8000eec <__aeabi_fdiv>
 8004c34:	4603      	mov	r3, r0
 8004c36:	461c      	mov	r4, r3
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f7fb ff99 	bl	8000b74 <__addsf3>
 8004c42:	4603      	mov	r3, r0
 8004c44:	4619      	mov	r1, r3
 8004c46:	4620      	mov	r0, r4
 8004c48:	f7fb ff94 	bl	8000b74 <__addsf3>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	6979      	ldr	r1, [r7, #20]
 8004c50:	4618      	mov	r0, r3
 8004c52:	f7fb ff8d 	bl	8000b70 <__aeabi_fsub>
 8004c56:	4603      	mov	r3, r0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	371c      	adds	r7, #28
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd90      	pop	{r4, r7, pc}

08004c60 <qFIS_SpikeMF>:
/*============================================================================*/
static float qFIS_SpikeMF( const qFIS_IO_Base_t * const in,
                           const float *p,
                           const size_t n )
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b088      	sub	sp, #32
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	61fb      	str	r3, [r7, #28]
    float w, c;
    (void)n;

    w = p[ 0 ];
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	61bb      	str	r3, [r7, #24]
    c = p[ 1 ];
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	617b      	str	r3, [r7, #20]

    return QLIB_EXP( -QLIB_ABS( 10.0f*( x - c )/w ) );
 8004c7e:	6979      	ldr	r1, [r7, #20]
 8004c80:	69f8      	ldr	r0, [r7, #28]
 8004c82:	f7fb ff75 	bl	8000b70 <__aeabi_fsub>
 8004c86:	4603      	mov	r3, r0
 8004c88:	490b      	ldr	r1, [pc, #44]	; (8004cb8 <qFIS_SpikeMF+0x58>)
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7fc f87a 	bl	8000d84 <__aeabi_fmul>
 8004c90:	4603      	mov	r3, r0
 8004c92:	69b9      	ldr	r1, [r7, #24]
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7fc f929 	bl	8000eec <__aeabi_fdiv>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7fd fed1 	bl	8002a44 <qFFMath_Abs>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7fe f855 	bl	8002d58 <qFFMath_Exp>
 8004cae:	4603      	mov	r3, r0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3720      	adds	r7, #32
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	41200000 	.word	0x41200000

08004cbc <qFIS_TLinSMF>:
/*============================================================================*/
static float qFIS_TLinSMF( const qFIS_IO_Base_t * const in,
                           const float *p,
                           const size_t n )
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b088      	sub	sp, #32
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	61fb      	str	r3, [r7, #28]
    float a, b;
    (void)n;

    a = p[ 0 ];
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	61bb      	str	r3, [r7, #24]
    b = p[ 1 ];
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	617b      	str	r3, [r7, #20]

    return ( ( b - a )*x ) + a;
 8004cda:	69b9      	ldr	r1, [r7, #24]
 8004cdc:	6978      	ldr	r0, [r7, #20]
 8004cde:	f7fb ff47 	bl	8000b70 <__aeabi_fsub>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	69f9      	ldr	r1, [r7, #28]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7fc f84c 	bl	8000d84 <__aeabi_fmul>
 8004cec:	4603      	mov	r3, r0
 8004cee:	69b9      	ldr	r1, [r7, #24]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7fb ff3f 	bl	8000b74 <__addsf3>
 8004cf6:	4603      	mov	r3, r0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3720      	adds	r7, #32
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <qFIS_TLinZMF>:
/*============================================================================*/
static float qFIS_TLinZMF( const qFIS_IO_Base_t * const in,
                           const float *p,
                           const size_t n )
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b088      	sub	sp, #32
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	61fb      	str	r3, [r7, #28]
    float a, b;
    (void)n;

    a = p[ 0 ];
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	61bb      	str	r3, [r7, #24]
    b = p[ 1 ];
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	617b      	str	r3, [r7, #20]

    return + a - ( ( a - b )*x );
 8004d1e:	6979      	ldr	r1, [r7, #20]
 8004d20:	69b8      	ldr	r0, [r7, #24]
 8004d22:	f7fb ff25 	bl	8000b70 <__aeabi_fsub>
 8004d26:	4603      	mov	r3, r0
 8004d28:	69f9      	ldr	r1, [r7, #28]
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7fc f82a 	bl	8000d84 <__aeabi_fmul>
 8004d30:	4603      	mov	r3, r0
 8004d32:	4619      	mov	r1, r3
 8004d34:	69b8      	ldr	r0, [r7, #24]
 8004d36:	f7fb ff1b 	bl	8000b70 <__aeabi_fsub>
 8004d3a:	4603      	mov	r3, r0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3720      	adds	r7, #32
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <qFIS_RectangleMF>:
/*============================================================================*/
static float qFIS_RectangleMF( const qFIS_IO_Base_t * const in,
                               const float *p,
                               const size_t n )
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b088      	sub	sp, #32
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	61fb      	str	r3, [r7, #28]
    float s, e;
    (void)n;

    s = p[ 0 ];
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	61bb      	str	r3, [r7, #24]
    e = p[ 1 ];
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	617b      	str	r3, [r7, #20]

    return ( ( x >= s ) && ( x <= e ) ) ? 1.0f : 0.0f;
 8004d62:	69b9      	ldr	r1, [r7, #24]
 8004d64:	69f8      	ldr	r0, [r7, #28]
 8004d66:	f7fc f9bf 	bl	80010e8 <__aeabi_fcmpge>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d009      	beq.n	8004d84 <qFIS_RectangleMF+0x40>
 8004d70:	6979      	ldr	r1, [r7, #20]
 8004d72:	69f8      	ldr	r0, [r7, #28]
 8004d74:	f7fc f9ae 	bl	80010d4 <__aeabi_fcmple>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d002      	beq.n	8004d84 <qFIS_RectangleMF+0x40>
 8004d7e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004d82:	e001      	b.n	8004d88 <qFIS_RectangleMF+0x44>
 8004d84:	f04f 0300 	mov.w	r3, #0
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3720      	adds	r7, #32
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <qFIS_CosineMF>:
/*============================================================================*/
static float qFIS_CosineMF( const qFIS_IO_Base_t * const in,
                            const float *p,
                            const size_t n )
{
 8004d90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004d94:	b08a      	sub	sp, #40	; 0x28
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	60f8      	str	r0, [r7, #12]
 8004d9a:	60b9      	str	r1, [r7, #8]
 8004d9c:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	623b      	str	r3, [r7, #32]
    float c, w, y;
    const float pi = 3.14159265358979323846f;
 8004da4:	4b35      	ldr	r3, [pc, #212]	; (8004e7c <qFIS_CosineMF+0xec>)
 8004da6:	61fb      	str	r3, [r7, #28]
    (void)n;

    c = p[ 0 ];
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	61bb      	str	r3, [r7, #24]
    w = p[ 1 ];
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	617b      	str	r3, [r7, #20]
    if ( ( x < ( c - ( 0.5*w ) ) ) || ( x > ( c + ( 0.5f*w ) ) ) ) {
 8004db4:	6a38      	ldr	r0, [r7, #32]
 8004db6:	f7fb fb37 	bl	8000428 <__aeabi_f2d>
 8004dba:	4604      	mov	r4, r0
 8004dbc:	460d      	mov	r5, r1
 8004dbe:	69b8      	ldr	r0, [r7, #24]
 8004dc0:	f7fb fb32 	bl	8000428 <__aeabi_f2d>
 8004dc4:	4680      	mov	r8, r0
 8004dc6:	4689      	mov	r9, r1
 8004dc8:	6978      	ldr	r0, [r7, #20]
 8004dca:	f7fb fb2d 	bl	8000428 <__aeabi_f2d>
 8004dce:	f04f 0200 	mov.w	r2, #0
 8004dd2:	4b2b      	ldr	r3, [pc, #172]	; (8004e80 <qFIS_CosineMF+0xf0>)
 8004dd4:	f7fb fb80 	bl	80004d8 <__aeabi_dmul>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	460b      	mov	r3, r1
 8004ddc:	4640      	mov	r0, r8
 8004dde:	4649      	mov	r1, r9
 8004de0:	f7fb f9c2 	bl	8000168 <__aeabi_dsub>
 8004de4:	4602      	mov	r2, r0
 8004de6:	460b      	mov	r3, r1
 8004de8:	4620      	mov	r0, r4
 8004dea:	4629      	mov	r1, r5
 8004dec:	f7fb fde6 	bl	80009bc <__aeabi_dcmplt>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d111      	bne.n	8004e1a <qFIS_CosineMF+0x8a>
 8004df6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004dfa:	6978      	ldr	r0, [r7, #20]
 8004dfc:	f7fb ffc2 	bl	8000d84 <__aeabi_fmul>
 8004e00:	4603      	mov	r3, r0
 8004e02:	69b9      	ldr	r1, [r7, #24]
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7fb feb5 	bl	8000b74 <__addsf3>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	6a38      	ldr	r0, [r7, #32]
 8004e10:	f7fc f974 	bl	80010fc <__aeabi_fcmpgt>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d003      	beq.n	8004e22 <qFIS_CosineMF+0x92>
        y = 0.0f;
 8004e1a:	f04f 0300 	mov.w	r3, #0
 8004e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e20:	e026      	b.n	8004e70 <qFIS_CosineMF+0xe0>
    }
    else {
        y = 0.5f*( 1.0f + QLIB_COS( 2.0f/w*pi*( x - c) ) );
 8004e22:	6979      	ldr	r1, [r7, #20]
 8004e24:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004e28:	f7fc f860 	bl	8000eec <__aeabi_fdiv>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	69f9      	ldr	r1, [r7, #28]
 8004e30:	4618      	mov	r0, r3
 8004e32:	f7fb ffa7 	bl	8000d84 <__aeabi_fmul>
 8004e36:	4603      	mov	r3, r0
 8004e38:	461c      	mov	r4, r3
 8004e3a:	69b9      	ldr	r1, [r7, #24]
 8004e3c:	6a38      	ldr	r0, [r7, #32]
 8004e3e:	f7fb fe97 	bl	8000b70 <__aeabi_fsub>
 8004e42:	4603      	mov	r3, r0
 8004e44:	4619      	mov	r1, r3
 8004e46:	4620      	mov	r0, r4
 8004e48:	f7fb ff9c 	bl	8000d84 <__aeabi_fmul>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f7fd fe9e 	bl	8002b90 <qFFMath_Cos>
 8004e54:	4603      	mov	r3, r0
 8004e56:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f7fb fe8a 	bl	8000b74 <__addsf3>
 8004e60:	4603      	mov	r3, r0
 8004e62:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004e66:	4618      	mov	r0, r3
 8004e68:	f7fb ff8c 	bl	8000d84 <__aeabi_fmul>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return y;
 8004e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3728      	adds	r7, #40	; 0x28
 8004e76:	46bd      	mov	sp, r7
 8004e78:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004e7c:	40490fdb 	.word	0x40490fdb
 8004e80:	3fe00000 	.word	0x3fe00000

08004e84 <qFIS_ConstantMF>:
/*============================================================================*/
static float qFIS_ConstantMF( const qFIS_IO_Base_t * const in,
                              const float *p,
                              const size_t n )
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
    (void)in;
    (void)n;
    return p[ 0 ];
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	681b      	ldr	r3, [r3, #0]
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3714      	adds	r7, #20
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bc80      	pop	{r7}
 8004e9c:	4770      	bx	lr

08004e9e <qFIS_LinearMF>:
/*============================================================================*/
static float qFIS_LinearMF( const qFIS_IO_Base_t * const in,
                            const float *p,
                            const size_t n )
{
 8004e9e:	b580      	push	{r7, lr}
 8004ea0:	b086      	sub	sp, #24
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	60f8      	str	r0, [r7, #12]
 8004ea6:	60b9      	str	r1, [r7, #8]
 8004ea8:	607a      	str	r2, [r7, #4]
    float px = 0.0f;
 8004eaa:	f04f 0300 	mov.w	r3, #0
 8004eae:	617b      	str	r3, [r7, #20]
    size_t i;

    for ( i = 0u ; i < n ; ++i ) {
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	613b      	str	r3, [r7, #16]
 8004eb4:	e01a      	b.n	8004eec <qFIS_LinearMF+0x4e>
        px += in[ i ].value*p[ i ];
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	005b      	lsls	r3, r3, #1
 8004ebc:	4413      	add	r3, r2
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	6898      	ldr	r0, [r3, #8]
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	68ba      	ldr	r2, [r7, #8]
 8004ece:	4413      	add	r3, r2
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	f7fb ff56 	bl	8000d84 <__aeabi_fmul>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	4619      	mov	r1, r3
 8004edc:	6978      	ldr	r0, [r7, #20]
 8004ede:	f7fb fe49 	bl	8000b74 <__addsf3>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	617b      	str	r3, [r7, #20]
    for ( i = 0u ; i < n ; ++i ) {
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	3301      	adds	r3, #1
 8004eea:	613b      	str	r3, [r7, #16]
 8004eec:	693a      	ldr	r2, [r7, #16]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d3e0      	bcc.n	8004eb6 <qFIS_LinearMF+0x18>
    }
    px += p[ i ];
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	68ba      	ldr	r2, [r7, #8]
 8004efa:	4413      	add	r3, r2
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4619      	mov	r1, r3
 8004f00:	6978      	ldr	r0, [r7, #20]
 8004f02:	f7fb fe37 	bl	8000b74 <__addsf3>
 8004f06:	4603      	mov	r3, r0
 8004f08:	617b      	str	r3, [r7, #20]

    return px;
 8004f0a:	697b      	ldr	r3, [r7, #20]
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3718      	adds	r7, #24
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <qFIS_Min>:
/*============================================================================*/
static float qFIS_Min( const float a,
                       const float b )
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
    return qFIS_Bound( ( a < b ) ? a : b, 0.0f, 1.0f );
 8004f1e:	6839      	ldr	r1, [r7, #0]
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f7fc f8cd 	bl	80010c0 <__aeabi_fcmplt>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d001      	beq.n	8004f30 <qFIS_Min+0x1c>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	e000      	b.n	8004f32 <qFIS_Min+0x1e>
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004f36:	f04f 0100 	mov.w	r1, #0
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f000 f86d 	bl	800501a <qFIS_Bound>
 8004f40:	4603      	mov	r3, r0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3708      	adds	r7, #8
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}

08004f4a <qFIS_Max>:
/*============================================================================*/
static float qFIS_Max( const float a,
                       const float b )
{
 8004f4a:	b580      	push	{r7, lr}
 8004f4c:	b082      	sub	sp, #8
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
 8004f52:	6039      	str	r1, [r7, #0]
    return qFIS_Bound( ( a > b ) ? a : b, 0.0f, 1.0f );
 8004f54:	6839      	ldr	r1, [r7, #0]
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f7fc f8d0 	bl	80010fc <__aeabi_fcmpgt>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d001      	beq.n	8004f66 <qFIS_Max+0x1c>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	e000      	b.n	8004f68 <qFIS_Max+0x1e>
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004f6c:	f04f 0100 	mov.w	r1, #0
 8004f70:	4618      	mov	r0, r3
 8004f72:	f000 f852 	bl	800501a <qFIS_Bound>
 8004f76:	4603      	mov	r3, r0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3708      	adds	r7, #8
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <qFIS_Prod>:
/*============================================================================*/
static float qFIS_Prod( const float a,
                        const float b )
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
    return qFIS_Bound( a*b, 0.0f, 1.0f );
 8004f8a:	6839      	ldr	r1, [r7, #0]
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f7fb fef9 	bl	8000d84 <__aeabi_fmul>
 8004f92:	4603      	mov	r3, r0
 8004f94:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004f98:	f04f 0100 	mov.w	r1, #0
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f000 f83c 	bl	800501a <qFIS_Bound>
 8004fa2:	4603      	mov	r3, r0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3708      	adds	r7, #8
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <qFIS_ProbOR>:
/*============================================================================*/
static float qFIS_ProbOR( const float a,
                          const float b )
{
 8004fac:	b590      	push	{r4, r7, lr}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
    return qFIS_Bound( a + b - ( a*b ), 0.0f, 1.0f );
 8004fb6:	6839      	ldr	r1, [r7, #0]
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f7fb fddb 	bl	8000b74 <__addsf3>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	461c      	mov	r4, r3
 8004fc2:	6839      	ldr	r1, [r7, #0]
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f7fb fedd 	bl	8000d84 <__aeabi_fmul>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	4619      	mov	r1, r3
 8004fce:	4620      	mov	r0, r4
 8004fd0:	f7fb fdce 	bl	8000b70 <__aeabi_fsub>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004fda:	f04f 0100 	mov.w	r1, #0
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f000 f81b 	bl	800501a <qFIS_Bound>
 8004fe4:	4603      	mov	r3, r0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	370c      	adds	r7, #12
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd90      	pop	{r4, r7, pc}

08004fee <qFIS_Sum>:
/*============================================================================*/
static float qFIS_Sum( const float a,
                       const float b )
{
 8004fee:	b580      	push	{r7, lr}
 8004ff0:	b082      	sub	sp, #8
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
 8004ff6:	6039      	str	r1, [r7, #0]
    return qFIS_Bound( a + b, 0.0f, 1.0f );
 8004ff8:	6839      	ldr	r1, [r7, #0]
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f7fb fdba 	bl	8000b74 <__addsf3>
 8005000:	4603      	mov	r3, r0
 8005002:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005006:	f04f 0100 	mov.w	r1, #0
 800500a:	4618      	mov	r0, r3
 800500c:	f000 f805 	bl	800501a <qFIS_Bound>
 8005010:	4603      	mov	r3, r0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3708      	adds	r7, #8
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <qFIS_Bound>:
/*============================================================================*/
static float qFIS_Bound( float y,
                         const float yMin,
                         const float yMax )
{
 800501a:	b580      	push	{r7, lr}
 800501c:	b084      	sub	sp, #16
 800501e:	af00      	add	r7, sp, #0
 8005020:	60f8      	str	r0, [r7, #12]
 8005022:	60b9      	str	r1, [r7, #8]
 8005024:	607a      	str	r2, [r7, #4]
    (void)qFMathEx_InRangeCoerce( &y, yMin, yMax );
 8005026:	f107 030c 	add.w	r3, r7, #12
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	68b9      	ldr	r1, [r7, #8]
 800502e:	4618      	mov	r0, r3
 8005030:	f000 f805 	bl	800503e <qFMathEx_InRangeCoerce>

    return y;
 8005034:	68fb      	ldr	r3, [r7, #12]
}
 8005036:	4618      	mov	r0, r3
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <qFMathEx_InRangeCoerce>:
}
/*============================================================================*/
bool qFMathEx_InRangeCoerce( float * const x,
                             const float lowerL,
                             const float upperL )
{
 800503e:	b580      	push	{r7, lr}
 8005040:	b086      	sub	sp, #24
 8005042:	af00      	add	r7, sp, #0
 8005044:	60f8      	str	r0, [r7, #12]
 8005046:	60b9      	str	r1, [r7, #8]
 8005048:	607a      	str	r2, [r7, #4]
    bool retVal = false;
 800504a:	2300      	movs	r3, #0
 800504c:	75fb      	strb	r3, [r7, #23]

    if ( 1 == (int)QLIB_ISNAN( x[ 0 ] ) ) {
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4618      	mov	r0, r3
 8005054:	f7fd fce5 	bl	8002a22 <qFFMath_IsNaN>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d003      	beq.n	8005066 <qFMathEx_InRangeCoerce+0x28>
        x[ 0 ] = lowerL;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	68ba      	ldr	r2, [r7, #8]
 8005062:	601a      	str	r2, [r3, #0]
 8005064:	e01b      	b.n	800509e <qFMathEx_InRangeCoerce+0x60>
    }
    else {
        if ( x[ 0 ] < lowerL ) {
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4619      	mov	r1, r3
 800506c:	68b8      	ldr	r0, [r7, #8]
 800506e:	f7fc f845 	bl	80010fc <__aeabi_fcmpgt>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d003      	beq.n	8005080 <qFMathEx_InRangeCoerce+0x42>
            x[ 0 ] = lowerL;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	68ba      	ldr	r2, [r7, #8]
 800507c:	601a      	str	r2, [r3, #0]
 800507e:	e00e      	b.n	800509e <qFMathEx_InRangeCoerce+0x60>
        }
        else if ( x[ 0 ] > upperL ) {
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4619      	mov	r1, r3
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f7fc f81a 	bl	80010c0 <__aeabi_fcmplt>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d003      	beq.n	800509a <qFMathEx_InRangeCoerce+0x5c>
            x[ 0 ] = upperL;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	601a      	str	r2, [r3, #0]
 8005098:	e001      	b.n	800509e <qFMathEx_InRangeCoerce+0x60>
        }
        else {
            retVal = true;
 800509a:	2301      	movs	r3, #1
 800509c:	75fb      	strb	r3, [r7, #23]
        }
    }

    return retVal;
 800509e:	7dfb      	ldrb	r3, [r7, #23]
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3718      	adds	r7, #24
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <qFMathEx_AlmostEqual>:
/*============================================================================*/
bool qFMathEx_AlmostEqual( const float a,
                           const float b,
                           const float tol )
{
 80050a8:	b5b0      	push	{r4, r5, r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]
    return ( QLIB_ABS( a - b ) <= QLIB_ABS( tol ) );
 80050b4:	68b9      	ldr	r1, [r7, #8]
 80050b6:	68f8      	ldr	r0, [r7, #12]
 80050b8:	f7fb fd5a 	bl	8000b70 <__aeabi_fsub>
 80050bc:	4603      	mov	r3, r0
 80050be:	4618      	mov	r0, r3
 80050c0:	f7fd fcc0 	bl	8002a44 <qFFMath_Abs>
 80050c4:	4604      	mov	r4, r0
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f7fd fcbc 	bl	8002a44 <qFFMath_Abs>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2201      	movs	r2, #1
 80050d0:	4615      	mov	r5, r2
 80050d2:	4619      	mov	r1, r3
 80050d4:	4620      	mov	r0, r4
 80050d6:	f7fb fffd 	bl	80010d4 <__aeabi_fcmple>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d101      	bne.n	80050e4 <qFMathEx_AlmostEqual+0x3c>
 80050e0:	2300      	movs	r3, #0
 80050e2:	461d      	mov	r5, r3
 80050e4:	b2eb      	uxtb	r3, r5
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bdb0      	pop	{r4, r5, r7, pc}

080050ee <qFMathEx_Equal>:
/*============================================================================*/
bool qFMathEx_Equal( const float a,
                     const float b )
{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b082      	sub	sp, #8
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
 80050f6:	6039      	str	r1, [r7, #0]
    return qFMathEx_AlmostEqual( a, b, FLT_MIN );
 80050f8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80050fc:	6839      	ldr	r1, [r7, #0]
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f7ff ffd2 	bl	80050a8 <qFMathEx_AlmostEqual>
 8005104:	4603      	mov	r3, r0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3708      	adds	r7, #8
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
	...

08005110 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005110:	b480      	push	{r7}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005116:	4b15      	ldr	r3, [pc, #84]	; (800516c <HAL_MspInit+0x5c>)
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	4a14      	ldr	r2, [pc, #80]	; (800516c <HAL_MspInit+0x5c>)
 800511c:	f043 0301 	orr.w	r3, r3, #1
 8005120:	6193      	str	r3, [r2, #24]
 8005122:	4b12      	ldr	r3, [pc, #72]	; (800516c <HAL_MspInit+0x5c>)
 8005124:	699b      	ldr	r3, [r3, #24]
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	60bb      	str	r3, [r7, #8]
 800512c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800512e:	4b0f      	ldr	r3, [pc, #60]	; (800516c <HAL_MspInit+0x5c>)
 8005130:	69db      	ldr	r3, [r3, #28]
 8005132:	4a0e      	ldr	r2, [pc, #56]	; (800516c <HAL_MspInit+0x5c>)
 8005134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005138:	61d3      	str	r3, [r2, #28]
 800513a:	4b0c      	ldr	r3, [pc, #48]	; (800516c <HAL_MspInit+0x5c>)
 800513c:	69db      	ldr	r3, [r3, #28]
 800513e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005142:	607b      	str	r3, [r7, #4]
 8005144:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005146:	4b0a      	ldr	r3, [pc, #40]	; (8005170 <HAL_MspInit+0x60>)
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	60fb      	str	r3, [r7, #12]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005152:	60fb      	str	r3, [r7, #12]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800515a:	60fb      	str	r3, [r7, #12]
 800515c:	4a04      	ldr	r2, [pc, #16]	; (8005170 <HAL_MspInit+0x60>)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005162:	bf00      	nop
 8005164:	3714      	adds	r7, #20
 8005166:	46bd      	mov	sp, r7
 8005168:	bc80      	pop	{r7}
 800516a:	4770      	bx	lr
 800516c:	40021000 	.word	0x40021000
 8005170:	40010000 	.word	0x40010000

08005174 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005174:	b480      	push	{r7}
 8005176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005178:	e7fe      	b.n	8005178 <NMI_Handler+0x4>

0800517a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800517a:	b480      	push	{r7}
 800517c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800517e:	e7fe      	b.n	800517e <HardFault_Handler+0x4>

08005180 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005180:	b480      	push	{r7}
 8005182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005184:	e7fe      	b.n	8005184 <MemManage_Handler+0x4>

08005186 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005186:	b480      	push	{r7}
 8005188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800518a:	e7fe      	b.n	800518a <BusFault_Handler+0x4>

0800518c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800518c:	b480      	push	{r7}
 800518e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005190:	e7fe      	b.n	8005190 <UsageFault_Handler+0x4>

08005192 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005192:	b480      	push	{r7}
 8005194:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005196:	bf00      	nop
 8005198:	46bd      	mov	sp, r7
 800519a:	bc80      	pop	{r7}
 800519c:	4770      	bx	lr

0800519e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800519e:	b480      	push	{r7}
 80051a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80051a2:	bf00      	nop
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bc80      	pop	{r7}
 80051a8:	4770      	bx	lr

080051aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80051aa:	b480      	push	{r7}
 80051ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80051ae:	bf00      	nop
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bc80      	pop	{r7}
 80051b4:	4770      	bx	lr

080051b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80051b6:	b580      	push	{r7, lr}
 80051b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80051ba:	f000 fced 	bl	8005b98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80051be:	bf00      	nop
 80051c0:	bd80      	pop	{r7, pc}
	...

080051c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80051c8:	4802      	ldr	r0, [pc, #8]	; (80051d4 <TIM2_IRQHandler+0x10>)
 80051ca:	f003 f8b9 	bl	8008340 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80051ce:	bf00      	nop
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	20000644 	.word	0x20000644

080051d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80051dc:	4802      	ldr	r0, [pc, #8]	; (80051e8 <USART2_IRQHandler+0x10>)
 80051de:	f003 ff71 	bl	80090c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80051e2:	bf00      	nop
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	2000071c 	.word	0x2000071c

080051ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80051ec:	b480      	push	{r7}
 80051ee:	af00      	add	r7, sp, #0
  return 1;
 80051f0:	2301      	movs	r3, #1
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bc80      	pop	{r7}
 80051f8:	4770      	bx	lr

080051fa <_kill>:

int _kill(int pid, int sig)
{
 80051fa:	b580      	push	{r7, lr}
 80051fc:	b082      	sub	sp, #8
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
 8005202:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005204:	f004 fd3e 	bl	8009c84 <__errno>
 8005208:	4603      	mov	r3, r0
 800520a:	2216      	movs	r2, #22
 800520c:	601a      	str	r2, [r3, #0]
  return -1;
 800520e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005212:	4618      	mov	r0, r3
 8005214:	3708      	adds	r7, #8
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}

0800521a <_exit>:

void _exit (int status)
{
 800521a:	b580      	push	{r7, lr}
 800521c:	b082      	sub	sp, #8
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005222:	f04f 31ff 	mov.w	r1, #4294967295
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f7ff ffe7 	bl	80051fa <_kill>
  while (1) {}    /* Make sure we hang here */
 800522c:	e7fe      	b.n	800522c <_exit+0x12>

0800522e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b086      	sub	sp, #24
 8005232:	af00      	add	r7, sp, #0
 8005234:	60f8      	str	r0, [r7, #12]
 8005236:	60b9      	str	r1, [r7, #8]
 8005238:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800523a:	2300      	movs	r3, #0
 800523c:	617b      	str	r3, [r7, #20]
 800523e:	e00a      	b.n	8005256 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005240:	f3af 8000 	nop.w
 8005244:	4601      	mov	r1, r0
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	1c5a      	adds	r2, r3, #1
 800524a:	60ba      	str	r2, [r7, #8]
 800524c:	b2ca      	uxtb	r2, r1
 800524e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	3301      	adds	r3, #1
 8005254:	617b      	str	r3, [r7, #20]
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	429a      	cmp	r2, r3
 800525c:	dbf0      	blt.n	8005240 <_read+0x12>
  }

  return len;
 800525e:	687b      	ldr	r3, [r7, #4]
}
 8005260:	4618      	mov	r0, r3
 8005262:	3718      	adds	r7, #24
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b086      	sub	sp, #24
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005274:	2300      	movs	r3, #0
 8005276:	617b      	str	r3, [r7, #20]
 8005278:	e009      	b.n	800528e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	1c5a      	adds	r2, r3, #1
 800527e:	60ba      	str	r2, [r7, #8]
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	4618      	mov	r0, r3
 8005284:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	3301      	adds	r3, #1
 800528c:	617b      	str	r3, [r7, #20]
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	429a      	cmp	r2, r3
 8005294:	dbf1      	blt.n	800527a <_write+0x12>
  }
  return len;
 8005296:	687b      	ldr	r3, [r7, #4]
}
 8005298:	4618      	mov	r0, r3
 800529a:	3718      	adds	r7, #24
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <_close>:

int _close(int file)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80052a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bc80      	pop	{r7}
 80052b4:	4770      	bx	lr

080052b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80052b6:	b480      	push	{r7}
 80052b8:	b083      	sub	sp, #12
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
 80052be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80052c6:	605a      	str	r2, [r3, #4]
  return 0;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	370c      	adds	r7, #12
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bc80      	pop	{r7}
 80052d2:	4770      	bx	lr

080052d4 <_isatty>:

int _isatty(int file)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80052dc:	2301      	movs	r3, #1
}
 80052de:	4618      	mov	r0, r3
 80052e0:	370c      	adds	r7, #12
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bc80      	pop	{r7}
 80052e6:	4770      	bx	lr

080052e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3714      	adds	r7, #20
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bc80      	pop	{r7}
 80052fe:	4770      	bx	lr

08005300 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b086      	sub	sp, #24
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005308:	4a14      	ldr	r2, [pc, #80]	; (800535c <_sbrk+0x5c>)
 800530a:	4b15      	ldr	r3, [pc, #84]	; (8005360 <_sbrk+0x60>)
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005314:	4b13      	ldr	r3, [pc, #76]	; (8005364 <_sbrk+0x64>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d102      	bne.n	8005322 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800531c:	4b11      	ldr	r3, [pc, #68]	; (8005364 <_sbrk+0x64>)
 800531e:	4a12      	ldr	r2, [pc, #72]	; (8005368 <_sbrk+0x68>)
 8005320:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005322:	4b10      	ldr	r3, [pc, #64]	; (8005364 <_sbrk+0x64>)
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4413      	add	r3, r2
 800532a:	693a      	ldr	r2, [r7, #16]
 800532c:	429a      	cmp	r2, r3
 800532e:	d207      	bcs.n	8005340 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005330:	f004 fca8 	bl	8009c84 <__errno>
 8005334:	4603      	mov	r3, r0
 8005336:	220c      	movs	r2, #12
 8005338:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800533a:	f04f 33ff 	mov.w	r3, #4294967295
 800533e:	e009      	b.n	8005354 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005340:	4b08      	ldr	r3, [pc, #32]	; (8005364 <_sbrk+0x64>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005346:	4b07      	ldr	r3, [pc, #28]	; (8005364 <_sbrk+0x64>)
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4413      	add	r3, r2
 800534e:	4a05      	ldr	r2, [pc, #20]	; (8005364 <_sbrk+0x64>)
 8005350:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005352:	68fb      	ldr	r3, [r7, #12]
}
 8005354:	4618      	mov	r0, r3
 8005356:	3718      	adds	r7, #24
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}
 800535c:	20005000 	.word	0x20005000
 8005360:	00000400 	.word	0x00000400
 8005364:	200005f8 	.word	0x200005f8
 8005368:	20000ab0 	.word	0x20000ab0

0800536c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800536c:	b480      	push	{r7}
 800536e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005370:	bf00      	nop
 8005372:	46bd      	mov	sp, r7
 8005374:	bc80      	pop	{r7}
 8005376:	4770      	bx	lr

08005378 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b08c      	sub	sp, #48	; 0x30
 800537c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800537e:	f107 030c 	add.w	r3, r7, #12
 8005382:	2224      	movs	r2, #36	; 0x24
 8005384:	2100      	movs	r1, #0
 8005386:	4618      	mov	r0, r3
 8005388:	f004 fca6 	bl	8009cd8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800538c:	1d3b      	adds	r3, r7, #4
 800538e:	2200      	movs	r2, #0
 8005390:	601a      	str	r2, [r3, #0]
 8005392:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005394:	4b22      	ldr	r3, [pc, #136]	; (8005420 <MX_TIM1_Init+0xa8>)
 8005396:	4a23      	ldr	r2, [pc, #140]	; (8005424 <MX_TIM1_Init+0xac>)
 8005398:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800539a:	4b21      	ldr	r3, [pc, #132]	; (8005420 <MX_TIM1_Init+0xa8>)
 800539c:	2200      	movs	r2, #0
 800539e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053a0:	4b1f      	ldr	r3, [pc, #124]	; (8005420 <MX_TIM1_Init+0xa8>)
 80053a2:	2200      	movs	r2, #0
 80053a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80053a6:	4b1e      	ldr	r3, [pc, #120]	; (8005420 <MX_TIM1_Init+0xa8>)
 80053a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80053ac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80053ae:	4b1c      	ldr	r3, [pc, #112]	; (8005420 <MX_TIM1_Init+0xa8>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80053b4:	4b1a      	ldr	r3, [pc, #104]	; (8005420 <MX_TIM1_Init+0xa8>)
 80053b6:	2200      	movs	r2, #0
 80053b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80053ba:	4b19      	ldr	r3, [pc, #100]	; (8005420 <MX_TIM1_Init+0xa8>)
 80053bc:	2200      	movs	r2, #0
 80053be:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80053c0:	2301      	movs	r3, #1
 80053c2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80053c4:	2300      	movs	r3, #0
 80053c6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80053c8:	2301      	movs	r3, #1
 80053ca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80053cc:	2300      	movs	r3, #0
 80053ce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80053d0:	2300      	movs	r3, #0
 80053d2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80053d4:	2300      	movs	r3, #0
 80053d6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80053d8:	2301      	movs	r3, #1
 80053da:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80053dc:	2300      	movs	r3, #0
 80053de:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80053e0:	2300      	movs	r3, #0
 80053e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80053e4:	f107 030c 	add.w	r3, r7, #12
 80053e8:	4619      	mov	r1, r3
 80053ea:	480d      	ldr	r0, [pc, #52]	; (8005420 <MX_TIM1_Init+0xa8>)
 80053ec:	f002 ff06 	bl	80081fc <HAL_TIM_Encoder_Init>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d001      	beq.n	80053fa <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80053f6:	f7fc fe5d 	bl	80020b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80053fa:	2300      	movs	r3, #0
 80053fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80053fe:	2300      	movs	r3, #0
 8005400:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005402:	1d3b      	adds	r3, r7, #4
 8005404:	4619      	mov	r1, r3
 8005406:	4806      	ldr	r0, [pc, #24]	; (8005420 <MX_TIM1_Init+0xa8>)
 8005408:	f003 fcf4 	bl	8008df4 <HAL_TIMEx_MasterConfigSynchronization>
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d001      	beq.n	8005416 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8005412:	f7fc fe4f 	bl	80020b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8005416:	bf00      	nop
 8005418:	3730      	adds	r7, #48	; 0x30
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	200005fc 	.word	0x200005fc
 8005424:	40012c00 	.word	0x40012c00

08005428 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b086      	sub	sp, #24
 800542c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800542e:	f107 0308 	add.w	r3, r7, #8
 8005432:	2200      	movs	r2, #0
 8005434:	601a      	str	r2, [r3, #0]
 8005436:	605a      	str	r2, [r3, #4]
 8005438:	609a      	str	r2, [r3, #8]
 800543a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800543c:	463b      	mov	r3, r7
 800543e:	2200      	movs	r2, #0
 8005440:	601a      	str	r2, [r3, #0]
 8005442:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005444:	4b1d      	ldr	r3, [pc, #116]	; (80054bc <MX_TIM2_Init+0x94>)
 8005446:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800544a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 800544c:	4b1b      	ldr	r3, [pc, #108]	; (80054bc <MX_TIM2_Init+0x94>)
 800544e:	2263      	movs	r2, #99	; 0x63
 8005450:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005452:	4b1a      	ldr	r3, [pc, #104]	; (80054bc <MX_TIM2_Init+0x94>)
 8005454:	2200      	movs	r2, #0
 8005456:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7199;
 8005458:	4b18      	ldr	r3, [pc, #96]	; (80054bc <MX_TIM2_Init+0x94>)
 800545a:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800545e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005460:	4b16      	ldr	r3, [pc, #88]	; (80054bc <MX_TIM2_Init+0x94>)
 8005462:	2200      	movs	r2, #0
 8005464:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005466:	4b15      	ldr	r3, [pc, #84]	; (80054bc <MX_TIM2_Init+0x94>)
 8005468:	2200      	movs	r2, #0
 800546a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800546c:	4813      	ldr	r0, [pc, #76]	; (80054bc <MX_TIM2_Init+0x94>)
 800546e:	f002 fd29 	bl	8007ec4 <HAL_TIM_Base_Init>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d001      	beq.n	800547c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8005478:	f7fc fe1c 	bl	80020b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800547c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005480:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005482:	f107 0308 	add.w	r3, r7, #8
 8005486:	4619      	mov	r1, r3
 8005488:	480c      	ldr	r0, [pc, #48]	; (80054bc <MX_TIM2_Init+0x94>)
 800548a:	f003 f923 	bl	80086d4 <HAL_TIM_ConfigClockSource>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d001      	beq.n	8005498 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8005494:	f7fc fe0e 	bl	80020b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005498:	2300      	movs	r3, #0
 800549a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800549c:	2300      	movs	r3, #0
 800549e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80054a0:	463b      	mov	r3, r7
 80054a2:	4619      	mov	r1, r3
 80054a4:	4805      	ldr	r0, [pc, #20]	; (80054bc <MX_TIM2_Init+0x94>)
 80054a6:	f003 fca5 	bl	8008df4 <HAL_TIMEx_MasterConfigSynchronization>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d001      	beq.n	80054b4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80054b0:	f7fc fe00 	bl	80020b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80054b4:	bf00      	nop
 80054b6:	3718      	adds	r7, #24
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	20000644 	.word	0x20000644

080054c0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b08e      	sub	sp, #56	; 0x38
 80054c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80054c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054ca:	2200      	movs	r2, #0
 80054cc:	601a      	str	r2, [r3, #0]
 80054ce:	605a      	str	r2, [r3, #4]
 80054d0:	609a      	str	r2, [r3, #8]
 80054d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80054d4:	f107 0320 	add.w	r3, r7, #32
 80054d8:	2200      	movs	r2, #0
 80054da:	601a      	str	r2, [r3, #0]
 80054dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80054de:	1d3b      	adds	r3, r7, #4
 80054e0:	2200      	movs	r2, #0
 80054e2:	601a      	str	r2, [r3, #0]
 80054e4:	605a      	str	r2, [r3, #4]
 80054e6:	609a      	str	r2, [r3, #8]
 80054e8:	60da      	str	r2, [r3, #12]
 80054ea:	611a      	str	r2, [r3, #16]
 80054ec:	615a      	str	r2, [r3, #20]
 80054ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80054f0:	4b3d      	ldr	r3, [pc, #244]	; (80055e8 <MX_TIM3_Init+0x128>)
 80054f2:	4a3e      	ldr	r2, [pc, #248]	; (80055ec <MX_TIM3_Init+0x12c>)
 80054f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 80054f6:	4b3c      	ldr	r3, [pc, #240]	; (80055e8 <MX_TIM3_Init+0x128>)
 80054f8:	2209      	movs	r2, #9
 80054fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80054fc:	4b3a      	ldr	r3, [pc, #232]	; (80055e8 <MX_TIM3_Init+0x128>)
 80054fe:	2200      	movs	r2, #0
 8005500:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3599;
 8005502:	4b39      	ldr	r3, [pc, #228]	; (80055e8 <MX_TIM3_Init+0x128>)
 8005504:	f640 620f 	movw	r2, #3599	; 0xe0f
 8005508:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800550a:	4b37      	ldr	r3, [pc, #220]	; (80055e8 <MX_TIM3_Init+0x128>)
 800550c:	2200      	movs	r2, #0
 800550e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005510:	4b35      	ldr	r3, [pc, #212]	; (80055e8 <MX_TIM3_Init+0x128>)
 8005512:	2200      	movs	r2, #0
 8005514:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005516:	4834      	ldr	r0, [pc, #208]	; (80055e8 <MX_TIM3_Init+0x128>)
 8005518:	f002 fcd4 	bl	8007ec4 <HAL_TIM_Base_Init>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d001      	beq.n	8005526 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8005522:	f7fc fdc7 	bl	80020b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005526:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800552a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800552c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005530:	4619      	mov	r1, r3
 8005532:	482d      	ldr	r0, [pc, #180]	; (80055e8 <MX_TIM3_Init+0x128>)
 8005534:	f003 f8ce 	bl	80086d4 <HAL_TIM_ConfigClockSource>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d001      	beq.n	8005542 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800553e:	f7fc fdb9 	bl	80020b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005542:	4829      	ldr	r0, [pc, #164]	; (80055e8 <MX_TIM3_Init+0x128>)
 8005544:	f002 fd60 	bl	8008008 <HAL_TIM_PWM_Init>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d001      	beq.n	8005552 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800554e:	f7fc fdb1 	bl	80020b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005552:	2300      	movs	r3, #0
 8005554:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005556:	2300      	movs	r3, #0
 8005558:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800555a:	f107 0320 	add.w	r3, r7, #32
 800555e:	4619      	mov	r1, r3
 8005560:	4821      	ldr	r0, [pc, #132]	; (80055e8 <MX_TIM3_Init+0x128>)
 8005562:	f003 fc47 	bl	8008df4 <HAL_TIMEx_MasterConfigSynchronization>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d001      	beq.n	8005570 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800556c:	f7fc fda2 	bl	80020b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005570:	2360      	movs	r3, #96	; 0x60
 8005572:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005574:	2300      	movs	r3, #0
 8005576:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005578:	2300      	movs	r3, #0
 800557a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800557c:	2300      	movs	r3, #0
 800557e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005580:	1d3b      	adds	r3, r7, #4
 8005582:	2200      	movs	r2, #0
 8005584:	4619      	mov	r1, r3
 8005586:	4818      	ldr	r0, [pc, #96]	; (80055e8 <MX_TIM3_Init+0x128>)
 8005588:	f002 ffe2 	bl	8008550 <HAL_TIM_PWM_ConfigChannel>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d001      	beq.n	8005596 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8005592:	f7fc fd8f 	bl	80020b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005596:	1d3b      	adds	r3, r7, #4
 8005598:	2204      	movs	r2, #4
 800559a:	4619      	mov	r1, r3
 800559c:	4812      	ldr	r0, [pc, #72]	; (80055e8 <MX_TIM3_Init+0x128>)
 800559e:	f002 ffd7 	bl	8008550 <HAL_TIM_PWM_ConfigChannel>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d001      	beq.n	80055ac <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80055a8:	f7fc fd84 	bl	80020b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80055ac:	1d3b      	adds	r3, r7, #4
 80055ae:	2208      	movs	r2, #8
 80055b0:	4619      	mov	r1, r3
 80055b2:	480d      	ldr	r0, [pc, #52]	; (80055e8 <MX_TIM3_Init+0x128>)
 80055b4:	f002 ffcc 	bl	8008550 <HAL_TIM_PWM_ConfigChannel>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d001      	beq.n	80055c2 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80055be:	f7fc fd79 	bl	80020b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80055c2:	1d3b      	adds	r3, r7, #4
 80055c4:	220c      	movs	r2, #12
 80055c6:	4619      	mov	r1, r3
 80055c8:	4807      	ldr	r0, [pc, #28]	; (80055e8 <MX_TIM3_Init+0x128>)
 80055ca:	f002 ffc1 	bl	8008550 <HAL_TIM_PWM_ConfigChannel>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d001      	beq.n	80055d8 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 80055d4:	f7fc fd6e 	bl	80020b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80055d8:	4803      	ldr	r0, [pc, #12]	; (80055e8 <MX_TIM3_Init+0x128>)
 80055da:	f000 f903 	bl	80057e4 <HAL_TIM_MspPostInit>

}
 80055de:	bf00      	nop
 80055e0:	3738      	adds	r7, #56	; 0x38
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	2000068c 	.word	0x2000068c
 80055ec:	40000400 	.word	0x40000400

080055f0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b08c      	sub	sp, #48	; 0x30
 80055f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80055f6:	f107 030c 	add.w	r3, r7, #12
 80055fa:	2224      	movs	r2, #36	; 0x24
 80055fc:	2100      	movs	r1, #0
 80055fe:	4618      	mov	r0, r3
 8005600:	f004 fb6a 	bl	8009cd8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005604:	1d3b      	adds	r3, r7, #4
 8005606:	2200      	movs	r2, #0
 8005608:	601a      	str	r2, [r3, #0]
 800560a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800560c:	4b20      	ldr	r3, [pc, #128]	; (8005690 <MX_TIM4_Init+0xa0>)
 800560e:	4a21      	ldr	r2, [pc, #132]	; (8005694 <MX_TIM4_Init+0xa4>)
 8005610:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8005612:	4b1f      	ldr	r3, [pc, #124]	; (8005690 <MX_TIM4_Init+0xa0>)
 8005614:	2200      	movs	r2, #0
 8005616:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005618:	4b1d      	ldr	r3, [pc, #116]	; (8005690 <MX_TIM4_Init+0xa0>)
 800561a:	2200      	movs	r2, #0
 800561c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800561e:	4b1c      	ldr	r3, [pc, #112]	; (8005690 <MX_TIM4_Init+0xa0>)
 8005620:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005624:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005626:	4b1a      	ldr	r3, [pc, #104]	; (8005690 <MX_TIM4_Init+0xa0>)
 8005628:	2200      	movs	r2, #0
 800562a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800562c:	4b18      	ldr	r3, [pc, #96]	; (8005690 <MX_TIM4_Init+0xa0>)
 800562e:	2200      	movs	r2, #0
 8005630:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8005632:	2301      	movs	r3, #1
 8005634:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005636:	2300      	movs	r3, #0
 8005638:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800563a:	2301      	movs	r3, #1
 800563c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800563e:	2300      	movs	r3, #0
 8005640:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005642:	2300      	movs	r3, #0
 8005644:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005646:	2300      	movs	r3, #0
 8005648:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800564a:	2301      	movs	r3, #1
 800564c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800564e:	2300      	movs	r3, #0
 8005650:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8005652:	2300      	movs	r3, #0
 8005654:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8005656:	f107 030c 	add.w	r3, r7, #12
 800565a:	4619      	mov	r1, r3
 800565c:	480c      	ldr	r0, [pc, #48]	; (8005690 <MX_TIM4_Init+0xa0>)
 800565e:	f002 fdcd 	bl	80081fc <HAL_TIM_Encoder_Init>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d001      	beq.n	800566c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8005668:	f7fc fd24 	bl	80020b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800566c:	2300      	movs	r3, #0
 800566e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005670:	2300      	movs	r3, #0
 8005672:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005674:	1d3b      	adds	r3, r7, #4
 8005676:	4619      	mov	r1, r3
 8005678:	4805      	ldr	r0, [pc, #20]	; (8005690 <MX_TIM4_Init+0xa0>)
 800567a:	f003 fbbb 	bl	8008df4 <HAL_TIMEx_MasterConfigSynchronization>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d001      	beq.n	8005688 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8005684:	f7fc fd16 	bl	80020b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8005688:	bf00      	nop
 800568a:	3730      	adds	r7, #48	; 0x30
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	200006d4 	.word	0x200006d4
 8005694:	40000800 	.word	0x40000800

08005698 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b08a      	sub	sp, #40	; 0x28
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056a0:	f107 0318 	add.w	r3, r7, #24
 80056a4:	2200      	movs	r2, #0
 80056a6:	601a      	str	r2, [r3, #0]
 80056a8:	605a      	str	r2, [r3, #4]
 80056aa:	609a      	str	r2, [r3, #8]
 80056ac:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM1)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a2b      	ldr	r2, [pc, #172]	; (8005760 <HAL_TIM_Encoder_MspInit+0xc8>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d125      	bne.n	8005704 <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80056b8:	4b2a      	ldr	r3, [pc, #168]	; (8005764 <HAL_TIM_Encoder_MspInit+0xcc>)
 80056ba:	699b      	ldr	r3, [r3, #24]
 80056bc:	4a29      	ldr	r2, [pc, #164]	; (8005764 <HAL_TIM_Encoder_MspInit+0xcc>)
 80056be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80056c2:	6193      	str	r3, [r2, #24]
 80056c4:	4b27      	ldr	r3, [pc, #156]	; (8005764 <HAL_TIM_Encoder_MspInit+0xcc>)
 80056c6:	699b      	ldr	r3, [r3, #24]
 80056c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056cc:	617b      	str	r3, [r7, #20]
 80056ce:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056d0:	4b24      	ldr	r3, [pc, #144]	; (8005764 <HAL_TIM_Encoder_MspInit+0xcc>)
 80056d2:	699b      	ldr	r3, [r3, #24]
 80056d4:	4a23      	ldr	r2, [pc, #140]	; (8005764 <HAL_TIM_Encoder_MspInit+0xcc>)
 80056d6:	f043 0304 	orr.w	r3, r3, #4
 80056da:	6193      	str	r3, [r2, #24]
 80056dc:	4b21      	ldr	r3, [pc, #132]	; (8005764 <HAL_TIM_Encoder_MspInit+0xcc>)
 80056de:	699b      	ldr	r3, [r3, #24]
 80056e0:	f003 0304 	and.w	r3, r3, #4
 80056e4:	613b      	str	r3, [r7, #16]
 80056e6:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80056e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80056ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80056ee:	2300      	movs	r3, #0
 80056f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056f2:	2300      	movs	r3, #0
 80056f4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056f6:	f107 0318 	add.w	r3, r7, #24
 80056fa:	4619      	mov	r1, r3
 80056fc:	481a      	ldr	r0, [pc, #104]	; (8005768 <HAL_TIM_Encoder_MspInit+0xd0>)
 80056fe:	f000 fc27 	bl	8005f50 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8005702:	e028      	b.n	8005756 <HAL_TIM_Encoder_MspInit+0xbe>
  else if(tim_encoderHandle->Instance==TIM4)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a18      	ldr	r2, [pc, #96]	; (800576c <HAL_TIM_Encoder_MspInit+0xd4>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d123      	bne.n	8005756 <HAL_TIM_Encoder_MspInit+0xbe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800570e:	4b15      	ldr	r3, [pc, #84]	; (8005764 <HAL_TIM_Encoder_MspInit+0xcc>)
 8005710:	69db      	ldr	r3, [r3, #28]
 8005712:	4a14      	ldr	r2, [pc, #80]	; (8005764 <HAL_TIM_Encoder_MspInit+0xcc>)
 8005714:	f043 0304 	orr.w	r3, r3, #4
 8005718:	61d3      	str	r3, [r2, #28]
 800571a:	4b12      	ldr	r3, [pc, #72]	; (8005764 <HAL_TIM_Encoder_MspInit+0xcc>)
 800571c:	69db      	ldr	r3, [r3, #28]
 800571e:	f003 0304 	and.w	r3, r3, #4
 8005722:	60fb      	str	r3, [r7, #12]
 8005724:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005726:	4b0f      	ldr	r3, [pc, #60]	; (8005764 <HAL_TIM_Encoder_MspInit+0xcc>)
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	4a0e      	ldr	r2, [pc, #56]	; (8005764 <HAL_TIM_Encoder_MspInit+0xcc>)
 800572c:	f043 0308 	orr.w	r3, r3, #8
 8005730:	6193      	str	r3, [r2, #24]
 8005732:	4b0c      	ldr	r3, [pc, #48]	; (8005764 <HAL_TIM_Encoder_MspInit+0xcc>)
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	f003 0308 	and.w	r3, r3, #8
 800573a:	60bb      	str	r3, [r7, #8]
 800573c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800573e:	23c0      	movs	r3, #192	; 0xc0
 8005740:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005742:	2300      	movs	r3, #0
 8005744:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005746:	2300      	movs	r3, #0
 8005748:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800574a:	f107 0318 	add.w	r3, r7, #24
 800574e:	4619      	mov	r1, r3
 8005750:	4807      	ldr	r0, [pc, #28]	; (8005770 <HAL_TIM_Encoder_MspInit+0xd8>)
 8005752:	f000 fbfd 	bl	8005f50 <HAL_GPIO_Init>
}
 8005756:	bf00      	nop
 8005758:	3728      	adds	r7, #40	; 0x28
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	40012c00 	.word	0x40012c00
 8005764:	40021000 	.word	0x40021000
 8005768:	40010800 	.word	0x40010800
 800576c:	40000800 	.word	0x40000800
 8005770:	40010c00 	.word	0x40010c00

08005774 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005784:	d114      	bne.n	80057b0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005786:	4b15      	ldr	r3, [pc, #84]	; (80057dc <HAL_TIM_Base_MspInit+0x68>)
 8005788:	69db      	ldr	r3, [r3, #28]
 800578a:	4a14      	ldr	r2, [pc, #80]	; (80057dc <HAL_TIM_Base_MspInit+0x68>)
 800578c:	f043 0301 	orr.w	r3, r3, #1
 8005790:	61d3      	str	r3, [r2, #28]
 8005792:	4b12      	ldr	r3, [pc, #72]	; (80057dc <HAL_TIM_Base_MspInit+0x68>)
 8005794:	69db      	ldr	r3, [r3, #28]
 8005796:	f003 0301 	and.w	r3, r3, #1
 800579a:	60fb      	str	r3, [r7, #12]
 800579c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800579e:	2200      	movs	r2, #0
 80057a0:	2101      	movs	r1, #1
 80057a2:	201c      	movs	r0, #28
 80057a4:	f000 faeb 	bl	8005d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80057a8:	201c      	movs	r0, #28
 80057aa:	f000 fb04 	bl	8005db6 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80057ae:	e010      	b.n	80057d2 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a0a      	ldr	r2, [pc, #40]	; (80057e0 <HAL_TIM_Base_MspInit+0x6c>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d10b      	bne.n	80057d2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80057ba:	4b08      	ldr	r3, [pc, #32]	; (80057dc <HAL_TIM_Base_MspInit+0x68>)
 80057bc:	69db      	ldr	r3, [r3, #28]
 80057be:	4a07      	ldr	r2, [pc, #28]	; (80057dc <HAL_TIM_Base_MspInit+0x68>)
 80057c0:	f043 0302 	orr.w	r3, r3, #2
 80057c4:	61d3      	str	r3, [r2, #28]
 80057c6:	4b05      	ldr	r3, [pc, #20]	; (80057dc <HAL_TIM_Base_MspInit+0x68>)
 80057c8:	69db      	ldr	r3, [r3, #28]
 80057ca:	f003 0302 	and.w	r3, r3, #2
 80057ce:	60bb      	str	r3, [r7, #8]
 80057d0:	68bb      	ldr	r3, [r7, #8]
}
 80057d2:	bf00      	nop
 80057d4:	3710      	adds	r7, #16
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	40021000 	.word	0x40021000
 80057e0:	40000400 	.word	0x40000400

080057e4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b088      	sub	sp, #32
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057ec:	f107 0310 	add.w	r3, r7, #16
 80057f0:	2200      	movs	r2, #0
 80057f2:	601a      	str	r2, [r3, #0]
 80057f4:	605a      	str	r2, [r3, #4]
 80057f6:	609a      	str	r2, [r3, #8]
 80057f8:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a1b      	ldr	r2, [pc, #108]	; (800586c <HAL_TIM_MspPostInit+0x88>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d12f      	bne.n	8005864 <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005804:	4b1a      	ldr	r3, [pc, #104]	; (8005870 <HAL_TIM_MspPostInit+0x8c>)
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	4a19      	ldr	r2, [pc, #100]	; (8005870 <HAL_TIM_MspPostInit+0x8c>)
 800580a:	f043 0304 	orr.w	r3, r3, #4
 800580e:	6193      	str	r3, [r2, #24]
 8005810:	4b17      	ldr	r3, [pc, #92]	; (8005870 <HAL_TIM_MspPostInit+0x8c>)
 8005812:	699b      	ldr	r3, [r3, #24]
 8005814:	f003 0304 	and.w	r3, r3, #4
 8005818:	60fb      	str	r3, [r7, #12]
 800581a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800581c:	4b14      	ldr	r3, [pc, #80]	; (8005870 <HAL_TIM_MspPostInit+0x8c>)
 800581e:	699b      	ldr	r3, [r3, #24]
 8005820:	4a13      	ldr	r2, [pc, #76]	; (8005870 <HAL_TIM_MspPostInit+0x8c>)
 8005822:	f043 0308 	orr.w	r3, r3, #8
 8005826:	6193      	str	r3, [r2, #24]
 8005828:	4b11      	ldr	r3, [pc, #68]	; (8005870 <HAL_TIM_MspPostInit+0x8c>)
 800582a:	699b      	ldr	r3, [r3, #24]
 800582c:	f003 0308 	and.w	r3, r3, #8
 8005830:	60bb      	str	r3, [r7, #8]
 8005832:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005834:	23c0      	movs	r3, #192	; 0xc0
 8005836:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005838:	2302      	movs	r3, #2
 800583a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800583c:	2302      	movs	r3, #2
 800583e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005840:	f107 0310 	add.w	r3, r7, #16
 8005844:	4619      	mov	r1, r3
 8005846:	480b      	ldr	r0, [pc, #44]	; (8005874 <HAL_TIM_MspPostInit+0x90>)
 8005848:	f000 fb82 	bl	8005f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800584c:	2303      	movs	r3, #3
 800584e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005850:	2302      	movs	r3, #2
 8005852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005854:	2302      	movs	r3, #2
 8005856:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005858:	f107 0310 	add.w	r3, r7, #16
 800585c:	4619      	mov	r1, r3
 800585e:	4806      	ldr	r0, [pc, #24]	; (8005878 <HAL_TIM_MspPostInit+0x94>)
 8005860:	f000 fb76 	bl	8005f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005864:	bf00      	nop
 8005866:	3720      	adds	r7, #32
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	40000400 	.word	0x40000400
 8005870:	40021000 	.word	0x40021000
 8005874:	40010800 	.word	0x40010800
 8005878:	40010c00 	.word	0x40010c00

0800587c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005880:	4b11      	ldr	r3, [pc, #68]	; (80058c8 <MX_USART2_UART_Init+0x4c>)
 8005882:	4a12      	ldr	r2, [pc, #72]	; (80058cc <MX_USART2_UART_Init+0x50>)
 8005884:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8005886:	4b10      	ldr	r3, [pc, #64]	; (80058c8 <MX_USART2_UART_Init+0x4c>)
 8005888:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800588c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800588e:	4b0e      	ldr	r3, [pc, #56]	; (80058c8 <MX_USART2_UART_Init+0x4c>)
 8005890:	2200      	movs	r2, #0
 8005892:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005894:	4b0c      	ldr	r3, [pc, #48]	; (80058c8 <MX_USART2_UART_Init+0x4c>)
 8005896:	2200      	movs	r2, #0
 8005898:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800589a:	4b0b      	ldr	r3, [pc, #44]	; (80058c8 <MX_USART2_UART_Init+0x4c>)
 800589c:	2200      	movs	r2, #0
 800589e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80058a0:	4b09      	ldr	r3, [pc, #36]	; (80058c8 <MX_USART2_UART_Init+0x4c>)
 80058a2:	220c      	movs	r2, #12
 80058a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80058a6:	4b08      	ldr	r3, [pc, #32]	; (80058c8 <MX_USART2_UART_Init+0x4c>)
 80058a8:	2200      	movs	r2, #0
 80058aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80058ac:	4b06      	ldr	r3, [pc, #24]	; (80058c8 <MX_USART2_UART_Init+0x4c>)
 80058ae:	2200      	movs	r2, #0
 80058b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80058b2:	4805      	ldr	r0, [pc, #20]	; (80058c8 <MX_USART2_UART_Init+0x4c>)
 80058b4:	f003 fb0e 	bl	8008ed4 <HAL_UART_Init>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d001      	beq.n	80058c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80058be:	f7fc fbf9 	bl	80020b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80058c2:	bf00      	nop
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	2000071c 	.word	0x2000071c
 80058cc:	40004400 	.word	0x40004400

080058d0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80058d4:	4b11      	ldr	r3, [pc, #68]	; (800591c <MX_USART3_UART_Init+0x4c>)
 80058d6:	4a12      	ldr	r2, [pc, #72]	; (8005920 <MX_USART3_UART_Init+0x50>)
 80058d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80058da:	4b10      	ldr	r3, [pc, #64]	; (800591c <MX_USART3_UART_Init+0x4c>)
 80058dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80058e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80058e2:	4b0e      	ldr	r3, [pc, #56]	; (800591c <MX_USART3_UART_Init+0x4c>)
 80058e4:	2200      	movs	r2, #0
 80058e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80058e8:	4b0c      	ldr	r3, [pc, #48]	; (800591c <MX_USART3_UART_Init+0x4c>)
 80058ea:	2200      	movs	r2, #0
 80058ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80058ee:	4b0b      	ldr	r3, [pc, #44]	; (800591c <MX_USART3_UART_Init+0x4c>)
 80058f0:	2200      	movs	r2, #0
 80058f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80058f4:	4b09      	ldr	r3, [pc, #36]	; (800591c <MX_USART3_UART_Init+0x4c>)
 80058f6:	220c      	movs	r2, #12
 80058f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80058fa:	4b08      	ldr	r3, [pc, #32]	; (800591c <MX_USART3_UART_Init+0x4c>)
 80058fc:	2200      	movs	r2, #0
 80058fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005900:	4b06      	ldr	r3, [pc, #24]	; (800591c <MX_USART3_UART_Init+0x4c>)
 8005902:	2200      	movs	r2, #0
 8005904:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005906:	4805      	ldr	r0, [pc, #20]	; (800591c <MX_USART3_UART_Init+0x4c>)
 8005908:	f003 fae4 	bl	8008ed4 <HAL_UART_Init>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d001      	beq.n	8005916 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8005912:	f7fc fbcf 	bl	80020b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005916:	bf00      	nop
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	20000764 	.word	0x20000764
 8005920:	40004800 	.word	0x40004800

08005924 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b08a      	sub	sp, #40	; 0x28
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800592c:	f107 0318 	add.w	r3, r7, #24
 8005930:	2200      	movs	r2, #0
 8005932:	601a      	str	r2, [r3, #0]
 8005934:	605a      	str	r2, [r3, #4]
 8005936:	609a      	str	r2, [r3, #8]
 8005938:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a3b      	ldr	r2, [pc, #236]	; (8005a2c <HAL_UART_MspInit+0x108>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d138      	bne.n	80059b6 <HAL_UART_MspInit+0x92>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005944:	4b3a      	ldr	r3, [pc, #232]	; (8005a30 <HAL_UART_MspInit+0x10c>)
 8005946:	69db      	ldr	r3, [r3, #28]
 8005948:	4a39      	ldr	r2, [pc, #228]	; (8005a30 <HAL_UART_MspInit+0x10c>)
 800594a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800594e:	61d3      	str	r3, [r2, #28]
 8005950:	4b37      	ldr	r3, [pc, #220]	; (8005a30 <HAL_UART_MspInit+0x10c>)
 8005952:	69db      	ldr	r3, [r3, #28]
 8005954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005958:	617b      	str	r3, [r7, #20]
 800595a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800595c:	4b34      	ldr	r3, [pc, #208]	; (8005a30 <HAL_UART_MspInit+0x10c>)
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	4a33      	ldr	r2, [pc, #204]	; (8005a30 <HAL_UART_MspInit+0x10c>)
 8005962:	f043 0304 	orr.w	r3, r3, #4
 8005966:	6193      	str	r3, [r2, #24]
 8005968:	4b31      	ldr	r3, [pc, #196]	; (8005a30 <HAL_UART_MspInit+0x10c>)
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	f003 0304 	and.w	r3, r3, #4
 8005970:	613b      	str	r3, [r7, #16]
 8005972:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005974:	2304      	movs	r3, #4
 8005976:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005978:	2302      	movs	r3, #2
 800597a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800597c:	2303      	movs	r3, #3
 800597e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005980:	f107 0318 	add.w	r3, r7, #24
 8005984:	4619      	mov	r1, r3
 8005986:	482b      	ldr	r0, [pc, #172]	; (8005a34 <HAL_UART_MspInit+0x110>)
 8005988:	f000 fae2 	bl	8005f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800598c:	2308      	movs	r3, #8
 800598e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005990:	2300      	movs	r3, #0
 8005992:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005994:	2300      	movs	r3, #0
 8005996:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005998:	f107 0318 	add.w	r3, r7, #24
 800599c:	4619      	mov	r1, r3
 800599e:	4825      	ldr	r0, [pc, #148]	; (8005a34 <HAL_UART_MspInit+0x110>)
 80059a0:	f000 fad6 	bl	8005f50 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 80059a4:	2200      	movs	r2, #0
 80059a6:	2102      	movs	r1, #2
 80059a8:	2026      	movs	r0, #38	; 0x26
 80059aa:	f000 f9e8 	bl	8005d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80059ae:	2026      	movs	r0, #38	; 0x26
 80059b0:	f000 fa01 	bl	8005db6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80059b4:	e036      	b.n	8005a24 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART3)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a1f      	ldr	r2, [pc, #124]	; (8005a38 <HAL_UART_MspInit+0x114>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d131      	bne.n	8005a24 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 80059c0:	4b1b      	ldr	r3, [pc, #108]	; (8005a30 <HAL_UART_MspInit+0x10c>)
 80059c2:	69db      	ldr	r3, [r3, #28]
 80059c4:	4a1a      	ldr	r2, [pc, #104]	; (8005a30 <HAL_UART_MspInit+0x10c>)
 80059c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059ca:	61d3      	str	r3, [r2, #28]
 80059cc:	4b18      	ldr	r3, [pc, #96]	; (8005a30 <HAL_UART_MspInit+0x10c>)
 80059ce:	69db      	ldr	r3, [r3, #28]
 80059d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059d4:	60fb      	str	r3, [r7, #12]
 80059d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80059d8:	4b15      	ldr	r3, [pc, #84]	; (8005a30 <HAL_UART_MspInit+0x10c>)
 80059da:	699b      	ldr	r3, [r3, #24]
 80059dc:	4a14      	ldr	r2, [pc, #80]	; (8005a30 <HAL_UART_MspInit+0x10c>)
 80059de:	f043 0308 	orr.w	r3, r3, #8
 80059e2:	6193      	str	r3, [r2, #24]
 80059e4:	4b12      	ldr	r3, [pc, #72]	; (8005a30 <HAL_UART_MspInit+0x10c>)
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	f003 0308 	and.w	r3, r3, #8
 80059ec:	60bb      	str	r3, [r7, #8]
 80059ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80059f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059f6:	2302      	movs	r3, #2
 80059f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80059fa:	2303      	movs	r3, #3
 80059fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059fe:	f107 0318 	add.w	r3, r7, #24
 8005a02:	4619      	mov	r1, r3
 8005a04:	480d      	ldr	r0, [pc, #52]	; (8005a3c <HAL_UART_MspInit+0x118>)
 8005a06:	f000 faa3 	bl	8005f50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005a0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005a0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005a10:	2300      	movs	r3, #0
 8005a12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a14:	2300      	movs	r3, #0
 8005a16:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a18:	f107 0318 	add.w	r3, r7, #24
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	4807      	ldr	r0, [pc, #28]	; (8005a3c <HAL_UART_MspInit+0x118>)
 8005a20:	f000 fa96 	bl	8005f50 <HAL_GPIO_Init>
}
 8005a24:	bf00      	nop
 8005a26:	3728      	adds	r7, #40	; 0x28
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	40004400 	.word	0x40004400
 8005a30:	40021000 	.word	0x40021000
 8005a34:	40010800 	.word	0x40010800
 8005a38:	40004800 	.word	0x40004800
 8005a3c:	40010c00 	.word	0x40010c00

08005a40 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8005a44:	4b0d      	ldr	r3, [pc, #52]	; (8005a7c <MX_USB_PCD_Init+0x3c>)
 8005a46:	4a0e      	ldr	r2, [pc, #56]	; (8005a80 <MX_USB_PCD_Init+0x40>)
 8005a48:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8005a4a:	4b0c      	ldr	r3, [pc, #48]	; (8005a7c <MX_USB_PCD_Init+0x3c>)
 8005a4c:	2208      	movs	r2, #8
 8005a4e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8005a50:	4b0a      	ldr	r3, [pc, #40]	; (8005a7c <MX_USB_PCD_Init+0x3c>)
 8005a52:	2202      	movs	r2, #2
 8005a54:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8005a56:	4b09      	ldr	r3, [pc, #36]	; (8005a7c <MX_USB_PCD_Init+0x3c>)
 8005a58:	2200      	movs	r2, #0
 8005a5a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8005a5c:	4b07      	ldr	r3, [pc, #28]	; (8005a7c <MX_USB_PCD_Init+0x3c>)
 8005a5e:	2200      	movs	r2, #0
 8005a60:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8005a62:	4b06      	ldr	r3, [pc, #24]	; (8005a7c <MX_USB_PCD_Init+0x3c>)
 8005a64:	2200      	movs	r2, #0
 8005a66:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8005a68:	4804      	ldr	r0, [pc, #16]	; (8005a7c <MX_USB_PCD_Init+0x3c>)
 8005a6a:	f001 fc66 	bl	800733a <HAL_PCD_Init>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d001      	beq.n	8005a78 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8005a74:	f7fc fb1e 	bl	80020b4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8005a78:	bf00      	nop
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	200007ac 	.word	0x200007ac
 8005a80:	40005c00 	.word	0x40005c00

08005a84 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]

  if(pcdHandle->Instance==USB)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a09      	ldr	r2, [pc, #36]	; (8005ab8 <HAL_PCD_MspInit+0x34>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d10b      	bne.n	8005aae <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8005a96:	4b09      	ldr	r3, [pc, #36]	; (8005abc <HAL_PCD_MspInit+0x38>)
 8005a98:	69db      	ldr	r3, [r3, #28]
 8005a9a:	4a08      	ldr	r2, [pc, #32]	; (8005abc <HAL_PCD_MspInit+0x38>)
 8005a9c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005aa0:	61d3      	str	r3, [r2, #28]
 8005aa2:	4b06      	ldr	r3, [pc, #24]	; (8005abc <HAL_PCD_MspInit+0x38>)
 8005aa4:	69db      	ldr	r3, [r3, #28]
 8005aa6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005aaa:	60fb      	str	r3, [r7, #12]
 8005aac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8005aae:	bf00      	nop
 8005ab0:	3714      	adds	r7, #20
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bc80      	pop	{r7}
 8005ab6:	4770      	bx	lr
 8005ab8:	40005c00 	.word	0x40005c00
 8005abc:	40021000 	.word	0x40021000

08005ac0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005ac0:	480c      	ldr	r0, [pc, #48]	; (8005af4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005ac2:	490d      	ldr	r1, [pc, #52]	; (8005af8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005ac4:	4a0d      	ldr	r2, [pc, #52]	; (8005afc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005ac6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005ac8:	e002      	b.n	8005ad0 <LoopCopyDataInit>

08005aca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005aca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005acc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005ace:	3304      	adds	r3, #4

08005ad0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005ad0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005ad2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005ad4:	d3f9      	bcc.n	8005aca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005ad6:	4a0a      	ldr	r2, [pc, #40]	; (8005b00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005ad8:	4c0a      	ldr	r4, [pc, #40]	; (8005b04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005ada:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005adc:	e001      	b.n	8005ae2 <LoopFillZerobss>

08005ade <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005ade:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005ae0:	3204      	adds	r2, #4

08005ae2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005ae2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005ae4:	d3fb      	bcc.n	8005ade <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005ae6:	f7ff fc41 	bl	800536c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005aea:	f004 f8d1 	bl	8009c90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005aee:	f7fb fdef 	bl	80016d0 <main>
  bx lr
 8005af2:	4770      	bx	lr
  ldr r0, =_sdata
 8005af4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005af8:	20000274 	.word	0x20000274
  ldr r2, =_sidata
 8005afc:	0800f498 	.word	0x0800f498
  ldr r2, =_sbss
 8005b00:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 8005b04:	20000ab0 	.word	0x20000ab0

08005b08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005b08:	e7fe      	b.n	8005b08 <ADC1_2_IRQHandler>
	...

08005b0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005b10:	4b08      	ldr	r3, [pc, #32]	; (8005b34 <HAL_Init+0x28>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a07      	ldr	r2, [pc, #28]	; (8005b34 <HAL_Init+0x28>)
 8005b16:	f043 0310 	orr.w	r3, r3, #16
 8005b1a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005b1c:	2003      	movs	r0, #3
 8005b1e:	f000 f923 	bl	8005d68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005b22:	200f      	movs	r0, #15
 8005b24:	f000 f808 	bl	8005b38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005b28:	f7ff faf2 	bl	8005110 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	40022000 	.word	0x40022000

08005b38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005b40:	4b12      	ldr	r3, [pc, #72]	; (8005b8c <HAL_InitTick+0x54>)
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	4b12      	ldr	r3, [pc, #72]	; (8005b90 <HAL_InitTick+0x58>)
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	4619      	mov	r1, r3
 8005b4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005b4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b56:	4618      	mov	r0, r3
 8005b58:	f000 f93b 	bl	8005dd2 <HAL_SYSTICK_Config>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d001      	beq.n	8005b66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e00e      	b.n	8005b84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2b0f      	cmp	r3, #15
 8005b6a:	d80a      	bhi.n	8005b82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	6879      	ldr	r1, [r7, #4]
 8005b70:	f04f 30ff 	mov.w	r0, #4294967295
 8005b74:	f000 f903 	bl	8005d7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005b78:	4a06      	ldr	r2, [pc, #24]	; (8005b94 <HAL_InitTick+0x5c>)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	e000      	b.n	8005b84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3708      	adds	r7, #8
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	20000094 	.word	0x20000094
 8005b90:	2000009c 	.word	0x2000009c
 8005b94:	20000098 	.word	0x20000098

08005b98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005b9c:	4b05      	ldr	r3, [pc, #20]	; (8005bb4 <HAL_IncTick+0x1c>)
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	4b05      	ldr	r3, [pc, #20]	; (8005bb8 <HAL_IncTick+0x20>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	4a03      	ldr	r2, [pc, #12]	; (8005bb8 <HAL_IncTick+0x20>)
 8005baa:	6013      	str	r3, [r2, #0]
}
 8005bac:	bf00      	nop
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bc80      	pop	{r7}
 8005bb2:	4770      	bx	lr
 8005bb4:	2000009c 	.word	0x2000009c
 8005bb8:	20000a9c 	.word	0x20000a9c

08005bbc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8005bc0:	4b02      	ldr	r3, [pc, #8]	; (8005bcc <HAL_GetTick+0x10>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bc80      	pop	{r7}
 8005bca:	4770      	bx	lr
 8005bcc:	20000a9c 	.word	0x20000a9c

08005bd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b085      	sub	sp, #20
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f003 0307 	and.w	r3, r3, #7
 8005bde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005be0:	4b0c      	ldr	r3, [pc, #48]	; (8005c14 <__NVIC_SetPriorityGrouping+0x44>)
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005be6:	68ba      	ldr	r2, [r7, #8]
 8005be8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005bec:	4013      	ands	r3, r2
 8005bee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005bf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c02:	4a04      	ldr	r2, [pc, #16]	; (8005c14 <__NVIC_SetPriorityGrouping+0x44>)
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	60d3      	str	r3, [r2, #12]
}
 8005c08:	bf00      	nop
 8005c0a:	3714      	adds	r7, #20
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bc80      	pop	{r7}
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop
 8005c14:	e000ed00 	.word	0xe000ed00

08005c18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c1c:	4b04      	ldr	r3, [pc, #16]	; (8005c30 <__NVIC_GetPriorityGrouping+0x18>)
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	0a1b      	lsrs	r3, r3, #8
 8005c22:	f003 0307 	and.w	r3, r3, #7
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bc80      	pop	{r7}
 8005c2c:	4770      	bx	lr
 8005c2e:	bf00      	nop
 8005c30:	e000ed00 	.word	0xe000ed00

08005c34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	db0b      	blt.n	8005c5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c46:	79fb      	ldrb	r3, [r7, #7]
 8005c48:	f003 021f 	and.w	r2, r3, #31
 8005c4c:	4906      	ldr	r1, [pc, #24]	; (8005c68 <__NVIC_EnableIRQ+0x34>)
 8005c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c52:	095b      	lsrs	r3, r3, #5
 8005c54:	2001      	movs	r0, #1
 8005c56:	fa00 f202 	lsl.w	r2, r0, r2
 8005c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005c5e:	bf00      	nop
 8005c60:	370c      	adds	r7, #12
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bc80      	pop	{r7}
 8005c66:	4770      	bx	lr
 8005c68:	e000e100 	.word	0xe000e100

08005c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	4603      	mov	r3, r0
 8005c74:	6039      	str	r1, [r7, #0]
 8005c76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	db0a      	blt.n	8005c96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	b2da      	uxtb	r2, r3
 8005c84:	490c      	ldr	r1, [pc, #48]	; (8005cb8 <__NVIC_SetPriority+0x4c>)
 8005c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c8a:	0112      	lsls	r2, r2, #4
 8005c8c:	b2d2      	uxtb	r2, r2
 8005c8e:	440b      	add	r3, r1
 8005c90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005c94:	e00a      	b.n	8005cac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	b2da      	uxtb	r2, r3
 8005c9a:	4908      	ldr	r1, [pc, #32]	; (8005cbc <__NVIC_SetPriority+0x50>)
 8005c9c:	79fb      	ldrb	r3, [r7, #7]
 8005c9e:	f003 030f 	and.w	r3, r3, #15
 8005ca2:	3b04      	subs	r3, #4
 8005ca4:	0112      	lsls	r2, r2, #4
 8005ca6:	b2d2      	uxtb	r2, r2
 8005ca8:	440b      	add	r3, r1
 8005caa:	761a      	strb	r2, [r3, #24]
}
 8005cac:	bf00      	nop
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bc80      	pop	{r7}
 8005cb4:	4770      	bx	lr
 8005cb6:	bf00      	nop
 8005cb8:	e000e100 	.word	0xe000e100
 8005cbc:	e000ed00 	.word	0xe000ed00

08005cc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b089      	sub	sp, #36	; 0x24
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f003 0307 	and.w	r3, r3, #7
 8005cd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	f1c3 0307 	rsb	r3, r3, #7
 8005cda:	2b04      	cmp	r3, #4
 8005cdc:	bf28      	it	cs
 8005cde:	2304      	movcs	r3, #4
 8005ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	3304      	adds	r3, #4
 8005ce6:	2b06      	cmp	r3, #6
 8005ce8:	d902      	bls.n	8005cf0 <NVIC_EncodePriority+0x30>
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	3b03      	subs	r3, #3
 8005cee:	e000      	b.n	8005cf2 <NVIC_EncodePriority+0x32>
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005cfe:	43da      	mvns	r2, r3
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	401a      	ands	r2, r3
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d08:	f04f 31ff 	mov.w	r1, #4294967295
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d12:	43d9      	mvns	r1, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d18:	4313      	orrs	r3, r2
         );
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3724      	adds	r7, #36	; 0x24
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bc80      	pop	{r7}
 8005d22:	4770      	bx	lr

08005d24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b082      	sub	sp, #8
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d34:	d301      	bcc.n	8005d3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005d36:	2301      	movs	r3, #1
 8005d38:	e00f      	b.n	8005d5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005d3a:	4a0a      	ldr	r2, [pc, #40]	; (8005d64 <SysTick_Config+0x40>)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	3b01      	subs	r3, #1
 8005d40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005d42:	210f      	movs	r1, #15
 8005d44:	f04f 30ff 	mov.w	r0, #4294967295
 8005d48:	f7ff ff90 	bl	8005c6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005d4c:	4b05      	ldr	r3, [pc, #20]	; (8005d64 <SysTick_Config+0x40>)
 8005d4e:	2200      	movs	r2, #0
 8005d50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005d52:	4b04      	ldr	r3, [pc, #16]	; (8005d64 <SysTick_Config+0x40>)
 8005d54:	2207      	movs	r2, #7
 8005d56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3708      	adds	r7, #8
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	e000e010 	.word	0xe000e010

08005d68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f7ff ff2d 	bl	8005bd0 <__NVIC_SetPriorityGrouping>
}
 8005d76:	bf00      	nop
 8005d78:	3708      	adds	r7, #8
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}

08005d7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005d7e:	b580      	push	{r7, lr}
 8005d80:	b086      	sub	sp, #24
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	4603      	mov	r3, r0
 8005d86:	60b9      	str	r1, [r7, #8]
 8005d88:	607a      	str	r2, [r7, #4]
 8005d8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005d90:	f7ff ff42 	bl	8005c18 <__NVIC_GetPriorityGrouping>
 8005d94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	68b9      	ldr	r1, [r7, #8]
 8005d9a:	6978      	ldr	r0, [r7, #20]
 8005d9c:	f7ff ff90 	bl	8005cc0 <NVIC_EncodePriority>
 8005da0:	4602      	mov	r2, r0
 8005da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005da6:	4611      	mov	r1, r2
 8005da8:	4618      	mov	r0, r3
 8005daa:	f7ff ff5f 	bl	8005c6c <__NVIC_SetPriority>
}
 8005dae:	bf00      	nop
 8005db0:	3718      	adds	r7, #24
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}

08005db6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b082      	sub	sp, #8
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f7ff ff35 	bl	8005c34 <__NVIC_EnableIRQ>
}
 8005dca:	bf00      	nop
 8005dcc:	3708      	adds	r7, #8
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}

08005dd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005dd2:	b580      	push	{r7, lr}
 8005dd4:	b082      	sub	sp, #8
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f7ff ffa2 	bl	8005d24 <SysTick_Config>
 8005de0:	4603      	mov	r3, r0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3708      	adds	r7, #8
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}

08005dea <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005dea:	b480      	push	{r7}
 8005dec:	b085      	sub	sp, #20
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005df2:	2300      	movs	r3, #0
 8005df4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	d008      	beq.n	8005e14 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2204      	movs	r2, #4
 8005e06:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	e020      	b.n	8005e56 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f022 020e 	bic.w	r2, r2, #14
 8005e22:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f022 0201 	bic.w	r2, r2, #1
 8005e32:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e3c:	2101      	movs	r1, #1
 8005e3e:	fa01 f202 	lsl.w	r2, r1, r2
 8005e42:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8005e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3714      	adds	r7, #20
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bc80      	pop	{r7}
 8005e5e:	4770      	bx	lr

08005e60 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	2b02      	cmp	r3, #2
 8005e76:	d005      	beq.n	8005e84 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2204      	movs	r2, #4
 8005e7c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	73fb      	strb	r3, [r7, #15]
 8005e82:	e051      	b.n	8005f28 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f022 020e 	bic.w	r2, r2, #14
 8005e92:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f022 0201 	bic.w	r2, r2, #1
 8005ea2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a22      	ldr	r2, [pc, #136]	; (8005f34 <HAL_DMA_Abort_IT+0xd4>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d029      	beq.n	8005f02 <HAL_DMA_Abort_IT+0xa2>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a21      	ldr	r2, [pc, #132]	; (8005f38 <HAL_DMA_Abort_IT+0xd8>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d022      	beq.n	8005efe <HAL_DMA_Abort_IT+0x9e>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a1f      	ldr	r2, [pc, #124]	; (8005f3c <HAL_DMA_Abort_IT+0xdc>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d01a      	beq.n	8005ef8 <HAL_DMA_Abort_IT+0x98>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a1e      	ldr	r2, [pc, #120]	; (8005f40 <HAL_DMA_Abort_IT+0xe0>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d012      	beq.n	8005ef2 <HAL_DMA_Abort_IT+0x92>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a1c      	ldr	r2, [pc, #112]	; (8005f44 <HAL_DMA_Abort_IT+0xe4>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d00a      	beq.n	8005eec <HAL_DMA_Abort_IT+0x8c>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a1b      	ldr	r2, [pc, #108]	; (8005f48 <HAL_DMA_Abort_IT+0xe8>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d102      	bne.n	8005ee6 <HAL_DMA_Abort_IT+0x86>
 8005ee0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005ee4:	e00e      	b.n	8005f04 <HAL_DMA_Abort_IT+0xa4>
 8005ee6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005eea:	e00b      	b.n	8005f04 <HAL_DMA_Abort_IT+0xa4>
 8005eec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005ef0:	e008      	b.n	8005f04 <HAL_DMA_Abort_IT+0xa4>
 8005ef2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ef6:	e005      	b.n	8005f04 <HAL_DMA_Abort_IT+0xa4>
 8005ef8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005efc:	e002      	b.n	8005f04 <HAL_DMA_Abort_IT+0xa4>
 8005efe:	2310      	movs	r3, #16
 8005f00:	e000      	b.n	8005f04 <HAL_DMA_Abort_IT+0xa4>
 8005f02:	2301      	movs	r3, #1
 8005f04:	4a11      	ldr	r2, [pc, #68]	; (8005f4c <HAL_DMA_Abort_IT+0xec>)
 8005f06:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d003      	beq.n	8005f28 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	4798      	blx	r3
    } 
  }
  return status;
 8005f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	40020008 	.word	0x40020008
 8005f38:	4002001c 	.word	0x4002001c
 8005f3c:	40020030 	.word	0x40020030
 8005f40:	40020044 	.word	0x40020044
 8005f44:	40020058 	.word	0x40020058
 8005f48:	4002006c 	.word	0x4002006c
 8005f4c:	40020000 	.word	0x40020000

08005f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b08b      	sub	sp, #44	; 0x2c
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005f62:	e169      	b.n	8006238 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005f64:	2201      	movs	r2, #1
 8005f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f68:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	69fa      	ldr	r2, [r7, #28]
 8005f74:	4013      	ands	r3, r2
 8005f76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005f78:	69ba      	ldr	r2, [r7, #24]
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	f040 8158 	bne.w	8006232 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	4a9a      	ldr	r2, [pc, #616]	; (80061f0 <HAL_GPIO_Init+0x2a0>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d05e      	beq.n	800604a <HAL_GPIO_Init+0xfa>
 8005f8c:	4a98      	ldr	r2, [pc, #608]	; (80061f0 <HAL_GPIO_Init+0x2a0>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d875      	bhi.n	800607e <HAL_GPIO_Init+0x12e>
 8005f92:	4a98      	ldr	r2, [pc, #608]	; (80061f4 <HAL_GPIO_Init+0x2a4>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d058      	beq.n	800604a <HAL_GPIO_Init+0xfa>
 8005f98:	4a96      	ldr	r2, [pc, #600]	; (80061f4 <HAL_GPIO_Init+0x2a4>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d86f      	bhi.n	800607e <HAL_GPIO_Init+0x12e>
 8005f9e:	4a96      	ldr	r2, [pc, #600]	; (80061f8 <HAL_GPIO_Init+0x2a8>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d052      	beq.n	800604a <HAL_GPIO_Init+0xfa>
 8005fa4:	4a94      	ldr	r2, [pc, #592]	; (80061f8 <HAL_GPIO_Init+0x2a8>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d869      	bhi.n	800607e <HAL_GPIO_Init+0x12e>
 8005faa:	4a94      	ldr	r2, [pc, #592]	; (80061fc <HAL_GPIO_Init+0x2ac>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d04c      	beq.n	800604a <HAL_GPIO_Init+0xfa>
 8005fb0:	4a92      	ldr	r2, [pc, #584]	; (80061fc <HAL_GPIO_Init+0x2ac>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d863      	bhi.n	800607e <HAL_GPIO_Init+0x12e>
 8005fb6:	4a92      	ldr	r2, [pc, #584]	; (8006200 <HAL_GPIO_Init+0x2b0>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d046      	beq.n	800604a <HAL_GPIO_Init+0xfa>
 8005fbc:	4a90      	ldr	r2, [pc, #576]	; (8006200 <HAL_GPIO_Init+0x2b0>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d85d      	bhi.n	800607e <HAL_GPIO_Init+0x12e>
 8005fc2:	2b12      	cmp	r3, #18
 8005fc4:	d82a      	bhi.n	800601c <HAL_GPIO_Init+0xcc>
 8005fc6:	2b12      	cmp	r3, #18
 8005fc8:	d859      	bhi.n	800607e <HAL_GPIO_Init+0x12e>
 8005fca:	a201      	add	r2, pc, #4	; (adr r2, 8005fd0 <HAL_GPIO_Init+0x80>)
 8005fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd0:	0800604b 	.word	0x0800604b
 8005fd4:	08006025 	.word	0x08006025
 8005fd8:	08006037 	.word	0x08006037
 8005fdc:	08006079 	.word	0x08006079
 8005fe0:	0800607f 	.word	0x0800607f
 8005fe4:	0800607f 	.word	0x0800607f
 8005fe8:	0800607f 	.word	0x0800607f
 8005fec:	0800607f 	.word	0x0800607f
 8005ff0:	0800607f 	.word	0x0800607f
 8005ff4:	0800607f 	.word	0x0800607f
 8005ff8:	0800607f 	.word	0x0800607f
 8005ffc:	0800607f 	.word	0x0800607f
 8006000:	0800607f 	.word	0x0800607f
 8006004:	0800607f 	.word	0x0800607f
 8006008:	0800607f 	.word	0x0800607f
 800600c:	0800607f 	.word	0x0800607f
 8006010:	0800607f 	.word	0x0800607f
 8006014:	0800602d 	.word	0x0800602d
 8006018:	08006041 	.word	0x08006041
 800601c:	4a79      	ldr	r2, [pc, #484]	; (8006204 <HAL_GPIO_Init+0x2b4>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d013      	beq.n	800604a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006022:	e02c      	b.n	800607e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	623b      	str	r3, [r7, #32]
          break;
 800602a:	e029      	b.n	8006080 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	3304      	adds	r3, #4
 8006032:	623b      	str	r3, [r7, #32]
          break;
 8006034:	e024      	b.n	8006080 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	3308      	adds	r3, #8
 800603c:	623b      	str	r3, [r7, #32]
          break;
 800603e:	e01f      	b.n	8006080 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	330c      	adds	r3, #12
 8006046:	623b      	str	r3, [r7, #32]
          break;
 8006048:	e01a      	b.n	8006080 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d102      	bne.n	8006058 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006052:	2304      	movs	r3, #4
 8006054:	623b      	str	r3, [r7, #32]
          break;
 8006056:	e013      	b.n	8006080 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	2b01      	cmp	r3, #1
 800605e:	d105      	bne.n	800606c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006060:	2308      	movs	r3, #8
 8006062:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	69fa      	ldr	r2, [r7, #28]
 8006068:	611a      	str	r2, [r3, #16]
          break;
 800606a:	e009      	b.n	8006080 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800606c:	2308      	movs	r3, #8
 800606e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	69fa      	ldr	r2, [r7, #28]
 8006074:	615a      	str	r2, [r3, #20]
          break;
 8006076:	e003      	b.n	8006080 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006078:	2300      	movs	r3, #0
 800607a:	623b      	str	r3, [r7, #32]
          break;
 800607c:	e000      	b.n	8006080 <HAL_GPIO_Init+0x130>
          break;
 800607e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	2bff      	cmp	r3, #255	; 0xff
 8006084:	d801      	bhi.n	800608a <HAL_GPIO_Init+0x13a>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	e001      	b.n	800608e <HAL_GPIO_Init+0x13e>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	3304      	adds	r3, #4
 800608e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	2bff      	cmp	r3, #255	; 0xff
 8006094:	d802      	bhi.n	800609c <HAL_GPIO_Init+0x14c>
 8006096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	e002      	b.n	80060a2 <HAL_GPIO_Init+0x152>
 800609c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609e:	3b08      	subs	r3, #8
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	210f      	movs	r1, #15
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	fa01 f303 	lsl.w	r3, r1, r3
 80060b0:	43db      	mvns	r3, r3
 80060b2:	401a      	ands	r2, r3
 80060b4:	6a39      	ldr	r1, [r7, #32]
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	fa01 f303 	lsl.w	r3, r1, r3
 80060bc:	431a      	orrs	r2, r3
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	f000 80b1 	beq.w	8006232 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80060d0:	4b4d      	ldr	r3, [pc, #308]	; (8006208 <HAL_GPIO_Init+0x2b8>)
 80060d2:	699b      	ldr	r3, [r3, #24]
 80060d4:	4a4c      	ldr	r2, [pc, #304]	; (8006208 <HAL_GPIO_Init+0x2b8>)
 80060d6:	f043 0301 	orr.w	r3, r3, #1
 80060da:	6193      	str	r3, [r2, #24]
 80060dc:	4b4a      	ldr	r3, [pc, #296]	; (8006208 <HAL_GPIO_Init+0x2b8>)
 80060de:	699b      	ldr	r3, [r3, #24]
 80060e0:	f003 0301 	and.w	r3, r3, #1
 80060e4:	60bb      	str	r3, [r7, #8]
 80060e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80060e8:	4a48      	ldr	r2, [pc, #288]	; (800620c <HAL_GPIO_Init+0x2bc>)
 80060ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ec:	089b      	lsrs	r3, r3, #2
 80060ee:	3302      	adds	r3, #2
 80060f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80060f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f8:	f003 0303 	and.w	r3, r3, #3
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	220f      	movs	r2, #15
 8006100:	fa02 f303 	lsl.w	r3, r2, r3
 8006104:	43db      	mvns	r3, r3
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	4013      	ands	r3, r2
 800610a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a40      	ldr	r2, [pc, #256]	; (8006210 <HAL_GPIO_Init+0x2c0>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d013      	beq.n	800613c <HAL_GPIO_Init+0x1ec>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a3f      	ldr	r2, [pc, #252]	; (8006214 <HAL_GPIO_Init+0x2c4>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d00d      	beq.n	8006138 <HAL_GPIO_Init+0x1e8>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a3e      	ldr	r2, [pc, #248]	; (8006218 <HAL_GPIO_Init+0x2c8>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d007      	beq.n	8006134 <HAL_GPIO_Init+0x1e4>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a3d      	ldr	r2, [pc, #244]	; (800621c <HAL_GPIO_Init+0x2cc>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d101      	bne.n	8006130 <HAL_GPIO_Init+0x1e0>
 800612c:	2303      	movs	r3, #3
 800612e:	e006      	b.n	800613e <HAL_GPIO_Init+0x1ee>
 8006130:	2304      	movs	r3, #4
 8006132:	e004      	b.n	800613e <HAL_GPIO_Init+0x1ee>
 8006134:	2302      	movs	r3, #2
 8006136:	e002      	b.n	800613e <HAL_GPIO_Init+0x1ee>
 8006138:	2301      	movs	r3, #1
 800613a:	e000      	b.n	800613e <HAL_GPIO_Init+0x1ee>
 800613c:	2300      	movs	r3, #0
 800613e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006140:	f002 0203 	and.w	r2, r2, #3
 8006144:	0092      	lsls	r2, r2, #2
 8006146:	4093      	lsls	r3, r2
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	4313      	orrs	r3, r2
 800614c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800614e:	492f      	ldr	r1, [pc, #188]	; (800620c <HAL_GPIO_Init+0x2bc>)
 8006150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006152:	089b      	lsrs	r3, r3, #2
 8006154:	3302      	adds	r3, #2
 8006156:	68fa      	ldr	r2, [r7, #12]
 8006158:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006164:	2b00      	cmp	r3, #0
 8006166:	d006      	beq.n	8006176 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006168:	4b2d      	ldr	r3, [pc, #180]	; (8006220 <HAL_GPIO_Init+0x2d0>)
 800616a:	689a      	ldr	r2, [r3, #8]
 800616c:	492c      	ldr	r1, [pc, #176]	; (8006220 <HAL_GPIO_Init+0x2d0>)
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	4313      	orrs	r3, r2
 8006172:	608b      	str	r3, [r1, #8]
 8006174:	e006      	b.n	8006184 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006176:	4b2a      	ldr	r3, [pc, #168]	; (8006220 <HAL_GPIO_Init+0x2d0>)
 8006178:	689a      	ldr	r2, [r3, #8]
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	43db      	mvns	r3, r3
 800617e:	4928      	ldr	r1, [pc, #160]	; (8006220 <HAL_GPIO_Init+0x2d0>)
 8006180:	4013      	ands	r3, r2
 8006182:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800618c:	2b00      	cmp	r3, #0
 800618e:	d006      	beq.n	800619e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006190:	4b23      	ldr	r3, [pc, #140]	; (8006220 <HAL_GPIO_Init+0x2d0>)
 8006192:	68da      	ldr	r2, [r3, #12]
 8006194:	4922      	ldr	r1, [pc, #136]	; (8006220 <HAL_GPIO_Init+0x2d0>)
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	4313      	orrs	r3, r2
 800619a:	60cb      	str	r3, [r1, #12]
 800619c:	e006      	b.n	80061ac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800619e:	4b20      	ldr	r3, [pc, #128]	; (8006220 <HAL_GPIO_Init+0x2d0>)
 80061a0:	68da      	ldr	r2, [r3, #12]
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	43db      	mvns	r3, r3
 80061a6:	491e      	ldr	r1, [pc, #120]	; (8006220 <HAL_GPIO_Init+0x2d0>)
 80061a8:	4013      	ands	r3, r2
 80061aa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d006      	beq.n	80061c6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80061b8:	4b19      	ldr	r3, [pc, #100]	; (8006220 <HAL_GPIO_Init+0x2d0>)
 80061ba:	685a      	ldr	r2, [r3, #4]
 80061bc:	4918      	ldr	r1, [pc, #96]	; (8006220 <HAL_GPIO_Init+0x2d0>)
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	604b      	str	r3, [r1, #4]
 80061c4:	e006      	b.n	80061d4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80061c6:	4b16      	ldr	r3, [pc, #88]	; (8006220 <HAL_GPIO_Init+0x2d0>)
 80061c8:	685a      	ldr	r2, [r3, #4]
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	43db      	mvns	r3, r3
 80061ce:	4914      	ldr	r1, [pc, #80]	; (8006220 <HAL_GPIO_Init+0x2d0>)
 80061d0:	4013      	ands	r3, r2
 80061d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d021      	beq.n	8006224 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80061e0:	4b0f      	ldr	r3, [pc, #60]	; (8006220 <HAL_GPIO_Init+0x2d0>)
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	490e      	ldr	r1, [pc, #56]	; (8006220 <HAL_GPIO_Init+0x2d0>)
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	600b      	str	r3, [r1, #0]
 80061ec:	e021      	b.n	8006232 <HAL_GPIO_Init+0x2e2>
 80061ee:	bf00      	nop
 80061f0:	10320000 	.word	0x10320000
 80061f4:	10310000 	.word	0x10310000
 80061f8:	10220000 	.word	0x10220000
 80061fc:	10210000 	.word	0x10210000
 8006200:	10120000 	.word	0x10120000
 8006204:	10110000 	.word	0x10110000
 8006208:	40021000 	.word	0x40021000
 800620c:	40010000 	.word	0x40010000
 8006210:	40010800 	.word	0x40010800
 8006214:	40010c00 	.word	0x40010c00
 8006218:	40011000 	.word	0x40011000
 800621c:	40011400 	.word	0x40011400
 8006220:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006224:	4b0b      	ldr	r3, [pc, #44]	; (8006254 <HAL_GPIO_Init+0x304>)
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	43db      	mvns	r3, r3
 800622c:	4909      	ldr	r1, [pc, #36]	; (8006254 <HAL_GPIO_Init+0x304>)
 800622e:	4013      	ands	r3, r2
 8006230:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8006232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006234:	3301      	adds	r3, #1
 8006236:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623e:	fa22 f303 	lsr.w	r3, r2, r3
 8006242:	2b00      	cmp	r3, #0
 8006244:	f47f ae8e 	bne.w	8005f64 <HAL_GPIO_Init+0x14>
  }
}
 8006248:	bf00      	nop
 800624a:	bf00      	nop
 800624c:	372c      	adds	r7, #44	; 0x2c
 800624e:	46bd      	mov	sp, r7
 8006250:	bc80      	pop	{r7}
 8006252:	4770      	bx	lr
 8006254:	40010400 	.word	0x40010400

08006258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	460b      	mov	r3, r1
 8006262:	807b      	strh	r3, [r7, #2]
 8006264:	4613      	mov	r3, r2
 8006266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006268:	787b      	ldrb	r3, [r7, #1]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d003      	beq.n	8006276 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800626e:	887a      	ldrh	r2, [r7, #2]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006274:	e003      	b.n	800627e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006276:	887b      	ldrh	r3, [r7, #2]
 8006278:	041a      	lsls	r2, r3, #16
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	611a      	str	r2, [r3, #16]
}
 800627e:	bf00      	nop
 8006280:	370c      	adds	r7, #12
 8006282:	46bd      	mov	sp, r7
 8006284:	bc80      	pop	{r7}
 8006286:	4770      	bx	lr

08006288 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d101      	bne.n	800629a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e12b      	b.n	80064f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d106      	bne.n	80062b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f7fb f9be 	bl	8001630 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2224      	movs	r2, #36	; 0x24
 80062b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f022 0201 	bic.w	r2, r2, #1
 80062ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80062ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80062ec:	f001 fcee 	bl	8007ccc <HAL_RCC_GetPCLK1Freq>
 80062f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	4a81      	ldr	r2, [pc, #516]	; (80064fc <HAL_I2C_Init+0x274>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d807      	bhi.n	800630c <HAL_I2C_Init+0x84>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	4a80      	ldr	r2, [pc, #512]	; (8006500 <HAL_I2C_Init+0x278>)
 8006300:	4293      	cmp	r3, r2
 8006302:	bf94      	ite	ls
 8006304:	2301      	movls	r3, #1
 8006306:	2300      	movhi	r3, #0
 8006308:	b2db      	uxtb	r3, r3
 800630a:	e006      	b.n	800631a <HAL_I2C_Init+0x92>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	4a7d      	ldr	r2, [pc, #500]	; (8006504 <HAL_I2C_Init+0x27c>)
 8006310:	4293      	cmp	r3, r2
 8006312:	bf94      	ite	ls
 8006314:	2301      	movls	r3, #1
 8006316:	2300      	movhi	r3, #0
 8006318:	b2db      	uxtb	r3, r3
 800631a:	2b00      	cmp	r3, #0
 800631c:	d001      	beq.n	8006322 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e0e7      	b.n	80064f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	4a78      	ldr	r2, [pc, #480]	; (8006508 <HAL_I2C_Init+0x280>)
 8006326:	fba2 2303 	umull	r2, r3, r2, r3
 800632a:	0c9b      	lsrs	r3, r3, #18
 800632c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	68ba      	ldr	r2, [r7, #8]
 800633e:	430a      	orrs	r2, r1
 8006340:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	6a1b      	ldr	r3, [r3, #32]
 8006348:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	4a6a      	ldr	r2, [pc, #424]	; (80064fc <HAL_I2C_Init+0x274>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d802      	bhi.n	800635c <HAL_I2C_Init+0xd4>
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	3301      	adds	r3, #1
 800635a:	e009      	b.n	8006370 <HAL_I2C_Init+0xe8>
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006362:	fb02 f303 	mul.w	r3, r2, r3
 8006366:	4a69      	ldr	r2, [pc, #420]	; (800650c <HAL_I2C_Init+0x284>)
 8006368:	fba2 2303 	umull	r2, r3, r2, r3
 800636c:	099b      	lsrs	r3, r3, #6
 800636e:	3301      	adds	r3, #1
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	6812      	ldr	r2, [r2, #0]
 8006374:	430b      	orrs	r3, r1
 8006376:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	69db      	ldr	r3, [r3, #28]
 800637e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006382:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	495c      	ldr	r1, [pc, #368]	; (80064fc <HAL_I2C_Init+0x274>)
 800638c:	428b      	cmp	r3, r1
 800638e:	d819      	bhi.n	80063c4 <HAL_I2C_Init+0x13c>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	1e59      	subs	r1, r3, #1
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	005b      	lsls	r3, r3, #1
 800639a:	fbb1 f3f3 	udiv	r3, r1, r3
 800639e:	1c59      	adds	r1, r3, #1
 80063a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80063a4:	400b      	ands	r3, r1
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00a      	beq.n	80063c0 <HAL_I2C_Init+0x138>
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	1e59      	subs	r1, r3, #1
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	005b      	lsls	r3, r3, #1
 80063b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80063b8:	3301      	adds	r3, #1
 80063ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063be:	e051      	b.n	8006464 <HAL_I2C_Init+0x1dc>
 80063c0:	2304      	movs	r3, #4
 80063c2:	e04f      	b.n	8006464 <HAL_I2C_Init+0x1dc>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d111      	bne.n	80063f0 <HAL_I2C_Init+0x168>
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	1e58      	subs	r0, r3, #1
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6859      	ldr	r1, [r3, #4]
 80063d4:	460b      	mov	r3, r1
 80063d6:	005b      	lsls	r3, r3, #1
 80063d8:	440b      	add	r3, r1
 80063da:	fbb0 f3f3 	udiv	r3, r0, r3
 80063de:	3301      	adds	r3, #1
 80063e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	bf0c      	ite	eq
 80063e8:	2301      	moveq	r3, #1
 80063ea:	2300      	movne	r3, #0
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	e012      	b.n	8006416 <HAL_I2C_Init+0x18e>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	1e58      	subs	r0, r3, #1
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6859      	ldr	r1, [r3, #4]
 80063f8:	460b      	mov	r3, r1
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	440b      	add	r3, r1
 80063fe:	0099      	lsls	r1, r3, #2
 8006400:	440b      	add	r3, r1
 8006402:	fbb0 f3f3 	udiv	r3, r0, r3
 8006406:	3301      	adds	r3, #1
 8006408:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800640c:	2b00      	cmp	r3, #0
 800640e:	bf0c      	ite	eq
 8006410:	2301      	moveq	r3, #1
 8006412:	2300      	movne	r3, #0
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b00      	cmp	r3, #0
 8006418:	d001      	beq.n	800641e <HAL_I2C_Init+0x196>
 800641a:	2301      	movs	r3, #1
 800641c:	e022      	b.n	8006464 <HAL_I2C_Init+0x1dc>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d10e      	bne.n	8006444 <HAL_I2C_Init+0x1bc>
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	1e58      	subs	r0, r3, #1
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6859      	ldr	r1, [r3, #4]
 800642e:	460b      	mov	r3, r1
 8006430:	005b      	lsls	r3, r3, #1
 8006432:	440b      	add	r3, r1
 8006434:	fbb0 f3f3 	udiv	r3, r0, r3
 8006438:	3301      	adds	r3, #1
 800643a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800643e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006442:	e00f      	b.n	8006464 <HAL_I2C_Init+0x1dc>
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	1e58      	subs	r0, r3, #1
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6859      	ldr	r1, [r3, #4]
 800644c:	460b      	mov	r3, r1
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	440b      	add	r3, r1
 8006452:	0099      	lsls	r1, r3, #2
 8006454:	440b      	add	r3, r1
 8006456:	fbb0 f3f3 	udiv	r3, r0, r3
 800645a:	3301      	adds	r3, #1
 800645c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006460:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006464:	6879      	ldr	r1, [r7, #4]
 8006466:	6809      	ldr	r1, [r1, #0]
 8006468:	4313      	orrs	r3, r2
 800646a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	69da      	ldr	r2, [r3, #28]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a1b      	ldr	r3, [r3, #32]
 800647e:	431a      	orrs	r2, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	430a      	orrs	r2, r1
 8006486:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006492:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	6911      	ldr	r1, [r2, #16]
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	68d2      	ldr	r2, [r2, #12]
 800649e:	4311      	orrs	r1, r2
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	6812      	ldr	r2, [r2, #0]
 80064a4:	430b      	orrs	r3, r1
 80064a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	695a      	ldr	r2, [r3, #20]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	699b      	ldr	r3, [r3, #24]
 80064ba:	431a      	orrs	r2, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	430a      	orrs	r2, r1
 80064c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f042 0201 	orr.w	r2, r2, #1
 80064d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2220      	movs	r2, #32
 80064de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3710      	adds	r7, #16
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	000186a0 	.word	0x000186a0
 8006500:	001e847f 	.word	0x001e847f
 8006504:	003d08ff 	.word	0x003d08ff
 8006508:	431bde83 	.word	0x431bde83
 800650c:	10624dd3 	.word	0x10624dd3

08006510 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b088      	sub	sp, #32
 8006514:	af02      	add	r7, sp, #8
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	4608      	mov	r0, r1
 800651a:	4611      	mov	r1, r2
 800651c:	461a      	mov	r2, r3
 800651e:	4603      	mov	r3, r0
 8006520:	817b      	strh	r3, [r7, #10]
 8006522:	460b      	mov	r3, r1
 8006524:	813b      	strh	r3, [r7, #8]
 8006526:	4613      	mov	r3, r2
 8006528:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800652a:	f7ff fb47 	bl	8005bbc <HAL_GetTick>
 800652e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006536:	b2db      	uxtb	r3, r3
 8006538:	2b20      	cmp	r3, #32
 800653a:	f040 80d9 	bne.w	80066f0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	9300      	str	r3, [sp, #0]
 8006542:	2319      	movs	r3, #25
 8006544:	2201      	movs	r2, #1
 8006546:	496d      	ldr	r1, [pc, #436]	; (80066fc <HAL_I2C_Mem_Write+0x1ec>)
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f000 fcc1 	bl	8006ed0 <I2C_WaitOnFlagUntilTimeout>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d001      	beq.n	8006558 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006554:	2302      	movs	r3, #2
 8006556:	e0cc      	b.n	80066f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800655e:	2b01      	cmp	r3, #1
 8006560:	d101      	bne.n	8006566 <HAL_I2C_Mem_Write+0x56>
 8006562:	2302      	movs	r3, #2
 8006564:	e0c5      	b.n	80066f2 <HAL_I2C_Mem_Write+0x1e2>
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2201      	movs	r2, #1
 800656a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 0301 	and.w	r3, r3, #1
 8006578:	2b01      	cmp	r3, #1
 800657a:	d007      	beq.n	800658c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f042 0201 	orr.w	r2, r2, #1
 800658a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800659a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2221      	movs	r2, #33	; 0x21
 80065a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2240      	movs	r2, #64	; 0x40
 80065a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6a3a      	ldr	r2, [r7, #32]
 80065b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80065bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065c2:	b29a      	uxth	r2, r3
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	4a4d      	ldr	r2, [pc, #308]	; (8006700 <HAL_I2C_Mem_Write+0x1f0>)
 80065cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80065ce:	88f8      	ldrh	r0, [r7, #6]
 80065d0:	893a      	ldrh	r2, [r7, #8]
 80065d2:	8979      	ldrh	r1, [r7, #10]
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	9301      	str	r3, [sp, #4]
 80065d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065da:	9300      	str	r3, [sp, #0]
 80065dc:	4603      	mov	r3, r0
 80065de:	68f8      	ldr	r0, [r7, #12]
 80065e0:	f000 faf8 	bl	8006bd4 <I2C_RequestMemoryWrite>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d052      	beq.n	8006690 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	e081      	b.n	80066f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065ee:	697a      	ldr	r2, [r7, #20]
 80065f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065f2:	68f8      	ldr	r0, [r7, #12]
 80065f4:	f000 fd86 	bl	8007104 <I2C_WaitOnTXEFlagUntilTimeout>
 80065f8:	4603      	mov	r3, r0
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00d      	beq.n	800661a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006602:	2b04      	cmp	r3, #4
 8006604:	d107      	bne.n	8006616 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006614:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e06b      	b.n	80066f2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661e:	781a      	ldrb	r2, [r3, #0]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662a:	1c5a      	adds	r2, r3, #1
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006634:	3b01      	subs	r3, #1
 8006636:	b29a      	uxth	r2, r3
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006640:	b29b      	uxth	r3, r3
 8006642:	3b01      	subs	r3, #1
 8006644:	b29a      	uxth	r2, r3
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	695b      	ldr	r3, [r3, #20]
 8006650:	f003 0304 	and.w	r3, r3, #4
 8006654:	2b04      	cmp	r3, #4
 8006656:	d11b      	bne.n	8006690 <HAL_I2C_Mem_Write+0x180>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800665c:	2b00      	cmp	r3, #0
 800665e:	d017      	beq.n	8006690 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006664:	781a      	ldrb	r2, [r3, #0]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006670:	1c5a      	adds	r2, r3, #1
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800667a:	3b01      	subs	r3, #1
 800667c:	b29a      	uxth	r2, r3
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006686:	b29b      	uxth	r3, r3
 8006688:	3b01      	subs	r3, #1
 800668a:	b29a      	uxth	r2, r3
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006694:	2b00      	cmp	r3, #0
 8006696:	d1aa      	bne.n	80065ee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006698:	697a      	ldr	r2, [r7, #20]
 800669a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800669c:	68f8      	ldr	r0, [r7, #12]
 800669e:	f000 fd79 	bl	8007194 <I2C_WaitOnBTFFlagUntilTimeout>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d00d      	beq.n	80066c4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ac:	2b04      	cmp	r3, #4
 80066ae:	d107      	bne.n	80066c0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066be:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	e016      	b.n	80066f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2220      	movs	r2, #32
 80066d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2200      	movs	r2, #0
 80066e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80066ec:	2300      	movs	r3, #0
 80066ee:	e000      	b.n	80066f2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80066f0:	2302      	movs	r3, #2
  }
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3718      	adds	r7, #24
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	00100002 	.word	0x00100002
 8006700:	ffff0000 	.word	0xffff0000

08006704 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b08c      	sub	sp, #48	; 0x30
 8006708:	af02      	add	r7, sp, #8
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	4608      	mov	r0, r1
 800670e:	4611      	mov	r1, r2
 8006710:	461a      	mov	r2, r3
 8006712:	4603      	mov	r3, r0
 8006714:	817b      	strh	r3, [r7, #10]
 8006716:	460b      	mov	r3, r1
 8006718:	813b      	strh	r3, [r7, #8]
 800671a:	4613      	mov	r3, r2
 800671c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800671e:	2300      	movs	r3, #0
 8006720:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006722:	f7ff fa4b 	bl	8005bbc <HAL_GetTick>
 8006726:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800672e:	b2db      	uxtb	r3, r3
 8006730:	2b20      	cmp	r3, #32
 8006732:	f040 8244 	bne.w	8006bbe <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006738:	9300      	str	r3, [sp, #0]
 800673a:	2319      	movs	r3, #25
 800673c:	2201      	movs	r2, #1
 800673e:	4982      	ldr	r1, [pc, #520]	; (8006948 <HAL_I2C_Mem_Read+0x244>)
 8006740:	68f8      	ldr	r0, [r7, #12]
 8006742:	f000 fbc5 	bl	8006ed0 <I2C_WaitOnFlagUntilTimeout>
 8006746:	4603      	mov	r3, r0
 8006748:	2b00      	cmp	r3, #0
 800674a:	d001      	beq.n	8006750 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800674c:	2302      	movs	r3, #2
 800674e:	e237      	b.n	8006bc0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006756:	2b01      	cmp	r3, #1
 8006758:	d101      	bne.n	800675e <HAL_I2C_Mem_Read+0x5a>
 800675a:	2302      	movs	r3, #2
 800675c:	e230      	b.n	8006bc0 <HAL_I2C_Mem_Read+0x4bc>
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2201      	movs	r2, #1
 8006762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 0301 	and.w	r3, r3, #1
 8006770:	2b01      	cmp	r3, #1
 8006772:	d007      	beq.n	8006784 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f042 0201 	orr.w	r2, r2, #1
 8006782:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006792:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2222      	movs	r2, #34	; 0x22
 8006798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2240      	movs	r2, #64	; 0x40
 80067a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2200      	movs	r2, #0
 80067a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80067b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ba:	b29a      	uxth	r2, r3
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	4a62      	ldr	r2, [pc, #392]	; (800694c <HAL_I2C_Mem_Read+0x248>)
 80067c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80067c6:	88f8      	ldrh	r0, [r7, #6]
 80067c8:	893a      	ldrh	r2, [r7, #8]
 80067ca:	8979      	ldrh	r1, [r7, #10]
 80067cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ce:	9301      	str	r3, [sp, #4]
 80067d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d2:	9300      	str	r3, [sp, #0]
 80067d4:	4603      	mov	r3, r0
 80067d6:	68f8      	ldr	r0, [r7, #12]
 80067d8:	f000 fa92 	bl	8006d00 <I2C_RequestMemoryRead>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d001      	beq.n	80067e6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e1ec      	b.n	8006bc0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d113      	bne.n	8006816 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067ee:	2300      	movs	r3, #0
 80067f0:	61fb      	str	r3, [r7, #28]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	695b      	ldr	r3, [r3, #20]
 80067f8:	61fb      	str	r3, [r7, #28]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	699b      	ldr	r3, [r3, #24]
 8006800:	61fb      	str	r3, [r7, #28]
 8006802:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006812:	601a      	str	r2, [r3, #0]
 8006814:	e1c0      	b.n	8006b98 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800681a:	2b01      	cmp	r3, #1
 800681c:	d11e      	bne.n	800685c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800682c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800682e:	b672      	cpsid	i
}
 8006830:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006832:	2300      	movs	r3, #0
 8006834:	61bb      	str	r3, [r7, #24]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	695b      	ldr	r3, [r3, #20]
 800683c:	61bb      	str	r3, [r7, #24]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	699b      	ldr	r3, [r3, #24]
 8006844:	61bb      	str	r3, [r7, #24]
 8006846:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006856:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006858:	b662      	cpsie	i
}
 800685a:	e035      	b.n	80068c8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006860:	2b02      	cmp	r3, #2
 8006862:	d11e      	bne.n	80068a2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006872:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006874:	b672      	cpsid	i
}
 8006876:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006878:	2300      	movs	r3, #0
 800687a:	617b      	str	r3, [r7, #20]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	695b      	ldr	r3, [r3, #20]
 8006882:	617b      	str	r3, [r7, #20]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	699b      	ldr	r3, [r3, #24]
 800688a:	617b      	str	r3, [r7, #20]
 800688c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800689c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800689e:	b662      	cpsie	i
}
 80068a0:	e012      	b.n	80068c8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80068b0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068b2:	2300      	movs	r3, #0
 80068b4:	613b      	str	r3, [r7, #16]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	695b      	ldr	r3, [r3, #20]
 80068bc:	613b      	str	r3, [r7, #16]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	699b      	ldr	r3, [r3, #24]
 80068c4:	613b      	str	r3, [r7, #16]
 80068c6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80068c8:	e166      	b.n	8006b98 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068ce:	2b03      	cmp	r3, #3
 80068d0:	f200 811f 	bhi.w	8006b12 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d123      	bne.n	8006924 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80068e0:	68f8      	ldr	r0, [r7, #12]
 80068e2:	f000 fc9f 	bl	8007224 <I2C_WaitOnRXNEFlagUntilTimeout>
 80068e6:	4603      	mov	r3, r0
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d001      	beq.n	80068f0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	e167      	b.n	8006bc0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	691a      	ldr	r2, [r3, #16]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fa:	b2d2      	uxtb	r2, r2
 80068fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006902:	1c5a      	adds	r2, r3, #1
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800690c:	3b01      	subs	r3, #1
 800690e:	b29a      	uxth	r2, r3
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006918:	b29b      	uxth	r3, r3
 800691a:	3b01      	subs	r3, #1
 800691c:	b29a      	uxth	r2, r3
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006922:	e139      	b.n	8006b98 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006928:	2b02      	cmp	r3, #2
 800692a:	d152      	bne.n	80069d2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800692c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692e:	9300      	str	r3, [sp, #0]
 8006930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006932:	2200      	movs	r2, #0
 8006934:	4906      	ldr	r1, [pc, #24]	; (8006950 <HAL_I2C_Mem_Read+0x24c>)
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	f000 faca 	bl	8006ed0 <I2C_WaitOnFlagUntilTimeout>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d008      	beq.n	8006954 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e13c      	b.n	8006bc0 <HAL_I2C_Mem_Read+0x4bc>
 8006946:	bf00      	nop
 8006948:	00100002 	.word	0x00100002
 800694c:	ffff0000 	.word	0xffff0000
 8006950:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8006954:	b672      	cpsid	i
}
 8006956:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006966:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	691a      	ldr	r2, [r3, #16]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006972:	b2d2      	uxtb	r2, r2
 8006974:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697a:	1c5a      	adds	r2, r3, #1
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006984:	3b01      	subs	r3, #1
 8006986:	b29a      	uxth	r2, r3
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006990:	b29b      	uxth	r3, r3
 8006992:	3b01      	subs	r3, #1
 8006994:	b29a      	uxth	r2, r3
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800699a:	b662      	cpsie	i
}
 800699c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	691a      	ldr	r2, [r3, #16]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a8:	b2d2      	uxtb	r2, r2
 80069aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b0:	1c5a      	adds	r2, r3, #1
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069ba:	3b01      	subs	r3, #1
 80069bc:	b29a      	uxth	r2, r3
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	3b01      	subs	r3, #1
 80069ca:	b29a      	uxth	r2, r3
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80069d0:	e0e2      	b.n	8006b98 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80069d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d4:	9300      	str	r3, [sp, #0]
 80069d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d8:	2200      	movs	r2, #0
 80069da:	497b      	ldr	r1, [pc, #492]	; (8006bc8 <HAL_I2C_Mem_Read+0x4c4>)
 80069dc:	68f8      	ldr	r0, [r7, #12]
 80069de:	f000 fa77 	bl	8006ed0 <I2C_WaitOnFlagUntilTimeout>
 80069e2:	4603      	mov	r3, r0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d001      	beq.n	80069ec <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	e0e9      	b.n	8006bc0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069fa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80069fc:	b672      	cpsid	i
}
 80069fe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	691a      	ldr	r2, [r3, #16]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0a:	b2d2      	uxtb	r2, r2
 8006a0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a12:	1c5a      	adds	r2, r3, #1
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a1c:	3b01      	subs	r3, #1
 8006a1e:	b29a      	uxth	r2, r3
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	b29a      	uxth	r2, r3
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006a32:	4b66      	ldr	r3, [pc, #408]	; (8006bcc <HAL_I2C_Mem_Read+0x4c8>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	08db      	lsrs	r3, r3, #3
 8006a38:	4a65      	ldr	r2, [pc, #404]	; (8006bd0 <HAL_I2C_Mem_Read+0x4cc>)
 8006a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a3e:	0a1a      	lsrs	r2, r3, #8
 8006a40:	4613      	mov	r3, r2
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	4413      	add	r3, r2
 8006a46:	00da      	lsls	r2, r3, #3
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8006a4c:	6a3b      	ldr	r3, [r7, #32]
 8006a4e:	3b01      	subs	r3, #1
 8006a50:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8006a52:	6a3b      	ldr	r3, [r7, #32]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d118      	bne.n	8006a8a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2220      	movs	r2, #32
 8006a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a72:	f043 0220 	orr.w	r2, r3, #32
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8006a7a:	b662      	cpsie	i
}
 8006a7c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	e09a      	b.n	8006bc0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	695b      	ldr	r3, [r3, #20]
 8006a90:	f003 0304 	and.w	r3, r3, #4
 8006a94:	2b04      	cmp	r3, #4
 8006a96:	d1d9      	bne.n	8006a4c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006aa6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	691a      	ldr	r2, [r3, #16]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab2:	b2d2      	uxtb	r2, r2
 8006ab4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aba:	1c5a      	adds	r2, r3, #1
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ac4:	3b01      	subs	r3, #1
 8006ac6:	b29a      	uxth	r2, r3
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	3b01      	subs	r3, #1
 8006ad4:	b29a      	uxth	r2, r3
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006ada:	b662      	cpsie	i
}
 8006adc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	691a      	ldr	r2, [r3, #16]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae8:	b2d2      	uxtb	r2, r2
 8006aea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af0:	1c5a      	adds	r2, r3, #1
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006afa:	3b01      	subs	r3, #1
 8006afc:	b29a      	uxth	r2, r3
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	b29a      	uxth	r2, r3
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006b10:	e042      	b.n	8006b98 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b14:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006b16:	68f8      	ldr	r0, [r7, #12]
 8006b18:	f000 fb84 	bl	8007224 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d001      	beq.n	8006b26 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	e04c      	b.n	8006bc0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	691a      	ldr	r2, [r3, #16]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b30:	b2d2      	uxtb	r2, r2
 8006b32:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b38:	1c5a      	adds	r2, r3, #1
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b42:	3b01      	subs	r3, #1
 8006b44:	b29a      	uxth	r2, r3
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	3b01      	subs	r3, #1
 8006b52:	b29a      	uxth	r2, r3
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	695b      	ldr	r3, [r3, #20]
 8006b5e:	f003 0304 	and.w	r3, r3, #4
 8006b62:	2b04      	cmp	r3, #4
 8006b64:	d118      	bne.n	8006b98 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	691a      	ldr	r2, [r3, #16]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b70:	b2d2      	uxtb	r2, r2
 8006b72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b78:	1c5a      	adds	r2, r3, #1
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b82:	3b01      	subs	r3, #1
 8006b84:	b29a      	uxth	r2, r3
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	3b01      	subs	r3, #1
 8006b92:	b29a      	uxth	r2, r3
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	f47f ae94 	bne.w	80068ca <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2220      	movs	r2, #32
 8006ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	e000      	b.n	8006bc0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8006bbe:	2302      	movs	r3, #2
  }
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3728      	adds	r7, #40	; 0x28
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	00010004 	.word	0x00010004
 8006bcc:	20000094 	.word	0x20000094
 8006bd0:	14f8b589 	.word	0x14f8b589

08006bd4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b088      	sub	sp, #32
 8006bd8:	af02      	add	r7, sp, #8
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	4608      	mov	r0, r1
 8006bde:	4611      	mov	r1, r2
 8006be0:	461a      	mov	r2, r3
 8006be2:	4603      	mov	r3, r0
 8006be4:	817b      	strh	r3, [r7, #10]
 8006be6:	460b      	mov	r3, r1
 8006be8:	813b      	strh	r3, [r7, #8]
 8006bea:	4613      	mov	r3, r2
 8006bec:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bfc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c00:	9300      	str	r3, [sp, #0]
 8006c02:	6a3b      	ldr	r3, [r7, #32]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006c0a:	68f8      	ldr	r0, [r7, #12]
 8006c0c:	f000 f960 	bl	8006ed0 <I2C_WaitOnFlagUntilTimeout>
 8006c10:	4603      	mov	r3, r0
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d00d      	beq.n	8006c32 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c24:	d103      	bne.n	8006c2e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c2c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e05f      	b.n	8006cf2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006c32:	897b      	ldrh	r3, [r7, #10]
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	461a      	mov	r2, r3
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006c40:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c44:	6a3a      	ldr	r2, [r7, #32]
 8006c46:	492d      	ldr	r1, [pc, #180]	; (8006cfc <I2C_RequestMemoryWrite+0x128>)
 8006c48:	68f8      	ldr	r0, [r7, #12]
 8006c4a:	f000 f9bb 	bl	8006fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d001      	beq.n	8006c58 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	e04c      	b.n	8006cf2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c58:	2300      	movs	r3, #0
 8006c5a:	617b      	str	r3, [r7, #20]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	695b      	ldr	r3, [r3, #20]
 8006c62:	617b      	str	r3, [r7, #20]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	699b      	ldr	r3, [r3, #24]
 8006c6a:	617b      	str	r3, [r7, #20]
 8006c6c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c70:	6a39      	ldr	r1, [r7, #32]
 8006c72:	68f8      	ldr	r0, [r7, #12]
 8006c74:	f000 fa46 	bl	8007104 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00d      	beq.n	8006c9a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c82:	2b04      	cmp	r3, #4
 8006c84:	d107      	bne.n	8006c96 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c94:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	e02b      	b.n	8006cf2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c9a:	88fb      	ldrh	r3, [r7, #6]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d105      	bne.n	8006cac <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006ca0:	893b      	ldrh	r3, [r7, #8]
 8006ca2:	b2da      	uxtb	r2, r3
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	611a      	str	r2, [r3, #16]
 8006caa:	e021      	b.n	8006cf0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006cac:	893b      	ldrh	r3, [r7, #8]
 8006cae:	0a1b      	lsrs	r3, r3, #8
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	b2da      	uxtb	r2, r3
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cbc:	6a39      	ldr	r1, [r7, #32]
 8006cbe:	68f8      	ldr	r0, [r7, #12]
 8006cc0:	f000 fa20 	bl	8007104 <I2C_WaitOnTXEFlagUntilTimeout>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d00d      	beq.n	8006ce6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cce:	2b04      	cmp	r3, #4
 8006cd0:	d107      	bne.n	8006ce2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ce0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e005      	b.n	8006cf2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006ce6:	893b      	ldrh	r3, [r7, #8]
 8006ce8:	b2da      	uxtb	r2, r3
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3718      	adds	r7, #24
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	00010002 	.word	0x00010002

08006d00 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b088      	sub	sp, #32
 8006d04:	af02      	add	r7, sp, #8
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	4608      	mov	r0, r1
 8006d0a:	4611      	mov	r1, r2
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	4603      	mov	r3, r0
 8006d10:	817b      	strh	r3, [r7, #10]
 8006d12:	460b      	mov	r3, r1
 8006d14:	813b      	strh	r3, [r7, #8]
 8006d16:	4613      	mov	r3, r2
 8006d18:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006d28:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d38:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3c:	9300      	str	r3, [sp, #0]
 8006d3e:	6a3b      	ldr	r3, [r7, #32]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006d46:	68f8      	ldr	r0, [r7, #12]
 8006d48:	f000 f8c2 	bl	8006ed0 <I2C_WaitOnFlagUntilTimeout>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d00d      	beq.n	8006d6e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d60:	d103      	bne.n	8006d6a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d68:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006d6a:	2303      	movs	r3, #3
 8006d6c:	e0aa      	b.n	8006ec4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006d6e:	897b      	ldrh	r3, [r7, #10]
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	461a      	mov	r2, r3
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006d7c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d80:	6a3a      	ldr	r2, [r7, #32]
 8006d82:	4952      	ldr	r1, [pc, #328]	; (8006ecc <I2C_RequestMemoryRead+0x1cc>)
 8006d84:	68f8      	ldr	r0, [r7, #12]
 8006d86:	f000 f91d 	bl	8006fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d001      	beq.n	8006d94 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	e097      	b.n	8006ec4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d94:	2300      	movs	r3, #0
 8006d96:	617b      	str	r3, [r7, #20]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	695b      	ldr	r3, [r3, #20]
 8006d9e:	617b      	str	r3, [r7, #20]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	699b      	ldr	r3, [r3, #24]
 8006da6:	617b      	str	r3, [r7, #20]
 8006da8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dac:	6a39      	ldr	r1, [r7, #32]
 8006dae:	68f8      	ldr	r0, [r7, #12]
 8006db0:	f000 f9a8 	bl	8007104 <I2C_WaitOnTXEFlagUntilTimeout>
 8006db4:	4603      	mov	r3, r0
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d00d      	beq.n	8006dd6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dbe:	2b04      	cmp	r3, #4
 8006dc0:	d107      	bne.n	8006dd2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dd0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e076      	b.n	8006ec4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006dd6:	88fb      	ldrh	r3, [r7, #6]
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d105      	bne.n	8006de8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006ddc:	893b      	ldrh	r3, [r7, #8]
 8006dde:	b2da      	uxtb	r2, r3
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	611a      	str	r2, [r3, #16]
 8006de6:	e021      	b.n	8006e2c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006de8:	893b      	ldrh	r3, [r7, #8]
 8006dea:	0a1b      	lsrs	r3, r3, #8
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	b2da      	uxtb	r2, r3
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006df8:	6a39      	ldr	r1, [r7, #32]
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	f000 f982 	bl	8007104 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00d      	beq.n	8006e22 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e0a:	2b04      	cmp	r3, #4
 8006e0c:	d107      	bne.n	8006e1e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e1c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e050      	b.n	8006ec4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006e22:	893b      	ldrh	r3, [r7, #8]
 8006e24:	b2da      	uxtb	r2, r3
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e2e:	6a39      	ldr	r1, [r7, #32]
 8006e30:	68f8      	ldr	r0, [r7, #12]
 8006e32:	f000 f967 	bl	8007104 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e36:	4603      	mov	r3, r0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d00d      	beq.n	8006e58 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e40:	2b04      	cmp	r3, #4
 8006e42:	d107      	bne.n	8006e54 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e52:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	e035      	b.n	8006ec4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e66:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6a:	9300      	str	r3, [sp, #0]
 8006e6c:	6a3b      	ldr	r3, [r7, #32]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006e74:	68f8      	ldr	r0, [r7, #12]
 8006e76:	f000 f82b 	bl	8006ed0 <I2C_WaitOnFlagUntilTimeout>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d00d      	beq.n	8006e9c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e8e:	d103      	bne.n	8006e98 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e96:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006e98:	2303      	movs	r3, #3
 8006e9a:	e013      	b.n	8006ec4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006e9c:	897b      	ldrh	r3, [r7, #10]
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	f043 0301 	orr.w	r3, r3, #1
 8006ea4:	b2da      	uxtb	r2, r3
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eae:	6a3a      	ldr	r2, [r7, #32]
 8006eb0:	4906      	ldr	r1, [pc, #24]	; (8006ecc <I2C_RequestMemoryRead+0x1cc>)
 8006eb2:	68f8      	ldr	r0, [r7, #12]
 8006eb4:	f000 f886 	bl	8006fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d001      	beq.n	8006ec2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e000      	b.n	8006ec4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006ec2:	2300      	movs	r3, #0
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3718      	adds	r7, #24
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	00010002 	.word	0x00010002

08006ed0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	603b      	str	r3, [r7, #0]
 8006edc:	4613      	mov	r3, r2
 8006ede:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ee0:	e048      	b.n	8006f74 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ee8:	d044      	beq.n	8006f74 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006eea:	f7fe fe67 	bl	8005bbc <HAL_GetTick>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	69bb      	ldr	r3, [r7, #24]
 8006ef2:	1ad3      	subs	r3, r2, r3
 8006ef4:	683a      	ldr	r2, [r7, #0]
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d302      	bcc.n	8006f00 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d139      	bne.n	8006f74 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	0c1b      	lsrs	r3, r3, #16
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d10d      	bne.n	8006f26 <I2C_WaitOnFlagUntilTimeout+0x56>
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	695b      	ldr	r3, [r3, #20]
 8006f10:	43da      	mvns	r2, r3
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	4013      	ands	r3, r2
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	bf0c      	ite	eq
 8006f1c:	2301      	moveq	r3, #1
 8006f1e:	2300      	movne	r3, #0
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	461a      	mov	r2, r3
 8006f24:	e00c      	b.n	8006f40 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	699b      	ldr	r3, [r3, #24]
 8006f2c:	43da      	mvns	r2, r3
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	4013      	ands	r3, r2
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	bf0c      	ite	eq
 8006f38:	2301      	moveq	r3, #1
 8006f3a:	2300      	movne	r3, #0
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	461a      	mov	r2, r3
 8006f40:	79fb      	ldrb	r3, [r7, #7]
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d116      	bne.n	8006f74 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2220      	movs	r2, #32
 8006f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f60:	f043 0220 	orr.w	r2, r3, #32
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	e023      	b.n	8006fbc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	0c1b      	lsrs	r3, r3, #16
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d10d      	bne.n	8006f9a <I2C_WaitOnFlagUntilTimeout+0xca>
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	695b      	ldr	r3, [r3, #20]
 8006f84:	43da      	mvns	r2, r3
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	4013      	ands	r3, r2
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	bf0c      	ite	eq
 8006f90:	2301      	moveq	r3, #1
 8006f92:	2300      	movne	r3, #0
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	461a      	mov	r2, r3
 8006f98:	e00c      	b.n	8006fb4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	699b      	ldr	r3, [r3, #24]
 8006fa0:	43da      	mvns	r2, r3
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	4013      	ands	r3, r2
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	bf0c      	ite	eq
 8006fac:	2301      	moveq	r3, #1
 8006fae:	2300      	movne	r3, #0
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	79fb      	ldrb	r3, [r7, #7]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d093      	beq.n	8006ee2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006fba:	2300      	movs	r3, #0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3710      	adds	r7, #16
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	607a      	str	r2, [r7, #4]
 8006fd0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006fd2:	e071      	b.n	80070b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	695b      	ldr	r3, [r3, #20]
 8006fda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fe2:	d123      	bne.n	800702c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ff2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006ffc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2200      	movs	r2, #0
 8007002:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2220      	movs	r2, #32
 8007008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2200      	movs	r2, #0
 8007010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007018:	f043 0204 	orr.w	r2, r3, #4
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2200      	movs	r2, #0
 8007024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	e067      	b.n	80070fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007032:	d041      	beq.n	80070b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007034:	f7fe fdc2 	bl	8005bbc <HAL_GetTick>
 8007038:	4602      	mov	r2, r0
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	1ad3      	subs	r3, r2, r3
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	429a      	cmp	r2, r3
 8007042:	d302      	bcc.n	800704a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d136      	bne.n	80070b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	0c1b      	lsrs	r3, r3, #16
 800704e:	b2db      	uxtb	r3, r3
 8007050:	2b01      	cmp	r3, #1
 8007052:	d10c      	bne.n	800706e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	695b      	ldr	r3, [r3, #20]
 800705a:	43da      	mvns	r2, r3
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	4013      	ands	r3, r2
 8007060:	b29b      	uxth	r3, r3
 8007062:	2b00      	cmp	r3, #0
 8007064:	bf14      	ite	ne
 8007066:	2301      	movne	r3, #1
 8007068:	2300      	moveq	r3, #0
 800706a:	b2db      	uxtb	r3, r3
 800706c:	e00b      	b.n	8007086 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	699b      	ldr	r3, [r3, #24]
 8007074:	43da      	mvns	r2, r3
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	4013      	ands	r3, r2
 800707a:	b29b      	uxth	r3, r3
 800707c:	2b00      	cmp	r3, #0
 800707e:	bf14      	ite	ne
 8007080:	2301      	movne	r3, #1
 8007082:	2300      	moveq	r3, #0
 8007084:	b2db      	uxtb	r3, r3
 8007086:	2b00      	cmp	r3, #0
 8007088:	d016      	beq.n	80070b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2200      	movs	r2, #0
 800708e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2220      	movs	r2, #32
 8007094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2200      	movs	r2, #0
 800709c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a4:	f043 0220 	orr.w	r2, r3, #32
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2200      	movs	r2, #0
 80070b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	e021      	b.n	80070fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	0c1b      	lsrs	r3, r3, #16
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d10c      	bne.n	80070dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	695b      	ldr	r3, [r3, #20]
 80070c8:	43da      	mvns	r2, r3
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	4013      	ands	r3, r2
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	bf14      	ite	ne
 80070d4:	2301      	movne	r3, #1
 80070d6:	2300      	moveq	r3, #0
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	e00b      	b.n	80070f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	699b      	ldr	r3, [r3, #24]
 80070e2:	43da      	mvns	r2, r3
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	4013      	ands	r3, r2
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	bf14      	ite	ne
 80070ee:	2301      	movne	r3, #1
 80070f0:	2300      	moveq	r3, #0
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	f47f af6d 	bne.w	8006fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3710      	adds	r7, #16
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	60b9      	str	r1, [r7, #8]
 800710e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007110:	e034      	b.n	800717c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007112:	68f8      	ldr	r0, [r7, #12]
 8007114:	f000 f8e3 	bl	80072de <I2C_IsAcknowledgeFailed>
 8007118:	4603      	mov	r3, r0
 800711a:	2b00      	cmp	r3, #0
 800711c:	d001      	beq.n	8007122 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	e034      	b.n	800718c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007128:	d028      	beq.n	800717c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800712a:	f7fe fd47 	bl	8005bbc <HAL_GetTick>
 800712e:	4602      	mov	r2, r0
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	1ad3      	subs	r3, r2, r3
 8007134:	68ba      	ldr	r2, [r7, #8]
 8007136:	429a      	cmp	r2, r3
 8007138:	d302      	bcc.n	8007140 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d11d      	bne.n	800717c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	695b      	ldr	r3, [r3, #20]
 8007146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800714a:	2b80      	cmp	r3, #128	; 0x80
 800714c:	d016      	beq.n	800717c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2200      	movs	r2, #0
 8007152:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2220      	movs	r2, #32
 8007158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2200      	movs	r2, #0
 8007160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007168:	f043 0220 	orr.w	r2, r3, #32
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2200      	movs	r2, #0
 8007174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	e007      	b.n	800718c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	695b      	ldr	r3, [r3, #20]
 8007182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007186:	2b80      	cmp	r3, #128	; 0x80
 8007188:	d1c3      	bne.n	8007112 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800718a:	2300      	movs	r3, #0
}
 800718c:	4618      	mov	r0, r3
 800718e:	3710      	adds	r7, #16
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80071a0:	e034      	b.n	800720c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80071a2:	68f8      	ldr	r0, [r7, #12]
 80071a4:	f000 f89b 	bl	80072de <I2C_IsAcknowledgeFailed>
 80071a8:	4603      	mov	r3, r0
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d001      	beq.n	80071b2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	e034      	b.n	800721c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b8:	d028      	beq.n	800720c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071ba:	f7fe fcff 	bl	8005bbc <HAL_GetTick>
 80071be:	4602      	mov	r2, r0
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	1ad3      	subs	r3, r2, r3
 80071c4:	68ba      	ldr	r2, [r7, #8]
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d302      	bcc.n	80071d0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d11d      	bne.n	800720c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	695b      	ldr	r3, [r3, #20]
 80071d6:	f003 0304 	and.w	r3, r3, #4
 80071da:	2b04      	cmp	r3, #4
 80071dc:	d016      	beq.n	800720c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2200      	movs	r2, #0
 80071e2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2220      	movs	r2, #32
 80071e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f8:	f043 0220 	orr.w	r2, r3, #32
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2200      	movs	r2, #0
 8007204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	e007      	b.n	800721c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	695b      	ldr	r3, [r3, #20]
 8007212:	f003 0304 	and.w	r3, r3, #4
 8007216:	2b04      	cmp	r3, #4
 8007218:	d1c3      	bne.n	80071a2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800721a:	2300      	movs	r3, #0
}
 800721c:	4618      	mov	r0, r3
 800721e:	3710      	adds	r7, #16
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	60b9      	str	r1, [r7, #8]
 800722e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007230:	e049      	b.n	80072c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	695b      	ldr	r3, [r3, #20]
 8007238:	f003 0310 	and.w	r3, r3, #16
 800723c:	2b10      	cmp	r3, #16
 800723e:	d119      	bne.n	8007274 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f06f 0210 	mvn.w	r2, #16
 8007248:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2200      	movs	r2, #0
 800724e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2220      	movs	r2, #32
 8007254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2200      	movs	r2, #0
 800725c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2200      	movs	r2, #0
 800726c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007270:	2301      	movs	r3, #1
 8007272:	e030      	b.n	80072d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007274:	f7fe fca2 	bl	8005bbc <HAL_GetTick>
 8007278:	4602      	mov	r2, r0
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	1ad3      	subs	r3, r2, r3
 800727e:	68ba      	ldr	r2, [r7, #8]
 8007280:	429a      	cmp	r2, r3
 8007282:	d302      	bcc.n	800728a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d11d      	bne.n	80072c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	695b      	ldr	r3, [r3, #20]
 8007290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007294:	2b40      	cmp	r3, #64	; 0x40
 8007296:	d016      	beq.n	80072c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2200      	movs	r2, #0
 800729c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2220      	movs	r2, #32
 80072a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b2:	f043 0220 	orr.w	r2, r3, #32
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2200      	movs	r2, #0
 80072be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	e007      	b.n	80072d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	695b      	ldr	r3, [r3, #20]
 80072cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072d0:	2b40      	cmp	r3, #64	; 0x40
 80072d2:	d1ae      	bne.n	8007232 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3710      	adds	r7, #16
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}

080072de <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80072de:	b480      	push	{r7}
 80072e0:	b083      	sub	sp, #12
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	695b      	ldr	r3, [r3, #20]
 80072ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072f4:	d11b      	bne.n	800732e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80072fe:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2220      	movs	r2, #32
 800730a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731a:	f043 0204 	orr.w	r2, r3, #4
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800732a:	2301      	movs	r3, #1
 800732c:	e000      	b.n	8007330 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800732e:	2300      	movs	r3, #0
}
 8007330:	4618      	mov	r0, r3
 8007332:	370c      	adds	r7, #12
 8007334:	46bd      	mov	sp, r7
 8007336:	bc80      	pop	{r7}
 8007338:	4770      	bx	lr

0800733a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800733a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800733c:	b08b      	sub	sp, #44	; 0x2c
 800733e:	af06      	add	r7, sp, #24
 8007340:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d101      	bne.n	800734c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007348:	2301      	movs	r3, #1
 800734a:	e0f1      	b.n	8007530 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8007352:	b2db      	uxtb	r3, r3
 8007354:	2b00      	cmp	r3, #0
 8007356:	d106      	bne.n	8007366 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f7fe fb8f 	bl	8005a84 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2203      	movs	r2, #3
 800736a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4618      	mov	r0, r3
 8007374:	f002 fc36 	bl	8009be4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	603b      	str	r3, [r7, #0]
 800737e:	687e      	ldr	r6, [r7, #4]
 8007380:	466d      	mov	r5, sp
 8007382:	f106 0410 	add.w	r4, r6, #16
 8007386:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007388:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800738a:	6823      	ldr	r3, [r4, #0]
 800738c:	602b      	str	r3, [r5, #0]
 800738e:	1d33      	adds	r3, r6, #4
 8007390:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007392:	6838      	ldr	r0, [r7, #0]
 8007394:	f002 fc16 	bl	8009bc4 <USB_CoreInit>
 8007398:	4603      	mov	r3, r0
 800739a:	2b00      	cmp	r3, #0
 800739c:	d005      	beq.n	80073aa <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2202      	movs	r2, #2
 80073a2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	e0c2      	b.n	8007530 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	2100      	movs	r1, #0
 80073b0:	4618      	mov	r0, r3
 80073b2:	f002 fc31 	bl	8009c18 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073b6:	2300      	movs	r3, #0
 80073b8:	73fb      	strb	r3, [r7, #15]
 80073ba:	e040      	b.n	800743e <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80073bc:	7bfb      	ldrb	r3, [r7, #15]
 80073be:	6879      	ldr	r1, [r7, #4]
 80073c0:	1c5a      	adds	r2, r3, #1
 80073c2:	4613      	mov	r3, r2
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	4413      	add	r3, r2
 80073c8:	00db      	lsls	r3, r3, #3
 80073ca:	440b      	add	r3, r1
 80073cc:	3301      	adds	r3, #1
 80073ce:	2201      	movs	r2, #1
 80073d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80073d2:	7bfb      	ldrb	r3, [r7, #15]
 80073d4:	6879      	ldr	r1, [r7, #4]
 80073d6:	1c5a      	adds	r2, r3, #1
 80073d8:	4613      	mov	r3, r2
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	4413      	add	r3, r2
 80073de:	00db      	lsls	r3, r3, #3
 80073e0:	440b      	add	r3, r1
 80073e2:	7bfa      	ldrb	r2, [r7, #15]
 80073e4:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80073e6:	7bfb      	ldrb	r3, [r7, #15]
 80073e8:	6879      	ldr	r1, [r7, #4]
 80073ea:	1c5a      	adds	r2, r3, #1
 80073ec:	4613      	mov	r3, r2
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	4413      	add	r3, r2
 80073f2:	00db      	lsls	r3, r3, #3
 80073f4:	440b      	add	r3, r1
 80073f6:	3303      	adds	r3, #3
 80073f8:	2200      	movs	r2, #0
 80073fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80073fc:	7bfa      	ldrb	r2, [r7, #15]
 80073fe:	6879      	ldr	r1, [r7, #4]
 8007400:	4613      	mov	r3, r2
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	4413      	add	r3, r2
 8007406:	00db      	lsls	r3, r3, #3
 8007408:	440b      	add	r3, r1
 800740a:	3338      	adds	r3, #56	; 0x38
 800740c:	2200      	movs	r2, #0
 800740e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007410:	7bfa      	ldrb	r2, [r7, #15]
 8007412:	6879      	ldr	r1, [r7, #4]
 8007414:	4613      	mov	r3, r2
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	4413      	add	r3, r2
 800741a:	00db      	lsls	r3, r3, #3
 800741c:	440b      	add	r3, r1
 800741e:	333c      	adds	r3, #60	; 0x3c
 8007420:	2200      	movs	r2, #0
 8007422:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007424:	7bfa      	ldrb	r2, [r7, #15]
 8007426:	6879      	ldr	r1, [r7, #4]
 8007428:	4613      	mov	r3, r2
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	4413      	add	r3, r2
 800742e:	00db      	lsls	r3, r3, #3
 8007430:	440b      	add	r3, r1
 8007432:	3340      	adds	r3, #64	; 0x40
 8007434:	2200      	movs	r2, #0
 8007436:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007438:	7bfb      	ldrb	r3, [r7, #15]
 800743a:	3301      	adds	r3, #1
 800743c:	73fb      	strb	r3, [r7, #15]
 800743e:	7bfa      	ldrb	r2, [r7, #15]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	429a      	cmp	r2, r3
 8007446:	d3b9      	bcc.n	80073bc <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007448:	2300      	movs	r3, #0
 800744a:	73fb      	strb	r3, [r7, #15]
 800744c:	e044      	b.n	80074d8 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800744e:	7bfa      	ldrb	r2, [r7, #15]
 8007450:	6879      	ldr	r1, [r7, #4]
 8007452:	4613      	mov	r3, r2
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	4413      	add	r3, r2
 8007458:	00db      	lsls	r3, r3, #3
 800745a:	440b      	add	r3, r1
 800745c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8007460:	2200      	movs	r2, #0
 8007462:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007464:	7bfa      	ldrb	r2, [r7, #15]
 8007466:	6879      	ldr	r1, [r7, #4]
 8007468:	4613      	mov	r3, r2
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	4413      	add	r3, r2
 800746e:	00db      	lsls	r3, r3, #3
 8007470:	440b      	add	r3, r1
 8007472:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007476:	7bfa      	ldrb	r2, [r7, #15]
 8007478:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800747a:	7bfa      	ldrb	r2, [r7, #15]
 800747c:	6879      	ldr	r1, [r7, #4]
 800747e:	4613      	mov	r3, r2
 8007480:	009b      	lsls	r3, r3, #2
 8007482:	4413      	add	r3, r2
 8007484:	00db      	lsls	r3, r3, #3
 8007486:	440b      	add	r3, r1
 8007488:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800748c:	2200      	movs	r2, #0
 800748e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007490:	7bfa      	ldrb	r2, [r7, #15]
 8007492:	6879      	ldr	r1, [r7, #4]
 8007494:	4613      	mov	r3, r2
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	4413      	add	r3, r2
 800749a:	00db      	lsls	r3, r3, #3
 800749c:	440b      	add	r3, r1
 800749e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80074a2:	2200      	movs	r2, #0
 80074a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80074a6:	7bfa      	ldrb	r2, [r7, #15]
 80074a8:	6879      	ldr	r1, [r7, #4]
 80074aa:	4613      	mov	r3, r2
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	4413      	add	r3, r2
 80074b0:	00db      	lsls	r3, r3, #3
 80074b2:	440b      	add	r3, r1
 80074b4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80074b8:	2200      	movs	r2, #0
 80074ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80074bc:	7bfa      	ldrb	r2, [r7, #15]
 80074be:	6879      	ldr	r1, [r7, #4]
 80074c0:	4613      	mov	r3, r2
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	4413      	add	r3, r2
 80074c6:	00db      	lsls	r3, r3, #3
 80074c8:	440b      	add	r3, r1
 80074ca:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80074ce:	2200      	movs	r2, #0
 80074d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80074d2:	7bfb      	ldrb	r3, [r7, #15]
 80074d4:	3301      	adds	r3, #1
 80074d6:	73fb      	strb	r3, [r7, #15]
 80074d8:	7bfa      	ldrb	r2, [r7, #15]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	429a      	cmp	r2, r3
 80074e0:	d3b5      	bcc.n	800744e <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	603b      	str	r3, [r7, #0]
 80074e8:	687e      	ldr	r6, [r7, #4]
 80074ea:	466d      	mov	r5, sp
 80074ec:	f106 0410 	add.w	r4, r6, #16
 80074f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80074f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80074f4:	6823      	ldr	r3, [r4, #0]
 80074f6:	602b      	str	r3, [r5, #0]
 80074f8:	1d33      	adds	r3, r6, #4
 80074fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80074fc:	6838      	ldr	r0, [r7, #0]
 80074fe:	f002 fb97 	bl	8009c30 <USB_DevInit>
 8007502:	4603      	mov	r3, r0
 8007504:	2b00      	cmp	r3, #0
 8007506:	d005      	beq.n	8007514 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2202      	movs	r2, #2
 800750c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8007510:	2301      	movs	r3, #1
 8007512:	e00d      	b.n	8007530 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2201      	movs	r2, #1
 8007520:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4618      	mov	r0, r3
 800752a:	f002 fba1 	bl	8009c70 <USB_DevDisconnect>

  return HAL_OK;
 800752e:	2300      	movs	r3, #0
}
 8007530:	4618      	mov	r0, r3
 8007532:	3714      	adds	r7, #20
 8007534:	46bd      	mov	sp, r7
 8007536:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007538 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b086      	sub	sp, #24
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d101      	bne.n	800754a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	e272      	b.n	8007a30 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f003 0301 	and.w	r3, r3, #1
 8007552:	2b00      	cmp	r3, #0
 8007554:	f000 8087 	beq.w	8007666 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007558:	4b92      	ldr	r3, [pc, #584]	; (80077a4 <HAL_RCC_OscConfig+0x26c>)
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	f003 030c 	and.w	r3, r3, #12
 8007560:	2b04      	cmp	r3, #4
 8007562:	d00c      	beq.n	800757e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007564:	4b8f      	ldr	r3, [pc, #572]	; (80077a4 <HAL_RCC_OscConfig+0x26c>)
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	f003 030c 	and.w	r3, r3, #12
 800756c:	2b08      	cmp	r3, #8
 800756e:	d112      	bne.n	8007596 <HAL_RCC_OscConfig+0x5e>
 8007570:	4b8c      	ldr	r3, [pc, #560]	; (80077a4 <HAL_RCC_OscConfig+0x26c>)
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800757c:	d10b      	bne.n	8007596 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800757e:	4b89      	ldr	r3, [pc, #548]	; (80077a4 <HAL_RCC_OscConfig+0x26c>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007586:	2b00      	cmp	r3, #0
 8007588:	d06c      	beq.n	8007664 <HAL_RCC_OscConfig+0x12c>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d168      	bne.n	8007664 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	e24c      	b.n	8007a30 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800759e:	d106      	bne.n	80075ae <HAL_RCC_OscConfig+0x76>
 80075a0:	4b80      	ldr	r3, [pc, #512]	; (80077a4 <HAL_RCC_OscConfig+0x26c>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a7f      	ldr	r2, [pc, #508]	; (80077a4 <HAL_RCC_OscConfig+0x26c>)
 80075a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075aa:	6013      	str	r3, [r2, #0]
 80075ac:	e02e      	b.n	800760c <HAL_RCC_OscConfig+0xd4>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d10c      	bne.n	80075d0 <HAL_RCC_OscConfig+0x98>
 80075b6:	4b7b      	ldr	r3, [pc, #492]	; (80077a4 <HAL_RCC_OscConfig+0x26c>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a7a      	ldr	r2, [pc, #488]	; (80077a4 <HAL_RCC_OscConfig+0x26c>)
 80075bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075c0:	6013      	str	r3, [r2, #0]
 80075c2:	4b78      	ldr	r3, [pc, #480]	; (80077a4 <HAL_RCC_OscConfig+0x26c>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a77      	ldr	r2, [pc, #476]	; (80077a4 <HAL_RCC_OscConfig+0x26c>)
 80075c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80075cc:	6013      	str	r3, [r2, #0]
 80075ce:	e01d      	b.n	800760c <HAL_RCC_OscConfig+0xd4>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80075d8:	d10c      	bne.n	80075f4 <HAL_RCC_OscConfig+0xbc>
 80075da:	4b72      	ldr	r3, [pc, #456]	; (80077a4 <HAL_RCC_OscConfig+0x26c>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a71      	ldr	r2, [pc, #452]	; (80077a4 <HAL_RCC_OscConfig+0x26c>)
 80075e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80075e4:	6013      	str	r3, [r2, #0]
 80075e6:	4b6f      	ldr	r3, [pc, #444]	; (80077a4 <HAL_RCC_OscConfig+0x26c>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a6e      	ldr	r2, [pc, #440]	; (80077a4 <HAL_RCC_OscConfig+0x26c>)
 80075ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075f0:	6013      	str	r3, [r2, #0]
 80075f2:	e00b      	b.n	800760c <HAL_RCC_OscConfig+0xd4>
 80075f4:	4b6b      	ldr	r3, [pc, #428]	; (80077a4 <HAL_RCC_OscConfig+0x26c>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a6a      	ldr	r2, [pc, #424]	; (80077a4 <HAL_RCC_OscConfig+0x26c>)
 80075fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075fe:	6013      	str	r3, [r2, #0]
 8007600:	4b68      	ldr	r3, [pc, #416]	; (80077a4 <HAL_RCC_OscConfig+0x26c>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a67      	ldr	r2, [pc, #412]	; (80077a4 <HAL_RCC_OscConfig+0x26c>)
 8007606:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800760a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d013      	beq.n	800763c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007614:	f7fe fad2 	bl	8005bbc <HAL_GetTick>
 8007618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800761a:	e008      	b.n	800762e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800761c:	f7fe face 	bl	8005bbc <HAL_GetTick>
 8007620:	4602      	mov	r2, r0
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	1ad3      	subs	r3, r2, r3
 8007626:	2b64      	cmp	r3, #100	; 0x64
 8007628:	d901      	bls.n	800762e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800762a:	2303      	movs	r3, #3
 800762c:	e200      	b.n	8007a30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800762e:	4b5d      	ldr	r3, [pc, #372]	; (80077a4 <HAL_RCC_OscConfig+0x26c>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007636:	2b00      	cmp	r3, #0
 8007638:	d0f0      	beq.n	800761c <HAL_RCC_OscConfig+0xe4>
 800763a:	e014      	b.n	8007666 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800763c:	f7fe fabe 	bl	8005bbc <HAL_GetTick>
 8007640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007642:	e008      	b.n	8007656 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007644:	f7fe faba 	bl	8005bbc <HAL_GetTick>
 8007648:	4602      	mov	r2, r0
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	1ad3      	subs	r3, r2, r3
 800764e:	2b64      	cmp	r3, #100	; 0x64
 8007650:	d901      	bls.n	8007656 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007652:	2303      	movs	r3, #3
 8007654:	e1ec      	b.n	8007a30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007656:	4b53      	ldr	r3, [pc, #332]	; (80077a4 <HAL_RCC_OscConfig+0x26c>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800765e:	2b00      	cmp	r3, #0
 8007660:	d1f0      	bne.n	8007644 <HAL_RCC_OscConfig+0x10c>
 8007662:	e000      	b.n	8007666 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007664:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f003 0302 	and.w	r3, r3, #2
 800766e:	2b00      	cmp	r3, #0
 8007670:	d063      	beq.n	800773a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007672:	4b4c      	ldr	r3, [pc, #304]	; (80077a4 <HAL_RCC_OscConfig+0x26c>)
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	f003 030c 	and.w	r3, r3, #12
 800767a:	2b00      	cmp	r3, #0
 800767c:	d00b      	beq.n	8007696 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800767e:	4b49      	ldr	r3, [pc, #292]	; (80077a4 <HAL_RCC_OscConfig+0x26c>)
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	f003 030c 	and.w	r3, r3, #12
 8007686:	2b08      	cmp	r3, #8
 8007688:	d11c      	bne.n	80076c4 <HAL_RCC_OscConfig+0x18c>
 800768a:	4b46      	ldr	r3, [pc, #280]	; (80077a4 <HAL_RCC_OscConfig+0x26c>)
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007692:	2b00      	cmp	r3, #0
 8007694:	d116      	bne.n	80076c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007696:	4b43      	ldr	r3, [pc, #268]	; (80077a4 <HAL_RCC_OscConfig+0x26c>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f003 0302 	and.w	r3, r3, #2
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d005      	beq.n	80076ae <HAL_RCC_OscConfig+0x176>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	691b      	ldr	r3, [r3, #16]
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d001      	beq.n	80076ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	e1c0      	b.n	8007a30 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076ae:	4b3d      	ldr	r3, [pc, #244]	; (80077a4 <HAL_RCC_OscConfig+0x26c>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	695b      	ldr	r3, [r3, #20]
 80076ba:	00db      	lsls	r3, r3, #3
 80076bc:	4939      	ldr	r1, [pc, #228]	; (80077a4 <HAL_RCC_OscConfig+0x26c>)
 80076be:	4313      	orrs	r3, r2
 80076c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076c2:	e03a      	b.n	800773a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	691b      	ldr	r3, [r3, #16]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d020      	beq.n	800770e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80076cc:	4b36      	ldr	r3, [pc, #216]	; (80077a8 <HAL_RCC_OscConfig+0x270>)
 80076ce:	2201      	movs	r2, #1
 80076d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076d2:	f7fe fa73 	bl	8005bbc <HAL_GetTick>
 80076d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076d8:	e008      	b.n	80076ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80076da:	f7fe fa6f 	bl	8005bbc <HAL_GetTick>
 80076de:	4602      	mov	r2, r0
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	1ad3      	subs	r3, r2, r3
 80076e4:	2b02      	cmp	r3, #2
 80076e6:	d901      	bls.n	80076ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80076e8:	2303      	movs	r3, #3
 80076ea:	e1a1      	b.n	8007a30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076ec:	4b2d      	ldr	r3, [pc, #180]	; (80077a4 <HAL_RCC_OscConfig+0x26c>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f003 0302 	and.w	r3, r3, #2
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d0f0      	beq.n	80076da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076f8:	4b2a      	ldr	r3, [pc, #168]	; (80077a4 <HAL_RCC_OscConfig+0x26c>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	695b      	ldr	r3, [r3, #20]
 8007704:	00db      	lsls	r3, r3, #3
 8007706:	4927      	ldr	r1, [pc, #156]	; (80077a4 <HAL_RCC_OscConfig+0x26c>)
 8007708:	4313      	orrs	r3, r2
 800770a:	600b      	str	r3, [r1, #0]
 800770c:	e015      	b.n	800773a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800770e:	4b26      	ldr	r3, [pc, #152]	; (80077a8 <HAL_RCC_OscConfig+0x270>)
 8007710:	2200      	movs	r2, #0
 8007712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007714:	f7fe fa52 	bl	8005bbc <HAL_GetTick>
 8007718:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800771a:	e008      	b.n	800772e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800771c:	f7fe fa4e 	bl	8005bbc <HAL_GetTick>
 8007720:	4602      	mov	r2, r0
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	1ad3      	subs	r3, r2, r3
 8007726:	2b02      	cmp	r3, #2
 8007728:	d901      	bls.n	800772e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800772a:	2303      	movs	r3, #3
 800772c:	e180      	b.n	8007a30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800772e:	4b1d      	ldr	r3, [pc, #116]	; (80077a4 <HAL_RCC_OscConfig+0x26c>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f003 0302 	and.w	r3, r3, #2
 8007736:	2b00      	cmp	r3, #0
 8007738:	d1f0      	bne.n	800771c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f003 0308 	and.w	r3, r3, #8
 8007742:	2b00      	cmp	r3, #0
 8007744:	d03a      	beq.n	80077bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	699b      	ldr	r3, [r3, #24]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d019      	beq.n	8007782 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800774e:	4b17      	ldr	r3, [pc, #92]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 8007750:	2201      	movs	r2, #1
 8007752:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007754:	f7fe fa32 	bl	8005bbc <HAL_GetTick>
 8007758:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800775a:	e008      	b.n	800776e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800775c:	f7fe fa2e 	bl	8005bbc <HAL_GetTick>
 8007760:	4602      	mov	r2, r0
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	1ad3      	subs	r3, r2, r3
 8007766:	2b02      	cmp	r3, #2
 8007768:	d901      	bls.n	800776e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800776a:	2303      	movs	r3, #3
 800776c:	e160      	b.n	8007a30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800776e:	4b0d      	ldr	r3, [pc, #52]	; (80077a4 <HAL_RCC_OscConfig+0x26c>)
 8007770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007772:	f003 0302 	and.w	r3, r3, #2
 8007776:	2b00      	cmp	r3, #0
 8007778:	d0f0      	beq.n	800775c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800777a:	2001      	movs	r0, #1
 800777c:	f000 face 	bl	8007d1c <RCC_Delay>
 8007780:	e01c      	b.n	80077bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007782:	4b0a      	ldr	r3, [pc, #40]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 8007784:	2200      	movs	r2, #0
 8007786:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007788:	f7fe fa18 	bl	8005bbc <HAL_GetTick>
 800778c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800778e:	e00f      	b.n	80077b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007790:	f7fe fa14 	bl	8005bbc <HAL_GetTick>
 8007794:	4602      	mov	r2, r0
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	1ad3      	subs	r3, r2, r3
 800779a:	2b02      	cmp	r3, #2
 800779c:	d908      	bls.n	80077b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800779e:	2303      	movs	r3, #3
 80077a0:	e146      	b.n	8007a30 <HAL_RCC_OscConfig+0x4f8>
 80077a2:	bf00      	nop
 80077a4:	40021000 	.word	0x40021000
 80077a8:	42420000 	.word	0x42420000
 80077ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077b0:	4b92      	ldr	r3, [pc, #584]	; (80079fc <HAL_RCC_OscConfig+0x4c4>)
 80077b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b4:	f003 0302 	and.w	r3, r3, #2
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d1e9      	bne.n	8007790 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f003 0304 	and.w	r3, r3, #4
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	f000 80a6 	beq.w	8007916 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80077ca:	2300      	movs	r3, #0
 80077cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80077ce:	4b8b      	ldr	r3, [pc, #556]	; (80079fc <HAL_RCC_OscConfig+0x4c4>)
 80077d0:	69db      	ldr	r3, [r3, #28]
 80077d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d10d      	bne.n	80077f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80077da:	4b88      	ldr	r3, [pc, #544]	; (80079fc <HAL_RCC_OscConfig+0x4c4>)
 80077dc:	69db      	ldr	r3, [r3, #28]
 80077de:	4a87      	ldr	r2, [pc, #540]	; (80079fc <HAL_RCC_OscConfig+0x4c4>)
 80077e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077e4:	61d3      	str	r3, [r2, #28]
 80077e6:	4b85      	ldr	r3, [pc, #532]	; (80079fc <HAL_RCC_OscConfig+0x4c4>)
 80077e8:	69db      	ldr	r3, [r3, #28]
 80077ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077ee:	60bb      	str	r3, [r7, #8]
 80077f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80077f2:	2301      	movs	r3, #1
 80077f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077f6:	4b82      	ldr	r3, [pc, #520]	; (8007a00 <HAL_RCC_OscConfig+0x4c8>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d118      	bne.n	8007834 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007802:	4b7f      	ldr	r3, [pc, #508]	; (8007a00 <HAL_RCC_OscConfig+0x4c8>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a7e      	ldr	r2, [pc, #504]	; (8007a00 <HAL_RCC_OscConfig+0x4c8>)
 8007808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800780c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800780e:	f7fe f9d5 	bl	8005bbc <HAL_GetTick>
 8007812:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007814:	e008      	b.n	8007828 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007816:	f7fe f9d1 	bl	8005bbc <HAL_GetTick>
 800781a:	4602      	mov	r2, r0
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	1ad3      	subs	r3, r2, r3
 8007820:	2b64      	cmp	r3, #100	; 0x64
 8007822:	d901      	bls.n	8007828 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007824:	2303      	movs	r3, #3
 8007826:	e103      	b.n	8007a30 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007828:	4b75      	ldr	r3, [pc, #468]	; (8007a00 <HAL_RCC_OscConfig+0x4c8>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007830:	2b00      	cmp	r3, #0
 8007832:	d0f0      	beq.n	8007816 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	2b01      	cmp	r3, #1
 800783a:	d106      	bne.n	800784a <HAL_RCC_OscConfig+0x312>
 800783c:	4b6f      	ldr	r3, [pc, #444]	; (80079fc <HAL_RCC_OscConfig+0x4c4>)
 800783e:	6a1b      	ldr	r3, [r3, #32]
 8007840:	4a6e      	ldr	r2, [pc, #440]	; (80079fc <HAL_RCC_OscConfig+0x4c4>)
 8007842:	f043 0301 	orr.w	r3, r3, #1
 8007846:	6213      	str	r3, [r2, #32]
 8007848:	e02d      	b.n	80078a6 <HAL_RCC_OscConfig+0x36e>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d10c      	bne.n	800786c <HAL_RCC_OscConfig+0x334>
 8007852:	4b6a      	ldr	r3, [pc, #424]	; (80079fc <HAL_RCC_OscConfig+0x4c4>)
 8007854:	6a1b      	ldr	r3, [r3, #32]
 8007856:	4a69      	ldr	r2, [pc, #420]	; (80079fc <HAL_RCC_OscConfig+0x4c4>)
 8007858:	f023 0301 	bic.w	r3, r3, #1
 800785c:	6213      	str	r3, [r2, #32]
 800785e:	4b67      	ldr	r3, [pc, #412]	; (80079fc <HAL_RCC_OscConfig+0x4c4>)
 8007860:	6a1b      	ldr	r3, [r3, #32]
 8007862:	4a66      	ldr	r2, [pc, #408]	; (80079fc <HAL_RCC_OscConfig+0x4c4>)
 8007864:	f023 0304 	bic.w	r3, r3, #4
 8007868:	6213      	str	r3, [r2, #32]
 800786a:	e01c      	b.n	80078a6 <HAL_RCC_OscConfig+0x36e>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	2b05      	cmp	r3, #5
 8007872:	d10c      	bne.n	800788e <HAL_RCC_OscConfig+0x356>
 8007874:	4b61      	ldr	r3, [pc, #388]	; (80079fc <HAL_RCC_OscConfig+0x4c4>)
 8007876:	6a1b      	ldr	r3, [r3, #32]
 8007878:	4a60      	ldr	r2, [pc, #384]	; (80079fc <HAL_RCC_OscConfig+0x4c4>)
 800787a:	f043 0304 	orr.w	r3, r3, #4
 800787e:	6213      	str	r3, [r2, #32]
 8007880:	4b5e      	ldr	r3, [pc, #376]	; (80079fc <HAL_RCC_OscConfig+0x4c4>)
 8007882:	6a1b      	ldr	r3, [r3, #32]
 8007884:	4a5d      	ldr	r2, [pc, #372]	; (80079fc <HAL_RCC_OscConfig+0x4c4>)
 8007886:	f043 0301 	orr.w	r3, r3, #1
 800788a:	6213      	str	r3, [r2, #32]
 800788c:	e00b      	b.n	80078a6 <HAL_RCC_OscConfig+0x36e>
 800788e:	4b5b      	ldr	r3, [pc, #364]	; (80079fc <HAL_RCC_OscConfig+0x4c4>)
 8007890:	6a1b      	ldr	r3, [r3, #32]
 8007892:	4a5a      	ldr	r2, [pc, #360]	; (80079fc <HAL_RCC_OscConfig+0x4c4>)
 8007894:	f023 0301 	bic.w	r3, r3, #1
 8007898:	6213      	str	r3, [r2, #32]
 800789a:	4b58      	ldr	r3, [pc, #352]	; (80079fc <HAL_RCC_OscConfig+0x4c4>)
 800789c:	6a1b      	ldr	r3, [r3, #32]
 800789e:	4a57      	ldr	r2, [pc, #348]	; (80079fc <HAL_RCC_OscConfig+0x4c4>)
 80078a0:	f023 0304 	bic.w	r3, r3, #4
 80078a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d015      	beq.n	80078da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80078ae:	f7fe f985 	bl	8005bbc <HAL_GetTick>
 80078b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078b4:	e00a      	b.n	80078cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078b6:	f7fe f981 	bl	8005bbc <HAL_GetTick>
 80078ba:	4602      	mov	r2, r0
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	1ad3      	subs	r3, r2, r3
 80078c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d901      	bls.n	80078cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80078c8:	2303      	movs	r3, #3
 80078ca:	e0b1      	b.n	8007a30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078cc:	4b4b      	ldr	r3, [pc, #300]	; (80079fc <HAL_RCC_OscConfig+0x4c4>)
 80078ce:	6a1b      	ldr	r3, [r3, #32]
 80078d0:	f003 0302 	and.w	r3, r3, #2
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d0ee      	beq.n	80078b6 <HAL_RCC_OscConfig+0x37e>
 80078d8:	e014      	b.n	8007904 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80078da:	f7fe f96f 	bl	8005bbc <HAL_GetTick>
 80078de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078e0:	e00a      	b.n	80078f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078e2:	f7fe f96b 	bl	8005bbc <HAL_GetTick>
 80078e6:	4602      	mov	r2, r0
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	1ad3      	subs	r3, r2, r3
 80078ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d901      	bls.n	80078f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80078f4:	2303      	movs	r3, #3
 80078f6:	e09b      	b.n	8007a30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078f8:	4b40      	ldr	r3, [pc, #256]	; (80079fc <HAL_RCC_OscConfig+0x4c4>)
 80078fa:	6a1b      	ldr	r3, [r3, #32]
 80078fc:	f003 0302 	and.w	r3, r3, #2
 8007900:	2b00      	cmp	r3, #0
 8007902:	d1ee      	bne.n	80078e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007904:	7dfb      	ldrb	r3, [r7, #23]
 8007906:	2b01      	cmp	r3, #1
 8007908:	d105      	bne.n	8007916 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800790a:	4b3c      	ldr	r3, [pc, #240]	; (80079fc <HAL_RCC_OscConfig+0x4c4>)
 800790c:	69db      	ldr	r3, [r3, #28]
 800790e:	4a3b      	ldr	r2, [pc, #236]	; (80079fc <HAL_RCC_OscConfig+0x4c4>)
 8007910:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007914:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	69db      	ldr	r3, [r3, #28]
 800791a:	2b00      	cmp	r3, #0
 800791c:	f000 8087 	beq.w	8007a2e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007920:	4b36      	ldr	r3, [pc, #216]	; (80079fc <HAL_RCC_OscConfig+0x4c4>)
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	f003 030c 	and.w	r3, r3, #12
 8007928:	2b08      	cmp	r3, #8
 800792a:	d061      	beq.n	80079f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	69db      	ldr	r3, [r3, #28]
 8007930:	2b02      	cmp	r3, #2
 8007932:	d146      	bne.n	80079c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007934:	4b33      	ldr	r3, [pc, #204]	; (8007a04 <HAL_RCC_OscConfig+0x4cc>)
 8007936:	2200      	movs	r2, #0
 8007938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800793a:	f7fe f93f 	bl	8005bbc <HAL_GetTick>
 800793e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007940:	e008      	b.n	8007954 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007942:	f7fe f93b 	bl	8005bbc <HAL_GetTick>
 8007946:	4602      	mov	r2, r0
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	1ad3      	subs	r3, r2, r3
 800794c:	2b02      	cmp	r3, #2
 800794e:	d901      	bls.n	8007954 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007950:	2303      	movs	r3, #3
 8007952:	e06d      	b.n	8007a30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007954:	4b29      	ldr	r3, [pc, #164]	; (80079fc <HAL_RCC_OscConfig+0x4c4>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800795c:	2b00      	cmp	r3, #0
 800795e:	d1f0      	bne.n	8007942 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6a1b      	ldr	r3, [r3, #32]
 8007964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007968:	d108      	bne.n	800797c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800796a:	4b24      	ldr	r3, [pc, #144]	; (80079fc <HAL_RCC_OscConfig+0x4c4>)
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	4921      	ldr	r1, [pc, #132]	; (80079fc <HAL_RCC_OscConfig+0x4c4>)
 8007978:	4313      	orrs	r3, r2
 800797a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800797c:	4b1f      	ldr	r3, [pc, #124]	; (80079fc <HAL_RCC_OscConfig+0x4c4>)
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6a19      	ldr	r1, [r3, #32]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800798c:	430b      	orrs	r3, r1
 800798e:	491b      	ldr	r1, [pc, #108]	; (80079fc <HAL_RCC_OscConfig+0x4c4>)
 8007990:	4313      	orrs	r3, r2
 8007992:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007994:	4b1b      	ldr	r3, [pc, #108]	; (8007a04 <HAL_RCC_OscConfig+0x4cc>)
 8007996:	2201      	movs	r2, #1
 8007998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800799a:	f7fe f90f 	bl	8005bbc <HAL_GetTick>
 800799e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80079a0:	e008      	b.n	80079b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079a2:	f7fe f90b 	bl	8005bbc <HAL_GetTick>
 80079a6:	4602      	mov	r2, r0
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	1ad3      	subs	r3, r2, r3
 80079ac:	2b02      	cmp	r3, #2
 80079ae:	d901      	bls.n	80079b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80079b0:	2303      	movs	r3, #3
 80079b2:	e03d      	b.n	8007a30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80079b4:	4b11      	ldr	r3, [pc, #68]	; (80079fc <HAL_RCC_OscConfig+0x4c4>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d0f0      	beq.n	80079a2 <HAL_RCC_OscConfig+0x46a>
 80079c0:	e035      	b.n	8007a2e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079c2:	4b10      	ldr	r3, [pc, #64]	; (8007a04 <HAL_RCC_OscConfig+0x4cc>)
 80079c4:	2200      	movs	r2, #0
 80079c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079c8:	f7fe f8f8 	bl	8005bbc <HAL_GetTick>
 80079cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80079ce:	e008      	b.n	80079e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079d0:	f7fe f8f4 	bl	8005bbc <HAL_GetTick>
 80079d4:	4602      	mov	r2, r0
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	1ad3      	subs	r3, r2, r3
 80079da:	2b02      	cmp	r3, #2
 80079dc:	d901      	bls.n	80079e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80079de:	2303      	movs	r3, #3
 80079e0:	e026      	b.n	8007a30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80079e2:	4b06      	ldr	r3, [pc, #24]	; (80079fc <HAL_RCC_OscConfig+0x4c4>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d1f0      	bne.n	80079d0 <HAL_RCC_OscConfig+0x498>
 80079ee:	e01e      	b.n	8007a2e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	69db      	ldr	r3, [r3, #28]
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d107      	bne.n	8007a08 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80079f8:	2301      	movs	r3, #1
 80079fa:	e019      	b.n	8007a30 <HAL_RCC_OscConfig+0x4f8>
 80079fc:	40021000 	.word	0x40021000
 8007a00:	40007000 	.word	0x40007000
 8007a04:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007a08:	4b0b      	ldr	r3, [pc, #44]	; (8007a38 <HAL_RCC_OscConfig+0x500>)
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6a1b      	ldr	r3, [r3, #32]
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d106      	bne.n	8007a2a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d001      	beq.n	8007a2e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e000      	b.n	8007a30 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007a2e:	2300      	movs	r3, #0
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3718      	adds	r7, #24
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}
 8007a38:	40021000 	.word	0x40021000

08007a3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d101      	bne.n	8007a50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	e0d0      	b.n	8007bf2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007a50:	4b6a      	ldr	r3, [pc, #424]	; (8007bfc <HAL_RCC_ClockConfig+0x1c0>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f003 0307 	and.w	r3, r3, #7
 8007a58:	683a      	ldr	r2, [r7, #0]
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d910      	bls.n	8007a80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a5e:	4b67      	ldr	r3, [pc, #412]	; (8007bfc <HAL_RCC_ClockConfig+0x1c0>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f023 0207 	bic.w	r2, r3, #7
 8007a66:	4965      	ldr	r1, [pc, #404]	; (8007bfc <HAL_RCC_ClockConfig+0x1c0>)
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a6e:	4b63      	ldr	r3, [pc, #396]	; (8007bfc <HAL_RCC_ClockConfig+0x1c0>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f003 0307 	and.w	r3, r3, #7
 8007a76:	683a      	ldr	r2, [r7, #0]
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d001      	beq.n	8007a80 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	e0b8      	b.n	8007bf2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f003 0302 	and.w	r3, r3, #2
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d020      	beq.n	8007ace <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f003 0304 	and.w	r3, r3, #4
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d005      	beq.n	8007aa4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007a98:	4b59      	ldr	r3, [pc, #356]	; (8007c00 <HAL_RCC_ClockConfig+0x1c4>)
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	4a58      	ldr	r2, [pc, #352]	; (8007c00 <HAL_RCC_ClockConfig+0x1c4>)
 8007a9e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007aa2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f003 0308 	and.w	r3, r3, #8
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d005      	beq.n	8007abc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007ab0:	4b53      	ldr	r3, [pc, #332]	; (8007c00 <HAL_RCC_ClockConfig+0x1c4>)
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	4a52      	ldr	r2, [pc, #328]	; (8007c00 <HAL_RCC_ClockConfig+0x1c4>)
 8007ab6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007aba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007abc:	4b50      	ldr	r3, [pc, #320]	; (8007c00 <HAL_RCC_ClockConfig+0x1c4>)
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	494d      	ldr	r1, [pc, #308]	; (8007c00 <HAL_RCC_ClockConfig+0x1c4>)
 8007aca:	4313      	orrs	r3, r2
 8007acc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f003 0301 	and.w	r3, r3, #1
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d040      	beq.n	8007b5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d107      	bne.n	8007af2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ae2:	4b47      	ldr	r3, [pc, #284]	; (8007c00 <HAL_RCC_ClockConfig+0x1c4>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d115      	bne.n	8007b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
 8007af0:	e07f      	b.n	8007bf2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	2b02      	cmp	r3, #2
 8007af8:	d107      	bne.n	8007b0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007afa:	4b41      	ldr	r3, [pc, #260]	; (8007c00 <HAL_RCC_ClockConfig+0x1c4>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d109      	bne.n	8007b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	e073      	b.n	8007bf2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b0a:	4b3d      	ldr	r3, [pc, #244]	; (8007c00 <HAL_RCC_ClockConfig+0x1c4>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f003 0302 	and.w	r3, r3, #2
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d101      	bne.n	8007b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	e06b      	b.n	8007bf2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007b1a:	4b39      	ldr	r3, [pc, #228]	; (8007c00 <HAL_RCC_ClockConfig+0x1c4>)
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	f023 0203 	bic.w	r2, r3, #3
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	4936      	ldr	r1, [pc, #216]	; (8007c00 <HAL_RCC_ClockConfig+0x1c4>)
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007b2c:	f7fe f846 	bl	8005bbc <HAL_GetTick>
 8007b30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b32:	e00a      	b.n	8007b4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b34:	f7fe f842 	bl	8005bbc <HAL_GetTick>
 8007b38:	4602      	mov	r2, r0
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	1ad3      	subs	r3, r2, r3
 8007b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d901      	bls.n	8007b4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007b46:	2303      	movs	r3, #3
 8007b48:	e053      	b.n	8007bf2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b4a:	4b2d      	ldr	r3, [pc, #180]	; (8007c00 <HAL_RCC_ClockConfig+0x1c4>)
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	f003 020c 	and.w	r2, r3, #12
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d1eb      	bne.n	8007b34 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007b5c:	4b27      	ldr	r3, [pc, #156]	; (8007bfc <HAL_RCC_ClockConfig+0x1c0>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f003 0307 	and.w	r3, r3, #7
 8007b64:	683a      	ldr	r2, [r7, #0]
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d210      	bcs.n	8007b8c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b6a:	4b24      	ldr	r3, [pc, #144]	; (8007bfc <HAL_RCC_ClockConfig+0x1c0>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f023 0207 	bic.w	r2, r3, #7
 8007b72:	4922      	ldr	r1, [pc, #136]	; (8007bfc <HAL_RCC_ClockConfig+0x1c0>)
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b7a:	4b20      	ldr	r3, [pc, #128]	; (8007bfc <HAL_RCC_ClockConfig+0x1c0>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f003 0307 	and.w	r3, r3, #7
 8007b82:	683a      	ldr	r2, [r7, #0]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d001      	beq.n	8007b8c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	e032      	b.n	8007bf2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f003 0304 	and.w	r3, r3, #4
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d008      	beq.n	8007baa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b98:	4b19      	ldr	r3, [pc, #100]	; (8007c00 <HAL_RCC_ClockConfig+0x1c4>)
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	68db      	ldr	r3, [r3, #12]
 8007ba4:	4916      	ldr	r1, [pc, #88]	; (8007c00 <HAL_RCC_ClockConfig+0x1c4>)
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f003 0308 	and.w	r3, r3, #8
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d009      	beq.n	8007bca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007bb6:	4b12      	ldr	r3, [pc, #72]	; (8007c00 <HAL_RCC_ClockConfig+0x1c4>)
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	691b      	ldr	r3, [r3, #16]
 8007bc2:	00db      	lsls	r3, r3, #3
 8007bc4:	490e      	ldr	r1, [pc, #56]	; (8007c00 <HAL_RCC_ClockConfig+0x1c4>)
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007bca:	f000 f821 	bl	8007c10 <HAL_RCC_GetSysClockFreq>
 8007bce:	4602      	mov	r2, r0
 8007bd0:	4b0b      	ldr	r3, [pc, #44]	; (8007c00 <HAL_RCC_ClockConfig+0x1c4>)
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	091b      	lsrs	r3, r3, #4
 8007bd6:	f003 030f 	and.w	r3, r3, #15
 8007bda:	490a      	ldr	r1, [pc, #40]	; (8007c04 <HAL_RCC_ClockConfig+0x1c8>)
 8007bdc:	5ccb      	ldrb	r3, [r1, r3]
 8007bde:	fa22 f303 	lsr.w	r3, r2, r3
 8007be2:	4a09      	ldr	r2, [pc, #36]	; (8007c08 <HAL_RCC_ClockConfig+0x1cc>)
 8007be4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007be6:	4b09      	ldr	r3, [pc, #36]	; (8007c0c <HAL_RCC_ClockConfig+0x1d0>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7fd ffa4 	bl	8005b38 <HAL_InitTick>

  return HAL_OK;
 8007bf0:	2300      	movs	r3, #0
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3710      	adds	r7, #16
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
 8007bfa:	bf00      	nop
 8007bfc:	40022000 	.word	0x40022000
 8007c00:	40021000 	.word	0x40021000
 8007c04:	0800ef4c 	.word	0x0800ef4c
 8007c08:	20000094 	.word	0x20000094
 8007c0c:	20000098 	.word	0x20000098

08007c10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b087      	sub	sp, #28
 8007c14:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007c16:	2300      	movs	r3, #0
 8007c18:	60fb      	str	r3, [r7, #12]
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	60bb      	str	r3, [r7, #8]
 8007c1e:	2300      	movs	r3, #0
 8007c20:	617b      	str	r3, [r7, #20]
 8007c22:	2300      	movs	r3, #0
 8007c24:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007c26:	2300      	movs	r3, #0
 8007c28:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007c2a:	4b1e      	ldr	r3, [pc, #120]	; (8007ca4 <HAL_RCC_GetSysClockFreq+0x94>)
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f003 030c 	and.w	r3, r3, #12
 8007c36:	2b04      	cmp	r3, #4
 8007c38:	d002      	beq.n	8007c40 <HAL_RCC_GetSysClockFreq+0x30>
 8007c3a:	2b08      	cmp	r3, #8
 8007c3c:	d003      	beq.n	8007c46 <HAL_RCC_GetSysClockFreq+0x36>
 8007c3e:	e027      	b.n	8007c90 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007c40:	4b19      	ldr	r3, [pc, #100]	; (8007ca8 <HAL_RCC_GetSysClockFreq+0x98>)
 8007c42:	613b      	str	r3, [r7, #16]
      break;
 8007c44:	e027      	b.n	8007c96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	0c9b      	lsrs	r3, r3, #18
 8007c4a:	f003 030f 	and.w	r3, r3, #15
 8007c4e:	4a17      	ldr	r2, [pc, #92]	; (8007cac <HAL_RCC_GetSysClockFreq+0x9c>)
 8007c50:	5cd3      	ldrb	r3, [r2, r3]
 8007c52:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d010      	beq.n	8007c80 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007c5e:	4b11      	ldr	r3, [pc, #68]	; (8007ca4 <HAL_RCC_GetSysClockFreq+0x94>)
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	0c5b      	lsrs	r3, r3, #17
 8007c64:	f003 0301 	and.w	r3, r3, #1
 8007c68:	4a11      	ldr	r2, [pc, #68]	; (8007cb0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8007c6a:	5cd3      	ldrb	r3, [r2, r3]
 8007c6c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	4a0d      	ldr	r2, [pc, #52]	; (8007ca8 <HAL_RCC_GetSysClockFreq+0x98>)
 8007c72:	fb03 f202 	mul.w	r2, r3, r2
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c7c:	617b      	str	r3, [r7, #20]
 8007c7e:	e004      	b.n	8007c8a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	4a0c      	ldr	r2, [pc, #48]	; (8007cb4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007c84:	fb02 f303 	mul.w	r3, r2, r3
 8007c88:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	613b      	str	r3, [r7, #16]
      break;
 8007c8e:	e002      	b.n	8007c96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007c90:	4b05      	ldr	r3, [pc, #20]	; (8007ca8 <HAL_RCC_GetSysClockFreq+0x98>)
 8007c92:	613b      	str	r3, [r7, #16]
      break;
 8007c94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007c96:	693b      	ldr	r3, [r7, #16]
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	371c      	adds	r7, #28
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bc80      	pop	{r7}
 8007ca0:	4770      	bx	lr
 8007ca2:	bf00      	nop
 8007ca4:	40021000 	.word	0x40021000
 8007ca8:	007a1200 	.word	0x007a1200
 8007cac:	0800ef64 	.word	0x0800ef64
 8007cb0:	0800ef74 	.word	0x0800ef74
 8007cb4:	003d0900 	.word	0x003d0900

08007cb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007cbc:	4b02      	ldr	r3, [pc, #8]	; (8007cc8 <HAL_RCC_GetHCLKFreq+0x10>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bc80      	pop	{r7}
 8007cc6:	4770      	bx	lr
 8007cc8:	20000094 	.word	0x20000094

08007ccc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007cd0:	f7ff fff2 	bl	8007cb8 <HAL_RCC_GetHCLKFreq>
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	4b05      	ldr	r3, [pc, #20]	; (8007cec <HAL_RCC_GetPCLK1Freq+0x20>)
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	0a1b      	lsrs	r3, r3, #8
 8007cdc:	f003 0307 	and.w	r3, r3, #7
 8007ce0:	4903      	ldr	r1, [pc, #12]	; (8007cf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007ce2:	5ccb      	ldrb	r3, [r1, r3]
 8007ce4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	bd80      	pop	{r7, pc}
 8007cec:	40021000 	.word	0x40021000
 8007cf0:	0800ef5c 	.word	0x0800ef5c

08007cf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007cf8:	f7ff ffde 	bl	8007cb8 <HAL_RCC_GetHCLKFreq>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	4b05      	ldr	r3, [pc, #20]	; (8007d14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	0adb      	lsrs	r3, r3, #11
 8007d04:	f003 0307 	and.w	r3, r3, #7
 8007d08:	4903      	ldr	r1, [pc, #12]	; (8007d18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007d0a:	5ccb      	ldrb	r3, [r1, r3]
 8007d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	40021000 	.word	0x40021000
 8007d18:	0800ef5c 	.word	0x0800ef5c

08007d1c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b085      	sub	sp, #20
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007d24:	4b0a      	ldr	r3, [pc, #40]	; (8007d50 <RCC_Delay+0x34>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a0a      	ldr	r2, [pc, #40]	; (8007d54 <RCC_Delay+0x38>)
 8007d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d2e:	0a5b      	lsrs	r3, r3, #9
 8007d30:	687a      	ldr	r2, [r7, #4]
 8007d32:	fb02 f303 	mul.w	r3, r2, r3
 8007d36:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007d38:	bf00      	nop
  }
  while (Delay --);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	1e5a      	subs	r2, r3, #1
 8007d3e:	60fa      	str	r2, [r7, #12]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d1f9      	bne.n	8007d38 <RCC_Delay+0x1c>
}
 8007d44:	bf00      	nop
 8007d46:	bf00      	nop
 8007d48:	3714      	adds	r7, #20
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bc80      	pop	{r7}
 8007d4e:	4770      	bx	lr
 8007d50:	20000094 	.word	0x20000094
 8007d54:	10624dd3 	.word	0x10624dd3

08007d58 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b086      	sub	sp, #24
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007d60:	2300      	movs	r3, #0
 8007d62:	613b      	str	r3, [r7, #16]
 8007d64:	2300      	movs	r3, #0
 8007d66:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f003 0301 	and.w	r3, r3, #1
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d07d      	beq.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007d74:	2300      	movs	r3, #0
 8007d76:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007d78:	4b4f      	ldr	r3, [pc, #316]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d7a:	69db      	ldr	r3, [r3, #28]
 8007d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d10d      	bne.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d84:	4b4c      	ldr	r3, [pc, #304]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d86:	69db      	ldr	r3, [r3, #28]
 8007d88:	4a4b      	ldr	r2, [pc, #300]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d8e:	61d3      	str	r3, [r2, #28]
 8007d90:	4b49      	ldr	r3, [pc, #292]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d92:	69db      	ldr	r3, [r3, #28]
 8007d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d98:	60bb      	str	r3, [r7, #8]
 8007d9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007da0:	4b46      	ldr	r3, [pc, #280]	; (8007ebc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d118      	bne.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007dac:	4b43      	ldr	r3, [pc, #268]	; (8007ebc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a42      	ldr	r2, [pc, #264]	; (8007ebc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007db6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007db8:	f7fd ff00 	bl	8005bbc <HAL_GetTick>
 8007dbc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007dbe:	e008      	b.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007dc0:	f7fd fefc 	bl	8005bbc <HAL_GetTick>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	1ad3      	subs	r3, r2, r3
 8007dca:	2b64      	cmp	r3, #100	; 0x64
 8007dcc:	d901      	bls.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007dce:	2303      	movs	r3, #3
 8007dd0:	e06d      	b.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007dd2:	4b3a      	ldr	r3, [pc, #232]	; (8007ebc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d0f0      	beq.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007dde:	4b36      	ldr	r3, [pc, #216]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007de0:	6a1b      	ldr	r3, [r3, #32]
 8007de2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007de6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d02e      	beq.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007df6:	68fa      	ldr	r2, [r7, #12]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d027      	beq.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007dfc:	4b2e      	ldr	r3, [pc, #184]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007dfe:	6a1b      	ldr	r3, [r3, #32]
 8007e00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e04:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007e06:	4b2e      	ldr	r3, [pc, #184]	; (8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007e08:	2201      	movs	r2, #1
 8007e0a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007e0c:	4b2c      	ldr	r3, [pc, #176]	; (8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007e0e:	2200      	movs	r2, #0
 8007e10:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007e12:	4a29      	ldr	r2, [pc, #164]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f003 0301 	and.w	r3, r3, #1
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d014      	beq.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e22:	f7fd fecb 	bl	8005bbc <HAL_GetTick>
 8007e26:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e28:	e00a      	b.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e2a:	f7fd fec7 	bl	8005bbc <HAL_GetTick>
 8007e2e:	4602      	mov	r2, r0
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	1ad3      	subs	r3, r2, r3
 8007e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d901      	bls.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007e3c:	2303      	movs	r3, #3
 8007e3e:	e036      	b.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e40:	4b1d      	ldr	r3, [pc, #116]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e42:	6a1b      	ldr	r3, [r3, #32]
 8007e44:	f003 0302 	and.w	r3, r3, #2
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d0ee      	beq.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007e4c:	4b1a      	ldr	r3, [pc, #104]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e4e:	6a1b      	ldr	r3, [r3, #32]
 8007e50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	4917      	ldr	r1, [pc, #92]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007e5e:	7dfb      	ldrb	r3, [r7, #23]
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d105      	bne.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e64:	4b14      	ldr	r3, [pc, #80]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e66:	69db      	ldr	r3, [r3, #28]
 8007e68:	4a13      	ldr	r2, [pc, #76]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e6e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f003 0302 	and.w	r3, r3, #2
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d008      	beq.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007e7c:	4b0e      	ldr	r3, [pc, #56]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	490b      	ldr	r1, [pc, #44]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f003 0310 	and.w	r3, r3, #16
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d008      	beq.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007e9a:	4b07      	ldr	r3, [pc, #28]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	68db      	ldr	r3, [r3, #12]
 8007ea6:	4904      	ldr	r1, [pc, #16]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007eac:	2300      	movs	r3, #0
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3718      	adds	r7, #24
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	40021000 	.word	0x40021000
 8007ebc:	40007000 	.word	0x40007000
 8007ec0:	42420440 	.word	0x42420440

08007ec4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b082      	sub	sp, #8
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d101      	bne.n	8007ed6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	e041      	b.n	8007f5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d106      	bne.n	8007ef0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f7fd fc42 	bl	8005774 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2202      	movs	r2, #2
 8007ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	3304      	adds	r3, #4
 8007f00:	4619      	mov	r1, r3
 8007f02:	4610      	mov	r0, r2
 8007f04:	f000 fcd2 	bl	80088ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2201      	movs	r2, #1
 8007f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2201      	movs	r2, #1
 8007f34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2201      	movs	r2, #1
 8007f44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2201      	movs	r2, #1
 8007f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f58:	2300      	movs	r3, #0
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3708      	adds	r7, #8
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
	...

08007f64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b085      	sub	sp, #20
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d001      	beq.n	8007f7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	e03a      	b.n	8007ff2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2202      	movs	r2, #2
 8007f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	68da      	ldr	r2, [r3, #12]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f042 0201 	orr.w	r2, r2, #1
 8007f92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a18      	ldr	r2, [pc, #96]	; (8007ffc <HAL_TIM_Base_Start_IT+0x98>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d00e      	beq.n	8007fbc <HAL_TIM_Base_Start_IT+0x58>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fa6:	d009      	beq.n	8007fbc <HAL_TIM_Base_Start_IT+0x58>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a14      	ldr	r2, [pc, #80]	; (8008000 <HAL_TIM_Base_Start_IT+0x9c>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d004      	beq.n	8007fbc <HAL_TIM_Base_Start_IT+0x58>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a13      	ldr	r2, [pc, #76]	; (8008004 <HAL_TIM_Base_Start_IT+0xa0>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d111      	bne.n	8007fe0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	f003 0307 	and.w	r3, r3, #7
 8007fc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2b06      	cmp	r3, #6
 8007fcc:	d010      	beq.n	8007ff0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f042 0201 	orr.w	r2, r2, #1
 8007fdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fde:	e007      	b.n	8007ff0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	681a      	ldr	r2, [r3, #0]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f042 0201 	orr.w	r2, r2, #1
 8007fee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007ff0:	2300      	movs	r3, #0
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3714      	adds	r7, #20
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bc80      	pop	{r7}
 8007ffa:	4770      	bx	lr
 8007ffc:	40012c00 	.word	0x40012c00
 8008000:	40000400 	.word	0x40000400
 8008004:	40000800 	.word	0x40000800

08008008 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b082      	sub	sp, #8
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d101      	bne.n	800801a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008016:	2301      	movs	r3, #1
 8008018:	e041      	b.n	800809e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008020:	b2db      	uxtb	r3, r3
 8008022:	2b00      	cmp	r3, #0
 8008024:	d106      	bne.n	8008034 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 f839 	bl	80080a6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2202      	movs	r2, #2
 8008038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	3304      	adds	r3, #4
 8008044:	4619      	mov	r1, r3
 8008046:	4610      	mov	r0, r2
 8008048:	f000 fc30 	bl	80088ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2201      	movs	r2, #1
 8008050:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2201      	movs	r2, #1
 8008058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2201      	movs	r2, #1
 8008070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2201      	movs	r2, #1
 8008078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2201      	movs	r2, #1
 8008080:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2201      	movs	r2, #1
 8008088:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2201      	movs	r2, #1
 8008098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800809c:	2300      	movs	r3, #0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3708      	adds	r7, #8
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80080a6:	b480      	push	{r7}
 80080a8:	b083      	sub	sp, #12
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80080ae:	bf00      	nop
 80080b0:	370c      	adds	r7, #12
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bc80      	pop	{r7}
 80080b6:	4770      	bx	lr

080080b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d109      	bne.n	80080dc <HAL_TIM_PWM_Start+0x24>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	bf14      	ite	ne
 80080d4:	2301      	movne	r3, #1
 80080d6:	2300      	moveq	r3, #0
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	e022      	b.n	8008122 <HAL_TIM_PWM_Start+0x6a>
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	2b04      	cmp	r3, #4
 80080e0:	d109      	bne.n	80080f6 <HAL_TIM_PWM_Start+0x3e>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	bf14      	ite	ne
 80080ee:	2301      	movne	r3, #1
 80080f0:	2300      	moveq	r3, #0
 80080f2:	b2db      	uxtb	r3, r3
 80080f4:	e015      	b.n	8008122 <HAL_TIM_PWM_Start+0x6a>
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	2b08      	cmp	r3, #8
 80080fa:	d109      	bne.n	8008110 <HAL_TIM_PWM_Start+0x58>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008102:	b2db      	uxtb	r3, r3
 8008104:	2b01      	cmp	r3, #1
 8008106:	bf14      	ite	ne
 8008108:	2301      	movne	r3, #1
 800810a:	2300      	moveq	r3, #0
 800810c:	b2db      	uxtb	r3, r3
 800810e:	e008      	b.n	8008122 <HAL_TIM_PWM_Start+0x6a>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008116:	b2db      	uxtb	r3, r3
 8008118:	2b01      	cmp	r3, #1
 800811a:	bf14      	ite	ne
 800811c:	2301      	movne	r3, #1
 800811e:	2300      	moveq	r3, #0
 8008120:	b2db      	uxtb	r3, r3
 8008122:	2b00      	cmp	r3, #0
 8008124:	d001      	beq.n	800812a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008126:	2301      	movs	r3, #1
 8008128:	e05e      	b.n	80081e8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d104      	bne.n	800813a <HAL_TIM_PWM_Start+0x82>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2202      	movs	r2, #2
 8008134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008138:	e013      	b.n	8008162 <HAL_TIM_PWM_Start+0xaa>
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	2b04      	cmp	r3, #4
 800813e:	d104      	bne.n	800814a <HAL_TIM_PWM_Start+0x92>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2202      	movs	r2, #2
 8008144:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008148:	e00b      	b.n	8008162 <HAL_TIM_PWM_Start+0xaa>
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	2b08      	cmp	r3, #8
 800814e:	d104      	bne.n	800815a <HAL_TIM_PWM_Start+0xa2>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2202      	movs	r2, #2
 8008154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008158:	e003      	b.n	8008162 <HAL_TIM_PWM_Start+0xaa>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2202      	movs	r2, #2
 800815e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	2201      	movs	r2, #1
 8008168:	6839      	ldr	r1, [r7, #0]
 800816a:	4618      	mov	r0, r3
 800816c:	f000 fe1e 	bl	8008dac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a1e      	ldr	r2, [pc, #120]	; (80081f0 <HAL_TIM_PWM_Start+0x138>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d107      	bne.n	800818a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008188:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a18      	ldr	r2, [pc, #96]	; (80081f0 <HAL_TIM_PWM_Start+0x138>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d00e      	beq.n	80081b2 <HAL_TIM_PWM_Start+0xfa>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800819c:	d009      	beq.n	80081b2 <HAL_TIM_PWM_Start+0xfa>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a14      	ldr	r2, [pc, #80]	; (80081f4 <HAL_TIM_PWM_Start+0x13c>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d004      	beq.n	80081b2 <HAL_TIM_PWM_Start+0xfa>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a12      	ldr	r2, [pc, #72]	; (80081f8 <HAL_TIM_PWM_Start+0x140>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d111      	bne.n	80081d6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	689b      	ldr	r3, [r3, #8]
 80081b8:	f003 0307 	and.w	r3, r3, #7
 80081bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2b06      	cmp	r3, #6
 80081c2:	d010      	beq.n	80081e6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f042 0201 	orr.w	r2, r2, #1
 80081d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081d4:	e007      	b.n	80081e6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f042 0201 	orr.w	r2, r2, #1
 80081e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80081e6:	2300      	movs	r3, #0
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3710      	adds	r7, #16
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}
 80081f0:	40012c00 	.word	0x40012c00
 80081f4:	40000400 	.word	0x40000400
 80081f8:	40000800 	.word	0x40000800

080081fc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b086      	sub	sp, #24
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d101      	bne.n	8008210 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800820c:	2301      	movs	r3, #1
 800820e:	e093      	b.n	8008338 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008216:	b2db      	uxtb	r3, r3
 8008218:	2b00      	cmp	r3, #0
 800821a:	d106      	bne.n	800822a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f7fd fa37 	bl	8005698 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2202      	movs	r2, #2
 800822e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	689b      	ldr	r3, [r3, #8]
 8008238:	687a      	ldr	r2, [r7, #4]
 800823a:	6812      	ldr	r2, [r2, #0]
 800823c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008240:	f023 0307 	bic.w	r3, r3, #7
 8008244:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	3304      	adds	r3, #4
 800824e:	4619      	mov	r1, r3
 8008250:	4610      	mov	r0, r2
 8008252:	f000 fb2b 	bl	80088ac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	699b      	ldr	r3, [r3, #24]
 8008264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	6a1b      	ldr	r3, [r3, #32]
 800826c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	697a      	ldr	r2, [r7, #20]
 8008274:	4313      	orrs	r3, r2
 8008276:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800827e:	f023 0303 	bic.w	r3, r3, #3
 8008282:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	689a      	ldr	r2, [r3, #8]
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	699b      	ldr	r3, [r3, #24]
 800828c:	021b      	lsls	r3, r3, #8
 800828e:	4313      	orrs	r3, r2
 8008290:	693a      	ldr	r2, [r7, #16]
 8008292:	4313      	orrs	r3, r2
 8008294:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800829c:	f023 030c 	bic.w	r3, r3, #12
 80082a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80082a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80082ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	68da      	ldr	r2, [r3, #12]
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	69db      	ldr	r3, [r3, #28]
 80082b6:	021b      	lsls	r3, r3, #8
 80082b8:	4313      	orrs	r3, r2
 80082ba:	693a      	ldr	r2, [r7, #16]
 80082bc:	4313      	orrs	r3, r2
 80082be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	691b      	ldr	r3, [r3, #16]
 80082c4:	011a      	lsls	r2, r3, #4
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	6a1b      	ldr	r3, [r3, #32]
 80082ca:	031b      	lsls	r3, r3, #12
 80082cc:	4313      	orrs	r3, r2
 80082ce:	693a      	ldr	r2, [r7, #16]
 80082d0:	4313      	orrs	r3, r2
 80082d2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80082da:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	685a      	ldr	r2, [r3, #4]
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	695b      	ldr	r3, [r3, #20]
 80082e4:	011b      	lsls	r3, r3, #4
 80082e6:	4313      	orrs	r3, r2
 80082e8:	68fa      	ldr	r2, [r7, #12]
 80082ea:	4313      	orrs	r3, r2
 80082ec:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	697a      	ldr	r2, [r7, #20]
 80082f4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	693a      	ldr	r2, [r7, #16]
 80082fc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	68fa      	ldr	r2, [r7, #12]
 8008304:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2201      	movs	r2, #1
 800830a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2201      	movs	r2, #1
 8008312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2201      	movs	r2, #1
 800831a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2201      	movs	r2, #1
 8008322:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2201      	movs	r2, #1
 800832a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2201      	movs	r2, #1
 8008332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008336:	2300      	movs	r3, #0
}
 8008338:	4618      	mov	r0, r3
 800833a:	3718      	adds	r7, #24
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	691b      	ldr	r3, [r3, #16]
 800834e:	f003 0302 	and.w	r3, r3, #2
 8008352:	2b02      	cmp	r3, #2
 8008354:	d122      	bne.n	800839c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	68db      	ldr	r3, [r3, #12]
 800835c:	f003 0302 	and.w	r3, r3, #2
 8008360:	2b02      	cmp	r3, #2
 8008362:	d11b      	bne.n	800839c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f06f 0202 	mvn.w	r2, #2
 800836c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2201      	movs	r2, #1
 8008372:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	699b      	ldr	r3, [r3, #24]
 800837a:	f003 0303 	and.w	r3, r3, #3
 800837e:	2b00      	cmp	r3, #0
 8008380:	d003      	beq.n	800838a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 fa76 	bl	8008874 <HAL_TIM_IC_CaptureCallback>
 8008388:	e005      	b.n	8008396 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 fa69 	bl	8008862 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 fa78 	bl	8008886 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2200      	movs	r2, #0
 800839a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	691b      	ldr	r3, [r3, #16]
 80083a2:	f003 0304 	and.w	r3, r3, #4
 80083a6:	2b04      	cmp	r3, #4
 80083a8:	d122      	bne.n	80083f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	68db      	ldr	r3, [r3, #12]
 80083b0:	f003 0304 	and.w	r3, r3, #4
 80083b4:	2b04      	cmp	r3, #4
 80083b6:	d11b      	bne.n	80083f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f06f 0204 	mvn.w	r2, #4
 80083c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2202      	movs	r2, #2
 80083c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	699b      	ldr	r3, [r3, #24]
 80083ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d003      	beq.n	80083de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 fa4c 	bl	8008874 <HAL_TIM_IC_CaptureCallback>
 80083dc:	e005      	b.n	80083ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 fa3f 	bl	8008862 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 fa4e 	bl	8008886 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2200      	movs	r2, #0
 80083ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	691b      	ldr	r3, [r3, #16]
 80083f6:	f003 0308 	and.w	r3, r3, #8
 80083fa:	2b08      	cmp	r3, #8
 80083fc:	d122      	bne.n	8008444 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	68db      	ldr	r3, [r3, #12]
 8008404:	f003 0308 	and.w	r3, r3, #8
 8008408:	2b08      	cmp	r3, #8
 800840a:	d11b      	bne.n	8008444 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f06f 0208 	mvn.w	r2, #8
 8008414:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2204      	movs	r2, #4
 800841a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	69db      	ldr	r3, [r3, #28]
 8008422:	f003 0303 	and.w	r3, r3, #3
 8008426:	2b00      	cmp	r3, #0
 8008428:	d003      	beq.n	8008432 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 fa22 	bl	8008874 <HAL_TIM_IC_CaptureCallback>
 8008430:	e005      	b.n	800843e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 fa15 	bl	8008862 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 fa24 	bl	8008886 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	691b      	ldr	r3, [r3, #16]
 800844a:	f003 0310 	and.w	r3, r3, #16
 800844e:	2b10      	cmp	r3, #16
 8008450:	d122      	bne.n	8008498 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	68db      	ldr	r3, [r3, #12]
 8008458:	f003 0310 	and.w	r3, r3, #16
 800845c:	2b10      	cmp	r3, #16
 800845e:	d11b      	bne.n	8008498 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f06f 0210 	mvn.w	r2, #16
 8008468:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2208      	movs	r2, #8
 800846e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	69db      	ldr	r3, [r3, #28]
 8008476:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800847a:	2b00      	cmp	r3, #0
 800847c:	d003      	beq.n	8008486 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 f9f8 	bl	8008874 <HAL_TIM_IC_CaptureCallback>
 8008484:	e005      	b.n	8008492 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 f9eb 	bl	8008862 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 f9fa 	bl	8008886 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2200      	movs	r2, #0
 8008496:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	691b      	ldr	r3, [r3, #16]
 800849e:	f003 0301 	and.w	r3, r3, #1
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d10e      	bne.n	80084c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	68db      	ldr	r3, [r3, #12]
 80084ac:	f003 0301 	and.w	r3, r3, #1
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d107      	bne.n	80084c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f06f 0201 	mvn.w	r2, #1
 80084bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f7f9 f9f2 	bl	80018a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	691b      	ldr	r3, [r3, #16]
 80084ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084ce:	2b80      	cmp	r3, #128	; 0x80
 80084d0:	d10e      	bne.n	80084f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	68db      	ldr	r3, [r3, #12]
 80084d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084dc:	2b80      	cmp	r3, #128	; 0x80
 80084de:	d107      	bne.n	80084f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80084e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 fce9 	bl	8008ec2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	691b      	ldr	r3, [r3, #16]
 80084f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084fa:	2b40      	cmp	r3, #64	; 0x40
 80084fc:	d10e      	bne.n	800851c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	68db      	ldr	r3, [r3, #12]
 8008504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008508:	2b40      	cmp	r3, #64	; 0x40
 800850a:	d107      	bne.n	800851c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 f9be 	bl	8008898 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	691b      	ldr	r3, [r3, #16]
 8008522:	f003 0320 	and.w	r3, r3, #32
 8008526:	2b20      	cmp	r3, #32
 8008528:	d10e      	bne.n	8008548 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	68db      	ldr	r3, [r3, #12]
 8008530:	f003 0320 	and.w	r3, r3, #32
 8008534:	2b20      	cmp	r3, #32
 8008536:	d107      	bne.n	8008548 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f06f 0220 	mvn.w	r2, #32
 8008540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 fcb4 	bl	8008eb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008548:	bf00      	nop
 800854a:	3708      	adds	r7, #8
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b086      	sub	sp, #24
 8008554:	af00      	add	r7, sp, #0
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	60b9      	str	r1, [r7, #8]
 800855a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800855c:	2300      	movs	r3, #0
 800855e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008566:	2b01      	cmp	r3, #1
 8008568:	d101      	bne.n	800856e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800856a:	2302      	movs	r3, #2
 800856c:	e0ae      	b.n	80086cc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2201      	movs	r2, #1
 8008572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2b0c      	cmp	r3, #12
 800857a:	f200 809f 	bhi.w	80086bc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800857e:	a201      	add	r2, pc, #4	; (adr r2, 8008584 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008584:	080085b9 	.word	0x080085b9
 8008588:	080086bd 	.word	0x080086bd
 800858c:	080086bd 	.word	0x080086bd
 8008590:	080086bd 	.word	0x080086bd
 8008594:	080085f9 	.word	0x080085f9
 8008598:	080086bd 	.word	0x080086bd
 800859c:	080086bd 	.word	0x080086bd
 80085a0:	080086bd 	.word	0x080086bd
 80085a4:	0800863b 	.word	0x0800863b
 80085a8:	080086bd 	.word	0x080086bd
 80085ac:	080086bd 	.word	0x080086bd
 80085b0:	080086bd 	.word	0x080086bd
 80085b4:	0800867b 	.word	0x0800867b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	68b9      	ldr	r1, [r7, #8]
 80085be:	4618      	mov	r0, r3
 80085c0:	f000 f9d6 	bl	8008970 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	699a      	ldr	r2, [r3, #24]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f042 0208 	orr.w	r2, r2, #8
 80085d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	699a      	ldr	r2, [r3, #24]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f022 0204 	bic.w	r2, r2, #4
 80085e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	6999      	ldr	r1, [r3, #24]
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	691a      	ldr	r2, [r3, #16]
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	430a      	orrs	r2, r1
 80085f4:	619a      	str	r2, [r3, #24]
      break;
 80085f6:	e064      	b.n	80086c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	68b9      	ldr	r1, [r7, #8]
 80085fe:	4618      	mov	r0, r3
 8008600:	f000 fa1c 	bl	8008a3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	699a      	ldr	r2, [r3, #24]
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008612:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	699a      	ldr	r2, [r3, #24]
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008622:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	6999      	ldr	r1, [r3, #24]
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	691b      	ldr	r3, [r3, #16]
 800862e:	021a      	lsls	r2, r3, #8
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	430a      	orrs	r2, r1
 8008636:	619a      	str	r2, [r3, #24]
      break;
 8008638:	e043      	b.n	80086c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	68b9      	ldr	r1, [r7, #8]
 8008640:	4618      	mov	r0, r3
 8008642:	f000 fa65 	bl	8008b10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	69da      	ldr	r2, [r3, #28]
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f042 0208 	orr.w	r2, r2, #8
 8008654:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	69da      	ldr	r2, [r3, #28]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f022 0204 	bic.w	r2, r2, #4
 8008664:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	69d9      	ldr	r1, [r3, #28]
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	691a      	ldr	r2, [r3, #16]
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	430a      	orrs	r2, r1
 8008676:	61da      	str	r2, [r3, #28]
      break;
 8008678:	e023      	b.n	80086c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	68b9      	ldr	r1, [r7, #8]
 8008680:	4618      	mov	r0, r3
 8008682:	f000 faaf 	bl	8008be4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	69da      	ldr	r2, [r3, #28]
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008694:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	69da      	ldr	r2, [r3, #28]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	69d9      	ldr	r1, [r3, #28]
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	691b      	ldr	r3, [r3, #16]
 80086b0:	021a      	lsls	r2, r3, #8
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	430a      	orrs	r2, r1
 80086b8:	61da      	str	r2, [r3, #28]
      break;
 80086ba:	e002      	b.n	80086c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80086bc:	2301      	movs	r3, #1
 80086be:	75fb      	strb	r3, [r7, #23]
      break;
 80086c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2200      	movs	r2, #0
 80086c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80086ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3718      	adds	r7, #24
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80086de:	2300      	movs	r3, #0
 80086e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d101      	bne.n	80086f0 <HAL_TIM_ConfigClockSource+0x1c>
 80086ec:	2302      	movs	r3, #2
 80086ee:	e0b4      	b.n	800885a <HAL_TIM_ConfigClockSource+0x186>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2201      	movs	r2, #1
 80086f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2202      	movs	r2, #2
 80086fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800870e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008716:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	68ba      	ldr	r2, [r7, #8]
 800871e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008728:	d03e      	beq.n	80087a8 <HAL_TIM_ConfigClockSource+0xd4>
 800872a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800872e:	f200 8087 	bhi.w	8008840 <HAL_TIM_ConfigClockSource+0x16c>
 8008732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008736:	f000 8086 	beq.w	8008846 <HAL_TIM_ConfigClockSource+0x172>
 800873a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800873e:	d87f      	bhi.n	8008840 <HAL_TIM_ConfigClockSource+0x16c>
 8008740:	2b70      	cmp	r3, #112	; 0x70
 8008742:	d01a      	beq.n	800877a <HAL_TIM_ConfigClockSource+0xa6>
 8008744:	2b70      	cmp	r3, #112	; 0x70
 8008746:	d87b      	bhi.n	8008840 <HAL_TIM_ConfigClockSource+0x16c>
 8008748:	2b60      	cmp	r3, #96	; 0x60
 800874a:	d050      	beq.n	80087ee <HAL_TIM_ConfigClockSource+0x11a>
 800874c:	2b60      	cmp	r3, #96	; 0x60
 800874e:	d877      	bhi.n	8008840 <HAL_TIM_ConfigClockSource+0x16c>
 8008750:	2b50      	cmp	r3, #80	; 0x50
 8008752:	d03c      	beq.n	80087ce <HAL_TIM_ConfigClockSource+0xfa>
 8008754:	2b50      	cmp	r3, #80	; 0x50
 8008756:	d873      	bhi.n	8008840 <HAL_TIM_ConfigClockSource+0x16c>
 8008758:	2b40      	cmp	r3, #64	; 0x40
 800875a:	d058      	beq.n	800880e <HAL_TIM_ConfigClockSource+0x13a>
 800875c:	2b40      	cmp	r3, #64	; 0x40
 800875e:	d86f      	bhi.n	8008840 <HAL_TIM_ConfigClockSource+0x16c>
 8008760:	2b30      	cmp	r3, #48	; 0x30
 8008762:	d064      	beq.n	800882e <HAL_TIM_ConfigClockSource+0x15a>
 8008764:	2b30      	cmp	r3, #48	; 0x30
 8008766:	d86b      	bhi.n	8008840 <HAL_TIM_ConfigClockSource+0x16c>
 8008768:	2b20      	cmp	r3, #32
 800876a:	d060      	beq.n	800882e <HAL_TIM_ConfigClockSource+0x15a>
 800876c:	2b20      	cmp	r3, #32
 800876e:	d867      	bhi.n	8008840 <HAL_TIM_ConfigClockSource+0x16c>
 8008770:	2b00      	cmp	r3, #0
 8008772:	d05c      	beq.n	800882e <HAL_TIM_ConfigClockSource+0x15a>
 8008774:	2b10      	cmp	r3, #16
 8008776:	d05a      	beq.n	800882e <HAL_TIM_ConfigClockSource+0x15a>
 8008778:	e062      	b.n	8008840 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6818      	ldr	r0, [r3, #0]
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	6899      	ldr	r1, [r3, #8]
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	685a      	ldr	r2, [r3, #4]
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	68db      	ldr	r3, [r3, #12]
 800878a:	f000 faf0 	bl	8008d6e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	689b      	ldr	r3, [r3, #8]
 8008794:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800879c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	68ba      	ldr	r2, [r7, #8]
 80087a4:	609a      	str	r2, [r3, #8]
      break;
 80087a6:	e04f      	b.n	8008848 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6818      	ldr	r0, [r3, #0]
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	6899      	ldr	r1, [r3, #8]
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	685a      	ldr	r2, [r3, #4]
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	68db      	ldr	r3, [r3, #12]
 80087b8:	f000 fad9 	bl	8008d6e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	689a      	ldr	r2, [r3, #8]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80087ca:	609a      	str	r2, [r3, #8]
      break;
 80087cc:	e03c      	b.n	8008848 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6818      	ldr	r0, [r3, #0]
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	6859      	ldr	r1, [r3, #4]
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	68db      	ldr	r3, [r3, #12]
 80087da:	461a      	mov	r2, r3
 80087dc:	f000 fa50 	bl	8008c80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	2150      	movs	r1, #80	; 0x50
 80087e6:	4618      	mov	r0, r3
 80087e8:	f000 faa7 	bl	8008d3a <TIM_ITRx_SetConfig>
      break;
 80087ec:	e02c      	b.n	8008848 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6818      	ldr	r0, [r3, #0]
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	6859      	ldr	r1, [r3, #4]
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	68db      	ldr	r3, [r3, #12]
 80087fa:	461a      	mov	r2, r3
 80087fc:	f000 fa6e 	bl	8008cdc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	2160      	movs	r1, #96	; 0x60
 8008806:	4618      	mov	r0, r3
 8008808:	f000 fa97 	bl	8008d3a <TIM_ITRx_SetConfig>
      break;
 800880c:	e01c      	b.n	8008848 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6818      	ldr	r0, [r3, #0]
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	6859      	ldr	r1, [r3, #4]
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	68db      	ldr	r3, [r3, #12]
 800881a:	461a      	mov	r2, r3
 800881c:	f000 fa30 	bl	8008c80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	2140      	movs	r1, #64	; 0x40
 8008826:	4618      	mov	r0, r3
 8008828:	f000 fa87 	bl	8008d3a <TIM_ITRx_SetConfig>
      break;
 800882c:	e00c      	b.n	8008848 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4619      	mov	r1, r3
 8008838:	4610      	mov	r0, r2
 800883a:	f000 fa7e 	bl	8008d3a <TIM_ITRx_SetConfig>
      break;
 800883e:	e003      	b.n	8008848 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008840:	2301      	movs	r3, #1
 8008842:	73fb      	strb	r3, [r7, #15]
      break;
 8008844:	e000      	b.n	8008848 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008846:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2201      	movs	r2, #1
 800884c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2200      	movs	r2, #0
 8008854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008858:	7bfb      	ldrb	r3, [r7, #15]
}
 800885a:	4618      	mov	r0, r3
 800885c:	3710      	adds	r7, #16
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}

08008862 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008862:	b480      	push	{r7}
 8008864:	b083      	sub	sp, #12
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800886a:	bf00      	nop
 800886c:	370c      	adds	r7, #12
 800886e:	46bd      	mov	sp, r7
 8008870:	bc80      	pop	{r7}
 8008872:	4770      	bx	lr

08008874 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008874:	b480      	push	{r7}
 8008876:	b083      	sub	sp, #12
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800887c:	bf00      	nop
 800887e:	370c      	adds	r7, #12
 8008880:	46bd      	mov	sp, r7
 8008882:	bc80      	pop	{r7}
 8008884:	4770      	bx	lr

08008886 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008886:	b480      	push	{r7}
 8008888:	b083      	sub	sp, #12
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800888e:	bf00      	nop
 8008890:	370c      	adds	r7, #12
 8008892:	46bd      	mov	sp, r7
 8008894:	bc80      	pop	{r7}
 8008896:	4770      	bx	lr

08008898 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008898:	b480      	push	{r7}
 800889a:	b083      	sub	sp, #12
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80088a0:	bf00      	nop
 80088a2:	370c      	adds	r7, #12
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bc80      	pop	{r7}
 80088a8:	4770      	bx	lr
	...

080088ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b085      	sub	sp, #20
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	4a29      	ldr	r2, [pc, #164]	; (8008964 <TIM_Base_SetConfig+0xb8>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d00b      	beq.n	80088dc <TIM_Base_SetConfig+0x30>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088ca:	d007      	beq.n	80088dc <TIM_Base_SetConfig+0x30>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	4a26      	ldr	r2, [pc, #152]	; (8008968 <TIM_Base_SetConfig+0xbc>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d003      	beq.n	80088dc <TIM_Base_SetConfig+0x30>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	4a25      	ldr	r2, [pc, #148]	; (800896c <TIM_Base_SetConfig+0xc0>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d108      	bne.n	80088ee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	68fa      	ldr	r2, [r7, #12]
 80088ea:	4313      	orrs	r3, r2
 80088ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	4a1c      	ldr	r2, [pc, #112]	; (8008964 <TIM_Base_SetConfig+0xb8>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d00b      	beq.n	800890e <TIM_Base_SetConfig+0x62>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088fc:	d007      	beq.n	800890e <TIM_Base_SetConfig+0x62>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	4a19      	ldr	r2, [pc, #100]	; (8008968 <TIM_Base_SetConfig+0xbc>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d003      	beq.n	800890e <TIM_Base_SetConfig+0x62>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	4a18      	ldr	r2, [pc, #96]	; (800896c <TIM_Base_SetConfig+0xc0>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d108      	bne.n	8008920 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008914:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	68db      	ldr	r3, [r3, #12]
 800891a:	68fa      	ldr	r2, [r7, #12]
 800891c:	4313      	orrs	r3, r2
 800891e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	695b      	ldr	r3, [r3, #20]
 800892a:	4313      	orrs	r3, r2
 800892c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	68fa      	ldr	r2, [r7, #12]
 8008932:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	689a      	ldr	r2, [r3, #8]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	681a      	ldr	r2, [r3, #0]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	4a07      	ldr	r2, [pc, #28]	; (8008964 <TIM_Base_SetConfig+0xb8>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d103      	bne.n	8008954 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	691a      	ldr	r2, [r3, #16]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2201      	movs	r2, #1
 8008958:	615a      	str	r2, [r3, #20]
}
 800895a:	bf00      	nop
 800895c:	3714      	adds	r7, #20
 800895e:	46bd      	mov	sp, r7
 8008960:	bc80      	pop	{r7}
 8008962:	4770      	bx	lr
 8008964:	40012c00 	.word	0x40012c00
 8008968:	40000400 	.word	0x40000400
 800896c:	40000800 	.word	0x40000800

08008970 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008970:	b480      	push	{r7}
 8008972:	b087      	sub	sp, #28
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6a1b      	ldr	r3, [r3, #32]
 800897e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6a1b      	ldr	r3, [r3, #32]
 8008984:	f023 0201 	bic.w	r2, r3, #1
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	699b      	ldr	r3, [r3, #24]
 8008996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800899e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f023 0303 	bic.w	r3, r3, #3
 80089a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	68fa      	ldr	r2, [r7, #12]
 80089ae:	4313      	orrs	r3, r2
 80089b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	f023 0302 	bic.w	r3, r3, #2
 80089b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	689b      	ldr	r3, [r3, #8]
 80089be:	697a      	ldr	r2, [r7, #20]
 80089c0:	4313      	orrs	r3, r2
 80089c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	4a1c      	ldr	r2, [pc, #112]	; (8008a38 <TIM_OC1_SetConfig+0xc8>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d10c      	bne.n	80089e6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	f023 0308 	bic.w	r3, r3, #8
 80089d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	68db      	ldr	r3, [r3, #12]
 80089d8:	697a      	ldr	r2, [r7, #20]
 80089da:	4313      	orrs	r3, r2
 80089dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	f023 0304 	bic.w	r3, r3, #4
 80089e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	4a13      	ldr	r2, [pc, #76]	; (8008a38 <TIM_OC1_SetConfig+0xc8>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d111      	bne.n	8008a12 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80089fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	695b      	ldr	r3, [r3, #20]
 8008a02:	693a      	ldr	r2, [r7, #16]
 8008a04:	4313      	orrs	r3, r2
 8008a06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	699b      	ldr	r3, [r3, #24]
 8008a0c:	693a      	ldr	r2, [r7, #16]
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	693a      	ldr	r2, [r7, #16]
 8008a16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	68fa      	ldr	r2, [r7, #12]
 8008a1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	685a      	ldr	r2, [r3, #4]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	697a      	ldr	r2, [r7, #20]
 8008a2a:	621a      	str	r2, [r3, #32]
}
 8008a2c:	bf00      	nop
 8008a2e:	371c      	adds	r7, #28
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bc80      	pop	{r7}
 8008a34:	4770      	bx	lr
 8008a36:	bf00      	nop
 8008a38:	40012c00 	.word	0x40012c00

08008a3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b087      	sub	sp, #28
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6a1b      	ldr	r3, [r3, #32]
 8008a4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6a1b      	ldr	r3, [r3, #32]
 8008a50:	f023 0210 	bic.w	r2, r3, #16
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	699b      	ldr	r3, [r3, #24]
 8008a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	021b      	lsls	r3, r3, #8
 8008a7a:	68fa      	ldr	r2, [r7, #12]
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	f023 0320 	bic.w	r3, r3, #32
 8008a86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	689b      	ldr	r3, [r3, #8]
 8008a8c:	011b      	lsls	r3, r3, #4
 8008a8e:	697a      	ldr	r2, [r7, #20]
 8008a90:	4313      	orrs	r3, r2
 8008a92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	4a1d      	ldr	r2, [pc, #116]	; (8008b0c <TIM_OC2_SetConfig+0xd0>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d10d      	bne.n	8008ab8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008aa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	68db      	ldr	r3, [r3, #12]
 8008aa8:	011b      	lsls	r3, r3, #4
 8008aaa:	697a      	ldr	r2, [r7, #20]
 8008aac:	4313      	orrs	r3, r2
 8008aae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ab6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	4a14      	ldr	r2, [pc, #80]	; (8008b0c <TIM_OC2_SetConfig+0xd0>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d113      	bne.n	8008ae8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008ac6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ace:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	695b      	ldr	r3, [r3, #20]
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	693a      	ldr	r2, [r7, #16]
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	699b      	ldr	r3, [r3, #24]
 8008ae0:	009b      	lsls	r3, r3, #2
 8008ae2:	693a      	ldr	r2, [r7, #16]
 8008ae4:	4313      	orrs	r3, r2
 8008ae6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	693a      	ldr	r2, [r7, #16]
 8008aec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	68fa      	ldr	r2, [r7, #12]
 8008af2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	685a      	ldr	r2, [r3, #4]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	697a      	ldr	r2, [r7, #20]
 8008b00:	621a      	str	r2, [r3, #32]
}
 8008b02:	bf00      	nop
 8008b04:	371c      	adds	r7, #28
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bc80      	pop	{r7}
 8008b0a:	4770      	bx	lr
 8008b0c:	40012c00 	.word	0x40012c00

08008b10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b087      	sub	sp, #28
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6a1b      	ldr	r3, [r3, #32]
 8008b1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6a1b      	ldr	r3, [r3, #32]
 8008b24:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	69db      	ldr	r3, [r3, #28]
 8008b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f023 0303 	bic.w	r3, r3, #3
 8008b46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	68fa      	ldr	r2, [r7, #12]
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008b58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	689b      	ldr	r3, [r3, #8]
 8008b5e:	021b      	lsls	r3, r3, #8
 8008b60:	697a      	ldr	r2, [r7, #20]
 8008b62:	4313      	orrs	r3, r2
 8008b64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	4a1d      	ldr	r2, [pc, #116]	; (8008be0 <TIM_OC3_SetConfig+0xd0>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d10d      	bne.n	8008b8a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	68db      	ldr	r3, [r3, #12]
 8008b7a:	021b      	lsls	r3, r3, #8
 8008b7c:	697a      	ldr	r2, [r7, #20]
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	4a14      	ldr	r2, [pc, #80]	; (8008be0 <TIM_OC3_SetConfig+0xd0>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d113      	bne.n	8008bba <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ba0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	695b      	ldr	r3, [r3, #20]
 8008ba6:	011b      	lsls	r3, r3, #4
 8008ba8:	693a      	ldr	r2, [r7, #16]
 8008baa:	4313      	orrs	r3, r2
 8008bac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	699b      	ldr	r3, [r3, #24]
 8008bb2:	011b      	lsls	r3, r3, #4
 8008bb4:	693a      	ldr	r2, [r7, #16]
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	693a      	ldr	r2, [r7, #16]
 8008bbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	68fa      	ldr	r2, [r7, #12]
 8008bc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	685a      	ldr	r2, [r3, #4]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	697a      	ldr	r2, [r7, #20]
 8008bd2:	621a      	str	r2, [r3, #32]
}
 8008bd4:	bf00      	nop
 8008bd6:	371c      	adds	r7, #28
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bc80      	pop	{r7}
 8008bdc:	4770      	bx	lr
 8008bde:	bf00      	nop
 8008be0:	40012c00 	.word	0x40012c00

08008be4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b087      	sub	sp, #28
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6a1b      	ldr	r3, [r3, #32]
 8008bf2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6a1b      	ldr	r3, [r3, #32]
 8008bf8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	69db      	ldr	r3, [r3, #28]
 8008c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	021b      	lsls	r3, r3, #8
 8008c22:	68fa      	ldr	r2, [r7, #12]
 8008c24:	4313      	orrs	r3, r2
 8008c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008c2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	689b      	ldr	r3, [r3, #8]
 8008c34:	031b      	lsls	r3, r3, #12
 8008c36:	693a      	ldr	r2, [r7, #16]
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	4a0f      	ldr	r2, [pc, #60]	; (8008c7c <TIM_OC4_SetConfig+0x98>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d109      	bne.n	8008c58 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	695b      	ldr	r3, [r3, #20]
 8008c50:	019b      	lsls	r3, r3, #6
 8008c52:	697a      	ldr	r2, [r7, #20]
 8008c54:	4313      	orrs	r3, r2
 8008c56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	697a      	ldr	r2, [r7, #20]
 8008c5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	68fa      	ldr	r2, [r7, #12]
 8008c62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	685a      	ldr	r2, [r3, #4]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	693a      	ldr	r2, [r7, #16]
 8008c70:	621a      	str	r2, [r3, #32]
}
 8008c72:	bf00      	nop
 8008c74:	371c      	adds	r7, #28
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bc80      	pop	{r7}
 8008c7a:	4770      	bx	lr
 8008c7c:	40012c00 	.word	0x40012c00

08008c80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b087      	sub	sp, #28
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	60b9      	str	r1, [r7, #8]
 8008c8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	6a1b      	ldr	r3, [r3, #32]
 8008c90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	6a1b      	ldr	r3, [r3, #32]
 8008c96:	f023 0201 	bic.w	r2, r3, #1
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	699b      	ldr	r3, [r3, #24]
 8008ca2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008caa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	011b      	lsls	r3, r3, #4
 8008cb0:	693a      	ldr	r2, [r7, #16]
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	f023 030a 	bic.w	r3, r3, #10
 8008cbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008cbe:	697a      	ldr	r2, [r7, #20]
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	693a      	ldr	r2, [r7, #16]
 8008cca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	697a      	ldr	r2, [r7, #20]
 8008cd0:	621a      	str	r2, [r3, #32]
}
 8008cd2:	bf00      	nop
 8008cd4:	371c      	adds	r7, #28
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bc80      	pop	{r7}
 8008cda:	4770      	bx	lr

08008cdc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b087      	sub	sp, #28
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	60f8      	str	r0, [r7, #12]
 8008ce4:	60b9      	str	r1, [r7, #8]
 8008ce6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	6a1b      	ldr	r3, [r3, #32]
 8008cec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	6a1b      	ldr	r3, [r3, #32]
 8008cf2:	f023 0210 	bic.w	r2, r3, #16
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	699b      	ldr	r3, [r3, #24]
 8008cfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008d06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	031b      	lsls	r3, r3, #12
 8008d0c:	693a      	ldr	r2, [r7, #16]
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008d18:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	011b      	lsls	r3, r3, #4
 8008d1e:	697a      	ldr	r2, [r7, #20]
 8008d20:	4313      	orrs	r3, r2
 8008d22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	693a      	ldr	r2, [r7, #16]
 8008d28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	697a      	ldr	r2, [r7, #20]
 8008d2e:	621a      	str	r2, [r3, #32]
}
 8008d30:	bf00      	nop
 8008d32:	371c      	adds	r7, #28
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bc80      	pop	{r7}
 8008d38:	4770      	bx	lr

08008d3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008d3a:	b480      	push	{r7}
 8008d3c:	b085      	sub	sp, #20
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]
 8008d42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008d52:	683a      	ldr	r2, [r7, #0]
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	4313      	orrs	r3, r2
 8008d58:	f043 0307 	orr.w	r3, r3, #7
 8008d5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	68fa      	ldr	r2, [r7, #12]
 8008d62:	609a      	str	r2, [r3, #8]
}
 8008d64:	bf00      	nop
 8008d66:	3714      	adds	r7, #20
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bc80      	pop	{r7}
 8008d6c:	4770      	bx	lr

08008d6e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008d6e:	b480      	push	{r7}
 8008d70:	b087      	sub	sp, #28
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	60f8      	str	r0, [r7, #12]
 8008d76:	60b9      	str	r1, [r7, #8]
 8008d78:	607a      	str	r2, [r7, #4]
 8008d7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	689b      	ldr	r3, [r3, #8]
 8008d80:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d88:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	021a      	lsls	r2, r3, #8
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	431a      	orrs	r2, r3
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	4313      	orrs	r3, r2
 8008d96:	697a      	ldr	r2, [r7, #20]
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	697a      	ldr	r2, [r7, #20]
 8008da0:	609a      	str	r2, [r3, #8]
}
 8008da2:	bf00      	nop
 8008da4:	371c      	adds	r7, #28
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bc80      	pop	{r7}
 8008daa:	4770      	bx	lr

08008dac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b087      	sub	sp, #28
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	60f8      	str	r0, [r7, #12]
 8008db4:	60b9      	str	r1, [r7, #8]
 8008db6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	f003 031f 	and.w	r3, r3, #31
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8008dc4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	6a1a      	ldr	r2, [r3, #32]
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	43db      	mvns	r3, r3
 8008dce:	401a      	ands	r2, r3
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	6a1a      	ldr	r2, [r3, #32]
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	f003 031f 	and.w	r3, r3, #31
 8008dde:	6879      	ldr	r1, [r7, #4]
 8008de0:	fa01 f303 	lsl.w	r3, r1, r3
 8008de4:	431a      	orrs	r2, r3
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	621a      	str	r2, [r3, #32]
}
 8008dea:	bf00      	nop
 8008dec:	371c      	adds	r7, #28
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bc80      	pop	{r7}
 8008df2:	4770      	bx	lr

08008df4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b085      	sub	sp, #20
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d101      	bne.n	8008e0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e08:	2302      	movs	r3, #2
 8008e0a:	e046      	b.n	8008e9a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2201      	movs	r2, #1
 8008e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2202      	movs	r2, #2
 8008e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	689b      	ldr	r3, [r3, #8]
 8008e2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	68fa      	ldr	r2, [r7, #12]
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	68fa      	ldr	r2, [r7, #12]
 8008e44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a16      	ldr	r2, [pc, #88]	; (8008ea4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d00e      	beq.n	8008e6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e58:	d009      	beq.n	8008e6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4a12      	ldr	r2, [pc, #72]	; (8008ea8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d004      	beq.n	8008e6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4a10      	ldr	r2, [pc, #64]	; (8008eac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d10c      	bne.n	8008e88 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	68ba      	ldr	r2, [r7, #8]
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	68ba      	ldr	r2, [r7, #8]
 8008e86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2200      	movs	r2, #0
 8008e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e98:	2300      	movs	r3, #0
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3714      	adds	r7, #20
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bc80      	pop	{r7}
 8008ea2:	4770      	bx	lr
 8008ea4:	40012c00 	.word	0x40012c00
 8008ea8:	40000400 	.word	0x40000400
 8008eac:	40000800 	.word	0x40000800

08008eb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b083      	sub	sp, #12
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008eb8:	bf00      	nop
 8008eba:	370c      	adds	r7, #12
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bc80      	pop	{r7}
 8008ec0:	4770      	bx	lr

08008ec2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ec2:	b480      	push	{r7}
 8008ec4:	b083      	sub	sp, #12
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008eca:	bf00      	nop
 8008ecc:	370c      	adds	r7, #12
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bc80      	pop	{r7}
 8008ed2:	4770      	bx	lr

08008ed4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b082      	sub	sp, #8
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d101      	bne.n	8008ee6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	e042      	b.n	8008f6c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008eec:	b2db      	uxtb	r3, r3
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d106      	bne.n	8008f00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f7fc fd12 	bl	8005924 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2224      	movs	r2, #36	; 0x24
 8008f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	68da      	ldr	r2, [r3, #12]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008f16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 fdc5 	bl	8009aa8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	691a      	ldr	r2, [r3, #16]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008f2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	695a      	ldr	r2, [r3, #20]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008f3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	68da      	ldr	r2, [r3, #12]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008f4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2200      	movs	r2, #0
 8008f52:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2220      	movs	r2, #32
 8008f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2220      	movs	r2, #32
 8008f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2200      	movs	r2, #0
 8008f68:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008f6a:	2300      	movs	r3, #0
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3708      	adds	r7, #8
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b08a      	sub	sp, #40	; 0x28
 8008f78:	af02      	add	r7, sp, #8
 8008f7a:	60f8      	str	r0, [r7, #12]
 8008f7c:	60b9      	str	r1, [r7, #8]
 8008f7e:	603b      	str	r3, [r7, #0]
 8008f80:	4613      	mov	r3, r2
 8008f82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008f84:	2300      	movs	r3, #0
 8008f86:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f8e:	b2db      	uxtb	r3, r3
 8008f90:	2b20      	cmp	r3, #32
 8008f92:	d16d      	bne.n	8009070 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d002      	beq.n	8008fa0 <HAL_UART_Transmit+0x2c>
 8008f9a:	88fb      	ldrh	r3, [r7, #6]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d101      	bne.n	8008fa4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	e066      	b.n	8009072 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	2221      	movs	r2, #33	; 0x21
 8008fae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008fb2:	f7fc fe03 	bl	8005bbc <HAL_GetTick>
 8008fb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	88fa      	ldrh	r2, [r7, #6]
 8008fbc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	88fa      	ldrh	r2, [r7, #6]
 8008fc2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	689b      	ldr	r3, [r3, #8]
 8008fc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fcc:	d108      	bne.n	8008fe0 <HAL_UART_Transmit+0x6c>
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	691b      	ldr	r3, [r3, #16]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d104      	bne.n	8008fe0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	61bb      	str	r3, [r7, #24]
 8008fde:	e003      	b.n	8008fe8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008fe8:	e02a      	b.n	8009040 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	9300      	str	r3, [sp, #0]
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	2180      	movs	r1, #128	; 0x80
 8008ff4:	68f8      	ldr	r0, [r7, #12]
 8008ff6:	f000 fb14 	bl	8009622 <UART_WaitOnFlagUntilTimeout>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d001      	beq.n	8009004 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8009000:	2303      	movs	r3, #3
 8009002:	e036      	b.n	8009072 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8009004:	69fb      	ldr	r3, [r7, #28]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d10b      	bne.n	8009022 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800900a:	69bb      	ldr	r3, [r7, #24]
 800900c:	881b      	ldrh	r3, [r3, #0]
 800900e:	461a      	mov	r2, r3
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009018:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800901a:	69bb      	ldr	r3, [r7, #24]
 800901c:	3302      	adds	r3, #2
 800901e:	61bb      	str	r3, [r7, #24]
 8009020:	e007      	b.n	8009032 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009022:	69fb      	ldr	r3, [r7, #28]
 8009024:	781a      	ldrb	r2, [r3, #0]
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800902c:	69fb      	ldr	r3, [r7, #28]
 800902e:	3301      	adds	r3, #1
 8009030:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009036:	b29b      	uxth	r3, r3
 8009038:	3b01      	subs	r3, #1
 800903a:	b29a      	uxth	r2, r3
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009044:	b29b      	uxth	r3, r3
 8009046:	2b00      	cmp	r3, #0
 8009048:	d1cf      	bne.n	8008fea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	9300      	str	r3, [sp, #0]
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	2200      	movs	r2, #0
 8009052:	2140      	movs	r1, #64	; 0x40
 8009054:	68f8      	ldr	r0, [r7, #12]
 8009056:	f000 fae4 	bl	8009622 <UART_WaitOnFlagUntilTimeout>
 800905a:	4603      	mov	r3, r0
 800905c:	2b00      	cmp	r3, #0
 800905e:	d001      	beq.n	8009064 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8009060:	2303      	movs	r3, #3
 8009062:	e006      	b.n	8009072 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2220      	movs	r2, #32
 8009068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800906c:	2300      	movs	r3, #0
 800906e:	e000      	b.n	8009072 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8009070:	2302      	movs	r3, #2
  }
}
 8009072:	4618      	mov	r0, r3
 8009074:	3720      	adds	r7, #32
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}

0800907a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800907a:	b580      	push	{r7, lr}
 800907c:	b084      	sub	sp, #16
 800907e:	af00      	add	r7, sp, #0
 8009080:	60f8      	str	r0, [r7, #12]
 8009082:	60b9      	str	r1, [r7, #8]
 8009084:	4613      	mov	r3, r2
 8009086:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800908e:	b2db      	uxtb	r3, r3
 8009090:	2b20      	cmp	r3, #32
 8009092:	d112      	bne.n	80090ba <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d002      	beq.n	80090a0 <HAL_UART_Receive_IT+0x26>
 800909a:	88fb      	ldrh	r3, [r7, #6]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d101      	bne.n	80090a4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80090a0:	2301      	movs	r3, #1
 80090a2:	e00b      	b.n	80090bc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2200      	movs	r2, #0
 80090a8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80090aa:	88fb      	ldrh	r3, [r7, #6]
 80090ac:	461a      	mov	r2, r3
 80090ae:	68b9      	ldr	r1, [r7, #8]
 80090b0:	68f8      	ldr	r0, [r7, #12]
 80090b2:	f000 fb24 	bl	80096fe <UART_Start_Receive_IT>
 80090b6:	4603      	mov	r3, r0
 80090b8:	e000      	b.n	80090bc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80090ba:	2302      	movs	r3, #2
  }
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3710      	adds	r7, #16
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b0ba      	sub	sp, #232	; 0xe8
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	68db      	ldr	r3, [r3, #12]
 80090dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	695b      	ldr	r3, [r3, #20]
 80090e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80090ea:	2300      	movs	r3, #0
 80090ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80090f0:	2300      	movs	r3, #0
 80090f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80090f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090fa:	f003 030f 	and.w	r3, r3, #15
 80090fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009102:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009106:	2b00      	cmp	r3, #0
 8009108:	d10f      	bne.n	800912a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800910a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800910e:	f003 0320 	and.w	r3, r3, #32
 8009112:	2b00      	cmp	r3, #0
 8009114:	d009      	beq.n	800912a <HAL_UART_IRQHandler+0x66>
 8009116:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800911a:	f003 0320 	and.w	r3, r3, #32
 800911e:	2b00      	cmp	r3, #0
 8009120:	d003      	beq.n	800912a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 fc01 	bl	800992a <UART_Receive_IT>
      return;
 8009128:	e25b      	b.n	80095e2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800912a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800912e:	2b00      	cmp	r3, #0
 8009130:	f000 80de 	beq.w	80092f0 <HAL_UART_IRQHandler+0x22c>
 8009134:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009138:	f003 0301 	and.w	r3, r3, #1
 800913c:	2b00      	cmp	r3, #0
 800913e:	d106      	bne.n	800914e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009144:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009148:	2b00      	cmp	r3, #0
 800914a:	f000 80d1 	beq.w	80092f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800914e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009152:	f003 0301 	and.w	r3, r3, #1
 8009156:	2b00      	cmp	r3, #0
 8009158:	d00b      	beq.n	8009172 <HAL_UART_IRQHandler+0xae>
 800915a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800915e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009162:	2b00      	cmp	r3, #0
 8009164:	d005      	beq.n	8009172 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800916a:	f043 0201 	orr.w	r2, r3, #1
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009176:	f003 0304 	and.w	r3, r3, #4
 800917a:	2b00      	cmp	r3, #0
 800917c:	d00b      	beq.n	8009196 <HAL_UART_IRQHandler+0xd2>
 800917e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009182:	f003 0301 	and.w	r3, r3, #1
 8009186:	2b00      	cmp	r3, #0
 8009188:	d005      	beq.n	8009196 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800918e:	f043 0202 	orr.w	r2, r3, #2
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800919a:	f003 0302 	and.w	r3, r3, #2
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d00b      	beq.n	80091ba <HAL_UART_IRQHandler+0xf6>
 80091a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80091a6:	f003 0301 	and.w	r3, r3, #1
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d005      	beq.n	80091ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091b2:	f043 0204 	orr.w	r2, r3, #4
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80091ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091be:	f003 0308 	and.w	r3, r3, #8
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d011      	beq.n	80091ea <HAL_UART_IRQHandler+0x126>
 80091c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091ca:	f003 0320 	and.w	r3, r3, #32
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d105      	bne.n	80091de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80091d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80091d6:	f003 0301 	and.w	r3, r3, #1
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d005      	beq.n	80091ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091e2:	f043 0208 	orr.w	r2, r3, #8
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	f000 81f2 	beq.w	80095d8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80091f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091f8:	f003 0320 	and.w	r3, r3, #32
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d008      	beq.n	8009212 <HAL_UART_IRQHandler+0x14e>
 8009200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009204:	f003 0320 	and.w	r3, r3, #32
 8009208:	2b00      	cmp	r3, #0
 800920a:	d002      	beq.n	8009212 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f000 fb8c 	bl	800992a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	695b      	ldr	r3, [r3, #20]
 8009218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800921c:	2b00      	cmp	r3, #0
 800921e:	bf14      	ite	ne
 8009220:	2301      	movne	r3, #1
 8009222:	2300      	moveq	r3, #0
 8009224:	b2db      	uxtb	r3, r3
 8009226:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800922e:	f003 0308 	and.w	r3, r3, #8
 8009232:	2b00      	cmp	r3, #0
 8009234:	d103      	bne.n	800923e <HAL_UART_IRQHandler+0x17a>
 8009236:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800923a:	2b00      	cmp	r3, #0
 800923c:	d04f      	beq.n	80092de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 fa96 	bl	8009770 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	695b      	ldr	r3, [r3, #20]
 800924a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800924e:	2b00      	cmp	r3, #0
 8009250:	d041      	beq.n	80092d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	3314      	adds	r3, #20
 8009258:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800925c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009260:	e853 3f00 	ldrex	r3, [r3]
 8009264:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009268:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800926c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009270:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	3314      	adds	r3, #20
 800927a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800927e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009282:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009286:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800928a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800928e:	e841 2300 	strex	r3, r2, [r1]
 8009292:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009296:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800929a:	2b00      	cmp	r3, #0
 800929c:	d1d9      	bne.n	8009252 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d013      	beq.n	80092ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092aa:	4a7e      	ldr	r2, [pc, #504]	; (80094a4 <HAL_UART_IRQHandler+0x3e0>)
 80092ac:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092b2:	4618      	mov	r0, r3
 80092b4:	f7fc fdd4 	bl	8005e60 <HAL_DMA_Abort_IT>
 80092b8:	4603      	mov	r3, r0
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d016      	beq.n	80092ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092c4:	687a      	ldr	r2, [r7, #4]
 80092c6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80092c8:	4610      	mov	r0, r2
 80092ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092cc:	e00e      	b.n	80092ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 f993 	bl	80095fa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092d4:	e00a      	b.n	80092ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 f98f 	bl	80095fa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092dc:	e006      	b.n	80092ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f000 f98b 	bl	80095fa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2200      	movs	r2, #0
 80092e8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80092ea:	e175      	b.n	80095d8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092ec:	bf00      	nop
    return;
 80092ee:	e173      	b.n	80095d8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092f4:	2b01      	cmp	r3, #1
 80092f6:	f040 814f 	bne.w	8009598 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80092fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092fe:	f003 0310 	and.w	r3, r3, #16
 8009302:	2b00      	cmp	r3, #0
 8009304:	f000 8148 	beq.w	8009598 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800930c:	f003 0310 	and.w	r3, r3, #16
 8009310:	2b00      	cmp	r3, #0
 8009312:	f000 8141 	beq.w	8009598 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009316:	2300      	movs	r3, #0
 8009318:	60bb      	str	r3, [r7, #8]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	60bb      	str	r3, [r7, #8]
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	60bb      	str	r3, [r7, #8]
 800932a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	695b      	ldr	r3, [r3, #20]
 8009332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009336:	2b00      	cmp	r3, #0
 8009338:	f000 80b6 	beq.w	80094a8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	685b      	ldr	r3, [r3, #4]
 8009344:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009348:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800934c:	2b00      	cmp	r3, #0
 800934e:	f000 8145 	beq.w	80095dc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009356:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800935a:	429a      	cmp	r2, r3
 800935c:	f080 813e 	bcs.w	80095dc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009366:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800936c:	699b      	ldr	r3, [r3, #24]
 800936e:	2b20      	cmp	r3, #32
 8009370:	f000 8088 	beq.w	8009484 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	330c      	adds	r3, #12
 800937a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800937e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009382:	e853 3f00 	ldrex	r3, [r3]
 8009386:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800938a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800938e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009392:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	330c      	adds	r3, #12
 800939c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80093a0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80093a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80093ac:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80093b0:	e841 2300 	strex	r3, r2, [r1]
 80093b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80093b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d1d9      	bne.n	8009374 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	3314      	adds	r3, #20
 80093c6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80093ca:	e853 3f00 	ldrex	r3, [r3]
 80093ce:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80093d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80093d2:	f023 0301 	bic.w	r3, r3, #1
 80093d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	3314      	adds	r3, #20
 80093e0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80093e4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80093e8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ea:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80093ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80093f0:	e841 2300 	strex	r3, r2, [r1]
 80093f4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80093f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d1e1      	bne.n	80093c0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	3314      	adds	r3, #20
 8009402:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009404:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009406:	e853 3f00 	ldrex	r3, [r3]
 800940a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800940c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800940e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009412:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	3314      	adds	r3, #20
 800941c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009420:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009422:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009424:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009426:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009428:	e841 2300 	strex	r3, r2, [r1]
 800942c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800942e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009430:	2b00      	cmp	r3, #0
 8009432:	d1e3      	bne.n	80093fc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2220      	movs	r2, #32
 8009438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2200      	movs	r2, #0
 8009440:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	330c      	adds	r3, #12
 8009448:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800944a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800944c:	e853 3f00 	ldrex	r3, [r3]
 8009450:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009452:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009454:	f023 0310 	bic.w	r3, r3, #16
 8009458:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	330c      	adds	r3, #12
 8009462:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009466:	65ba      	str	r2, [r7, #88]	; 0x58
 8009468:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800946a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800946c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800946e:	e841 2300 	strex	r3, r2, [r1]
 8009472:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009474:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009476:	2b00      	cmp	r3, #0
 8009478:	d1e3      	bne.n	8009442 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800947e:	4618      	mov	r0, r3
 8009480:	f7fc fcb3 	bl	8005dea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2202      	movs	r2, #2
 8009488:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009492:	b29b      	uxth	r3, r3
 8009494:	1ad3      	subs	r3, r2, r3
 8009496:	b29b      	uxth	r3, r3
 8009498:	4619      	mov	r1, r3
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 f8b6 	bl	800960c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80094a0:	e09c      	b.n	80095dc <HAL_UART_IRQHandler+0x518>
 80094a2:	bf00      	nop
 80094a4:	08009835 	.word	0x08009835
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	1ad3      	subs	r3, r2, r3
 80094b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80094bc:	b29b      	uxth	r3, r3
 80094be:	2b00      	cmp	r3, #0
 80094c0:	f000 808e 	beq.w	80095e0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80094c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	f000 8089 	beq.w	80095e0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	330c      	adds	r3, #12
 80094d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094d8:	e853 3f00 	ldrex	r3, [r3]
 80094dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80094de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80094e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	330c      	adds	r3, #12
 80094ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80094f2:	647a      	str	r2, [r7, #68]	; 0x44
 80094f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80094f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80094fa:	e841 2300 	strex	r3, r2, [r1]
 80094fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009502:	2b00      	cmp	r3, #0
 8009504:	d1e3      	bne.n	80094ce <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	3314      	adds	r3, #20
 800950c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800950e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009510:	e853 3f00 	ldrex	r3, [r3]
 8009514:	623b      	str	r3, [r7, #32]
   return(result);
 8009516:	6a3b      	ldr	r3, [r7, #32]
 8009518:	f023 0301 	bic.w	r3, r3, #1
 800951c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	3314      	adds	r3, #20
 8009526:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800952a:	633a      	str	r2, [r7, #48]	; 0x30
 800952c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800952e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009532:	e841 2300 	strex	r3, r2, [r1]
 8009536:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800953a:	2b00      	cmp	r3, #0
 800953c:	d1e3      	bne.n	8009506 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2220      	movs	r2, #32
 8009542:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2200      	movs	r2, #0
 800954a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	330c      	adds	r3, #12
 8009552:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	e853 3f00 	ldrex	r3, [r3]
 800955a:	60fb      	str	r3, [r7, #12]
   return(result);
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f023 0310 	bic.w	r3, r3, #16
 8009562:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	330c      	adds	r3, #12
 800956c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009570:	61fa      	str	r2, [r7, #28]
 8009572:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009574:	69b9      	ldr	r1, [r7, #24]
 8009576:	69fa      	ldr	r2, [r7, #28]
 8009578:	e841 2300 	strex	r3, r2, [r1]
 800957c:	617b      	str	r3, [r7, #20]
   return(result);
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d1e3      	bne.n	800954c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2202      	movs	r2, #2
 8009588:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800958a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800958e:	4619      	mov	r1, r3
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 f83b 	bl	800960c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009596:	e023      	b.n	80095e0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800959c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d009      	beq.n	80095b8 <HAL_UART_IRQHandler+0x4f4>
 80095a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d003      	beq.n	80095b8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f000 f953 	bl	800985c <UART_Transmit_IT>
    return;
 80095b6:	e014      	b.n	80095e2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80095b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d00e      	beq.n	80095e2 <HAL_UART_IRQHandler+0x51e>
 80095c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d008      	beq.n	80095e2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f000 f992 	bl	80098fa <UART_EndTransmit_IT>
    return;
 80095d6:	e004      	b.n	80095e2 <HAL_UART_IRQHandler+0x51e>
    return;
 80095d8:	bf00      	nop
 80095da:	e002      	b.n	80095e2 <HAL_UART_IRQHandler+0x51e>
      return;
 80095dc:	bf00      	nop
 80095de:	e000      	b.n	80095e2 <HAL_UART_IRQHandler+0x51e>
      return;
 80095e0:	bf00      	nop
  }
}
 80095e2:	37e8      	adds	r7, #232	; 0xe8
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b083      	sub	sp, #12
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80095f0:	bf00      	nop
 80095f2:	370c      	adds	r7, #12
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bc80      	pop	{r7}
 80095f8:	4770      	bx	lr

080095fa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80095fa:	b480      	push	{r7}
 80095fc:	b083      	sub	sp, #12
 80095fe:	af00      	add	r7, sp, #0
 8009600:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009602:	bf00      	nop
 8009604:	370c      	adds	r7, #12
 8009606:	46bd      	mov	sp, r7
 8009608:	bc80      	pop	{r7}
 800960a:	4770      	bx	lr

0800960c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800960c:	b480      	push	{r7}
 800960e:	b083      	sub	sp, #12
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	460b      	mov	r3, r1
 8009616:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009618:	bf00      	nop
 800961a:	370c      	adds	r7, #12
 800961c:	46bd      	mov	sp, r7
 800961e:	bc80      	pop	{r7}
 8009620:	4770      	bx	lr

08009622 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009622:	b580      	push	{r7, lr}
 8009624:	b090      	sub	sp, #64	; 0x40
 8009626:	af00      	add	r7, sp, #0
 8009628:	60f8      	str	r0, [r7, #12]
 800962a:	60b9      	str	r1, [r7, #8]
 800962c:	603b      	str	r3, [r7, #0]
 800962e:	4613      	mov	r3, r2
 8009630:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009632:	e050      	b.n	80096d6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009634:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800963a:	d04c      	beq.n	80096d6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800963c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800963e:	2b00      	cmp	r3, #0
 8009640:	d007      	beq.n	8009652 <UART_WaitOnFlagUntilTimeout+0x30>
 8009642:	f7fc fabb 	bl	8005bbc <HAL_GetTick>
 8009646:	4602      	mov	r2, r0
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	1ad3      	subs	r3, r2, r3
 800964c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800964e:	429a      	cmp	r2, r3
 8009650:	d241      	bcs.n	80096d6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	330c      	adds	r3, #12
 8009658:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800965a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800965c:	e853 3f00 	ldrex	r3, [r3]
 8009660:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009664:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009668:	63fb      	str	r3, [r7, #60]	; 0x3c
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	330c      	adds	r3, #12
 8009670:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009672:	637a      	str	r2, [r7, #52]	; 0x34
 8009674:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009676:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009678:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800967a:	e841 2300 	strex	r3, r2, [r1]
 800967e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009682:	2b00      	cmp	r3, #0
 8009684:	d1e5      	bne.n	8009652 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	3314      	adds	r3, #20
 800968c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	e853 3f00 	ldrex	r3, [r3]
 8009694:	613b      	str	r3, [r7, #16]
   return(result);
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	f023 0301 	bic.w	r3, r3, #1
 800969c:	63bb      	str	r3, [r7, #56]	; 0x38
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	3314      	adds	r3, #20
 80096a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80096a6:	623a      	str	r2, [r7, #32]
 80096a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096aa:	69f9      	ldr	r1, [r7, #28]
 80096ac:	6a3a      	ldr	r2, [r7, #32]
 80096ae:	e841 2300 	strex	r3, r2, [r1]
 80096b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80096b4:	69bb      	ldr	r3, [r7, #24]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d1e5      	bne.n	8009686 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	2220      	movs	r2, #32
 80096be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	2220      	movs	r2, #32
 80096c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	2200      	movs	r2, #0
 80096ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80096d2:	2303      	movs	r3, #3
 80096d4:	e00f      	b.n	80096f6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	681a      	ldr	r2, [r3, #0]
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	4013      	ands	r3, r2
 80096e0:	68ba      	ldr	r2, [r7, #8]
 80096e2:	429a      	cmp	r2, r3
 80096e4:	bf0c      	ite	eq
 80096e6:	2301      	moveq	r3, #1
 80096e8:	2300      	movne	r3, #0
 80096ea:	b2db      	uxtb	r3, r3
 80096ec:	461a      	mov	r2, r3
 80096ee:	79fb      	ldrb	r3, [r7, #7]
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d09f      	beq.n	8009634 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80096f4:	2300      	movs	r3, #0
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3740      	adds	r7, #64	; 0x40
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}

080096fe <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80096fe:	b480      	push	{r7}
 8009700:	b085      	sub	sp, #20
 8009702:	af00      	add	r7, sp, #0
 8009704:	60f8      	str	r0, [r7, #12]
 8009706:	60b9      	str	r1, [r7, #8]
 8009708:	4613      	mov	r3, r2
 800970a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	68ba      	ldr	r2, [r7, #8]
 8009710:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	88fa      	ldrh	r2, [r7, #6]
 8009716:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	88fa      	ldrh	r2, [r7, #6]
 800971c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	2200      	movs	r2, #0
 8009722:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2222      	movs	r2, #34	; 0x22
 8009728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	691b      	ldr	r3, [r3, #16]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d007      	beq.n	8009744 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	68da      	ldr	r2, [r3, #12]
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009742:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	695a      	ldr	r2, [r3, #20]
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f042 0201 	orr.w	r2, r2, #1
 8009752:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	68da      	ldr	r2, [r3, #12]
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f042 0220 	orr.w	r2, r2, #32
 8009762:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009764:	2300      	movs	r3, #0
}
 8009766:	4618      	mov	r0, r3
 8009768:	3714      	adds	r7, #20
 800976a:	46bd      	mov	sp, r7
 800976c:	bc80      	pop	{r7}
 800976e:	4770      	bx	lr

08009770 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009770:	b480      	push	{r7}
 8009772:	b095      	sub	sp, #84	; 0x54
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	330c      	adds	r3, #12
 800977e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009782:	e853 3f00 	ldrex	r3, [r3]
 8009786:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800978a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800978e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	330c      	adds	r3, #12
 8009796:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009798:	643a      	str	r2, [r7, #64]	; 0x40
 800979a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800979c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800979e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80097a0:	e841 2300 	strex	r3, r2, [r1]
 80097a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80097a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d1e5      	bne.n	8009778 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	3314      	adds	r3, #20
 80097b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b4:	6a3b      	ldr	r3, [r7, #32]
 80097b6:	e853 3f00 	ldrex	r3, [r3]
 80097ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80097bc:	69fb      	ldr	r3, [r7, #28]
 80097be:	f023 0301 	bic.w	r3, r3, #1
 80097c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	3314      	adds	r3, #20
 80097ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80097cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80097ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80097d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097d4:	e841 2300 	strex	r3, r2, [r1]
 80097d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80097da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d1e5      	bne.n	80097ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097e4:	2b01      	cmp	r3, #1
 80097e6:	d119      	bne.n	800981c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	330c      	adds	r3, #12
 80097ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	e853 3f00 	ldrex	r3, [r3]
 80097f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	f023 0310 	bic.w	r3, r3, #16
 80097fe:	647b      	str	r3, [r7, #68]	; 0x44
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	330c      	adds	r3, #12
 8009806:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009808:	61ba      	str	r2, [r7, #24]
 800980a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800980c:	6979      	ldr	r1, [r7, #20]
 800980e:	69ba      	ldr	r2, [r7, #24]
 8009810:	e841 2300 	strex	r3, r2, [r1]
 8009814:	613b      	str	r3, [r7, #16]
   return(result);
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d1e5      	bne.n	80097e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2220      	movs	r2, #32
 8009820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2200      	movs	r2, #0
 8009828:	631a      	str	r2, [r3, #48]	; 0x30
}
 800982a:	bf00      	nop
 800982c:	3754      	adds	r7, #84	; 0x54
 800982e:	46bd      	mov	sp, r7
 8009830:	bc80      	pop	{r7}
 8009832:	4770      	bx	lr

08009834 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b084      	sub	sp, #16
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009840:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	2200      	movs	r2, #0
 8009846:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2200      	movs	r2, #0
 800984c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800984e:	68f8      	ldr	r0, [r7, #12]
 8009850:	f7ff fed3 	bl	80095fa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009854:	bf00      	nop
 8009856:	3710      	adds	r7, #16
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}

0800985c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800985c:	b480      	push	{r7}
 800985e:	b085      	sub	sp, #20
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800986a:	b2db      	uxtb	r3, r3
 800986c:	2b21      	cmp	r3, #33	; 0x21
 800986e:	d13e      	bne.n	80098ee <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	689b      	ldr	r3, [r3, #8]
 8009874:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009878:	d114      	bne.n	80098a4 <UART_Transmit_IT+0x48>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	691b      	ldr	r3, [r3, #16]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d110      	bne.n	80098a4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6a1b      	ldr	r3, [r3, #32]
 8009886:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	881b      	ldrh	r3, [r3, #0]
 800988c:	461a      	mov	r2, r3
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009896:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6a1b      	ldr	r3, [r3, #32]
 800989c:	1c9a      	adds	r2, r3, #2
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	621a      	str	r2, [r3, #32]
 80098a2:	e008      	b.n	80098b6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6a1b      	ldr	r3, [r3, #32]
 80098a8:	1c59      	adds	r1, r3, #1
 80098aa:	687a      	ldr	r2, [r7, #4]
 80098ac:	6211      	str	r1, [r2, #32]
 80098ae:	781a      	ldrb	r2, [r3, #0]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80098ba:	b29b      	uxth	r3, r3
 80098bc:	3b01      	subs	r3, #1
 80098be:	b29b      	uxth	r3, r3
 80098c0:	687a      	ldr	r2, [r7, #4]
 80098c2:	4619      	mov	r1, r3
 80098c4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d10f      	bne.n	80098ea <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	68da      	ldr	r2, [r3, #12]
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80098d8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	68da      	ldr	r2, [r3, #12]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80098e8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80098ea:	2300      	movs	r3, #0
 80098ec:	e000      	b.n	80098f0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80098ee:	2302      	movs	r3, #2
  }
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	3714      	adds	r7, #20
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bc80      	pop	{r7}
 80098f8:	4770      	bx	lr

080098fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80098fa:	b580      	push	{r7, lr}
 80098fc:	b082      	sub	sp, #8
 80098fe:	af00      	add	r7, sp, #0
 8009900:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	68da      	ldr	r2, [r3, #12]
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009910:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2220      	movs	r2, #32
 8009916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f7ff fe64 	bl	80095e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009920:	2300      	movs	r3, #0
}
 8009922:	4618      	mov	r0, r3
 8009924:	3708      	adds	r7, #8
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}

0800992a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800992a:	b580      	push	{r7, lr}
 800992c:	b08c      	sub	sp, #48	; 0x30
 800992e:	af00      	add	r7, sp, #0
 8009930:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009938:	b2db      	uxtb	r3, r3
 800993a:	2b22      	cmp	r3, #34	; 0x22
 800993c:	f040 80ae 	bne.w	8009a9c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	689b      	ldr	r3, [r3, #8]
 8009944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009948:	d117      	bne.n	800997a <UART_Receive_IT+0x50>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	691b      	ldr	r3, [r3, #16]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d113      	bne.n	800997a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009952:	2300      	movs	r3, #0
 8009954:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800995a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	b29b      	uxth	r3, r3
 8009964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009968:	b29a      	uxth	r2, r3
 800996a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800996c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009972:	1c9a      	adds	r2, r3, #2
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	629a      	str	r2, [r3, #40]	; 0x28
 8009978:	e026      	b.n	80099c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800997e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009980:	2300      	movs	r3, #0
 8009982:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	689b      	ldr	r3, [r3, #8]
 8009988:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800998c:	d007      	beq.n	800999e <UART_Receive_IT+0x74>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	689b      	ldr	r3, [r3, #8]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d10a      	bne.n	80099ac <UART_Receive_IT+0x82>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	691b      	ldr	r3, [r3, #16]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d106      	bne.n	80099ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	685b      	ldr	r3, [r3, #4]
 80099a4:	b2da      	uxtb	r2, r3
 80099a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099a8:	701a      	strb	r2, [r3, #0]
 80099aa:	e008      	b.n	80099be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	685b      	ldr	r3, [r3, #4]
 80099b2:	b2db      	uxtb	r3, r3
 80099b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099b8:	b2da      	uxtb	r2, r3
 80099ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099c2:	1c5a      	adds	r2, r3, #1
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	3b01      	subs	r3, #1
 80099d0:	b29b      	uxth	r3, r3
 80099d2:	687a      	ldr	r2, [r7, #4]
 80099d4:	4619      	mov	r1, r3
 80099d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d15d      	bne.n	8009a98 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	68da      	ldr	r2, [r3, #12]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f022 0220 	bic.w	r2, r2, #32
 80099ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	68da      	ldr	r2, [r3, #12]
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80099fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	695a      	ldr	r2, [r3, #20]
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f022 0201 	bic.w	r2, r2, #1
 8009a0a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2220      	movs	r2, #32
 8009a10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2200      	movs	r2, #0
 8009a18:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a1e:	2b01      	cmp	r3, #1
 8009a20:	d135      	bne.n	8009a8e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2200      	movs	r2, #0
 8009a26:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	330c      	adds	r3, #12
 8009a2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a30:	697b      	ldr	r3, [r7, #20]
 8009a32:	e853 3f00 	ldrex	r3, [r3]
 8009a36:	613b      	str	r3, [r7, #16]
   return(result);
 8009a38:	693b      	ldr	r3, [r7, #16]
 8009a3a:	f023 0310 	bic.w	r3, r3, #16
 8009a3e:	627b      	str	r3, [r7, #36]	; 0x24
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	330c      	adds	r3, #12
 8009a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a48:	623a      	str	r2, [r7, #32]
 8009a4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a4c:	69f9      	ldr	r1, [r7, #28]
 8009a4e:	6a3a      	ldr	r2, [r7, #32]
 8009a50:	e841 2300 	strex	r3, r2, [r1]
 8009a54:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a56:	69bb      	ldr	r3, [r7, #24]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d1e5      	bne.n	8009a28 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f003 0310 	and.w	r3, r3, #16
 8009a66:	2b10      	cmp	r3, #16
 8009a68:	d10a      	bne.n	8009a80 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	60fb      	str	r3, [r7, #12]
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	60fb      	str	r3, [r7, #12]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	685b      	ldr	r3, [r3, #4]
 8009a7c:	60fb      	str	r3, [r7, #12]
 8009a7e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009a84:	4619      	mov	r1, r3
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f7ff fdc0 	bl	800960c <HAL_UARTEx_RxEventCallback>
 8009a8c:	e002      	b.n	8009a94 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f7f7 feca 	bl	8001828 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009a94:	2300      	movs	r3, #0
 8009a96:	e002      	b.n	8009a9e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	e000      	b.n	8009a9e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009a9c:	2302      	movs	r3, #2
  }
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3730      	adds	r7, #48	; 0x30
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}
	...

08009aa8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b084      	sub	sp, #16
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	691b      	ldr	r3, [r3, #16]
 8009ab6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	68da      	ldr	r2, [r3, #12]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	430a      	orrs	r2, r1
 8009ac4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	689a      	ldr	r2, [r3, #8]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	691b      	ldr	r3, [r3, #16]
 8009ace:	431a      	orrs	r2, r3
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	695b      	ldr	r3, [r3, #20]
 8009ad4:	4313      	orrs	r3, r2
 8009ad6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	68db      	ldr	r3, [r3, #12]
 8009ade:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8009ae2:	f023 030c 	bic.w	r3, r3, #12
 8009ae6:	687a      	ldr	r2, [r7, #4]
 8009ae8:	6812      	ldr	r2, [r2, #0]
 8009aea:	68b9      	ldr	r1, [r7, #8]
 8009aec:	430b      	orrs	r3, r1
 8009aee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	695b      	ldr	r3, [r3, #20]
 8009af6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	699a      	ldr	r2, [r3, #24]
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	430a      	orrs	r2, r1
 8009b04:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	4a2c      	ldr	r2, [pc, #176]	; (8009bbc <UART_SetConfig+0x114>)
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d103      	bne.n	8009b18 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009b10:	f7fe f8f0 	bl	8007cf4 <HAL_RCC_GetPCLK2Freq>
 8009b14:	60f8      	str	r0, [r7, #12]
 8009b16:	e002      	b.n	8009b1e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009b18:	f7fe f8d8 	bl	8007ccc <HAL_RCC_GetPCLK1Freq>
 8009b1c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009b1e:	68fa      	ldr	r2, [r7, #12]
 8009b20:	4613      	mov	r3, r2
 8009b22:	009b      	lsls	r3, r3, #2
 8009b24:	4413      	add	r3, r2
 8009b26:	009a      	lsls	r2, r3, #2
 8009b28:	441a      	add	r2, r3
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	685b      	ldr	r3, [r3, #4]
 8009b2e:	009b      	lsls	r3, r3, #2
 8009b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b34:	4a22      	ldr	r2, [pc, #136]	; (8009bc0 <UART_SetConfig+0x118>)
 8009b36:	fba2 2303 	umull	r2, r3, r2, r3
 8009b3a:	095b      	lsrs	r3, r3, #5
 8009b3c:	0119      	lsls	r1, r3, #4
 8009b3e:	68fa      	ldr	r2, [r7, #12]
 8009b40:	4613      	mov	r3, r2
 8009b42:	009b      	lsls	r3, r3, #2
 8009b44:	4413      	add	r3, r2
 8009b46:	009a      	lsls	r2, r3, #2
 8009b48:	441a      	add	r2, r3
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	009b      	lsls	r3, r3, #2
 8009b50:	fbb2 f2f3 	udiv	r2, r2, r3
 8009b54:	4b1a      	ldr	r3, [pc, #104]	; (8009bc0 <UART_SetConfig+0x118>)
 8009b56:	fba3 0302 	umull	r0, r3, r3, r2
 8009b5a:	095b      	lsrs	r3, r3, #5
 8009b5c:	2064      	movs	r0, #100	; 0x64
 8009b5e:	fb00 f303 	mul.w	r3, r0, r3
 8009b62:	1ad3      	subs	r3, r2, r3
 8009b64:	011b      	lsls	r3, r3, #4
 8009b66:	3332      	adds	r3, #50	; 0x32
 8009b68:	4a15      	ldr	r2, [pc, #84]	; (8009bc0 <UART_SetConfig+0x118>)
 8009b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8009b6e:	095b      	lsrs	r3, r3, #5
 8009b70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b74:	4419      	add	r1, r3
 8009b76:	68fa      	ldr	r2, [r7, #12]
 8009b78:	4613      	mov	r3, r2
 8009b7a:	009b      	lsls	r3, r3, #2
 8009b7c:	4413      	add	r3, r2
 8009b7e:	009a      	lsls	r2, r3, #2
 8009b80:	441a      	add	r2, r3
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	009b      	lsls	r3, r3, #2
 8009b88:	fbb2 f2f3 	udiv	r2, r2, r3
 8009b8c:	4b0c      	ldr	r3, [pc, #48]	; (8009bc0 <UART_SetConfig+0x118>)
 8009b8e:	fba3 0302 	umull	r0, r3, r3, r2
 8009b92:	095b      	lsrs	r3, r3, #5
 8009b94:	2064      	movs	r0, #100	; 0x64
 8009b96:	fb00 f303 	mul.w	r3, r0, r3
 8009b9a:	1ad3      	subs	r3, r2, r3
 8009b9c:	011b      	lsls	r3, r3, #4
 8009b9e:	3332      	adds	r3, #50	; 0x32
 8009ba0:	4a07      	ldr	r2, [pc, #28]	; (8009bc0 <UART_SetConfig+0x118>)
 8009ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ba6:	095b      	lsrs	r3, r3, #5
 8009ba8:	f003 020f 	and.w	r2, r3, #15
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	440a      	add	r2, r1
 8009bb2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009bb4:	bf00      	nop
 8009bb6:	3710      	adds	r7, #16
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}
 8009bbc:	40013800 	.word	0x40013800
 8009bc0:	51eb851f 	.word	0x51eb851f

08009bc4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009bc4:	b084      	sub	sp, #16
 8009bc6:	b480      	push	{r7}
 8009bc8:	b083      	sub	sp, #12
 8009bca:	af00      	add	r7, sp, #0
 8009bcc:	6078      	str	r0, [r7, #4]
 8009bce:	f107 0014 	add.w	r0, r7, #20
 8009bd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009bd6:	2300      	movs	r3, #0
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	370c      	adds	r7, #12
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bc80      	pop	{r7}
 8009be0:	b004      	add	sp, #16
 8009be2:	4770      	bx	lr

08009be4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b085      	sub	sp, #20
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009bec:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8009bf0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009bf8:	b29a      	uxth	r2, r3
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	b29b      	uxth	r3, r3
 8009bfe:	43db      	mvns	r3, r3
 8009c00:	b29b      	uxth	r3, r3
 8009c02:	4013      	ands	r3, r2
 8009c04:	b29a      	uxth	r2, r3
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009c0c:	2300      	movs	r3, #0
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3714      	adds	r7, #20
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bc80      	pop	{r7}
 8009c16:	4770      	bx	lr

08009c18 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b083      	sub	sp, #12
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	460b      	mov	r3, r1
 8009c22:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009c24:	2300      	movs	r3, #0
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	370c      	adds	r7, #12
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bc80      	pop	{r7}
 8009c2e:	4770      	bx	lr

08009c30 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009c30:	b084      	sub	sp, #16
 8009c32:	b480      	push	{r7}
 8009c34:	b083      	sub	sp, #12
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	6078      	str	r0, [r7, #4]
 8009c3a:	f107 0014 	add.w	r0, r7, #20
 8009c3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2201      	movs	r2, #1
 8009c46:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2200      	movs	r2, #0
 8009c56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009c62:	2300      	movs	r3, #0
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	370c      	adds	r7, #12
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bc80      	pop	{r7}
 8009c6c:	b004      	add	sp, #16
 8009c6e:	4770      	bx	lr

08009c70 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b083      	sub	sp, #12
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009c78:	2300      	movs	r3, #0
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	370c      	adds	r7, #12
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bc80      	pop	{r7}
 8009c82:	4770      	bx	lr

08009c84 <__errno>:
 8009c84:	4b01      	ldr	r3, [pc, #4]	; (8009c8c <__errno+0x8>)
 8009c86:	6818      	ldr	r0, [r3, #0]
 8009c88:	4770      	bx	lr
 8009c8a:	bf00      	nop
 8009c8c:	200000a0 	.word	0x200000a0

08009c90 <__libc_init_array>:
 8009c90:	b570      	push	{r4, r5, r6, lr}
 8009c92:	2600      	movs	r6, #0
 8009c94:	4d0c      	ldr	r5, [pc, #48]	; (8009cc8 <__libc_init_array+0x38>)
 8009c96:	4c0d      	ldr	r4, [pc, #52]	; (8009ccc <__libc_init_array+0x3c>)
 8009c98:	1b64      	subs	r4, r4, r5
 8009c9a:	10a4      	asrs	r4, r4, #2
 8009c9c:	42a6      	cmp	r6, r4
 8009c9e:	d109      	bne.n	8009cb4 <__libc_init_array+0x24>
 8009ca0:	f004 ffcc 	bl	800ec3c <_init>
 8009ca4:	2600      	movs	r6, #0
 8009ca6:	4d0a      	ldr	r5, [pc, #40]	; (8009cd0 <__libc_init_array+0x40>)
 8009ca8:	4c0a      	ldr	r4, [pc, #40]	; (8009cd4 <__libc_init_array+0x44>)
 8009caa:	1b64      	subs	r4, r4, r5
 8009cac:	10a4      	asrs	r4, r4, #2
 8009cae:	42a6      	cmp	r6, r4
 8009cb0:	d105      	bne.n	8009cbe <__libc_init_array+0x2e>
 8009cb2:	bd70      	pop	{r4, r5, r6, pc}
 8009cb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cb8:	4798      	blx	r3
 8009cba:	3601      	adds	r6, #1
 8009cbc:	e7ee      	b.n	8009c9c <__libc_init_array+0xc>
 8009cbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cc2:	4798      	blx	r3
 8009cc4:	3601      	adds	r6, #1
 8009cc6:	e7f2      	b.n	8009cae <__libc_init_array+0x1e>
 8009cc8:	0800f490 	.word	0x0800f490
 8009ccc:	0800f490 	.word	0x0800f490
 8009cd0:	0800f490 	.word	0x0800f490
 8009cd4:	0800f494 	.word	0x0800f494

08009cd8 <memset>:
 8009cd8:	4603      	mov	r3, r0
 8009cda:	4402      	add	r2, r0
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d100      	bne.n	8009ce2 <memset+0xa>
 8009ce0:	4770      	bx	lr
 8009ce2:	f803 1b01 	strb.w	r1, [r3], #1
 8009ce6:	e7f9      	b.n	8009cdc <memset+0x4>

08009ce8 <__cvt>:
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cee:	461f      	mov	r7, r3
 8009cf0:	bfbb      	ittet	lt
 8009cf2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8009cf6:	461f      	movlt	r7, r3
 8009cf8:	2300      	movge	r3, #0
 8009cfa:	232d      	movlt	r3, #45	; 0x2d
 8009cfc:	b088      	sub	sp, #32
 8009cfe:	4614      	mov	r4, r2
 8009d00:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009d02:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009d04:	7013      	strb	r3, [r2, #0]
 8009d06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009d08:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8009d0c:	f023 0820 	bic.w	r8, r3, #32
 8009d10:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009d14:	d005      	beq.n	8009d22 <__cvt+0x3a>
 8009d16:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009d1a:	d100      	bne.n	8009d1e <__cvt+0x36>
 8009d1c:	3501      	adds	r5, #1
 8009d1e:	2302      	movs	r3, #2
 8009d20:	e000      	b.n	8009d24 <__cvt+0x3c>
 8009d22:	2303      	movs	r3, #3
 8009d24:	aa07      	add	r2, sp, #28
 8009d26:	9204      	str	r2, [sp, #16]
 8009d28:	aa06      	add	r2, sp, #24
 8009d2a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009d2e:	e9cd 3500 	strd	r3, r5, [sp]
 8009d32:	4622      	mov	r2, r4
 8009d34:	463b      	mov	r3, r7
 8009d36:	f001 fdc7 	bl	800b8c8 <_dtoa_r>
 8009d3a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009d3e:	4606      	mov	r6, r0
 8009d40:	d102      	bne.n	8009d48 <__cvt+0x60>
 8009d42:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009d44:	07db      	lsls	r3, r3, #31
 8009d46:	d522      	bpl.n	8009d8e <__cvt+0xa6>
 8009d48:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009d4c:	eb06 0905 	add.w	r9, r6, r5
 8009d50:	d110      	bne.n	8009d74 <__cvt+0x8c>
 8009d52:	7833      	ldrb	r3, [r6, #0]
 8009d54:	2b30      	cmp	r3, #48	; 0x30
 8009d56:	d10a      	bne.n	8009d6e <__cvt+0x86>
 8009d58:	2200      	movs	r2, #0
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	4620      	mov	r0, r4
 8009d5e:	4639      	mov	r1, r7
 8009d60:	f7f6 fe22 	bl	80009a8 <__aeabi_dcmpeq>
 8009d64:	b918      	cbnz	r0, 8009d6e <__cvt+0x86>
 8009d66:	f1c5 0501 	rsb	r5, r5, #1
 8009d6a:	f8ca 5000 	str.w	r5, [sl]
 8009d6e:	f8da 3000 	ldr.w	r3, [sl]
 8009d72:	4499      	add	r9, r3
 8009d74:	2200      	movs	r2, #0
 8009d76:	2300      	movs	r3, #0
 8009d78:	4620      	mov	r0, r4
 8009d7a:	4639      	mov	r1, r7
 8009d7c:	f7f6 fe14 	bl	80009a8 <__aeabi_dcmpeq>
 8009d80:	b108      	cbz	r0, 8009d86 <__cvt+0x9e>
 8009d82:	f8cd 901c 	str.w	r9, [sp, #28]
 8009d86:	2230      	movs	r2, #48	; 0x30
 8009d88:	9b07      	ldr	r3, [sp, #28]
 8009d8a:	454b      	cmp	r3, r9
 8009d8c:	d307      	bcc.n	8009d9e <__cvt+0xb6>
 8009d8e:	4630      	mov	r0, r6
 8009d90:	9b07      	ldr	r3, [sp, #28]
 8009d92:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009d94:	1b9b      	subs	r3, r3, r6
 8009d96:	6013      	str	r3, [r2, #0]
 8009d98:	b008      	add	sp, #32
 8009d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d9e:	1c59      	adds	r1, r3, #1
 8009da0:	9107      	str	r1, [sp, #28]
 8009da2:	701a      	strb	r2, [r3, #0]
 8009da4:	e7f0      	b.n	8009d88 <__cvt+0xa0>

08009da6 <__exponent>:
 8009da6:	4603      	mov	r3, r0
 8009da8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009daa:	2900      	cmp	r1, #0
 8009dac:	f803 2b02 	strb.w	r2, [r3], #2
 8009db0:	bfb6      	itet	lt
 8009db2:	222d      	movlt	r2, #45	; 0x2d
 8009db4:	222b      	movge	r2, #43	; 0x2b
 8009db6:	4249      	neglt	r1, r1
 8009db8:	2909      	cmp	r1, #9
 8009dba:	7042      	strb	r2, [r0, #1]
 8009dbc:	dd2b      	ble.n	8009e16 <__exponent+0x70>
 8009dbe:	f10d 0407 	add.w	r4, sp, #7
 8009dc2:	46a4      	mov	ip, r4
 8009dc4:	270a      	movs	r7, #10
 8009dc6:	fb91 f6f7 	sdiv	r6, r1, r7
 8009dca:	460a      	mov	r2, r1
 8009dcc:	46a6      	mov	lr, r4
 8009dce:	fb07 1516 	mls	r5, r7, r6, r1
 8009dd2:	2a63      	cmp	r2, #99	; 0x63
 8009dd4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8009dd8:	4631      	mov	r1, r6
 8009dda:	f104 34ff 	add.w	r4, r4, #4294967295
 8009dde:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009de2:	dcf0      	bgt.n	8009dc6 <__exponent+0x20>
 8009de4:	3130      	adds	r1, #48	; 0x30
 8009de6:	f1ae 0502 	sub.w	r5, lr, #2
 8009dea:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009dee:	4629      	mov	r1, r5
 8009df0:	1c44      	adds	r4, r0, #1
 8009df2:	4561      	cmp	r1, ip
 8009df4:	d30a      	bcc.n	8009e0c <__exponent+0x66>
 8009df6:	f10d 0209 	add.w	r2, sp, #9
 8009dfa:	eba2 020e 	sub.w	r2, r2, lr
 8009dfe:	4565      	cmp	r5, ip
 8009e00:	bf88      	it	hi
 8009e02:	2200      	movhi	r2, #0
 8009e04:	4413      	add	r3, r2
 8009e06:	1a18      	subs	r0, r3, r0
 8009e08:	b003      	add	sp, #12
 8009e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e0c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e10:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009e14:	e7ed      	b.n	8009df2 <__exponent+0x4c>
 8009e16:	2330      	movs	r3, #48	; 0x30
 8009e18:	3130      	adds	r1, #48	; 0x30
 8009e1a:	7083      	strb	r3, [r0, #2]
 8009e1c:	70c1      	strb	r1, [r0, #3]
 8009e1e:	1d03      	adds	r3, r0, #4
 8009e20:	e7f1      	b.n	8009e06 <__exponent+0x60>
	...

08009e24 <_printf_float>:
 8009e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e28:	b091      	sub	sp, #68	; 0x44
 8009e2a:	460c      	mov	r4, r1
 8009e2c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009e30:	4616      	mov	r6, r2
 8009e32:	461f      	mov	r7, r3
 8009e34:	4605      	mov	r5, r0
 8009e36:	f002 fe9b 	bl	800cb70 <_localeconv_r>
 8009e3a:	6803      	ldr	r3, [r0, #0]
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	9309      	str	r3, [sp, #36]	; 0x24
 8009e40:	f7f6 f986 	bl	8000150 <strlen>
 8009e44:	2300      	movs	r3, #0
 8009e46:	930e      	str	r3, [sp, #56]	; 0x38
 8009e48:	f8d8 3000 	ldr.w	r3, [r8]
 8009e4c:	900a      	str	r0, [sp, #40]	; 0x28
 8009e4e:	3307      	adds	r3, #7
 8009e50:	f023 0307 	bic.w	r3, r3, #7
 8009e54:	f103 0208 	add.w	r2, r3, #8
 8009e58:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009e5c:	f8d4 b000 	ldr.w	fp, [r4]
 8009e60:	f8c8 2000 	str.w	r2, [r8]
 8009e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e68:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009e6c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8009e70:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8009e74:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e76:	f04f 32ff 	mov.w	r2, #4294967295
 8009e7a:	4640      	mov	r0, r8
 8009e7c:	4b9c      	ldr	r3, [pc, #624]	; (800a0f0 <_printf_float+0x2cc>)
 8009e7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009e80:	f7f6 fdc4 	bl	8000a0c <__aeabi_dcmpun>
 8009e84:	bb70      	cbnz	r0, 8009ee4 <_printf_float+0xc0>
 8009e86:	f04f 32ff 	mov.w	r2, #4294967295
 8009e8a:	4640      	mov	r0, r8
 8009e8c:	4b98      	ldr	r3, [pc, #608]	; (800a0f0 <_printf_float+0x2cc>)
 8009e8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009e90:	f7f6 fd9e 	bl	80009d0 <__aeabi_dcmple>
 8009e94:	bb30      	cbnz	r0, 8009ee4 <_printf_float+0xc0>
 8009e96:	2200      	movs	r2, #0
 8009e98:	2300      	movs	r3, #0
 8009e9a:	4640      	mov	r0, r8
 8009e9c:	4651      	mov	r1, sl
 8009e9e:	f7f6 fd8d 	bl	80009bc <__aeabi_dcmplt>
 8009ea2:	b110      	cbz	r0, 8009eaa <_printf_float+0x86>
 8009ea4:	232d      	movs	r3, #45	; 0x2d
 8009ea6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009eaa:	4b92      	ldr	r3, [pc, #584]	; (800a0f4 <_printf_float+0x2d0>)
 8009eac:	4892      	ldr	r0, [pc, #584]	; (800a0f8 <_printf_float+0x2d4>)
 8009eae:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009eb2:	bf94      	ite	ls
 8009eb4:	4698      	movls	r8, r3
 8009eb6:	4680      	movhi	r8, r0
 8009eb8:	2303      	movs	r3, #3
 8009eba:	f04f 0a00 	mov.w	sl, #0
 8009ebe:	6123      	str	r3, [r4, #16]
 8009ec0:	f02b 0304 	bic.w	r3, fp, #4
 8009ec4:	6023      	str	r3, [r4, #0]
 8009ec6:	4633      	mov	r3, r6
 8009ec8:	4621      	mov	r1, r4
 8009eca:	4628      	mov	r0, r5
 8009ecc:	9700      	str	r7, [sp, #0]
 8009ece:	aa0f      	add	r2, sp, #60	; 0x3c
 8009ed0:	f000 f9d4 	bl	800a27c <_printf_common>
 8009ed4:	3001      	adds	r0, #1
 8009ed6:	f040 8090 	bne.w	8009ffa <_printf_float+0x1d6>
 8009eda:	f04f 30ff 	mov.w	r0, #4294967295
 8009ede:	b011      	add	sp, #68	; 0x44
 8009ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ee4:	4642      	mov	r2, r8
 8009ee6:	4653      	mov	r3, sl
 8009ee8:	4640      	mov	r0, r8
 8009eea:	4651      	mov	r1, sl
 8009eec:	f7f6 fd8e 	bl	8000a0c <__aeabi_dcmpun>
 8009ef0:	b148      	cbz	r0, 8009f06 <_printf_float+0xe2>
 8009ef2:	f1ba 0f00 	cmp.w	sl, #0
 8009ef6:	bfb8      	it	lt
 8009ef8:	232d      	movlt	r3, #45	; 0x2d
 8009efa:	4880      	ldr	r0, [pc, #512]	; (800a0fc <_printf_float+0x2d8>)
 8009efc:	bfb8      	it	lt
 8009efe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009f02:	4b7f      	ldr	r3, [pc, #508]	; (800a100 <_printf_float+0x2dc>)
 8009f04:	e7d3      	b.n	8009eae <_printf_float+0x8a>
 8009f06:	6863      	ldr	r3, [r4, #4]
 8009f08:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009f0c:	1c5a      	adds	r2, r3, #1
 8009f0e:	d142      	bne.n	8009f96 <_printf_float+0x172>
 8009f10:	2306      	movs	r3, #6
 8009f12:	6063      	str	r3, [r4, #4]
 8009f14:	2200      	movs	r2, #0
 8009f16:	9206      	str	r2, [sp, #24]
 8009f18:	aa0e      	add	r2, sp, #56	; 0x38
 8009f1a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8009f1e:	aa0d      	add	r2, sp, #52	; 0x34
 8009f20:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8009f24:	9203      	str	r2, [sp, #12]
 8009f26:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8009f2a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009f2e:	6023      	str	r3, [r4, #0]
 8009f30:	6863      	ldr	r3, [r4, #4]
 8009f32:	4642      	mov	r2, r8
 8009f34:	9300      	str	r3, [sp, #0]
 8009f36:	4628      	mov	r0, r5
 8009f38:	4653      	mov	r3, sl
 8009f3a:	910b      	str	r1, [sp, #44]	; 0x2c
 8009f3c:	f7ff fed4 	bl	8009ce8 <__cvt>
 8009f40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009f42:	4680      	mov	r8, r0
 8009f44:	2947      	cmp	r1, #71	; 0x47
 8009f46:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009f48:	d108      	bne.n	8009f5c <_printf_float+0x138>
 8009f4a:	1cc8      	adds	r0, r1, #3
 8009f4c:	db02      	blt.n	8009f54 <_printf_float+0x130>
 8009f4e:	6863      	ldr	r3, [r4, #4]
 8009f50:	4299      	cmp	r1, r3
 8009f52:	dd40      	ble.n	8009fd6 <_printf_float+0x1b2>
 8009f54:	f1a9 0902 	sub.w	r9, r9, #2
 8009f58:	fa5f f989 	uxtb.w	r9, r9
 8009f5c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009f60:	d81f      	bhi.n	8009fa2 <_printf_float+0x17e>
 8009f62:	464a      	mov	r2, r9
 8009f64:	3901      	subs	r1, #1
 8009f66:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009f6a:	910d      	str	r1, [sp, #52]	; 0x34
 8009f6c:	f7ff ff1b 	bl	8009da6 <__exponent>
 8009f70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f72:	4682      	mov	sl, r0
 8009f74:	1813      	adds	r3, r2, r0
 8009f76:	2a01      	cmp	r2, #1
 8009f78:	6123      	str	r3, [r4, #16]
 8009f7a:	dc02      	bgt.n	8009f82 <_printf_float+0x15e>
 8009f7c:	6822      	ldr	r2, [r4, #0]
 8009f7e:	07d2      	lsls	r2, r2, #31
 8009f80:	d501      	bpl.n	8009f86 <_printf_float+0x162>
 8009f82:	3301      	adds	r3, #1
 8009f84:	6123      	str	r3, [r4, #16]
 8009f86:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d09b      	beq.n	8009ec6 <_printf_float+0xa2>
 8009f8e:	232d      	movs	r3, #45	; 0x2d
 8009f90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f94:	e797      	b.n	8009ec6 <_printf_float+0xa2>
 8009f96:	2947      	cmp	r1, #71	; 0x47
 8009f98:	d1bc      	bne.n	8009f14 <_printf_float+0xf0>
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d1ba      	bne.n	8009f14 <_printf_float+0xf0>
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	e7b7      	b.n	8009f12 <_printf_float+0xee>
 8009fa2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009fa6:	d118      	bne.n	8009fda <_printf_float+0x1b6>
 8009fa8:	2900      	cmp	r1, #0
 8009faa:	6863      	ldr	r3, [r4, #4]
 8009fac:	dd0b      	ble.n	8009fc6 <_printf_float+0x1a2>
 8009fae:	6121      	str	r1, [r4, #16]
 8009fb0:	b913      	cbnz	r3, 8009fb8 <_printf_float+0x194>
 8009fb2:	6822      	ldr	r2, [r4, #0]
 8009fb4:	07d0      	lsls	r0, r2, #31
 8009fb6:	d502      	bpl.n	8009fbe <_printf_float+0x19a>
 8009fb8:	3301      	adds	r3, #1
 8009fba:	440b      	add	r3, r1
 8009fbc:	6123      	str	r3, [r4, #16]
 8009fbe:	f04f 0a00 	mov.w	sl, #0
 8009fc2:	65a1      	str	r1, [r4, #88]	; 0x58
 8009fc4:	e7df      	b.n	8009f86 <_printf_float+0x162>
 8009fc6:	b913      	cbnz	r3, 8009fce <_printf_float+0x1aa>
 8009fc8:	6822      	ldr	r2, [r4, #0]
 8009fca:	07d2      	lsls	r2, r2, #31
 8009fcc:	d501      	bpl.n	8009fd2 <_printf_float+0x1ae>
 8009fce:	3302      	adds	r3, #2
 8009fd0:	e7f4      	b.n	8009fbc <_printf_float+0x198>
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	e7f2      	b.n	8009fbc <_printf_float+0x198>
 8009fd6:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009fda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009fdc:	4299      	cmp	r1, r3
 8009fde:	db05      	blt.n	8009fec <_printf_float+0x1c8>
 8009fe0:	6823      	ldr	r3, [r4, #0]
 8009fe2:	6121      	str	r1, [r4, #16]
 8009fe4:	07d8      	lsls	r0, r3, #31
 8009fe6:	d5ea      	bpl.n	8009fbe <_printf_float+0x19a>
 8009fe8:	1c4b      	adds	r3, r1, #1
 8009fea:	e7e7      	b.n	8009fbc <_printf_float+0x198>
 8009fec:	2900      	cmp	r1, #0
 8009fee:	bfcc      	ite	gt
 8009ff0:	2201      	movgt	r2, #1
 8009ff2:	f1c1 0202 	rsble	r2, r1, #2
 8009ff6:	4413      	add	r3, r2
 8009ff8:	e7e0      	b.n	8009fbc <_printf_float+0x198>
 8009ffa:	6823      	ldr	r3, [r4, #0]
 8009ffc:	055a      	lsls	r2, r3, #21
 8009ffe:	d407      	bmi.n	800a010 <_printf_float+0x1ec>
 800a000:	6923      	ldr	r3, [r4, #16]
 800a002:	4642      	mov	r2, r8
 800a004:	4631      	mov	r1, r6
 800a006:	4628      	mov	r0, r5
 800a008:	47b8      	blx	r7
 800a00a:	3001      	adds	r0, #1
 800a00c:	d12b      	bne.n	800a066 <_printf_float+0x242>
 800a00e:	e764      	b.n	8009eda <_printf_float+0xb6>
 800a010:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a014:	f240 80dd 	bls.w	800a1d2 <_printf_float+0x3ae>
 800a018:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a01c:	2200      	movs	r2, #0
 800a01e:	2300      	movs	r3, #0
 800a020:	f7f6 fcc2 	bl	80009a8 <__aeabi_dcmpeq>
 800a024:	2800      	cmp	r0, #0
 800a026:	d033      	beq.n	800a090 <_printf_float+0x26c>
 800a028:	2301      	movs	r3, #1
 800a02a:	4631      	mov	r1, r6
 800a02c:	4628      	mov	r0, r5
 800a02e:	4a35      	ldr	r2, [pc, #212]	; (800a104 <_printf_float+0x2e0>)
 800a030:	47b8      	blx	r7
 800a032:	3001      	adds	r0, #1
 800a034:	f43f af51 	beq.w	8009eda <_printf_float+0xb6>
 800a038:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a03c:	429a      	cmp	r2, r3
 800a03e:	db02      	blt.n	800a046 <_printf_float+0x222>
 800a040:	6823      	ldr	r3, [r4, #0]
 800a042:	07d8      	lsls	r0, r3, #31
 800a044:	d50f      	bpl.n	800a066 <_printf_float+0x242>
 800a046:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a04a:	4631      	mov	r1, r6
 800a04c:	4628      	mov	r0, r5
 800a04e:	47b8      	blx	r7
 800a050:	3001      	adds	r0, #1
 800a052:	f43f af42 	beq.w	8009eda <_printf_float+0xb6>
 800a056:	f04f 0800 	mov.w	r8, #0
 800a05a:	f104 091a 	add.w	r9, r4, #26
 800a05e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a060:	3b01      	subs	r3, #1
 800a062:	4543      	cmp	r3, r8
 800a064:	dc09      	bgt.n	800a07a <_printf_float+0x256>
 800a066:	6823      	ldr	r3, [r4, #0]
 800a068:	079b      	lsls	r3, r3, #30
 800a06a:	f100 8102 	bmi.w	800a272 <_printf_float+0x44e>
 800a06e:	68e0      	ldr	r0, [r4, #12]
 800a070:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a072:	4298      	cmp	r0, r3
 800a074:	bfb8      	it	lt
 800a076:	4618      	movlt	r0, r3
 800a078:	e731      	b.n	8009ede <_printf_float+0xba>
 800a07a:	2301      	movs	r3, #1
 800a07c:	464a      	mov	r2, r9
 800a07e:	4631      	mov	r1, r6
 800a080:	4628      	mov	r0, r5
 800a082:	47b8      	blx	r7
 800a084:	3001      	adds	r0, #1
 800a086:	f43f af28 	beq.w	8009eda <_printf_float+0xb6>
 800a08a:	f108 0801 	add.w	r8, r8, #1
 800a08e:	e7e6      	b.n	800a05e <_printf_float+0x23a>
 800a090:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a092:	2b00      	cmp	r3, #0
 800a094:	dc38      	bgt.n	800a108 <_printf_float+0x2e4>
 800a096:	2301      	movs	r3, #1
 800a098:	4631      	mov	r1, r6
 800a09a:	4628      	mov	r0, r5
 800a09c:	4a19      	ldr	r2, [pc, #100]	; (800a104 <_printf_float+0x2e0>)
 800a09e:	47b8      	blx	r7
 800a0a0:	3001      	adds	r0, #1
 800a0a2:	f43f af1a 	beq.w	8009eda <_printf_float+0xb6>
 800a0a6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a0aa:	4313      	orrs	r3, r2
 800a0ac:	d102      	bne.n	800a0b4 <_printf_float+0x290>
 800a0ae:	6823      	ldr	r3, [r4, #0]
 800a0b0:	07d9      	lsls	r1, r3, #31
 800a0b2:	d5d8      	bpl.n	800a066 <_printf_float+0x242>
 800a0b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a0b8:	4631      	mov	r1, r6
 800a0ba:	4628      	mov	r0, r5
 800a0bc:	47b8      	blx	r7
 800a0be:	3001      	adds	r0, #1
 800a0c0:	f43f af0b 	beq.w	8009eda <_printf_float+0xb6>
 800a0c4:	f04f 0900 	mov.w	r9, #0
 800a0c8:	f104 0a1a 	add.w	sl, r4, #26
 800a0cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0ce:	425b      	negs	r3, r3
 800a0d0:	454b      	cmp	r3, r9
 800a0d2:	dc01      	bgt.n	800a0d8 <_printf_float+0x2b4>
 800a0d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0d6:	e794      	b.n	800a002 <_printf_float+0x1de>
 800a0d8:	2301      	movs	r3, #1
 800a0da:	4652      	mov	r2, sl
 800a0dc:	4631      	mov	r1, r6
 800a0de:	4628      	mov	r0, r5
 800a0e0:	47b8      	blx	r7
 800a0e2:	3001      	adds	r0, #1
 800a0e4:	f43f aef9 	beq.w	8009eda <_printf_float+0xb6>
 800a0e8:	f109 0901 	add.w	r9, r9, #1
 800a0ec:	e7ee      	b.n	800a0cc <_printf_float+0x2a8>
 800a0ee:	bf00      	nop
 800a0f0:	7fefffff 	.word	0x7fefffff
 800a0f4:	0800ef7c 	.word	0x0800ef7c
 800a0f8:	0800ef80 	.word	0x0800ef80
 800a0fc:	0800ef88 	.word	0x0800ef88
 800a100:	0800ef84 	.word	0x0800ef84
 800a104:	0800ef8c 	.word	0x0800ef8c
 800a108:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a10a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a10c:	429a      	cmp	r2, r3
 800a10e:	bfa8      	it	ge
 800a110:	461a      	movge	r2, r3
 800a112:	2a00      	cmp	r2, #0
 800a114:	4691      	mov	r9, r2
 800a116:	dc37      	bgt.n	800a188 <_printf_float+0x364>
 800a118:	f04f 0b00 	mov.w	fp, #0
 800a11c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a120:	f104 021a 	add.w	r2, r4, #26
 800a124:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a128:	ebaa 0309 	sub.w	r3, sl, r9
 800a12c:	455b      	cmp	r3, fp
 800a12e:	dc33      	bgt.n	800a198 <_printf_float+0x374>
 800a130:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a134:	429a      	cmp	r2, r3
 800a136:	db3b      	blt.n	800a1b0 <_printf_float+0x38c>
 800a138:	6823      	ldr	r3, [r4, #0]
 800a13a:	07da      	lsls	r2, r3, #31
 800a13c:	d438      	bmi.n	800a1b0 <_printf_float+0x38c>
 800a13e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a140:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a142:	eba3 020a 	sub.w	r2, r3, sl
 800a146:	eba3 0901 	sub.w	r9, r3, r1
 800a14a:	4591      	cmp	r9, r2
 800a14c:	bfa8      	it	ge
 800a14e:	4691      	movge	r9, r2
 800a150:	f1b9 0f00 	cmp.w	r9, #0
 800a154:	dc34      	bgt.n	800a1c0 <_printf_float+0x39c>
 800a156:	f04f 0800 	mov.w	r8, #0
 800a15a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a15e:	f104 0a1a 	add.w	sl, r4, #26
 800a162:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a166:	1a9b      	subs	r3, r3, r2
 800a168:	eba3 0309 	sub.w	r3, r3, r9
 800a16c:	4543      	cmp	r3, r8
 800a16e:	f77f af7a 	ble.w	800a066 <_printf_float+0x242>
 800a172:	2301      	movs	r3, #1
 800a174:	4652      	mov	r2, sl
 800a176:	4631      	mov	r1, r6
 800a178:	4628      	mov	r0, r5
 800a17a:	47b8      	blx	r7
 800a17c:	3001      	adds	r0, #1
 800a17e:	f43f aeac 	beq.w	8009eda <_printf_float+0xb6>
 800a182:	f108 0801 	add.w	r8, r8, #1
 800a186:	e7ec      	b.n	800a162 <_printf_float+0x33e>
 800a188:	4613      	mov	r3, r2
 800a18a:	4631      	mov	r1, r6
 800a18c:	4642      	mov	r2, r8
 800a18e:	4628      	mov	r0, r5
 800a190:	47b8      	blx	r7
 800a192:	3001      	adds	r0, #1
 800a194:	d1c0      	bne.n	800a118 <_printf_float+0x2f4>
 800a196:	e6a0      	b.n	8009eda <_printf_float+0xb6>
 800a198:	2301      	movs	r3, #1
 800a19a:	4631      	mov	r1, r6
 800a19c:	4628      	mov	r0, r5
 800a19e:	920b      	str	r2, [sp, #44]	; 0x2c
 800a1a0:	47b8      	blx	r7
 800a1a2:	3001      	adds	r0, #1
 800a1a4:	f43f ae99 	beq.w	8009eda <_printf_float+0xb6>
 800a1a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a1aa:	f10b 0b01 	add.w	fp, fp, #1
 800a1ae:	e7b9      	b.n	800a124 <_printf_float+0x300>
 800a1b0:	4631      	mov	r1, r6
 800a1b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a1b6:	4628      	mov	r0, r5
 800a1b8:	47b8      	blx	r7
 800a1ba:	3001      	adds	r0, #1
 800a1bc:	d1bf      	bne.n	800a13e <_printf_float+0x31a>
 800a1be:	e68c      	b.n	8009eda <_printf_float+0xb6>
 800a1c0:	464b      	mov	r3, r9
 800a1c2:	4631      	mov	r1, r6
 800a1c4:	4628      	mov	r0, r5
 800a1c6:	eb08 020a 	add.w	r2, r8, sl
 800a1ca:	47b8      	blx	r7
 800a1cc:	3001      	adds	r0, #1
 800a1ce:	d1c2      	bne.n	800a156 <_printf_float+0x332>
 800a1d0:	e683      	b.n	8009eda <_printf_float+0xb6>
 800a1d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a1d4:	2a01      	cmp	r2, #1
 800a1d6:	dc01      	bgt.n	800a1dc <_printf_float+0x3b8>
 800a1d8:	07db      	lsls	r3, r3, #31
 800a1da:	d537      	bpl.n	800a24c <_printf_float+0x428>
 800a1dc:	2301      	movs	r3, #1
 800a1de:	4642      	mov	r2, r8
 800a1e0:	4631      	mov	r1, r6
 800a1e2:	4628      	mov	r0, r5
 800a1e4:	47b8      	blx	r7
 800a1e6:	3001      	adds	r0, #1
 800a1e8:	f43f ae77 	beq.w	8009eda <_printf_float+0xb6>
 800a1ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a1f0:	4631      	mov	r1, r6
 800a1f2:	4628      	mov	r0, r5
 800a1f4:	47b8      	blx	r7
 800a1f6:	3001      	adds	r0, #1
 800a1f8:	f43f ae6f 	beq.w	8009eda <_printf_float+0xb6>
 800a1fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a200:	2200      	movs	r2, #0
 800a202:	2300      	movs	r3, #0
 800a204:	f7f6 fbd0 	bl	80009a8 <__aeabi_dcmpeq>
 800a208:	b9d8      	cbnz	r0, 800a242 <_printf_float+0x41e>
 800a20a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a20c:	f108 0201 	add.w	r2, r8, #1
 800a210:	3b01      	subs	r3, #1
 800a212:	4631      	mov	r1, r6
 800a214:	4628      	mov	r0, r5
 800a216:	47b8      	blx	r7
 800a218:	3001      	adds	r0, #1
 800a21a:	d10e      	bne.n	800a23a <_printf_float+0x416>
 800a21c:	e65d      	b.n	8009eda <_printf_float+0xb6>
 800a21e:	2301      	movs	r3, #1
 800a220:	464a      	mov	r2, r9
 800a222:	4631      	mov	r1, r6
 800a224:	4628      	mov	r0, r5
 800a226:	47b8      	blx	r7
 800a228:	3001      	adds	r0, #1
 800a22a:	f43f ae56 	beq.w	8009eda <_printf_float+0xb6>
 800a22e:	f108 0801 	add.w	r8, r8, #1
 800a232:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a234:	3b01      	subs	r3, #1
 800a236:	4543      	cmp	r3, r8
 800a238:	dcf1      	bgt.n	800a21e <_printf_float+0x3fa>
 800a23a:	4653      	mov	r3, sl
 800a23c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a240:	e6e0      	b.n	800a004 <_printf_float+0x1e0>
 800a242:	f04f 0800 	mov.w	r8, #0
 800a246:	f104 091a 	add.w	r9, r4, #26
 800a24a:	e7f2      	b.n	800a232 <_printf_float+0x40e>
 800a24c:	2301      	movs	r3, #1
 800a24e:	4642      	mov	r2, r8
 800a250:	e7df      	b.n	800a212 <_printf_float+0x3ee>
 800a252:	2301      	movs	r3, #1
 800a254:	464a      	mov	r2, r9
 800a256:	4631      	mov	r1, r6
 800a258:	4628      	mov	r0, r5
 800a25a:	47b8      	blx	r7
 800a25c:	3001      	adds	r0, #1
 800a25e:	f43f ae3c 	beq.w	8009eda <_printf_float+0xb6>
 800a262:	f108 0801 	add.w	r8, r8, #1
 800a266:	68e3      	ldr	r3, [r4, #12]
 800a268:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a26a:	1a5b      	subs	r3, r3, r1
 800a26c:	4543      	cmp	r3, r8
 800a26e:	dcf0      	bgt.n	800a252 <_printf_float+0x42e>
 800a270:	e6fd      	b.n	800a06e <_printf_float+0x24a>
 800a272:	f04f 0800 	mov.w	r8, #0
 800a276:	f104 0919 	add.w	r9, r4, #25
 800a27a:	e7f4      	b.n	800a266 <_printf_float+0x442>

0800a27c <_printf_common>:
 800a27c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a280:	4616      	mov	r6, r2
 800a282:	4699      	mov	r9, r3
 800a284:	688a      	ldr	r2, [r1, #8]
 800a286:	690b      	ldr	r3, [r1, #16]
 800a288:	4607      	mov	r7, r0
 800a28a:	4293      	cmp	r3, r2
 800a28c:	bfb8      	it	lt
 800a28e:	4613      	movlt	r3, r2
 800a290:	6033      	str	r3, [r6, #0]
 800a292:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a296:	460c      	mov	r4, r1
 800a298:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a29c:	b10a      	cbz	r2, 800a2a2 <_printf_common+0x26>
 800a29e:	3301      	adds	r3, #1
 800a2a0:	6033      	str	r3, [r6, #0]
 800a2a2:	6823      	ldr	r3, [r4, #0]
 800a2a4:	0699      	lsls	r1, r3, #26
 800a2a6:	bf42      	ittt	mi
 800a2a8:	6833      	ldrmi	r3, [r6, #0]
 800a2aa:	3302      	addmi	r3, #2
 800a2ac:	6033      	strmi	r3, [r6, #0]
 800a2ae:	6825      	ldr	r5, [r4, #0]
 800a2b0:	f015 0506 	ands.w	r5, r5, #6
 800a2b4:	d106      	bne.n	800a2c4 <_printf_common+0x48>
 800a2b6:	f104 0a19 	add.w	sl, r4, #25
 800a2ba:	68e3      	ldr	r3, [r4, #12]
 800a2bc:	6832      	ldr	r2, [r6, #0]
 800a2be:	1a9b      	subs	r3, r3, r2
 800a2c0:	42ab      	cmp	r3, r5
 800a2c2:	dc28      	bgt.n	800a316 <_printf_common+0x9a>
 800a2c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a2c8:	1e13      	subs	r3, r2, #0
 800a2ca:	6822      	ldr	r2, [r4, #0]
 800a2cc:	bf18      	it	ne
 800a2ce:	2301      	movne	r3, #1
 800a2d0:	0692      	lsls	r2, r2, #26
 800a2d2:	d42d      	bmi.n	800a330 <_printf_common+0xb4>
 800a2d4:	4649      	mov	r1, r9
 800a2d6:	4638      	mov	r0, r7
 800a2d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a2dc:	47c0      	blx	r8
 800a2de:	3001      	adds	r0, #1
 800a2e0:	d020      	beq.n	800a324 <_printf_common+0xa8>
 800a2e2:	6823      	ldr	r3, [r4, #0]
 800a2e4:	68e5      	ldr	r5, [r4, #12]
 800a2e6:	f003 0306 	and.w	r3, r3, #6
 800a2ea:	2b04      	cmp	r3, #4
 800a2ec:	bf18      	it	ne
 800a2ee:	2500      	movne	r5, #0
 800a2f0:	6832      	ldr	r2, [r6, #0]
 800a2f2:	f04f 0600 	mov.w	r6, #0
 800a2f6:	68a3      	ldr	r3, [r4, #8]
 800a2f8:	bf08      	it	eq
 800a2fa:	1aad      	subeq	r5, r5, r2
 800a2fc:	6922      	ldr	r2, [r4, #16]
 800a2fe:	bf08      	it	eq
 800a300:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a304:	4293      	cmp	r3, r2
 800a306:	bfc4      	itt	gt
 800a308:	1a9b      	subgt	r3, r3, r2
 800a30a:	18ed      	addgt	r5, r5, r3
 800a30c:	341a      	adds	r4, #26
 800a30e:	42b5      	cmp	r5, r6
 800a310:	d11a      	bne.n	800a348 <_printf_common+0xcc>
 800a312:	2000      	movs	r0, #0
 800a314:	e008      	b.n	800a328 <_printf_common+0xac>
 800a316:	2301      	movs	r3, #1
 800a318:	4652      	mov	r2, sl
 800a31a:	4649      	mov	r1, r9
 800a31c:	4638      	mov	r0, r7
 800a31e:	47c0      	blx	r8
 800a320:	3001      	adds	r0, #1
 800a322:	d103      	bne.n	800a32c <_printf_common+0xb0>
 800a324:	f04f 30ff 	mov.w	r0, #4294967295
 800a328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a32c:	3501      	adds	r5, #1
 800a32e:	e7c4      	b.n	800a2ba <_printf_common+0x3e>
 800a330:	2030      	movs	r0, #48	; 0x30
 800a332:	18e1      	adds	r1, r4, r3
 800a334:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a338:	1c5a      	adds	r2, r3, #1
 800a33a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a33e:	4422      	add	r2, r4
 800a340:	3302      	adds	r3, #2
 800a342:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a346:	e7c5      	b.n	800a2d4 <_printf_common+0x58>
 800a348:	2301      	movs	r3, #1
 800a34a:	4622      	mov	r2, r4
 800a34c:	4649      	mov	r1, r9
 800a34e:	4638      	mov	r0, r7
 800a350:	47c0      	blx	r8
 800a352:	3001      	adds	r0, #1
 800a354:	d0e6      	beq.n	800a324 <_printf_common+0xa8>
 800a356:	3601      	adds	r6, #1
 800a358:	e7d9      	b.n	800a30e <_printf_common+0x92>
	...

0800a35c <_printf_i>:
 800a35c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a360:	7e0f      	ldrb	r7, [r1, #24]
 800a362:	4691      	mov	r9, r2
 800a364:	2f78      	cmp	r7, #120	; 0x78
 800a366:	4680      	mov	r8, r0
 800a368:	460c      	mov	r4, r1
 800a36a:	469a      	mov	sl, r3
 800a36c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a36e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a372:	d807      	bhi.n	800a384 <_printf_i+0x28>
 800a374:	2f62      	cmp	r7, #98	; 0x62
 800a376:	d80a      	bhi.n	800a38e <_printf_i+0x32>
 800a378:	2f00      	cmp	r7, #0
 800a37a:	f000 80d9 	beq.w	800a530 <_printf_i+0x1d4>
 800a37e:	2f58      	cmp	r7, #88	; 0x58
 800a380:	f000 80a4 	beq.w	800a4cc <_printf_i+0x170>
 800a384:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a388:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a38c:	e03a      	b.n	800a404 <_printf_i+0xa8>
 800a38e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a392:	2b15      	cmp	r3, #21
 800a394:	d8f6      	bhi.n	800a384 <_printf_i+0x28>
 800a396:	a101      	add	r1, pc, #4	; (adr r1, 800a39c <_printf_i+0x40>)
 800a398:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a39c:	0800a3f5 	.word	0x0800a3f5
 800a3a0:	0800a409 	.word	0x0800a409
 800a3a4:	0800a385 	.word	0x0800a385
 800a3a8:	0800a385 	.word	0x0800a385
 800a3ac:	0800a385 	.word	0x0800a385
 800a3b0:	0800a385 	.word	0x0800a385
 800a3b4:	0800a409 	.word	0x0800a409
 800a3b8:	0800a385 	.word	0x0800a385
 800a3bc:	0800a385 	.word	0x0800a385
 800a3c0:	0800a385 	.word	0x0800a385
 800a3c4:	0800a385 	.word	0x0800a385
 800a3c8:	0800a517 	.word	0x0800a517
 800a3cc:	0800a439 	.word	0x0800a439
 800a3d0:	0800a4f9 	.word	0x0800a4f9
 800a3d4:	0800a385 	.word	0x0800a385
 800a3d8:	0800a385 	.word	0x0800a385
 800a3dc:	0800a539 	.word	0x0800a539
 800a3e0:	0800a385 	.word	0x0800a385
 800a3e4:	0800a439 	.word	0x0800a439
 800a3e8:	0800a385 	.word	0x0800a385
 800a3ec:	0800a385 	.word	0x0800a385
 800a3f0:	0800a501 	.word	0x0800a501
 800a3f4:	682b      	ldr	r3, [r5, #0]
 800a3f6:	1d1a      	adds	r2, r3, #4
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	602a      	str	r2, [r5, #0]
 800a3fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a400:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a404:	2301      	movs	r3, #1
 800a406:	e0a4      	b.n	800a552 <_printf_i+0x1f6>
 800a408:	6820      	ldr	r0, [r4, #0]
 800a40a:	6829      	ldr	r1, [r5, #0]
 800a40c:	0606      	lsls	r6, r0, #24
 800a40e:	f101 0304 	add.w	r3, r1, #4
 800a412:	d50a      	bpl.n	800a42a <_printf_i+0xce>
 800a414:	680e      	ldr	r6, [r1, #0]
 800a416:	602b      	str	r3, [r5, #0]
 800a418:	2e00      	cmp	r6, #0
 800a41a:	da03      	bge.n	800a424 <_printf_i+0xc8>
 800a41c:	232d      	movs	r3, #45	; 0x2d
 800a41e:	4276      	negs	r6, r6
 800a420:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a424:	230a      	movs	r3, #10
 800a426:	485e      	ldr	r0, [pc, #376]	; (800a5a0 <_printf_i+0x244>)
 800a428:	e019      	b.n	800a45e <_printf_i+0x102>
 800a42a:	680e      	ldr	r6, [r1, #0]
 800a42c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a430:	602b      	str	r3, [r5, #0]
 800a432:	bf18      	it	ne
 800a434:	b236      	sxthne	r6, r6
 800a436:	e7ef      	b.n	800a418 <_printf_i+0xbc>
 800a438:	682b      	ldr	r3, [r5, #0]
 800a43a:	6820      	ldr	r0, [r4, #0]
 800a43c:	1d19      	adds	r1, r3, #4
 800a43e:	6029      	str	r1, [r5, #0]
 800a440:	0601      	lsls	r1, r0, #24
 800a442:	d501      	bpl.n	800a448 <_printf_i+0xec>
 800a444:	681e      	ldr	r6, [r3, #0]
 800a446:	e002      	b.n	800a44e <_printf_i+0xf2>
 800a448:	0646      	lsls	r6, r0, #25
 800a44a:	d5fb      	bpl.n	800a444 <_printf_i+0xe8>
 800a44c:	881e      	ldrh	r6, [r3, #0]
 800a44e:	2f6f      	cmp	r7, #111	; 0x6f
 800a450:	bf0c      	ite	eq
 800a452:	2308      	moveq	r3, #8
 800a454:	230a      	movne	r3, #10
 800a456:	4852      	ldr	r0, [pc, #328]	; (800a5a0 <_printf_i+0x244>)
 800a458:	2100      	movs	r1, #0
 800a45a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a45e:	6865      	ldr	r5, [r4, #4]
 800a460:	2d00      	cmp	r5, #0
 800a462:	bfa8      	it	ge
 800a464:	6821      	ldrge	r1, [r4, #0]
 800a466:	60a5      	str	r5, [r4, #8]
 800a468:	bfa4      	itt	ge
 800a46a:	f021 0104 	bicge.w	r1, r1, #4
 800a46e:	6021      	strge	r1, [r4, #0]
 800a470:	b90e      	cbnz	r6, 800a476 <_printf_i+0x11a>
 800a472:	2d00      	cmp	r5, #0
 800a474:	d04d      	beq.n	800a512 <_printf_i+0x1b6>
 800a476:	4615      	mov	r5, r2
 800a478:	fbb6 f1f3 	udiv	r1, r6, r3
 800a47c:	fb03 6711 	mls	r7, r3, r1, r6
 800a480:	5dc7      	ldrb	r7, [r0, r7]
 800a482:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a486:	4637      	mov	r7, r6
 800a488:	42bb      	cmp	r3, r7
 800a48a:	460e      	mov	r6, r1
 800a48c:	d9f4      	bls.n	800a478 <_printf_i+0x11c>
 800a48e:	2b08      	cmp	r3, #8
 800a490:	d10b      	bne.n	800a4aa <_printf_i+0x14e>
 800a492:	6823      	ldr	r3, [r4, #0]
 800a494:	07de      	lsls	r6, r3, #31
 800a496:	d508      	bpl.n	800a4aa <_printf_i+0x14e>
 800a498:	6923      	ldr	r3, [r4, #16]
 800a49a:	6861      	ldr	r1, [r4, #4]
 800a49c:	4299      	cmp	r1, r3
 800a49e:	bfde      	ittt	le
 800a4a0:	2330      	movle	r3, #48	; 0x30
 800a4a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a4a6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a4aa:	1b52      	subs	r2, r2, r5
 800a4ac:	6122      	str	r2, [r4, #16]
 800a4ae:	464b      	mov	r3, r9
 800a4b0:	4621      	mov	r1, r4
 800a4b2:	4640      	mov	r0, r8
 800a4b4:	f8cd a000 	str.w	sl, [sp]
 800a4b8:	aa03      	add	r2, sp, #12
 800a4ba:	f7ff fedf 	bl	800a27c <_printf_common>
 800a4be:	3001      	adds	r0, #1
 800a4c0:	d14c      	bne.n	800a55c <_printf_i+0x200>
 800a4c2:	f04f 30ff 	mov.w	r0, #4294967295
 800a4c6:	b004      	add	sp, #16
 800a4c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4cc:	4834      	ldr	r0, [pc, #208]	; (800a5a0 <_printf_i+0x244>)
 800a4ce:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a4d2:	6829      	ldr	r1, [r5, #0]
 800a4d4:	6823      	ldr	r3, [r4, #0]
 800a4d6:	f851 6b04 	ldr.w	r6, [r1], #4
 800a4da:	6029      	str	r1, [r5, #0]
 800a4dc:	061d      	lsls	r5, r3, #24
 800a4de:	d514      	bpl.n	800a50a <_printf_i+0x1ae>
 800a4e0:	07df      	lsls	r7, r3, #31
 800a4e2:	bf44      	itt	mi
 800a4e4:	f043 0320 	orrmi.w	r3, r3, #32
 800a4e8:	6023      	strmi	r3, [r4, #0]
 800a4ea:	b91e      	cbnz	r6, 800a4f4 <_printf_i+0x198>
 800a4ec:	6823      	ldr	r3, [r4, #0]
 800a4ee:	f023 0320 	bic.w	r3, r3, #32
 800a4f2:	6023      	str	r3, [r4, #0]
 800a4f4:	2310      	movs	r3, #16
 800a4f6:	e7af      	b.n	800a458 <_printf_i+0xfc>
 800a4f8:	6823      	ldr	r3, [r4, #0]
 800a4fa:	f043 0320 	orr.w	r3, r3, #32
 800a4fe:	6023      	str	r3, [r4, #0]
 800a500:	2378      	movs	r3, #120	; 0x78
 800a502:	4828      	ldr	r0, [pc, #160]	; (800a5a4 <_printf_i+0x248>)
 800a504:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a508:	e7e3      	b.n	800a4d2 <_printf_i+0x176>
 800a50a:	0659      	lsls	r1, r3, #25
 800a50c:	bf48      	it	mi
 800a50e:	b2b6      	uxthmi	r6, r6
 800a510:	e7e6      	b.n	800a4e0 <_printf_i+0x184>
 800a512:	4615      	mov	r5, r2
 800a514:	e7bb      	b.n	800a48e <_printf_i+0x132>
 800a516:	682b      	ldr	r3, [r5, #0]
 800a518:	6826      	ldr	r6, [r4, #0]
 800a51a:	1d18      	adds	r0, r3, #4
 800a51c:	6961      	ldr	r1, [r4, #20]
 800a51e:	6028      	str	r0, [r5, #0]
 800a520:	0635      	lsls	r5, r6, #24
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	d501      	bpl.n	800a52a <_printf_i+0x1ce>
 800a526:	6019      	str	r1, [r3, #0]
 800a528:	e002      	b.n	800a530 <_printf_i+0x1d4>
 800a52a:	0670      	lsls	r0, r6, #25
 800a52c:	d5fb      	bpl.n	800a526 <_printf_i+0x1ca>
 800a52e:	8019      	strh	r1, [r3, #0]
 800a530:	2300      	movs	r3, #0
 800a532:	4615      	mov	r5, r2
 800a534:	6123      	str	r3, [r4, #16]
 800a536:	e7ba      	b.n	800a4ae <_printf_i+0x152>
 800a538:	682b      	ldr	r3, [r5, #0]
 800a53a:	2100      	movs	r1, #0
 800a53c:	1d1a      	adds	r2, r3, #4
 800a53e:	602a      	str	r2, [r5, #0]
 800a540:	681d      	ldr	r5, [r3, #0]
 800a542:	6862      	ldr	r2, [r4, #4]
 800a544:	4628      	mov	r0, r5
 800a546:	f002 fb31 	bl	800cbac <memchr>
 800a54a:	b108      	cbz	r0, 800a550 <_printf_i+0x1f4>
 800a54c:	1b40      	subs	r0, r0, r5
 800a54e:	6060      	str	r0, [r4, #4]
 800a550:	6863      	ldr	r3, [r4, #4]
 800a552:	6123      	str	r3, [r4, #16]
 800a554:	2300      	movs	r3, #0
 800a556:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a55a:	e7a8      	b.n	800a4ae <_printf_i+0x152>
 800a55c:	462a      	mov	r2, r5
 800a55e:	4649      	mov	r1, r9
 800a560:	4640      	mov	r0, r8
 800a562:	6923      	ldr	r3, [r4, #16]
 800a564:	47d0      	blx	sl
 800a566:	3001      	adds	r0, #1
 800a568:	d0ab      	beq.n	800a4c2 <_printf_i+0x166>
 800a56a:	6823      	ldr	r3, [r4, #0]
 800a56c:	079b      	lsls	r3, r3, #30
 800a56e:	d413      	bmi.n	800a598 <_printf_i+0x23c>
 800a570:	68e0      	ldr	r0, [r4, #12]
 800a572:	9b03      	ldr	r3, [sp, #12]
 800a574:	4298      	cmp	r0, r3
 800a576:	bfb8      	it	lt
 800a578:	4618      	movlt	r0, r3
 800a57a:	e7a4      	b.n	800a4c6 <_printf_i+0x16a>
 800a57c:	2301      	movs	r3, #1
 800a57e:	4632      	mov	r2, r6
 800a580:	4649      	mov	r1, r9
 800a582:	4640      	mov	r0, r8
 800a584:	47d0      	blx	sl
 800a586:	3001      	adds	r0, #1
 800a588:	d09b      	beq.n	800a4c2 <_printf_i+0x166>
 800a58a:	3501      	adds	r5, #1
 800a58c:	68e3      	ldr	r3, [r4, #12]
 800a58e:	9903      	ldr	r1, [sp, #12]
 800a590:	1a5b      	subs	r3, r3, r1
 800a592:	42ab      	cmp	r3, r5
 800a594:	dcf2      	bgt.n	800a57c <_printf_i+0x220>
 800a596:	e7eb      	b.n	800a570 <_printf_i+0x214>
 800a598:	2500      	movs	r5, #0
 800a59a:	f104 0619 	add.w	r6, r4, #25
 800a59e:	e7f5      	b.n	800a58c <_printf_i+0x230>
 800a5a0:	0800ef8e 	.word	0x0800ef8e
 800a5a4:	0800ef9f 	.word	0x0800ef9f

0800a5a8 <_scanf_float>:
 800a5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ac:	b087      	sub	sp, #28
 800a5ae:	9303      	str	r3, [sp, #12]
 800a5b0:	688b      	ldr	r3, [r1, #8]
 800a5b2:	4617      	mov	r7, r2
 800a5b4:	1e5a      	subs	r2, r3, #1
 800a5b6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a5ba:	bf85      	ittet	hi
 800a5bc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a5c0:	195b      	addhi	r3, r3, r5
 800a5c2:	2300      	movls	r3, #0
 800a5c4:	9302      	strhi	r3, [sp, #8]
 800a5c6:	bf88      	it	hi
 800a5c8:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a5cc:	468b      	mov	fp, r1
 800a5ce:	f04f 0500 	mov.w	r5, #0
 800a5d2:	bf8c      	ite	hi
 800a5d4:	608b      	strhi	r3, [r1, #8]
 800a5d6:	9302      	strls	r3, [sp, #8]
 800a5d8:	680b      	ldr	r3, [r1, #0]
 800a5da:	4680      	mov	r8, r0
 800a5dc:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a5e0:	f84b 3b1c 	str.w	r3, [fp], #28
 800a5e4:	460c      	mov	r4, r1
 800a5e6:	465e      	mov	r6, fp
 800a5e8:	46aa      	mov	sl, r5
 800a5ea:	46a9      	mov	r9, r5
 800a5ec:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a5f0:	9501      	str	r5, [sp, #4]
 800a5f2:	68a2      	ldr	r2, [r4, #8]
 800a5f4:	b152      	cbz	r2, 800a60c <_scanf_float+0x64>
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	781b      	ldrb	r3, [r3, #0]
 800a5fa:	2b4e      	cmp	r3, #78	; 0x4e
 800a5fc:	d864      	bhi.n	800a6c8 <_scanf_float+0x120>
 800a5fe:	2b40      	cmp	r3, #64	; 0x40
 800a600:	d83c      	bhi.n	800a67c <_scanf_float+0xd4>
 800a602:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a606:	b2c8      	uxtb	r0, r1
 800a608:	280e      	cmp	r0, #14
 800a60a:	d93a      	bls.n	800a682 <_scanf_float+0xda>
 800a60c:	f1b9 0f00 	cmp.w	r9, #0
 800a610:	d003      	beq.n	800a61a <_scanf_float+0x72>
 800a612:	6823      	ldr	r3, [r4, #0]
 800a614:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a618:	6023      	str	r3, [r4, #0]
 800a61a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a61e:	f1ba 0f01 	cmp.w	sl, #1
 800a622:	f200 8113 	bhi.w	800a84c <_scanf_float+0x2a4>
 800a626:	455e      	cmp	r6, fp
 800a628:	f200 8105 	bhi.w	800a836 <_scanf_float+0x28e>
 800a62c:	2501      	movs	r5, #1
 800a62e:	4628      	mov	r0, r5
 800a630:	b007      	add	sp, #28
 800a632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a636:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a63a:	2a0d      	cmp	r2, #13
 800a63c:	d8e6      	bhi.n	800a60c <_scanf_float+0x64>
 800a63e:	a101      	add	r1, pc, #4	; (adr r1, 800a644 <_scanf_float+0x9c>)
 800a640:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a644:	0800a783 	.word	0x0800a783
 800a648:	0800a60d 	.word	0x0800a60d
 800a64c:	0800a60d 	.word	0x0800a60d
 800a650:	0800a60d 	.word	0x0800a60d
 800a654:	0800a7e3 	.word	0x0800a7e3
 800a658:	0800a7bb 	.word	0x0800a7bb
 800a65c:	0800a60d 	.word	0x0800a60d
 800a660:	0800a60d 	.word	0x0800a60d
 800a664:	0800a791 	.word	0x0800a791
 800a668:	0800a60d 	.word	0x0800a60d
 800a66c:	0800a60d 	.word	0x0800a60d
 800a670:	0800a60d 	.word	0x0800a60d
 800a674:	0800a60d 	.word	0x0800a60d
 800a678:	0800a749 	.word	0x0800a749
 800a67c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a680:	e7db      	b.n	800a63a <_scanf_float+0x92>
 800a682:	290e      	cmp	r1, #14
 800a684:	d8c2      	bhi.n	800a60c <_scanf_float+0x64>
 800a686:	a001      	add	r0, pc, #4	; (adr r0, 800a68c <_scanf_float+0xe4>)
 800a688:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a68c:	0800a73b 	.word	0x0800a73b
 800a690:	0800a60d 	.word	0x0800a60d
 800a694:	0800a73b 	.word	0x0800a73b
 800a698:	0800a7cf 	.word	0x0800a7cf
 800a69c:	0800a60d 	.word	0x0800a60d
 800a6a0:	0800a6e9 	.word	0x0800a6e9
 800a6a4:	0800a725 	.word	0x0800a725
 800a6a8:	0800a725 	.word	0x0800a725
 800a6ac:	0800a725 	.word	0x0800a725
 800a6b0:	0800a725 	.word	0x0800a725
 800a6b4:	0800a725 	.word	0x0800a725
 800a6b8:	0800a725 	.word	0x0800a725
 800a6bc:	0800a725 	.word	0x0800a725
 800a6c0:	0800a725 	.word	0x0800a725
 800a6c4:	0800a725 	.word	0x0800a725
 800a6c8:	2b6e      	cmp	r3, #110	; 0x6e
 800a6ca:	d809      	bhi.n	800a6e0 <_scanf_float+0x138>
 800a6cc:	2b60      	cmp	r3, #96	; 0x60
 800a6ce:	d8b2      	bhi.n	800a636 <_scanf_float+0x8e>
 800a6d0:	2b54      	cmp	r3, #84	; 0x54
 800a6d2:	d077      	beq.n	800a7c4 <_scanf_float+0x21c>
 800a6d4:	2b59      	cmp	r3, #89	; 0x59
 800a6d6:	d199      	bne.n	800a60c <_scanf_float+0x64>
 800a6d8:	2d07      	cmp	r5, #7
 800a6da:	d197      	bne.n	800a60c <_scanf_float+0x64>
 800a6dc:	2508      	movs	r5, #8
 800a6de:	e029      	b.n	800a734 <_scanf_float+0x18c>
 800a6e0:	2b74      	cmp	r3, #116	; 0x74
 800a6e2:	d06f      	beq.n	800a7c4 <_scanf_float+0x21c>
 800a6e4:	2b79      	cmp	r3, #121	; 0x79
 800a6e6:	e7f6      	b.n	800a6d6 <_scanf_float+0x12e>
 800a6e8:	6821      	ldr	r1, [r4, #0]
 800a6ea:	05c8      	lsls	r0, r1, #23
 800a6ec:	d51a      	bpl.n	800a724 <_scanf_float+0x17c>
 800a6ee:	9b02      	ldr	r3, [sp, #8]
 800a6f0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a6f4:	6021      	str	r1, [r4, #0]
 800a6f6:	f109 0901 	add.w	r9, r9, #1
 800a6fa:	b11b      	cbz	r3, 800a704 <_scanf_float+0x15c>
 800a6fc:	3b01      	subs	r3, #1
 800a6fe:	3201      	adds	r2, #1
 800a700:	9302      	str	r3, [sp, #8]
 800a702:	60a2      	str	r2, [r4, #8]
 800a704:	68a3      	ldr	r3, [r4, #8]
 800a706:	3b01      	subs	r3, #1
 800a708:	60a3      	str	r3, [r4, #8]
 800a70a:	6923      	ldr	r3, [r4, #16]
 800a70c:	3301      	adds	r3, #1
 800a70e:	6123      	str	r3, [r4, #16]
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	3b01      	subs	r3, #1
 800a714:	2b00      	cmp	r3, #0
 800a716:	607b      	str	r3, [r7, #4]
 800a718:	f340 8084 	ble.w	800a824 <_scanf_float+0x27c>
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	3301      	adds	r3, #1
 800a720:	603b      	str	r3, [r7, #0]
 800a722:	e766      	b.n	800a5f2 <_scanf_float+0x4a>
 800a724:	eb1a 0f05 	cmn.w	sl, r5
 800a728:	f47f af70 	bne.w	800a60c <_scanf_float+0x64>
 800a72c:	6822      	ldr	r2, [r4, #0]
 800a72e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a732:	6022      	str	r2, [r4, #0]
 800a734:	f806 3b01 	strb.w	r3, [r6], #1
 800a738:	e7e4      	b.n	800a704 <_scanf_float+0x15c>
 800a73a:	6822      	ldr	r2, [r4, #0]
 800a73c:	0610      	lsls	r0, r2, #24
 800a73e:	f57f af65 	bpl.w	800a60c <_scanf_float+0x64>
 800a742:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a746:	e7f4      	b.n	800a732 <_scanf_float+0x18a>
 800a748:	f1ba 0f00 	cmp.w	sl, #0
 800a74c:	d10e      	bne.n	800a76c <_scanf_float+0x1c4>
 800a74e:	f1b9 0f00 	cmp.w	r9, #0
 800a752:	d10e      	bne.n	800a772 <_scanf_float+0x1ca>
 800a754:	6822      	ldr	r2, [r4, #0]
 800a756:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a75a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a75e:	d108      	bne.n	800a772 <_scanf_float+0x1ca>
 800a760:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a764:	f04f 0a01 	mov.w	sl, #1
 800a768:	6022      	str	r2, [r4, #0]
 800a76a:	e7e3      	b.n	800a734 <_scanf_float+0x18c>
 800a76c:	f1ba 0f02 	cmp.w	sl, #2
 800a770:	d055      	beq.n	800a81e <_scanf_float+0x276>
 800a772:	2d01      	cmp	r5, #1
 800a774:	d002      	beq.n	800a77c <_scanf_float+0x1d4>
 800a776:	2d04      	cmp	r5, #4
 800a778:	f47f af48 	bne.w	800a60c <_scanf_float+0x64>
 800a77c:	3501      	adds	r5, #1
 800a77e:	b2ed      	uxtb	r5, r5
 800a780:	e7d8      	b.n	800a734 <_scanf_float+0x18c>
 800a782:	f1ba 0f01 	cmp.w	sl, #1
 800a786:	f47f af41 	bne.w	800a60c <_scanf_float+0x64>
 800a78a:	f04f 0a02 	mov.w	sl, #2
 800a78e:	e7d1      	b.n	800a734 <_scanf_float+0x18c>
 800a790:	b97d      	cbnz	r5, 800a7b2 <_scanf_float+0x20a>
 800a792:	f1b9 0f00 	cmp.w	r9, #0
 800a796:	f47f af3c 	bne.w	800a612 <_scanf_float+0x6a>
 800a79a:	6822      	ldr	r2, [r4, #0]
 800a79c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a7a0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a7a4:	f47f af39 	bne.w	800a61a <_scanf_float+0x72>
 800a7a8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a7ac:	2501      	movs	r5, #1
 800a7ae:	6022      	str	r2, [r4, #0]
 800a7b0:	e7c0      	b.n	800a734 <_scanf_float+0x18c>
 800a7b2:	2d03      	cmp	r5, #3
 800a7b4:	d0e2      	beq.n	800a77c <_scanf_float+0x1d4>
 800a7b6:	2d05      	cmp	r5, #5
 800a7b8:	e7de      	b.n	800a778 <_scanf_float+0x1d0>
 800a7ba:	2d02      	cmp	r5, #2
 800a7bc:	f47f af26 	bne.w	800a60c <_scanf_float+0x64>
 800a7c0:	2503      	movs	r5, #3
 800a7c2:	e7b7      	b.n	800a734 <_scanf_float+0x18c>
 800a7c4:	2d06      	cmp	r5, #6
 800a7c6:	f47f af21 	bne.w	800a60c <_scanf_float+0x64>
 800a7ca:	2507      	movs	r5, #7
 800a7cc:	e7b2      	b.n	800a734 <_scanf_float+0x18c>
 800a7ce:	6822      	ldr	r2, [r4, #0]
 800a7d0:	0591      	lsls	r1, r2, #22
 800a7d2:	f57f af1b 	bpl.w	800a60c <_scanf_float+0x64>
 800a7d6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a7da:	6022      	str	r2, [r4, #0]
 800a7dc:	f8cd 9004 	str.w	r9, [sp, #4]
 800a7e0:	e7a8      	b.n	800a734 <_scanf_float+0x18c>
 800a7e2:	6822      	ldr	r2, [r4, #0]
 800a7e4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a7e8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a7ec:	d006      	beq.n	800a7fc <_scanf_float+0x254>
 800a7ee:	0550      	lsls	r0, r2, #21
 800a7f0:	f57f af0c 	bpl.w	800a60c <_scanf_float+0x64>
 800a7f4:	f1b9 0f00 	cmp.w	r9, #0
 800a7f8:	f43f af0f 	beq.w	800a61a <_scanf_float+0x72>
 800a7fc:	0591      	lsls	r1, r2, #22
 800a7fe:	bf58      	it	pl
 800a800:	9901      	ldrpl	r1, [sp, #4]
 800a802:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a806:	bf58      	it	pl
 800a808:	eba9 0101 	subpl.w	r1, r9, r1
 800a80c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a810:	f04f 0900 	mov.w	r9, #0
 800a814:	bf58      	it	pl
 800a816:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a81a:	6022      	str	r2, [r4, #0]
 800a81c:	e78a      	b.n	800a734 <_scanf_float+0x18c>
 800a81e:	f04f 0a03 	mov.w	sl, #3
 800a822:	e787      	b.n	800a734 <_scanf_float+0x18c>
 800a824:	4639      	mov	r1, r7
 800a826:	4640      	mov	r0, r8
 800a828:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a82c:	4798      	blx	r3
 800a82e:	2800      	cmp	r0, #0
 800a830:	f43f aedf 	beq.w	800a5f2 <_scanf_float+0x4a>
 800a834:	e6ea      	b.n	800a60c <_scanf_float+0x64>
 800a836:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a83a:	463a      	mov	r2, r7
 800a83c:	4640      	mov	r0, r8
 800a83e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a842:	4798      	blx	r3
 800a844:	6923      	ldr	r3, [r4, #16]
 800a846:	3b01      	subs	r3, #1
 800a848:	6123      	str	r3, [r4, #16]
 800a84a:	e6ec      	b.n	800a626 <_scanf_float+0x7e>
 800a84c:	1e6b      	subs	r3, r5, #1
 800a84e:	2b06      	cmp	r3, #6
 800a850:	d825      	bhi.n	800a89e <_scanf_float+0x2f6>
 800a852:	2d02      	cmp	r5, #2
 800a854:	d836      	bhi.n	800a8c4 <_scanf_float+0x31c>
 800a856:	455e      	cmp	r6, fp
 800a858:	f67f aee8 	bls.w	800a62c <_scanf_float+0x84>
 800a85c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a860:	463a      	mov	r2, r7
 800a862:	4640      	mov	r0, r8
 800a864:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a868:	4798      	blx	r3
 800a86a:	6923      	ldr	r3, [r4, #16]
 800a86c:	3b01      	subs	r3, #1
 800a86e:	6123      	str	r3, [r4, #16]
 800a870:	e7f1      	b.n	800a856 <_scanf_float+0x2ae>
 800a872:	9802      	ldr	r0, [sp, #8]
 800a874:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a878:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a87c:	463a      	mov	r2, r7
 800a87e:	9002      	str	r0, [sp, #8]
 800a880:	4640      	mov	r0, r8
 800a882:	4798      	blx	r3
 800a884:	6923      	ldr	r3, [r4, #16]
 800a886:	3b01      	subs	r3, #1
 800a888:	6123      	str	r3, [r4, #16]
 800a88a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a88e:	fa5f fa8a 	uxtb.w	sl, sl
 800a892:	f1ba 0f02 	cmp.w	sl, #2
 800a896:	d1ec      	bne.n	800a872 <_scanf_float+0x2ca>
 800a898:	3d03      	subs	r5, #3
 800a89a:	b2ed      	uxtb	r5, r5
 800a89c:	1b76      	subs	r6, r6, r5
 800a89e:	6823      	ldr	r3, [r4, #0]
 800a8a0:	05da      	lsls	r2, r3, #23
 800a8a2:	d52f      	bpl.n	800a904 <_scanf_float+0x35c>
 800a8a4:	055b      	lsls	r3, r3, #21
 800a8a6:	d510      	bpl.n	800a8ca <_scanf_float+0x322>
 800a8a8:	455e      	cmp	r6, fp
 800a8aa:	f67f aebf 	bls.w	800a62c <_scanf_float+0x84>
 800a8ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a8b2:	463a      	mov	r2, r7
 800a8b4:	4640      	mov	r0, r8
 800a8b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a8ba:	4798      	blx	r3
 800a8bc:	6923      	ldr	r3, [r4, #16]
 800a8be:	3b01      	subs	r3, #1
 800a8c0:	6123      	str	r3, [r4, #16]
 800a8c2:	e7f1      	b.n	800a8a8 <_scanf_float+0x300>
 800a8c4:	46aa      	mov	sl, r5
 800a8c6:	9602      	str	r6, [sp, #8]
 800a8c8:	e7df      	b.n	800a88a <_scanf_float+0x2e2>
 800a8ca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a8ce:	6923      	ldr	r3, [r4, #16]
 800a8d0:	2965      	cmp	r1, #101	; 0x65
 800a8d2:	f103 33ff 	add.w	r3, r3, #4294967295
 800a8d6:	f106 35ff 	add.w	r5, r6, #4294967295
 800a8da:	6123      	str	r3, [r4, #16]
 800a8dc:	d00c      	beq.n	800a8f8 <_scanf_float+0x350>
 800a8de:	2945      	cmp	r1, #69	; 0x45
 800a8e0:	d00a      	beq.n	800a8f8 <_scanf_float+0x350>
 800a8e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a8e6:	463a      	mov	r2, r7
 800a8e8:	4640      	mov	r0, r8
 800a8ea:	4798      	blx	r3
 800a8ec:	6923      	ldr	r3, [r4, #16]
 800a8ee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a8f2:	3b01      	subs	r3, #1
 800a8f4:	1eb5      	subs	r5, r6, #2
 800a8f6:	6123      	str	r3, [r4, #16]
 800a8f8:	463a      	mov	r2, r7
 800a8fa:	4640      	mov	r0, r8
 800a8fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a900:	4798      	blx	r3
 800a902:	462e      	mov	r6, r5
 800a904:	6825      	ldr	r5, [r4, #0]
 800a906:	f015 0510 	ands.w	r5, r5, #16
 800a90a:	d155      	bne.n	800a9b8 <_scanf_float+0x410>
 800a90c:	7035      	strb	r5, [r6, #0]
 800a90e:	6823      	ldr	r3, [r4, #0]
 800a910:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a914:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a918:	d11b      	bne.n	800a952 <_scanf_float+0x3aa>
 800a91a:	9b01      	ldr	r3, [sp, #4]
 800a91c:	454b      	cmp	r3, r9
 800a91e:	eba3 0209 	sub.w	r2, r3, r9
 800a922:	d123      	bne.n	800a96c <_scanf_float+0x3c4>
 800a924:	2200      	movs	r2, #0
 800a926:	4659      	mov	r1, fp
 800a928:	4640      	mov	r0, r8
 800a92a:	f000 febd 	bl	800b6a8 <_strtod_r>
 800a92e:	6822      	ldr	r2, [r4, #0]
 800a930:	9b03      	ldr	r3, [sp, #12]
 800a932:	f012 0f02 	tst.w	r2, #2
 800a936:	4606      	mov	r6, r0
 800a938:	460f      	mov	r7, r1
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	d021      	beq.n	800a982 <_scanf_float+0x3da>
 800a93e:	1d1a      	adds	r2, r3, #4
 800a940:	9903      	ldr	r1, [sp, #12]
 800a942:	600a      	str	r2, [r1, #0]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	e9c3 6700 	strd	r6, r7, [r3]
 800a94a:	68e3      	ldr	r3, [r4, #12]
 800a94c:	3301      	adds	r3, #1
 800a94e:	60e3      	str	r3, [r4, #12]
 800a950:	e66d      	b.n	800a62e <_scanf_float+0x86>
 800a952:	9b04      	ldr	r3, [sp, #16]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d0e5      	beq.n	800a924 <_scanf_float+0x37c>
 800a958:	9905      	ldr	r1, [sp, #20]
 800a95a:	230a      	movs	r3, #10
 800a95c:	462a      	mov	r2, r5
 800a95e:	4640      	mov	r0, r8
 800a960:	3101      	adds	r1, #1
 800a962:	f000 ff23 	bl	800b7ac <_strtol_r>
 800a966:	9b04      	ldr	r3, [sp, #16]
 800a968:	9e05      	ldr	r6, [sp, #20]
 800a96a:	1ac2      	subs	r2, r0, r3
 800a96c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a970:	429e      	cmp	r6, r3
 800a972:	bf28      	it	cs
 800a974:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a978:	4630      	mov	r0, r6
 800a97a:	4910      	ldr	r1, [pc, #64]	; (800a9bc <_scanf_float+0x414>)
 800a97c:	f000 f85a 	bl	800aa34 <siprintf>
 800a980:	e7d0      	b.n	800a924 <_scanf_float+0x37c>
 800a982:	f012 0f04 	tst.w	r2, #4
 800a986:	f103 0204 	add.w	r2, r3, #4
 800a98a:	d1d9      	bne.n	800a940 <_scanf_float+0x398>
 800a98c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800a990:	f8cc 2000 	str.w	r2, [ip]
 800a994:	f8d3 8000 	ldr.w	r8, [r3]
 800a998:	4602      	mov	r2, r0
 800a99a:	460b      	mov	r3, r1
 800a99c:	f7f6 f836 	bl	8000a0c <__aeabi_dcmpun>
 800a9a0:	b128      	cbz	r0, 800a9ae <_scanf_float+0x406>
 800a9a2:	4807      	ldr	r0, [pc, #28]	; (800a9c0 <_scanf_float+0x418>)
 800a9a4:	f000 f80e 	bl	800a9c4 <nanf>
 800a9a8:	f8c8 0000 	str.w	r0, [r8]
 800a9ac:	e7cd      	b.n	800a94a <_scanf_float+0x3a2>
 800a9ae:	4630      	mov	r0, r6
 800a9b0:	4639      	mov	r1, r7
 800a9b2:	f7f6 f889 	bl	8000ac8 <__aeabi_d2f>
 800a9b6:	e7f7      	b.n	800a9a8 <_scanf_float+0x400>
 800a9b8:	2500      	movs	r5, #0
 800a9ba:	e638      	b.n	800a62e <_scanf_float+0x86>
 800a9bc:	0800efb0 	.word	0x0800efb0
 800a9c0:	0800f3b8 	.word	0x0800f3b8

0800a9c4 <nanf>:
 800a9c4:	4800      	ldr	r0, [pc, #0]	; (800a9c8 <nanf+0x4>)
 800a9c6:	4770      	bx	lr
 800a9c8:	7fc00000 	.word	0x7fc00000

0800a9cc <sniprintf>:
 800a9cc:	b40c      	push	{r2, r3}
 800a9ce:	b530      	push	{r4, r5, lr}
 800a9d0:	4b17      	ldr	r3, [pc, #92]	; (800aa30 <sniprintf+0x64>)
 800a9d2:	1e0c      	subs	r4, r1, #0
 800a9d4:	681d      	ldr	r5, [r3, #0]
 800a9d6:	b09d      	sub	sp, #116	; 0x74
 800a9d8:	da08      	bge.n	800a9ec <sniprintf+0x20>
 800a9da:	238b      	movs	r3, #139	; 0x8b
 800a9dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a9e0:	602b      	str	r3, [r5, #0]
 800a9e2:	b01d      	add	sp, #116	; 0x74
 800a9e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a9e8:	b002      	add	sp, #8
 800a9ea:	4770      	bx	lr
 800a9ec:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a9f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a9f4:	bf0c      	ite	eq
 800a9f6:	4623      	moveq	r3, r4
 800a9f8:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a9fc:	9304      	str	r3, [sp, #16]
 800a9fe:	9307      	str	r3, [sp, #28]
 800aa00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aa04:	9002      	str	r0, [sp, #8]
 800aa06:	9006      	str	r0, [sp, #24]
 800aa08:	f8ad 3016 	strh.w	r3, [sp, #22]
 800aa0c:	4628      	mov	r0, r5
 800aa0e:	ab21      	add	r3, sp, #132	; 0x84
 800aa10:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800aa12:	a902      	add	r1, sp, #8
 800aa14:	9301      	str	r3, [sp, #4]
 800aa16:	f002 fee9 	bl	800d7ec <_svfiprintf_r>
 800aa1a:	1c43      	adds	r3, r0, #1
 800aa1c:	bfbc      	itt	lt
 800aa1e:	238b      	movlt	r3, #139	; 0x8b
 800aa20:	602b      	strlt	r3, [r5, #0]
 800aa22:	2c00      	cmp	r4, #0
 800aa24:	d0dd      	beq.n	800a9e2 <sniprintf+0x16>
 800aa26:	2200      	movs	r2, #0
 800aa28:	9b02      	ldr	r3, [sp, #8]
 800aa2a:	701a      	strb	r2, [r3, #0]
 800aa2c:	e7d9      	b.n	800a9e2 <sniprintf+0x16>
 800aa2e:	bf00      	nop
 800aa30:	200000a0 	.word	0x200000a0

0800aa34 <siprintf>:
 800aa34:	b40e      	push	{r1, r2, r3}
 800aa36:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800aa3a:	b500      	push	{lr}
 800aa3c:	b09c      	sub	sp, #112	; 0x70
 800aa3e:	ab1d      	add	r3, sp, #116	; 0x74
 800aa40:	9002      	str	r0, [sp, #8]
 800aa42:	9006      	str	r0, [sp, #24]
 800aa44:	9107      	str	r1, [sp, #28]
 800aa46:	9104      	str	r1, [sp, #16]
 800aa48:	4808      	ldr	r0, [pc, #32]	; (800aa6c <siprintf+0x38>)
 800aa4a:	4909      	ldr	r1, [pc, #36]	; (800aa70 <siprintf+0x3c>)
 800aa4c:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa50:	9105      	str	r1, [sp, #20]
 800aa52:	6800      	ldr	r0, [r0, #0]
 800aa54:	a902      	add	r1, sp, #8
 800aa56:	9301      	str	r3, [sp, #4]
 800aa58:	f002 fec8 	bl	800d7ec <_svfiprintf_r>
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	9b02      	ldr	r3, [sp, #8]
 800aa60:	701a      	strb	r2, [r3, #0]
 800aa62:	b01c      	add	sp, #112	; 0x70
 800aa64:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa68:	b003      	add	sp, #12
 800aa6a:	4770      	bx	lr
 800aa6c:	200000a0 	.word	0x200000a0
 800aa70:	ffff0208 	.word	0xffff0208

0800aa74 <strcat>:
 800aa74:	4602      	mov	r2, r0
 800aa76:	b510      	push	{r4, lr}
 800aa78:	7814      	ldrb	r4, [r2, #0]
 800aa7a:	4613      	mov	r3, r2
 800aa7c:	3201      	adds	r2, #1
 800aa7e:	2c00      	cmp	r4, #0
 800aa80:	d1fa      	bne.n	800aa78 <strcat+0x4>
 800aa82:	3b01      	subs	r3, #1
 800aa84:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa88:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aa8c:	2a00      	cmp	r2, #0
 800aa8e:	d1f9      	bne.n	800aa84 <strcat+0x10>
 800aa90:	bd10      	pop	{r4, pc}

0800aa92 <sulp>:
 800aa92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa96:	460f      	mov	r7, r1
 800aa98:	4690      	mov	r8, r2
 800aa9a:	f002 fc13 	bl	800d2c4 <__ulp>
 800aa9e:	4604      	mov	r4, r0
 800aaa0:	460d      	mov	r5, r1
 800aaa2:	f1b8 0f00 	cmp.w	r8, #0
 800aaa6:	d011      	beq.n	800aacc <sulp+0x3a>
 800aaa8:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800aaac:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	dd0b      	ble.n	800aacc <sulp+0x3a>
 800aab4:	2400      	movs	r4, #0
 800aab6:	051b      	lsls	r3, r3, #20
 800aab8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800aabc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800aac0:	4622      	mov	r2, r4
 800aac2:	462b      	mov	r3, r5
 800aac4:	f7f5 fd08 	bl	80004d8 <__aeabi_dmul>
 800aac8:	4604      	mov	r4, r0
 800aaca:	460d      	mov	r5, r1
 800aacc:	4620      	mov	r0, r4
 800aace:	4629      	mov	r1, r5
 800aad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aad4:	0000      	movs	r0, r0
	...

0800aad8 <_strtod_l>:
 800aad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aadc:	469b      	mov	fp, r3
 800aade:	2300      	movs	r3, #0
 800aae0:	b09f      	sub	sp, #124	; 0x7c
 800aae2:	931a      	str	r3, [sp, #104]	; 0x68
 800aae4:	4b9e      	ldr	r3, [pc, #632]	; (800ad60 <_strtod_l+0x288>)
 800aae6:	4682      	mov	sl, r0
 800aae8:	681f      	ldr	r7, [r3, #0]
 800aaea:	460e      	mov	r6, r1
 800aaec:	4638      	mov	r0, r7
 800aaee:	9215      	str	r2, [sp, #84]	; 0x54
 800aaf0:	f7f5 fb2e 	bl	8000150 <strlen>
 800aaf4:	f04f 0800 	mov.w	r8, #0
 800aaf8:	4604      	mov	r4, r0
 800aafa:	f04f 0900 	mov.w	r9, #0
 800aafe:	9619      	str	r6, [sp, #100]	; 0x64
 800ab00:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ab02:	781a      	ldrb	r2, [r3, #0]
 800ab04:	2a2b      	cmp	r2, #43	; 0x2b
 800ab06:	d04c      	beq.n	800aba2 <_strtod_l+0xca>
 800ab08:	d83a      	bhi.n	800ab80 <_strtod_l+0xa8>
 800ab0a:	2a0d      	cmp	r2, #13
 800ab0c:	d833      	bhi.n	800ab76 <_strtod_l+0x9e>
 800ab0e:	2a08      	cmp	r2, #8
 800ab10:	d833      	bhi.n	800ab7a <_strtod_l+0xa2>
 800ab12:	2a00      	cmp	r2, #0
 800ab14:	d03d      	beq.n	800ab92 <_strtod_l+0xba>
 800ab16:	2300      	movs	r3, #0
 800ab18:	930a      	str	r3, [sp, #40]	; 0x28
 800ab1a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800ab1c:	782b      	ldrb	r3, [r5, #0]
 800ab1e:	2b30      	cmp	r3, #48	; 0x30
 800ab20:	f040 80aa 	bne.w	800ac78 <_strtod_l+0x1a0>
 800ab24:	786b      	ldrb	r3, [r5, #1]
 800ab26:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ab2a:	2b58      	cmp	r3, #88	; 0x58
 800ab2c:	d166      	bne.n	800abfc <_strtod_l+0x124>
 800ab2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab30:	4650      	mov	r0, sl
 800ab32:	9301      	str	r3, [sp, #4]
 800ab34:	ab1a      	add	r3, sp, #104	; 0x68
 800ab36:	9300      	str	r3, [sp, #0]
 800ab38:	4a8a      	ldr	r2, [pc, #552]	; (800ad64 <_strtod_l+0x28c>)
 800ab3a:	f8cd b008 	str.w	fp, [sp, #8]
 800ab3e:	ab1b      	add	r3, sp, #108	; 0x6c
 800ab40:	a919      	add	r1, sp, #100	; 0x64
 800ab42:	f001 fd17 	bl	800c574 <__gethex>
 800ab46:	f010 0607 	ands.w	r6, r0, #7
 800ab4a:	4604      	mov	r4, r0
 800ab4c:	d005      	beq.n	800ab5a <_strtod_l+0x82>
 800ab4e:	2e06      	cmp	r6, #6
 800ab50:	d129      	bne.n	800aba6 <_strtod_l+0xce>
 800ab52:	2300      	movs	r3, #0
 800ab54:	3501      	adds	r5, #1
 800ab56:	9519      	str	r5, [sp, #100]	; 0x64
 800ab58:	930a      	str	r3, [sp, #40]	; 0x28
 800ab5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	f040 858a 	bne.w	800b676 <_strtod_l+0xb9e>
 800ab62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab64:	b1d3      	cbz	r3, 800ab9c <_strtod_l+0xc4>
 800ab66:	4642      	mov	r2, r8
 800ab68:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ab6c:	4610      	mov	r0, r2
 800ab6e:	4619      	mov	r1, r3
 800ab70:	b01f      	add	sp, #124	; 0x7c
 800ab72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab76:	2a20      	cmp	r2, #32
 800ab78:	d1cd      	bne.n	800ab16 <_strtod_l+0x3e>
 800ab7a:	3301      	adds	r3, #1
 800ab7c:	9319      	str	r3, [sp, #100]	; 0x64
 800ab7e:	e7bf      	b.n	800ab00 <_strtod_l+0x28>
 800ab80:	2a2d      	cmp	r2, #45	; 0x2d
 800ab82:	d1c8      	bne.n	800ab16 <_strtod_l+0x3e>
 800ab84:	2201      	movs	r2, #1
 800ab86:	920a      	str	r2, [sp, #40]	; 0x28
 800ab88:	1c5a      	adds	r2, r3, #1
 800ab8a:	9219      	str	r2, [sp, #100]	; 0x64
 800ab8c:	785b      	ldrb	r3, [r3, #1]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d1c3      	bne.n	800ab1a <_strtod_l+0x42>
 800ab92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab94:	9619      	str	r6, [sp, #100]	; 0x64
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	f040 856b 	bne.w	800b672 <_strtod_l+0xb9a>
 800ab9c:	4642      	mov	r2, r8
 800ab9e:	464b      	mov	r3, r9
 800aba0:	e7e4      	b.n	800ab6c <_strtod_l+0x94>
 800aba2:	2200      	movs	r2, #0
 800aba4:	e7ef      	b.n	800ab86 <_strtod_l+0xae>
 800aba6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800aba8:	b13a      	cbz	r2, 800abba <_strtod_l+0xe2>
 800abaa:	2135      	movs	r1, #53	; 0x35
 800abac:	a81c      	add	r0, sp, #112	; 0x70
 800abae:	f002 fc8d 	bl	800d4cc <__copybits>
 800abb2:	4650      	mov	r0, sl
 800abb4:	991a      	ldr	r1, [sp, #104]	; 0x68
 800abb6:	f002 f855 	bl	800cc64 <_Bfree>
 800abba:	3e01      	subs	r6, #1
 800abbc:	2e04      	cmp	r6, #4
 800abbe:	d806      	bhi.n	800abce <_strtod_l+0xf6>
 800abc0:	e8df f006 	tbb	[pc, r6]
 800abc4:	1714030a 	.word	0x1714030a
 800abc8:	0a          	.byte	0x0a
 800abc9:	00          	.byte	0x00
 800abca:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800abce:	0721      	lsls	r1, r4, #28
 800abd0:	d5c3      	bpl.n	800ab5a <_strtod_l+0x82>
 800abd2:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800abd6:	e7c0      	b.n	800ab5a <_strtod_l+0x82>
 800abd8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800abda:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800abde:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800abe2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800abe6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800abea:	e7f0      	b.n	800abce <_strtod_l+0xf6>
 800abec:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800ad68 <_strtod_l+0x290>
 800abf0:	e7ed      	b.n	800abce <_strtod_l+0xf6>
 800abf2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800abf6:	f04f 38ff 	mov.w	r8, #4294967295
 800abfa:	e7e8      	b.n	800abce <_strtod_l+0xf6>
 800abfc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800abfe:	1c5a      	adds	r2, r3, #1
 800ac00:	9219      	str	r2, [sp, #100]	; 0x64
 800ac02:	785b      	ldrb	r3, [r3, #1]
 800ac04:	2b30      	cmp	r3, #48	; 0x30
 800ac06:	d0f9      	beq.n	800abfc <_strtod_l+0x124>
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d0a6      	beq.n	800ab5a <_strtod_l+0x82>
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	9307      	str	r3, [sp, #28]
 800ac10:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ac12:	220a      	movs	r2, #10
 800ac14:	9308      	str	r3, [sp, #32]
 800ac16:	2300      	movs	r3, #0
 800ac18:	469b      	mov	fp, r3
 800ac1a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800ac1e:	9819      	ldr	r0, [sp, #100]	; 0x64
 800ac20:	7805      	ldrb	r5, [r0, #0]
 800ac22:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800ac26:	b2d9      	uxtb	r1, r3
 800ac28:	2909      	cmp	r1, #9
 800ac2a:	d927      	bls.n	800ac7c <_strtod_l+0x1a4>
 800ac2c:	4622      	mov	r2, r4
 800ac2e:	4639      	mov	r1, r7
 800ac30:	f002 fef2 	bl	800da18 <strncmp>
 800ac34:	2800      	cmp	r0, #0
 800ac36:	d033      	beq.n	800aca0 <_strtod_l+0x1c8>
 800ac38:	2000      	movs	r0, #0
 800ac3a:	462a      	mov	r2, r5
 800ac3c:	465c      	mov	r4, fp
 800ac3e:	4603      	mov	r3, r0
 800ac40:	9004      	str	r0, [sp, #16]
 800ac42:	2a65      	cmp	r2, #101	; 0x65
 800ac44:	d001      	beq.n	800ac4a <_strtod_l+0x172>
 800ac46:	2a45      	cmp	r2, #69	; 0x45
 800ac48:	d114      	bne.n	800ac74 <_strtod_l+0x19c>
 800ac4a:	b91c      	cbnz	r4, 800ac54 <_strtod_l+0x17c>
 800ac4c:	9a07      	ldr	r2, [sp, #28]
 800ac4e:	4302      	orrs	r2, r0
 800ac50:	d09f      	beq.n	800ab92 <_strtod_l+0xba>
 800ac52:	2400      	movs	r4, #0
 800ac54:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800ac56:	1c72      	adds	r2, r6, #1
 800ac58:	9219      	str	r2, [sp, #100]	; 0x64
 800ac5a:	7872      	ldrb	r2, [r6, #1]
 800ac5c:	2a2b      	cmp	r2, #43	; 0x2b
 800ac5e:	d079      	beq.n	800ad54 <_strtod_l+0x27c>
 800ac60:	2a2d      	cmp	r2, #45	; 0x2d
 800ac62:	f000 8083 	beq.w	800ad6c <_strtod_l+0x294>
 800ac66:	2700      	movs	r7, #0
 800ac68:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ac6c:	2909      	cmp	r1, #9
 800ac6e:	f240 8083 	bls.w	800ad78 <_strtod_l+0x2a0>
 800ac72:	9619      	str	r6, [sp, #100]	; 0x64
 800ac74:	2500      	movs	r5, #0
 800ac76:	e09f      	b.n	800adb8 <_strtod_l+0x2e0>
 800ac78:	2300      	movs	r3, #0
 800ac7a:	e7c8      	b.n	800ac0e <_strtod_l+0x136>
 800ac7c:	f1bb 0f08 	cmp.w	fp, #8
 800ac80:	bfd5      	itete	le
 800ac82:	9906      	ldrle	r1, [sp, #24]
 800ac84:	9905      	ldrgt	r1, [sp, #20]
 800ac86:	fb02 3301 	mlale	r3, r2, r1, r3
 800ac8a:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ac8e:	f100 0001 	add.w	r0, r0, #1
 800ac92:	bfd4      	ite	le
 800ac94:	9306      	strle	r3, [sp, #24]
 800ac96:	9305      	strgt	r3, [sp, #20]
 800ac98:	f10b 0b01 	add.w	fp, fp, #1
 800ac9c:	9019      	str	r0, [sp, #100]	; 0x64
 800ac9e:	e7be      	b.n	800ac1e <_strtod_l+0x146>
 800aca0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aca2:	191a      	adds	r2, r3, r4
 800aca4:	9219      	str	r2, [sp, #100]	; 0x64
 800aca6:	5d1a      	ldrb	r2, [r3, r4]
 800aca8:	f1bb 0f00 	cmp.w	fp, #0
 800acac:	d036      	beq.n	800ad1c <_strtod_l+0x244>
 800acae:	465c      	mov	r4, fp
 800acb0:	9004      	str	r0, [sp, #16]
 800acb2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800acb6:	2b09      	cmp	r3, #9
 800acb8:	d912      	bls.n	800ace0 <_strtod_l+0x208>
 800acba:	2301      	movs	r3, #1
 800acbc:	e7c1      	b.n	800ac42 <_strtod_l+0x16a>
 800acbe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800acc0:	3001      	adds	r0, #1
 800acc2:	1c5a      	adds	r2, r3, #1
 800acc4:	9219      	str	r2, [sp, #100]	; 0x64
 800acc6:	785a      	ldrb	r2, [r3, #1]
 800acc8:	2a30      	cmp	r2, #48	; 0x30
 800acca:	d0f8      	beq.n	800acbe <_strtod_l+0x1e6>
 800accc:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800acd0:	2b08      	cmp	r3, #8
 800acd2:	f200 84d5 	bhi.w	800b680 <_strtod_l+0xba8>
 800acd6:	9004      	str	r0, [sp, #16]
 800acd8:	2000      	movs	r0, #0
 800acda:	4604      	mov	r4, r0
 800acdc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800acde:	9308      	str	r3, [sp, #32]
 800ace0:	3a30      	subs	r2, #48	; 0x30
 800ace2:	f100 0301 	add.w	r3, r0, #1
 800ace6:	d013      	beq.n	800ad10 <_strtod_l+0x238>
 800ace8:	9904      	ldr	r1, [sp, #16]
 800acea:	1905      	adds	r5, r0, r4
 800acec:	4419      	add	r1, r3
 800acee:	9104      	str	r1, [sp, #16]
 800acf0:	4623      	mov	r3, r4
 800acf2:	210a      	movs	r1, #10
 800acf4:	42ab      	cmp	r3, r5
 800acf6:	d113      	bne.n	800ad20 <_strtod_l+0x248>
 800acf8:	1823      	adds	r3, r4, r0
 800acfa:	2b08      	cmp	r3, #8
 800acfc:	f104 0401 	add.w	r4, r4, #1
 800ad00:	4404      	add	r4, r0
 800ad02:	dc1b      	bgt.n	800ad3c <_strtod_l+0x264>
 800ad04:	230a      	movs	r3, #10
 800ad06:	9906      	ldr	r1, [sp, #24]
 800ad08:	fb03 2301 	mla	r3, r3, r1, r2
 800ad0c:	9306      	str	r3, [sp, #24]
 800ad0e:	2300      	movs	r3, #0
 800ad10:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ad12:	4618      	mov	r0, r3
 800ad14:	1c51      	adds	r1, r2, #1
 800ad16:	9119      	str	r1, [sp, #100]	; 0x64
 800ad18:	7852      	ldrb	r2, [r2, #1]
 800ad1a:	e7ca      	b.n	800acb2 <_strtod_l+0x1da>
 800ad1c:	4658      	mov	r0, fp
 800ad1e:	e7d3      	b.n	800acc8 <_strtod_l+0x1f0>
 800ad20:	2b08      	cmp	r3, #8
 800ad22:	dc04      	bgt.n	800ad2e <_strtod_l+0x256>
 800ad24:	9f06      	ldr	r7, [sp, #24]
 800ad26:	434f      	muls	r7, r1
 800ad28:	9706      	str	r7, [sp, #24]
 800ad2a:	3301      	adds	r3, #1
 800ad2c:	e7e2      	b.n	800acf4 <_strtod_l+0x21c>
 800ad2e:	1c5f      	adds	r7, r3, #1
 800ad30:	2f10      	cmp	r7, #16
 800ad32:	bfde      	ittt	le
 800ad34:	9f05      	ldrle	r7, [sp, #20]
 800ad36:	434f      	mulle	r7, r1
 800ad38:	9705      	strle	r7, [sp, #20]
 800ad3a:	e7f6      	b.n	800ad2a <_strtod_l+0x252>
 800ad3c:	2c10      	cmp	r4, #16
 800ad3e:	bfdf      	itttt	le
 800ad40:	230a      	movle	r3, #10
 800ad42:	9905      	ldrle	r1, [sp, #20]
 800ad44:	fb03 2301 	mlale	r3, r3, r1, r2
 800ad48:	9305      	strle	r3, [sp, #20]
 800ad4a:	e7e0      	b.n	800ad0e <_strtod_l+0x236>
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	9304      	str	r3, [sp, #16]
 800ad50:	2301      	movs	r3, #1
 800ad52:	e77b      	b.n	800ac4c <_strtod_l+0x174>
 800ad54:	2700      	movs	r7, #0
 800ad56:	1cb2      	adds	r2, r6, #2
 800ad58:	9219      	str	r2, [sp, #100]	; 0x64
 800ad5a:	78b2      	ldrb	r2, [r6, #2]
 800ad5c:	e784      	b.n	800ac68 <_strtod_l+0x190>
 800ad5e:	bf00      	nop
 800ad60:	0800f200 	.word	0x0800f200
 800ad64:	0800efb8 	.word	0x0800efb8
 800ad68:	7ff00000 	.word	0x7ff00000
 800ad6c:	2701      	movs	r7, #1
 800ad6e:	e7f2      	b.n	800ad56 <_strtod_l+0x27e>
 800ad70:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ad72:	1c51      	adds	r1, r2, #1
 800ad74:	9119      	str	r1, [sp, #100]	; 0x64
 800ad76:	7852      	ldrb	r2, [r2, #1]
 800ad78:	2a30      	cmp	r2, #48	; 0x30
 800ad7a:	d0f9      	beq.n	800ad70 <_strtod_l+0x298>
 800ad7c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ad80:	2908      	cmp	r1, #8
 800ad82:	f63f af77 	bhi.w	800ac74 <_strtod_l+0x19c>
 800ad86:	f04f 0e0a 	mov.w	lr, #10
 800ad8a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800ad8e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ad90:	9209      	str	r2, [sp, #36]	; 0x24
 800ad92:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ad94:	1c51      	adds	r1, r2, #1
 800ad96:	9119      	str	r1, [sp, #100]	; 0x64
 800ad98:	7852      	ldrb	r2, [r2, #1]
 800ad9a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800ad9e:	2d09      	cmp	r5, #9
 800ada0:	d935      	bls.n	800ae0e <_strtod_l+0x336>
 800ada2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ada4:	1b49      	subs	r1, r1, r5
 800ada6:	2908      	cmp	r1, #8
 800ada8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800adac:	dc02      	bgt.n	800adb4 <_strtod_l+0x2dc>
 800adae:	4565      	cmp	r5, ip
 800adb0:	bfa8      	it	ge
 800adb2:	4665      	movge	r5, ip
 800adb4:	b107      	cbz	r7, 800adb8 <_strtod_l+0x2e0>
 800adb6:	426d      	negs	r5, r5
 800adb8:	2c00      	cmp	r4, #0
 800adba:	d14c      	bne.n	800ae56 <_strtod_l+0x37e>
 800adbc:	9907      	ldr	r1, [sp, #28]
 800adbe:	4301      	orrs	r1, r0
 800adc0:	f47f aecb 	bne.w	800ab5a <_strtod_l+0x82>
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	f47f aee4 	bne.w	800ab92 <_strtod_l+0xba>
 800adca:	2a69      	cmp	r2, #105	; 0x69
 800adcc:	d026      	beq.n	800ae1c <_strtod_l+0x344>
 800adce:	dc23      	bgt.n	800ae18 <_strtod_l+0x340>
 800add0:	2a49      	cmp	r2, #73	; 0x49
 800add2:	d023      	beq.n	800ae1c <_strtod_l+0x344>
 800add4:	2a4e      	cmp	r2, #78	; 0x4e
 800add6:	f47f aedc 	bne.w	800ab92 <_strtod_l+0xba>
 800adda:	499d      	ldr	r1, [pc, #628]	; (800b050 <_strtod_l+0x578>)
 800addc:	a819      	add	r0, sp, #100	; 0x64
 800adde:	f001 fe17 	bl	800ca10 <__match>
 800ade2:	2800      	cmp	r0, #0
 800ade4:	f43f aed5 	beq.w	800ab92 <_strtod_l+0xba>
 800ade8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800adea:	781b      	ldrb	r3, [r3, #0]
 800adec:	2b28      	cmp	r3, #40	; 0x28
 800adee:	d12c      	bne.n	800ae4a <_strtod_l+0x372>
 800adf0:	4998      	ldr	r1, [pc, #608]	; (800b054 <_strtod_l+0x57c>)
 800adf2:	aa1c      	add	r2, sp, #112	; 0x70
 800adf4:	a819      	add	r0, sp, #100	; 0x64
 800adf6:	f001 fe1f 	bl	800ca38 <__hexnan>
 800adfa:	2805      	cmp	r0, #5
 800adfc:	d125      	bne.n	800ae4a <_strtod_l+0x372>
 800adfe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ae00:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800ae04:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800ae08:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800ae0c:	e6a5      	b.n	800ab5a <_strtod_l+0x82>
 800ae0e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800ae12:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800ae16:	e7bc      	b.n	800ad92 <_strtod_l+0x2ba>
 800ae18:	2a6e      	cmp	r2, #110	; 0x6e
 800ae1a:	e7dc      	b.n	800add6 <_strtod_l+0x2fe>
 800ae1c:	498e      	ldr	r1, [pc, #568]	; (800b058 <_strtod_l+0x580>)
 800ae1e:	a819      	add	r0, sp, #100	; 0x64
 800ae20:	f001 fdf6 	bl	800ca10 <__match>
 800ae24:	2800      	cmp	r0, #0
 800ae26:	f43f aeb4 	beq.w	800ab92 <_strtod_l+0xba>
 800ae2a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ae2c:	498b      	ldr	r1, [pc, #556]	; (800b05c <_strtod_l+0x584>)
 800ae2e:	3b01      	subs	r3, #1
 800ae30:	a819      	add	r0, sp, #100	; 0x64
 800ae32:	9319      	str	r3, [sp, #100]	; 0x64
 800ae34:	f001 fdec 	bl	800ca10 <__match>
 800ae38:	b910      	cbnz	r0, 800ae40 <_strtod_l+0x368>
 800ae3a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ae3c:	3301      	adds	r3, #1
 800ae3e:	9319      	str	r3, [sp, #100]	; 0x64
 800ae40:	f04f 0800 	mov.w	r8, #0
 800ae44:	f8df 9218 	ldr.w	r9, [pc, #536]	; 800b060 <_strtod_l+0x588>
 800ae48:	e687      	b.n	800ab5a <_strtod_l+0x82>
 800ae4a:	4886      	ldr	r0, [pc, #536]	; (800b064 <_strtod_l+0x58c>)
 800ae4c:	f002 fdce 	bl	800d9ec <nan>
 800ae50:	4680      	mov	r8, r0
 800ae52:	4689      	mov	r9, r1
 800ae54:	e681      	b.n	800ab5a <_strtod_l+0x82>
 800ae56:	9b04      	ldr	r3, [sp, #16]
 800ae58:	f1bb 0f00 	cmp.w	fp, #0
 800ae5c:	bf08      	it	eq
 800ae5e:	46a3      	moveq	fp, r4
 800ae60:	1aeb      	subs	r3, r5, r3
 800ae62:	2c10      	cmp	r4, #16
 800ae64:	9806      	ldr	r0, [sp, #24]
 800ae66:	4626      	mov	r6, r4
 800ae68:	9307      	str	r3, [sp, #28]
 800ae6a:	bfa8      	it	ge
 800ae6c:	2610      	movge	r6, #16
 800ae6e:	f7f5 fab9 	bl	80003e4 <__aeabi_ui2d>
 800ae72:	2c09      	cmp	r4, #9
 800ae74:	4680      	mov	r8, r0
 800ae76:	4689      	mov	r9, r1
 800ae78:	dd13      	ble.n	800aea2 <_strtod_l+0x3ca>
 800ae7a:	4b7b      	ldr	r3, [pc, #492]	; (800b068 <_strtod_l+0x590>)
 800ae7c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ae80:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ae84:	f7f5 fb28 	bl	80004d8 <__aeabi_dmul>
 800ae88:	4680      	mov	r8, r0
 800ae8a:	9805      	ldr	r0, [sp, #20]
 800ae8c:	4689      	mov	r9, r1
 800ae8e:	f7f5 faa9 	bl	80003e4 <__aeabi_ui2d>
 800ae92:	4602      	mov	r2, r0
 800ae94:	460b      	mov	r3, r1
 800ae96:	4640      	mov	r0, r8
 800ae98:	4649      	mov	r1, r9
 800ae9a:	f7f5 f967 	bl	800016c <__adddf3>
 800ae9e:	4680      	mov	r8, r0
 800aea0:	4689      	mov	r9, r1
 800aea2:	2c0f      	cmp	r4, #15
 800aea4:	dc36      	bgt.n	800af14 <_strtod_l+0x43c>
 800aea6:	9b07      	ldr	r3, [sp, #28]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	f43f ae56 	beq.w	800ab5a <_strtod_l+0x82>
 800aeae:	dd22      	ble.n	800aef6 <_strtod_l+0x41e>
 800aeb0:	2b16      	cmp	r3, #22
 800aeb2:	dc09      	bgt.n	800aec8 <_strtod_l+0x3f0>
 800aeb4:	496c      	ldr	r1, [pc, #432]	; (800b068 <_strtod_l+0x590>)
 800aeb6:	4642      	mov	r2, r8
 800aeb8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aebc:	464b      	mov	r3, r9
 800aebe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aec2:	f7f5 fb09 	bl	80004d8 <__aeabi_dmul>
 800aec6:	e7c3      	b.n	800ae50 <_strtod_l+0x378>
 800aec8:	9a07      	ldr	r2, [sp, #28]
 800aeca:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800aece:	4293      	cmp	r3, r2
 800aed0:	db20      	blt.n	800af14 <_strtod_l+0x43c>
 800aed2:	4d65      	ldr	r5, [pc, #404]	; (800b068 <_strtod_l+0x590>)
 800aed4:	f1c4 040f 	rsb	r4, r4, #15
 800aed8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800aedc:	4642      	mov	r2, r8
 800aede:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aee2:	464b      	mov	r3, r9
 800aee4:	f7f5 faf8 	bl	80004d8 <__aeabi_dmul>
 800aee8:	9b07      	ldr	r3, [sp, #28]
 800aeea:	1b1c      	subs	r4, r3, r4
 800aeec:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800aef0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aef4:	e7e5      	b.n	800aec2 <_strtod_l+0x3ea>
 800aef6:	9b07      	ldr	r3, [sp, #28]
 800aef8:	3316      	adds	r3, #22
 800aefa:	db0b      	blt.n	800af14 <_strtod_l+0x43c>
 800aefc:	9b04      	ldr	r3, [sp, #16]
 800aefe:	4640      	mov	r0, r8
 800af00:	1b5d      	subs	r5, r3, r5
 800af02:	4b59      	ldr	r3, [pc, #356]	; (800b068 <_strtod_l+0x590>)
 800af04:	4649      	mov	r1, r9
 800af06:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800af0a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800af0e:	f7f5 fc0d 	bl	800072c <__aeabi_ddiv>
 800af12:	e79d      	b.n	800ae50 <_strtod_l+0x378>
 800af14:	9b07      	ldr	r3, [sp, #28]
 800af16:	1ba6      	subs	r6, r4, r6
 800af18:	441e      	add	r6, r3
 800af1a:	2e00      	cmp	r6, #0
 800af1c:	dd74      	ble.n	800b008 <_strtod_l+0x530>
 800af1e:	f016 030f 	ands.w	r3, r6, #15
 800af22:	d00a      	beq.n	800af3a <_strtod_l+0x462>
 800af24:	4950      	ldr	r1, [pc, #320]	; (800b068 <_strtod_l+0x590>)
 800af26:	4642      	mov	r2, r8
 800af28:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800af2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af30:	464b      	mov	r3, r9
 800af32:	f7f5 fad1 	bl	80004d8 <__aeabi_dmul>
 800af36:	4680      	mov	r8, r0
 800af38:	4689      	mov	r9, r1
 800af3a:	f036 060f 	bics.w	r6, r6, #15
 800af3e:	d052      	beq.n	800afe6 <_strtod_l+0x50e>
 800af40:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800af44:	dd27      	ble.n	800af96 <_strtod_l+0x4be>
 800af46:	f04f 0b00 	mov.w	fp, #0
 800af4a:	f8cd b010 	str.w	fp, [sp, #16]
 800af4e:	f8cd b020 	str.w	fp, [sp, #32]
 800af52:	f8cd b018 	str.w	fp, [sp, #24]
 800af56:	2322      	movs	r3, #34	; 0x22
 800af58:	f04f 0800 	mov.w	r8, #0
 800af5c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 800b060 <_strtod_l+0x588>
 800af60:	f8ca 3000 	str.w	r3, [sl]
 800af64:	9b08      	ldr	r3, [sp, #32]
 800af66:	2b00      	cmp	r3, #0
 800af68:	f43f adf7 	beq.w	800ab5a <_strtod_l+0x82>
 800af6c:	4650      	mov	r0, sl
 800af6e:	991a      	ldr	r1, [sp, #104]	; 0x68
 800af70:	f001 fe78 	bl	800cc64 <_Bfree>
 800af74:	4650      	mov	r0, sl
 800af76:	9906      	ldr	r1, [sp, #24]
 800af78:	f001 fe74 	bl	800cc64 <_Bfree>
 800af7c:	4650      	mov	r0, sl
 800af7e:	9904      	ldr	r1, [sp, #16]
 800af80:	f001 fe70 	bl	800cc64 <_Bfree>
 800af84:	4650      	mov	r0, sl
 800af86:	9908      	ldr	r1, [sp, #32]
 800af88:	f001 fe6c 	bl	800cc64 <_Bfree>
 800af8c:	4659      	mov	r1, fp
 800af8e:	4650      	mov	r0, sl
 800af90:	f001 fe68 	bl	800cc64 <_Bfree>
 800af94:	e5e1      	b.n	800ab5a <_strtod_l+0x82>
 800af96:	4b35      	ldr	r3, [pc, #212]	; (800b06c <_strtod_l+0x594>)
 800af98:	4640      	mov	r0, r8
 800af9a:	9305      	str	r3, [sp, #20]
 800af9c:	2300      	movs	r3, #0
 800af9e:	4649      	mov	r1, r9
 800afa0:	461f      	mov	r7, r3
 800afa2:	1136      	asrs	r6, r6, #4
 800afa4:	2e01      	cmp	r6, #1
 800afa6:	dc21      	bgt.n	800afec <_strtod_l+0x514>
 800afa8:	b10b      	cbz	r3, 800afae <_strtod_l+0x4d6>
 800afaa:	4680      	mov	r8, r0
 800afac:	4689      	mov	r9, r1
 800afae:	4b2f      	ldr	r3, [pc, #188]	; (800b06c <_strtod_l+0x594>)
 800afb0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800afb4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800afb8:	4642      	mov	r2, r8
 800afba:	e9d7 0100 	ldrd	r0, r1, [r7]
 800afbe:	464b      	mov	r3, r9
 800afc0:	f7f5 fa8a 	bl	80004d8 <__aeabi_dmul>
 800afc4:	4b26      	ldr	r3, [pc, #152]	; (800b060 <_strtod_l+0x588>)
 800afc6:	460a      	mov	r2, r1
 800afc8:	400b      	ands	r3, r1
 800afca:	4929      	ldr	r1, [pc, #164]	; (800b070 <_strtod_l+0x598>)
 800afcc:	4680      	mov	r8, r0
 800afce:	428b      	cmp	r3, r1
 800afd0:	d8b9      	bhi.n	800af46 <_strtod_l+0x46e>
 800afd2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800afd6:	428b      	cmp	r3, r1
 800afd8:	bf86      	itte	hi
 800afda:	f04f 38ff 	movhi.w	r8, #4294967295
 800afde:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800b074 <_strtod_l+0x59c>
 800afe2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800afe6:	2300      	movs	r3, #0
 800afe8:	9305      	str	r3, [sp, #20]
 800afea:	e07f      	b.n	800b0ec <_strtod_l+0x614>
 800afec:	07f2      	lsls	r2, r6, #31
 800afee:	d505      	bpl.n	800affc <_strtod_l+0x524>
 800aff0:	9b05      	ldr	r3, [sp, #20]
 800aff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff6:	f7f5 fa6f 	bl	80004d8 <__aeabi_dmul>
 800affa:	2301      	movs	r3, #1
 800affc:	9a05      	ldr	r2, [sp, #20]
 800affe:	3701      	adds	r7, #1
 800b000:	3208      	adds	r2, #8
 800b002:	1076      	asrs	r6, r6, #1
 800b004:	9205      	str	r2, [sp, #20]
 800b006:	e7cd      	b.n	800afa4 <_strtod_l+0x4cc>
 800b008:	d0ed      	beq.n	800afe6 <_strtod_l+0x50e>
 800b00a:	4276      	negs	r6, r6
 800b00c:	f016 020f 	ands.w	r2, r6, #15
 800b010:	d00a      	beq.n	800b028 <_strtod_l+0x550>
 800b012:	4b15      	ldr	r3, [pc, #84]	; (800b068 <_strtod_l+0x590>)
 800b014:	4640      	mov	r0, r8
 800b016:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b01a:	4649      	mov	r1, r9
 800b01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b020:	f7f5 fb84 	bl	800072c <__aeabi_ddiv>
 800b024:	4680      	mov	r8, r0
 800b026:	4689      	mov	r9, r1
 800b028:	1136      	asrs	r6, r6, #4
 800b02a:	d0dc      	beq.n	800afe6 <_strtod_l+0x50e>
 800b02c:	2e1f      	cmp	r6, #31
 800b02e:	dd23      	ble.n	800b078 <_strtod_l+0x5a0>
 800b030:	f04f 0b00 	mov.w	fp, #0
 800b034:	f8cd b010 	str.w	fp, [sp, #16]
 800b038:	f8cd b020 	str.w	fp, [sp, #32]
 800b03c:	f8cd b018 	str.w	fp, [sp, #24]
 800b040:	2322      	movs	r3, #34	; 0x22
 800b042:	f04f 0800 	mov.w	r8, #0
 800b046:	f04f 0900 	mov.w	r9, #0
 800b04a:	f8ca 3000 	str.w	r3, [sl]
 800b04e:	e789      	b.n	800af64 <_strtod_l+0x48c>
 800b050:	0800ef89 	.word	0x0800ef89
 800b054:	0800efcc 	.word	0x0800efcc
 800b058:	0800ef81 	.word	0x0800ef81
 800b05c:	0800f10c 	.word	0x0800f10c
 800b060:	7ff00000 	.word	0x7ff00000
 800b064:	0800f3b8 	.word	0x0800f3b8
 800b068:	0800f298 	.word	0x0800f298
 800b06c:	0800f270 	.word	0x0800f270
 800b070:	7ca00000 	.word	0x7ca00000
 800b074:	7fefffff 	.word	0x7fefffff
 800b078:	f016 0310 	ands.w	r3, r6, #16
 800b07c:	bf18      	it	ne
 800b07e:	236a      	movne	r3, #106	; 0x6a
 800b080:	4640      	mov	r0, r8
 800b082:	9305      	str	r3, [sp, #20]
 800b084:	4649      	mov	r1, r9
 800b086:	2300      	movs	r3, #0
 800b088:	4fb0      	ldr	r7, [pc, #704]	; (800b34c <_strtod_l+0x874>)
 800b08a:	07f2      	lsls	r2, r6, #31
 800b08c:	d504      	bpl.n	800b098 <_strtod_l+0x5c0>
 800b08e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b092:	f7f5 fa21 	bl	80004d8 <__aeabi_dmul>
 800b096:	2301      	movs	r3, #1
 800b098:	1076      	asrs	r6, r6, #1
 800b09a:	f107 0708 	add.w	r7, r7, #8
 800b09e:	d1f4      	bne.n	800b08a <_strtod_l+0x5b2>
 800b0a0:	b10b      	cbz	r3, 800b0a6 <_strtod_l+0x5ce>
 800b0a2:	4680      	mov	r8, r0
 800b0a4:	4689      	mov	r9, r1
 800b0a6:	9b05      	ldr	r3, [sp, #20]
 800b0a8:	b1c3      	cbz	r3, 800b0dc <_strtod_l+0x604>
 800b0aa:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800b0ae:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	4649      	mov	r1, r9
 800b0b6:	dd11      	ble.n	800b0dc <_strtod_l+0x604>
 800b0b8:	2b1f      	cmp	r3, #31
 800b0ba:	f340 8127 	ble.w	800b30c <_strtod_l+0x834>
 800b0be:	2b34      	cmp	r3, #52	; 0x34
 800b0c0:	bfd8      	it	le
 800b0c2:	f04f 33ff 	movle.w	r3, #4294967295
 800b0c6:	f04f 0800 	mov.w	r8, #0
 800b0ca:	bfcf      	iteee	gt
 800b0cc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b0d0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b0d4:	fa03 f202 	lslle.w	r2, r3, r2
 800b0d8:	ea02 0901 	andle.w	r9, r2, r1
 800b0dc:	2200      	movs	r2, #0
 800b0de:	2300      	movs	r3, #0
 800b0e0:	4640      	mov	r0, r8
 800b0e2:	4649      	mov	r1, r9
 800b0e4:	f7f5 fc60 	bl	80009a8 <__aeabi_dcmpeq>
 800b0e8:	2800      	cmp	r0, #0
 800b0ea:	d1a1      	bne.n	800b030 <_strtod_l+0x558>
 800b0ec:	9b06      	ldr	r3, [sp, #24]
 800b0ee:	465a      	mov	r2, fp
 800b0f0:	9300      	str	r3, [sp, #0]
 800b0f2:	4650      	mov	r0, sl
 800b0f4:	4623      	mov	r3, r4
 800b0f6:	9908      	ldr	r1, [sp, #32]
 800b0f8:	f001 fe1c 	bl	800cd34 <__s2b>
 800b0fc:	9008      	str	r0, [sp, #32]
 800b0fe:	2800      	cmp	r0, #0
 800b100:	f43f af21 	beq.w	800af46 <_strtod_l+0x46e>
 800b104:	9b04      	ldr	r3, [sp, #16]
 800b106:	f04f 0b00 	mov.w	fp, #0
 800b10a:	1b5d      	subs	r5, r3, r5
 800b10c:	9b07      	ldr	r3, [sp, #28]
 800b10e:	f8cd b010 	str.w	fp, [sp, #16]
 800b112:	2b00      	cmp	r3, #0
 800b114:	bfb4      	ite	lt
 800b116:	462b      	movlt	r3, r5
 800b118:	2300      	movge	r3, #0
 800b11a:	930e      	str	r3, [sp, #56]	; 0x38
 800b11c:	9b07      	ldr	r3, [sp, #28]
 800b11e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b122:	9314      	str	r3, [sp, #80]	; 0x50
 800b124:	9b08      	ldr	r3, [sp, #32]
 800b126:	4650      	mov	r0, sl
 800b128:	6859      	ldr	r1, [r3, #4]
 800b12a:	f001 fd5b 	bl	800cbe4 <_Balloc>
 800b12e:	9006      	str	r0, [sp, #24]
 800b130:	2800      	cmp	r0, #0
 800b132:	f43f af10 	beq.w	800af56 <_strtod_l+0x47e>
 800b136:	9b08      	ldr	r3, [sp, #32]
 800b138:	300c      	adds	r0, #12
 800b13a:	691a      	ldr	r2, [r3, #16]
 800b13c:	f103 010c 	add.w	r1, r3, #12
 800b140:	3202      	adds	r2, #2
 800b142:	0092      	lsls	r2, r2, #2
 800b144:	f001 fd40 	bl	800cbc8 <memcpy>
 800b148:	ab1c      	add	r3, sp, #112	; 0x70
 800b14a:	9301      	str	r3, [sp, #4]
 800b14c:	ab1b      	add	r3, sp, #108	; 0x6c
 800b14e:	9300      	str	r3, [sp, #0]
 800b150:	4642      	mov	r2, r8
 800b152:	464b      	mov	r3, r9
 800b154:	4650      	mov	r0, sl
 800b156:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800b15a:	f002 f92d 	bl	800d3b8 <__d2b>
 800b15e:	901a      	str	r0, [sp, #104]	; 0x68
 800b160:	2800      	cmp	r0, #0
 800b162:	f43f aef8 	beq.w	800af56 <_strtod_l+0x47e>
 800b166:	2101      	movs	r1, #1
 800b168:	4650      	mov	r0, sl
 800b16a:	f001 fe7b 	bl	800ce64 <__i2b>
 800b16e:	4603      	mov	r3, r0
 800b170:	9004      	str	r0, [sp, #16]
 800b172:	2800      	cmp	r0, #0
 800b174:	f43f aeef 	beq.w	800af56 <_strtod_l+0x47e>
 800b178:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800b17a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b17c:	2d00      	cmp	r5, #0
 800b17e:	bfab      	itete	ge
 800b180:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800b182:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800b184:	18ee      	addge	r6, r5, r3
 800b186:	1b5c      	sublt	r4, r3, r5
 800b188:	9b05      	ldr	r3, [sp, #20]
 800b18a:	bfa8      	it	ge
 800b18c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800b18e:	eba5 0503 	sub.w	r5, r5, r3
 800b192:	4415      	add	r5, r2
 800b194:	4b6e      	ldr	r3, [pc, #440]	; (800b350 <_strtod_l+0x878>)
 800b196:	f105 35ff 	add.w	r5, r5, #4294967295
 800b19a:	bfb8      	it	lt
 800b19c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800b19e:	429d      	cmp	r5, r3
 800b1a0:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b1a4:	f280 80c4 	bge.w	800b330 <_strtod_l+0x858>
 800b1a8:	1b5b      	subs	r3, r3, r5
 800b1aa:	2b1f      	cmp	r3, #31
 800b1ac:	f04f 0701 	mov.w	r7, #1
 800b1b0:	eba2 0203 	sub.w	r2, r2, r3
 800b1b4:	f300 80b1 	bgt.w	800b31a <_strtod_l+0x842>
 800b1b8:	2500      	movs	r5, #0
 800b1ba:	fa07 f303 	lsl.w	r3, r7, r3
 800b1be:	930f      	str	r3, [sp, #60]	; 0x3c
 800b1c0:	18b7      	adds	r7, r6, r2
 800b1c2:	9b05      	ldr	r3, [sp, #20]
 800b1c4:	42be      	cmp	r6, r7
 800b1c6:	4414      	add	r4, r2
 800b1c8:	441c      	add	r4, r3
 800b1ca:	4633      	mov	r3, r6
 800b1cc:	bfa8      	it	ge
 800b1ce:	463b      	movge	r3, r7
 800b1d0:	42a3      	cmp	r3, r4
 800b1d2:	bfa8      	it	ge
 800b1d4:	4623      	movge	r3, r4
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	bfc2      	ittt	gt
 800b1da:	1aff      	subgt	r7, r7, r3
 800b1dc:	1ae4      	subgt	r4, r4, r3
 800b1de:	1af6      	subgt	r6, r6, r3
 800b1e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	dd17      	ble.n	800b216 <_strtod_l+0x73e>
 800b1e6:	461a      	mov	r2, r3
 800b1e8:	4650      	mov	r0, sl
 800b1ea:	9904      	ldr	r1, [sp, #16]
 800b1ec:	f001 fef8 	bl	800cfe0 <__pow5mult>
 800b1f0:	9004      	str	r0, [sp, #16]
 800b1f2:	2800      	cmp	r0, #0
 800b1f4:	f43f aeaf 	beq.w	800af56 <_strtod_l+0x47e>
 800b1f8:	4601      	mov	r1, r0
 800b1fa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b1fc:	4650      	mov	r0, sl
 800b1fe:	f001 fe47 	bl	800ce90 <__multiply>
 800b202:	9009      	str	r0, [sp, #36]	; 0x24
 800b204:	2800      	cmp	r0, #0
 800b206:	f43f aea6 	beq.w	800af56 <_strtod_l+0x47e>
 800b20a:	4650      	mov	r0, sl
 800b20c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b20e:	f001 fd29 	bl	800cc64 <_Bfree>
 800b212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b214:	931a      	str	r3, [sp, #104]	; 0x68
 800b216:	2f00      	cmp	r7, #0
 800b218:	f300 808e 	bgt.w	800b338 <_strtod_l+0x860>
 800b21c:	9b07      	ldr	r3, [sp, #28]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	dd08      	ble.n	800b234 <_strtod_l+0x75c>
 800b222:	4650      	mov	r0, sl
 800b224:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b226:	9906      	ldr	r1, [sp, #24]
 800b228:	f001 feda 	bl	800cfe0 <__pow5mult>
 800b22c:	9006      	str	r0, [sp, #24]
 800b22e:	2800      	cmp	r0, #0
 800b230:	f43f ae91 	beq.w	800af56 <_strtod_l+0x47e>
 800b234:	2c00      	cmp	r4, #0
 800b236:	dd08      	ble.n	800b24a <_strtod_l+0x772>
 800b238:	4622      	mov	r2, r4
 800b23a:	4650      	mov	r0, sl
 800b23c:	9906      	ldr	r1, [sp, #24]
 800b23e:	f001 ff29 	bl	800d094 <__lshift>
 800b242:	9006      	str	r0, [sp, #24]
 800b244:	2800      	cmp	r0, #0
 800b246:	f43f ae86 	beq.w	800af56 <_strtod_l+0x47e>
 800b24a:	2e00      	cmp	r6, #0
 800b24c:	dd08      	ble.n	800b260 <_strtod_l+0x788>
 800b24e:	4632      	mov	r2, r6
 800b250:	4650      	mov	r0, sl
 800b252:	9904      	ldr	r1, [sp, #16]
 800b254:	f001 ff1e 	bl	800d094 <__lshift>
 800b258:	9004      	str	r0, [sp, #16]
 800b25a:	2800      	cmp	r0, #0
 800b25c:	f43f ae7b 	beq.w	800af56 <_strtod_l+0x47e>
 800b260:	4650      	mov	r0, sl
 800b262:	9a06      	ldr	r2, [sp, #24]
 800b264:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b266:	f001 ffa1 	bl	800d1ac <__mdiff>
 800b26a:	4683      	mov	fp, r0
 800b26c:	2800      	cmp	r0, #0
 800b26e:	f43f ae72 	beq.w	800af56 <_strtod_l+0x47e>
 800b272:	2400      	movs	r4, #0
 800b274:	68c3      	ldr	r3, [r0, #12]
 800b276:	9904      	ldr	r1, [sp, #16]
 800b278:	60c4      	str	r4, [r0, #12]
 800b27a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b27c:	f001 ff7a 	bl	800d174 <__mcmp>
 800b280:	42a0      	cmp	r0, r4
 800b282:	da6b      	bge.n	800b35c <_strtod_l+0x884>
 800b284:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b286:	ea53 0308 	orrs.w	r3, r3, r8
 800b28a:	f040 8091 	bne.w	800b3b0 <_strtod_l+0x8d8>
 800b28e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b292:	2b00      	cmp	r3, #0
 800b294:	f040 808c 	bne.w	800b3b0 <_strtod_l+0x8d8>
 800b298:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b29c:	0d1b      	lsrs	r3, r3, #20
 800b29e:	051b      	lsls	r3, r3, #20
 800b2a0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b2a4:	f240 8084 	bls.w	800b3b0 <_strtod_l+0x8d8>
 800b2a8:	f8db 3014 	ldr.w	r3, [fp, #20]
 800b2ac:	b91b      	cbnz	r3, 800b2b6 <_strtod_l+0x7de>
 800b2ae:	f8db 3010 	ldr.w	r3, [fp, #16]
 800b2b2:	2b01      	cmp	r3, #1
 800b2b4:	dd7c      	ble.n	800b3b0 <_strtod_l+0x8d8>
 800b2b6:	4659      	mov	r1, fp
 800b2b8:	2201      	movs	r2, #1
 800b2ba:	4650      	mov	r0, sl
 800b2bc:	f001 feea 	bl	800d094 <__lshift>
 800b2c0:	9904      	ldr	r1, [sp, #16]
 800b2c2:	4683      	mov	fp, r0
 800b2c4:	f001 ff56 	bl	800d174 <__mcmp>
 800b2c8:	2800      	cmp	r0, #0
 800b2ca:	dd71      	ble.n	800b3b0 <_strtod_l+0x8d8>
 800b2cc:	9905      	ldr	r1, [sp, #20]
 800b2ce:	464b      	mov	r3, r9
 800b2d0:	4a20      	ldr	r2, [pc, #128]	; (800b354 <_strtod_l+0x87c>)
 800b2d2:	2900      	cmp	r1, #0
 800b2d4:	f000 808c 	beq.w	800b3f0 <_strtod_l+0x918>
 800b2d8:	ea02 0109 	and.w	r1, r2, r9
 800b2dc:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b2e0:	f300 8086 	bgt.w	800b3f0 <_strtod_l+0x918>
 800b2e4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b2e8:	f77f aeaa 	ble.w	800b040 <_strtod_l+0x568>
 800b2ec:	4640      	mov	r0, r8
 800b2ee:	4649      	mov	r1, r9
 800b2f0:	4b19      	ldr	r3, [pc, #100]	; (800b358 <_strtod_l+0x880>)
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	f7f5 f8f0 	bl	80004d8 <__aeabi_dmul>
 800b2f8:	460b      	mov	r3, r1
 800b2fa:	4303      	orrs	r3, r0
 800b2fc:	bf08      	it	eq
 800b2fe:	2322      	moveq	r3, #34	; 0x22
 800b300:	4680      	mov	r8, r0
 800b302:	4689      	mov	r9, r1
 800b304:	bf08      	it	eq
 800b306:	f8ca 3000 	streq.w	r3, [sl]
 800b30a:	e62f      	b.n	800af6c <_strtod_l+0x494>
 800b30c:	f04f 32ff 	mov.w	r2, #4294967295
 800b310:	fa02 f303 	lsl.w	r3, r2, r3
 800b314:	ea03 0808 	and.w	r8, r3, r8
 800b318:	e6e0      	b.n	800b0dc <_strtod_l+0x604>
 800b31a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800b31e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800b322:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800b326:	35e2      	adds	r5, #226	; 0xe2
 800b328:	fa07 f505 	lsl.w	r5, r7, r5
 800b32c:	970f      	str	r7, [sp, #60]	; 0x3c
 800b32e:	e747      	b.n	800b1c0 <_strtod_l+0x6e8>
 800b330:	2301      	movs	r3, #1
 800b332:	2500      	movs	r5, #0
 800b334:	930f      	str	r3, [sp, #60]	; 0x3c
 800b336:	e743      	b.n	800b1c0 <_strtod_l+0x6e8>
 800b338:	463a      	mov	r2, r7
 800b33a:	4650      	mov	r0, sl
 800b33c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b33e:	f001 fea9 	bl	800d094 <__lshift>
 800b342:	901a      	str	r0, [sp, #104]	; 0x68
 800b344:	2800      	cmp	r0, #0
 800b346:	f47f af69 	bne.w	800b21c <_strtod_l+0x744>
 800b34a:	e604      	b.n	800af56 <_strtod_l+0x47e>
 800b34c:	0800efe0 	.word	0x0800efe0
 800b350:	fffffc02 	.word	0xfffffc02
 800b354:	7ff00000 	.word	0x7ff00000
 800b358:	39500000 	.word	0x39500000
 800b35c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b360:	d165      	bne.n	800b42e <_strtod_l+0x956>
 800b362:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b364:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b368:	b35a      	cbz	r2, 800b3c2 <_strtod_l+0x8ea>
 800b36a:	4a99      	ldr	r2, [pc, #612]	; (800b5d0 <_strtod_l+0xaf8>)
 800b36c:	4293      	cmp	r3, r2
 800b36e:	d12b      	bne.n	800b3c8 <_strtod_l+0x8f0>
 800b370:	9b05      	ldr	r3, [sp, #20]
 800b372:	4641      	mov	r1, r8
 800b374:	b303      	cbz	r3, 800b3b8 <_strtod_l+0x8e0>
 800b376:	464a      	mov	r2, r9
 800b378:	4b96      	ldr	r3, [pc, #600]	; (800b5d4 <_strtod_l+0xafc>)
 800b37a:	4013      	ands	r3, r2
 800b37c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b380:	f04f 32ff 	mov.w	r2, #4294967295
 800b384:	d81b      	bhi.n	800b3be <_strtod_l+0x8e6>
 800b386:	0d1b      	lsrs	r3, r3, #20
 800b388:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b38c:	fa02 f303 	lsl.w	r3, r2, r3
 800b390:	4299      	cmp	r1, r3
 800b392:	d119      	bne.n	800b3c8 <_strtod_l+0x8f0>
 800b394:	4b90      	ldr	r3, [pc, #576]	; (800b5d8 <_strtod_l+0xb00>)
 800b396:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b398:	429a      	cmp	r2, r3
 800b39a:	d102      	bne.n	800b3a2 <_strtod_l+0x8ca>
 800b39c:	3101      	adds	r1, #1
 800b39e:	f43f adda 	beq.w	800af56 <_strtod_l+0x47e>
 800b3a2:	f04f 0800 	mov.w	r8, #0
 800b3a6:	4b8b      	ldr	r3, [pc, #556]	; (800b5d4 <_strtod_l+0xafc>)
 800b3a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3aa:	401a      	ands	r2, r3
 800b3ac:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800b3b0:	9b05      	ldr	r3, [sp, #20]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d19a      	bne.n	800b2ec <_strtod_l+0x814>
 800b3b6:	e5d9      	b.n	800af6c <_strtod_l+0x494>
 800b3b8:	f04f 33ff 	mov.w	r3, #4294967295
 800b3bc:	e7e8      	b.n	800b390 <_strtod_l+0x8b8>
 800b3be:	4613      	mov	r3, r2
 800b3c0:	e7e6      	b.n	800b390 <_strtod_l+0x8b8>
 800b3c2:	ea53 0308 	orrs.w	r3, r3, r8
 800b3c6:	d081      	beq.n	800b2cc <_strtod_l+0x7f4>
 800b3c8:	b1e5      	cbz	r5, 800b404 <_strtod_l+0x92c>
 800b3ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3cc:	421d      	tst	r5, r3
 800b3ce:	d0ef      	beq.n	800b3b0 <_strtod_l+0x8d8>
 800b3d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3d2:	4640      	mov	r0, r8
 800b3d4:	4649      	mov	r1, r9
 800b3d6:	9a05      	ldr	r2, [sp, #20]
 800b3d8:	b1c3      	cbz	r3, 800b40c <_strtod_l+0x934>
 800b3da:	f7ff fb5a 	bl	800aa92 <sulp>
 800b3de:	4602      	mov	r2, r0
 800b3e0:	460b      	mov	r3, r1
 800b3e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b3e6:	f7f4 fec1 	bl	800016c <__adddf3>
 800b3ea:	4680      	mov	r8, r0
 800b3ec:	4689      	mov	r9, r1
 800b3ee:	e7df      	b.n	800b3b0 <_strtod_l+0x8d8>
 800b3f0:	4013      	ands	r3, r2
 800b3f2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b3f6:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b3fa:	f04f 38ff 	mov.w	r8, #4294967295
 800b3fe:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b402:	e7d5      	b.n	800b3b0 <_strtod_l+0x8d8>
 800b404:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b406:	ea13 0f08 	tst.w	r3, r8
 800b40a:	e7e0      	b.n	800b3ce <_strtod_l+0x8f6>
 800b40c:	f7ff fb41 	bl	800aa92 <sulp>
 800b410:	4602      	mov	r2, r0
 800b412:	460b      	mov	r3, r1
 800b414:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b418:	f7f4 fea6 	bl	8000168 <__aeabi_dsub>
 800b41c:	2200      	movs	r2, #0
 800b41e:	2300      	movs	r3, #0
 800b420:	4680      	mov	r8, r0
 800b422:	4689      	mov	r9, r1
 800b424:	f7f5 fac0 	bl	80009a8 <__aeabi_dcmpeq>
 800b428:	2800      	cmp	r0, #0
 800b42a:	d0c1      	beq.n	800b3b0 <_strtod_l+0x8d8>
 800b42c:	e608      	b.n	800b040 <_strtod_l+0x568>
 800b42e:	4658      	mov	r0, fp
 800b430:	9904      	ldr	r1, [sp, #16]
 800b432:	f002 f81d 	bl	800d470 <__ratio>
 800b436:	2200      	movs	r2, #0
 800b438:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b43c:	4606      	mov	r6, r0
 800b43e:	460f      	mov	r7, r1
 800b440:	f7f5 fac6 	bl	80009d0 <__aeabi_dcmple>
 800b444:	2800      	cmp	r0, #0
 800b446:	d070      	beq.n	800b52a <_strtod_l+0xa52>
 800b448:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d042      	beq.n	800b4d4 <_strtod_l+0x9fc>
 800b44e:	2600      	movs	r6, #0
 800b450:	4f62      	ldr	r7, [pc, #392]	; (800b5dc <_strtod_l+0xb04>)
 800b452:	4d62      	ldr	r5, [pc, #392]	; (800b5dc <_strtod_l+0xb04>)
 800b454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b456:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b45a:	0d1b      	lsrs	r3, r3, #20
 800b45c:	051b      	lsls	r3, r3, #20
 800b45e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b460:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b462:	4b5f      	ldr	r3, [pc, #380]	; (800b5e0 <_strtod_l+0xb08>)
 800b464:	429a      	cmp	r2, r3
 800b466:	f040 80c3 	bne.w	800b5f0 <_strtod_l+0xb18>
 800b46a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b46c:	4640      	mov	r0, r8
 800b46e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800b472:	4649      	mov	r1, r9
 800b474:	f001 ff26 	bl	800d2c4 <__ulp>
 800b478:	4602      	mov	r2, r0
 800b47a:	460b      	mov	r3, r1
 800b47c:	4630      	mov	r0, r6
 800b47e:	4639      	mov	r1, r7
 800b480:	f7f5 f82a 	bl	80004d8 <__aeabi_dmul>
 800b484:	4642      	mov	r2, r8
 800b486:	464b      	mov	r3, r9
 800b488:	f7f4 fe70 	bl	800016c <__adddf3>
 800b48c:	460b      	mov	r3, r1
 800b48e:	4951      	ldr	r1, [pc, #324]	; (800b5d4 <_strtod_l+0xafc>)
 800b490:	4a54      	ldr	r2, [pc, #336]	; (800b5e4 <_strtod_l+0xb0c>)
 800b492:	4019      	ands	r1, r3
 800b494:	4291      	cmp	r1, r2
 800b496:	4680      	mov	r8, r0
 800b498:	d95d      	bls.n	800b556 <_strtod_l+0xa7e>
 800b49a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b49c:	4b4e      	ldr	r3, [pc, #312]	; (800b5d8 <_strtod_l+0xb00>)
 800b49e:	429a      	cmp	r2, r3
 800b4a0:	d103      	bne.n	800b4aa <_strtod_l+0x9d2>
 800b4a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b4a4:	3301      	adds	r3, #1
 800b4a6:	f43f ad56 	beq.w	800af56 <_strtod_l+0x47e>
 800b4aa:	f04f 38ff 	mov.w	r8, #4294967295
 800b4ae:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800b5d8 <_strtod_l+0xb00>
 800b4b2:	4650      	mov	r0, sl
 800b4b4:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b4b6:	f001 fbd5 	bl	800cc64 <_Bfree>
 800b4ba:	4650      	mov	r0, sl
 800b4bc:	9906      	ldr	r1, [sp, #24]
 800b4be:	f001 fbd1 	bl	800cc64 <_Bfree>
 800b4c2:	4650      	mov	r0, sl
 800b4c4:	9904      	ldr	r1, [sp, #16]
 800b4c6:	f001 fbcd 	bl	800cc64 <_Bfree>
 800b4ca:	4659      	mov	r1, fp
 800b4cc:	4650      	mov	r0, sl
 800b4ce:	f001 fbc9 	bl	800cc64 <_Bfree>
 800b4d2:	e627      	b.n	800b124 <_strtod_l+0x64c>
 800b4d4:	f1b8 0f00 	cmp.w	r8, #0
 800b4d8:	d119      	bne.n	800b50e <_strtod_l+0xa36>
 800b4da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b4e0:	b9e3      	cbnz	r3, 800b51c <_strtod_l+0xa44>
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	4630      	mov	r0, r6
 800b4e6:	4639      	mov	r1, r7
 800b4e8:	4b3c      	ldr	r3, [pc, #240]	; (800b5dc <_strtod_l+0xb04>)
 800b4ea:	f7f5 fa67 	bl	80009bc <__aeabi_dcmplt>
 800b4ee:	b9c8      	cbnz	r0, 800b524 <_strtod_l+0xa4c>
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	4630      	mov	r0, r6
 800b4f4:	4639      	mov	r1, r7
 800b4f6:	4b3c      	ldr	r3, [pc, #240]	; (800b5e8 <_strtod_l+0xb10>)
 800b4f8:	f7f4 ffee 	bl	80004d8 <__aeabi_dmul>
 800b4fc:	4604      	mov	r4, r0
 800b4fe:	460d      	mov	r5, r1
 800b500:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800b504:	9416      	str	r4, [sp, #88]	; 0x58
 800b506:	9317      	str	r3, [sp, #92]	; 0x5c
 800b508:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800b50c:	e7a2      	b.n	800b454 <_strtod_l+0x97c>
 800b50e:	f1b8 0f01 	cmp.w	r8, #1
 800b512:	d103      	bne.n	800b51c <_strtod_l+0xa44>
 800b514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b516:	2b00      	cmp	r3, #0
 800b518:	f43f ad92 	beq.w	800b040 <_strtod_l+0x568>
 800b51c:	2600      	movs	r6, #0
 800b51e:	2400      	movs	r4, #0
 800b520:	4f32      	ldr	r7, [pc, #200]	; (800b5ec <_strtod_l+0xb14>)
 800b522:	e796      	b.n	800b452 <_strtod_l+0x97a>
 800b524:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800b526:	4d30      	ldr	r5, [pc, #192]	; (800b5e8 <_strtod_l+0xb10>)
 800b528:	e7ea      	b.n	800b500 <_strtod_l+0xa28>
 800b52a:	4b2f      	ldr	r3, [pc, #188]	; (800b5e8 <_strtod_l+0xb10>)
 800b52c:	2200      	movs	r2, #0
 800b52e:	4630      	mov	r0, r6
 800b530:	4639      	mov	r1, r7
 800b532:	f7f4 ffd1 	bl	80004d8 <__aeabi_dmul>
 800b536:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b538:	4604      	mov	r4, r0
 800b53a:	460d      	mov	r5, r1
 800b53c:	b933      	cbnz	r3, 800b54c <_strtod_l+0xa74>
 800b53e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b542:	9010      	str	r0, [sp, #64]	; 0x40
 800b544:	9311      	str	r3, [sp, #68]	; 0x44
 800b546:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800b54a:	e783      	b.n	800b454 <_strtod_l+0x97c>
 800b54c:	4602      	mov	r2, r0
 800b54e:	460b      	mov	r3, r1
 800b550:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800b554:	e7f7      	b.n	800b546 <_strtod_l+0xa6e>
 800b556:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b55a:	9b05      	ldr	r3, [sp, #20]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d1a8      	bne.n	800b4b2 <_strtod_l+0x9da>
 800b560:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b564:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b566:	0d1b      	lsrs	r3, r3, #20
 800b568:	051b      	lsls	r3, r3, #20
 800b56a:	429a      	cmp	r2, r3
 800b56c:	d1a1      	bne.n	800b4b2 <_strtod_l+0x9da>
 800b56e:	4620      	mov	r0, r4
 800b570:	4629      	mov	r1, r5
 800b572:	f7f5 fe13 	bl	800119c <__aeabi_d2lz>
 800b576:	f7f4 ff81 	bl	800047c <__aeabi_l2d>
 800b57a:	4602      	mov	r2, r0
 800b57c:	460b      	mov	r3, r1
 800b57e:	4620      	mov	r0, r4
 800b580:	4629      	mov	r1, r5
 800b582:	f7f4 fdf1 	bl	8000168 <__aeabi_dsub>
 800b586:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b588:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b58c:	ea43 0308 	orr.w	r3, r3, r8
 800b590:	4313      	orrs	r3, r2
 800b592:	4604      	mov	r4, r0
 800b594:	460d      	mov	r5, r1
 800b596:	d066      	beq.n	800b666 <_strtod_l+0xb8e>
 800b598:	a309      	add	r3, pc, #36	; (adr r3, 800b5c0 <_strtod_l+0xae8>)
 800b59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b59e:	f7f5 fa0d 	bl	80009bc <__aeabi_dcmplt>
 800b5a2:	2800      	cmp	r0, #0
 800b5a4:	f47f ace2 	bne.w	800af6c <_strtod_l+0x494>
 800b5a8:	a307      	add	r3, pc, #28	; (adr r3, 800b5c8 <_strtod_l+0xaf0>)
 800b5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ae:	4620      	mov	r0, r4
 800b5b0:	4629      	mov	r1, r5
 800b5b2:	f7f5 fa21 	bl	80009f8 <__aeabi_dcmpgt>
 800b5b6:	2800      	cmp	r0, #0
 800b5b8:	f43f af7b 	beq.w	800b4b2 <_strtod_l+0x9da>
 800b5bc:	e4d6      	b.n	800af6c <_strtod_l+0x494>
 800b5be:	bf00      	nop
 800b5c0:	94a03595 	.word	0x94a03595
 800b5c4:	3fdfffff 	.word	0x3fdfffff
 800b5c8:	35afe535 	.word	0x35afe535
 800b5cc:	3fe00000 	.word	0x3fe00000
 800b5d0:	000fffff 	.word	0x000fffff
 800b5d4:	7ff00000 	.word	0x7ff00000
 800b5d8:	7fefffff 	.word	0x7fefffff
 800b5dc:	3ff00000 	.word	0x3ff00000
 800b5e0:	7fe00000 	.word	0x7fe00000
 800b5e4:	7c9fffff 	.word	0x7c9fffff
 800b5e8:	3fe00000 	.word	0x3fe00000
 800b5ec:	bff00000 	.word	0xbff00000
 800b5f0:	9b05      	ldr	r3, [sp, #20]
 800b5f2:	b313      	cbz	r3, 800b63a <_strtod_l+0xb62>
 800b5f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b5f6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b5fa:	d81e      	bhi.n	800b63a <_strtod_l+0xb62>
 800b5fc:	a326      	add	r3, pc, #152	; (adr r3, 800b698 <_strtod_l+0xbc0>)
 800b5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b602:	4620      	mov	r0, r4
 800b604:	4629      	mov	r1, r5
 800b606:	f7f5 f9e3 	bl	80009d0 <__aeabi_dcmple>
 800b60a:	b190      	cbz	r0, 800b632 <_strtod_l+0xb5a>
 800b60c:	4629      	mov	r1, r5
 800b60e:	4620      	mov	r0, r4
 800b610:	f7f5 fa3a 	bl	8000a88 <__aeabi_d2uiz>
 800b614:	2801      	cmp	r0, #1
 800b616:	bf38      	it	cc
 800b618:	2001      	movcc	r0, #1
 800b61a:	f7f4 fee3 	bl	80003e4 <__aeabi_ui2d>
 800b61e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b620:	4604      	mov	r4, r0
 800b622:	460d      	mov	r5, r1
 800b624:	b9d3      	cbnz	r3, 800b65c <_strtod_l+0xb84>
 800b626:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b62a:	9012      	str	r0, [sp, #72]	; 0x48
 800b62c:	9313      	str	r3, [sp, #76]	; 0x4c
 800b62e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800b632:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b634:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800b638:	1a9f      	subs	r7, r3, r2
 800b63a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b63e:	f001 fe41 	bl	800d2c4 <__ulp>
 800b642:	4602      	mov	r2, r0
 800b644:	460b      	mov	r3, r1
 800b646:	4630      	mov	r0, r6
 800b648:	4639      	mov	r1, r7
 800b64a:	f7f4 ff45 	bl	80004d8 <__aeabi_dmul>
 800b64e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b652:	f7f4 fd8b 	bl	800016c <__adddf3>
 800b656:	4680      	mov	r8, r0
 800b658:	4689      	mov	r9, r1
 800b65a:	e77e      	b.n	800b55a <_strtod_l+0xa82>
 800b65c:	4602      	mov	r2, r0
 800b65e:	460b      	mov	r3, r1
 800b660:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800b664:	e7e3      	b.n	800b62e <_strtod_l+0xb56>
 800b666:	a30e      	add	r3, pc, #56	; (adr r3, 800b6a0 <_strtod_l+0xbc8>)
 800b668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b66c:	f7f5 f9a6 	bl	80009bc <__aeabi_dcmplt>
 800b670:	e7a1      	b.n	800b5b6 <_strtod_l+0xade>
 800b672:	2300      	movs	r3, #0
 800b674:	930a      	str	r3, [sp, #40]	; 0x28
 800b676:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b678:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b67a:	6013      	str	r3, [r2, #0]
 800b67c:	f7ff ba71 	b.w	800ab62 <_strtod_l+0x8a>
 800b680:	2a65      	cmp	r2, #101	; 0x65
 800b682:	f43f ab63 	beq.w	800ad4c <_strtod_l+0x274>
 800b686:	2a45      	cmp	r2, #69	; 0x45
 800b688:	f43f ab60 	beq.w	800ad4c <_strtod_l+0x274>
 800b68c:	2301      	movs	r3, #1
 800b68e:	f7ff bb95 	b.w	800adbc <_strtod_l+0x2e4>
 800b692:	bf00      	nop
 800b694:	f3af 8000 	nop.w
 800b698:	ffc00000 	.word	0xffc00000
 800b69c:	41dfffff 	.word	0x41dfffff
 800b6a0:	94a03595 	.word	0x94a03595
 800b6a4:	3fcfffff 	.word	0x3fcfffff

0800b6a8 <_strtod_r>:
 800b6a8:	4b01      	ldr	r3, [pc, #4]	; (800b6b0 <_strtod_r+0x8>)
 800b6aa:	f7ff ba15 	b.w	800aad8 <_strtod_l>
 800b6ae:	bf00      	nop
 800b6b0:	20000108 	.word	0x20000108

0800b6b4 <_strtol_l.constprop.0>:
 800b6b4:	2b01      	cmp	r3, #1
 800b6b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6ba:	4680      	mov	r8, r0
 800b6bc:	d001      	beq.n	800b6c2 <_strtol_l.constprop.0+0xe>
 800b6be:	2b24      	cmp	r3, #36	; 0x24
 800b6c0:	d906      	bls.n	800b6d0 <_strtol_l.constprop.0+0x1c>
 800b6c2:	f7fe fadf 	bl	8009c84 <__errno>
 800b6c6:	2316      	movs	r3, #22
 800b6c8:	6003      	str	r3, [r0, #0]
 800b6ca:	2000      	movs	r0, #0
 800b6cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6d0:	460d      	mov	r5, r1
 800b6d2:	4f35      	ldr	r7, [pc, #212]	; (800b7a8 <_strtol_l.constprop.0+0xf4>)
 800b6d4:	4628      	mov	r0, r5
 800b6d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b6da:	5de6      	ldrb	r6, [r4, r7]
 800b6dc:	f016 0608 	ands.w	r6, r6, #8
 800b6e0:	d1f8      	bne.n	800b6d4 <_strtol_l.constprop.0+0x20>
 800b6e2:	2c2d      	cmp	r4, #45	; 0x2d
 800b6e4:	d12f      	bne.n	800b746 <_strtol_l.constprop.0+0x92>
 800b6e6:	2601      	movs	r6, #1
 800b6e8:	782c      	ldrb	r4, [r5, #0]
 800b6ea:	1c85      	adds	r5, r0, #2
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d057      	beq.n	800b7a0 <_strtol_l.constprop.0+0xec>
 800b6f0:	2b10      	cmp	r3, #16
 800b6f2:	d109      	bne.n	800b708 <_strtol_l.constprop.0+0x54>
 800b6f4:	2c30      	cmp	r4, #48	; 0x30
 800b6f6:	d107      	bne.n	800b708 <_strtol_l.constprop.0+0x54>
 800b6f8:	7828      	ldrb	r0, [r5, #0]
 800b6fa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b6fe:	2858      	cmp	r0, #88	; 0x58
 800b700:	d149      	bne.n	800b796 <_strtol_l.constprop.0+0xe2>
 800b702:	2310      	movs	r3, #16
 800b704:	786c      	ldrb	r4, [r5, #1]
 800b706:	3502      	adds	r5, #2
 800b708:	2700      	movs	r7, #0
 800b70a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800b70e:	f10e 3eff 	add.w	lr, lr, #4294967295
 800b712:	fbbe f9f3 	udiv	r9, lr, r3
 800b716:	4638      	mov	r0, r7
 800b718:	fb03 ea19 	mls	sl, r3, r9, lr
 800b71c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b720:	f1bc 0f09 	cmp.w	ip, #9
 800b724:	d814      	bhi.n	800b750 <_strtol_l.constprop.0+0x9c>
 800b726:	4664      	mov	r4, ip
 800b728:	42a3      	cmp	r3, r4
 800b72a:	dd22      	ble.n	800b772 <_strtol_l.constprop.0+0xbe>
 800b72c:	2f00      	cmp	r7, #0
 800b72e:	db1d      	blt.n	800b76c <_strtol_l.constprop.0+0xb8>
 800b730:	4581      	cmp	r9, r0
 800b732:	d31b      	bcc.n	800b76c <_strtol_l.constprop.0+0xb8>
 800b734:	d101      	bne.n	800b73a <_strtol_l.constprop.0+0x86>
 800b736:	45a2      	cmp	sl, r4
 800b738:	db18      	blt.n	800b76c <_strtol_l.constprop.0+0xb8>
 800b73a:	2701      	movs	r7, #1
 800b73c:	fb00 4003 	mla	r0, r0, r3, r4
 800b740:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b744:	e7ea      	b.n	800b71c <_strtol_l.constprop.0+0x68>
 800b746:	2c2b      	cmp	r4, #43	; 0x2b
 800b748:	bf04      	itt	eq
 800b74a:	782c      	ldrbeq	r4, [r5, #0]
 800b74c:	1c85      	addeq	r5, r0, #2
 800b74e:	e7cd      	b.n	800b6ec <_strtol_l.constprop.0+0x38>
 800b750:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b754:	f1bc 0f19 	cmp.w	ip, #25
 800b758:	d801      	bhi.n	800b75e <_strtol_l.constprop.0+0xaa>
 800b75a:	3c37      	subs	r4, #55	; 0x37
 800b75c:	e7e4      	b.n	800b728 <_strtol_l.constprop.0+0x74>
 800b75e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b762:	f1bc 0f19 	cmp.w	ip, #25
 800b766:	d804      	bhi.n	800b772 <_strtol_l.constprop.0+0xbe>
 800b768:	3c57      	subs	r4, #87	; 0x57
 800b76a:	e7dd      	b.n	800b728 <_strtol_l.constprop.0+0x74>
 800b76c:	f04f 37ff 	mov.w	r7, #4294967295
 800b770:	e7e6      	b.n	800b740 <_strtol_l.constprop.0+0x8c>
 800b772:	2f00      	cmp	r7, #0
 800b774:	da07      	bge.n	800b786 <_strtol_l.constprop.0+0xd2>
 800b776:	2322      	movs	r3, #34	; 0x22
 800b778:	4670      	mov	r0, lr
 800b77a:	f8c8 3000 	str.w	r3, [r8]
 800b77e:	2a00      	cmp	r2, #0
 800b780:	d0a4      	beq.n	800b6cc <_strtol_l.constprop.0+0x18>
 800b782:	1e69      	subs	r1, r5, #1
 800b784:	e005      	b.n	800b792 <_strtol_l.constprop.0+0xde>
 800b786:	b106      	cbz	r6, 800b78a <_strtol_l.constprop.0+0xd6>
 800b788:	4240      	negs	r0, r0
 800b78a:	2a00      	cmp	r2, #0
 800b78c:	d09e      	beq.n	800b6cc <_strtol_l.constprop.0+0x18>
 800b78e:	2f00      	cmp	r7, #0
 800b790:	d1f7      	bne.n	800b782 <_strtol_l.constprop.0+0xce>
 800b792:	6011      	str	r1, [r2, #0]
 800b794:	e79a      	b.n	800b6cc <_strtol_l.constprop.0+0x18>
 800b796:	2430      	movs	r4, #48	; 0x30
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d1b5      	bne.n	800b708 <_strtol_l.constprop.0+0x54>
 800b79c:	2308      	movs	r3, #8
 800b79e:	e7b3      	b.n	800b708 <_strtol_l.constprop.0+0x54>
 800b7a0:	2c30      	cmp	r4, #48	; 0x30
 800b7a2:	d0a9      	beq.n	800b6f8 <_strtol_l.constprop.0+0x44>
 800b7a4:	230a      	movs	r3, #10
 800b7a6:	e7af      	b.n	800b708 <_strtol_l.constprop.0+0x54>
 800b7a8:	0800f009 	.word	0x0800f009

0800b7ac <_strtol_r>:
 800b7ac:	f7ff bf82 	b.w	800b6b4 <_strtol_l.constprop.0>

0800b7b0 <quorem>:
 800b7b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7b4:	6903      	ldr	r3, [r0, #16]
 800b7b6:	690c      	ldr	r4, [r1, #16]
 800b7b8:	4607      	mov	r7, r0
 800b7ba:	42a3      	cmp	r3, r4
 800b7bc:	f2c0 8082 	blt.w	800b8c4 <quorem+0x114>
 800b7c0:	3c01      	subs	r4, #1
 800b7c2:	f100 0514 	add.w	r5, r0, #20
 800b7c6:	f101 0814 	add.w	r8, r1, #20
 800b7ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b7ce:	9301      	str	r3, [sp, #4]
 800b7d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b7d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b7d8:	3301      	adds	r3, #1
 800b7da:	429a      	cmp	r2, r3
 800b7dc:	fbb2 f6f3 	udiv	r6, r2, r3
 800b7e0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b7e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b7e8:	d331      	bcc.n	800b84e <quorem+0x9e>
 800b7ea:	f04f 0e00 	mov.w	lr, #0
 800b7ee:	4640      	mov	r0, r8
 800b7f0:	46ac      	mov	ip, r5
 800b7f2:	46f2      	mov	sl, lr
 800b7f4:	f850 2b04 	ldr.w	r2, [r0], #4
 800b7f8:	b293      	uxth	r3, r2
 800b7fa:	fb06 e303 	mla	r3, r6, r3, lr
 800b7fe:	0c12      	lsrs	r2, r2, #16
 800b800:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b804:	b29b      	uxth	r3, r3
 800b806:	fb06 e202 	mla	r2, r6, r2, lr
 800b80a:	ebaa 0303 	sub.w	r3, sl, r3
 800b80e:	f8dc a000 	ldr.w	sl, [ip]
 800b812:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b816:	fa1f fa8a 	uxth.w	sl, sl
 800b81a:	4453      	add	r3, sl
 800b81c:	f8dc a000 	ldr.w	sl, [ip]
 800b820:	b292      	uxth	r2, r2
 800b822:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b826:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b82a:	b29b      	uxth	r3, r3
 800b82c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b830:	4581      	cmp	r9, r0
 800b832:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b836:	f84c 3b04 	str.w	r3, [ip], #4
 800b83a:	d2db      	bcs.n	800b7f4 <quorem+0x44>
 800b83c:	f855 300b 	ldr.w	r3, [r5, fp]
 800b840:	b92b      	cbnz	r3, 800b84e <quorem+0x9e>
 800b842:	9b01      	ldr	r3, [sp, #4]
 800b844:	3b04      	subs	r3, #4
 800b846:	429d      	cmp	r5, r3
 800b848:	461a      	mov	r2, r3
 800b84a:	d32f      	bcc.n	800b8ac <quorem+0xfc>
 800b84c:	613c      	str	r4, [r7, #16]
 800b84e:	4638      	mov	r0, r7
 800b850:	f001 fc90 	bl	800d174 <__mcmp>
 800b854:	2800      	cmp	r0, #0
 800b856:	db25      	blt.n	800b8a4 <quorem+0xf4>
 800b858:	4628      	mov	r0, r5
 800b85a:	f04f 0c00 	mov.w	ip, #0
 800b85e:	3601      	adds	r6, #1
 800b860:	f858 1b04 	ldr.w	r1, [r8], #4
 800b864:	f8d0 e000 	ldr.w	lr, [r0]
 800b868:	b28b      	uxth	r3, r1
 800b86a:	ebac 0303 	sub.w	r3, ip, r3
 800b86e:	fa1f f28e 	uxth.w	r2, lr
 800b872:	4413      	add	r3, r2
 800b874:	0c0a      	lsrs	r2, r1, #16
 800b876:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b87a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b87e:	b29b      	uxth	r3, r3
 800b880:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b884:	45c1      	cmp	r9, r8
 800b886:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b88a:	f840 3b04 	str.w	r3, [r0], #4
 800b88e:	d2e7      	bcs.n	800b860 <quorem+0xb0>
 800b890:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b894:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b898:	b922      	cbnz	r2, 800b8a4 <quorem+0xf4>
 800b89a:	3b04      	subs	r3, #4
 800b89c:	429d      	cmp	r5, r3
 800b89e:	461a      	mov	r2, r3
 800b8a0:	d30a      	bcc.n	800b8b8 <quorem+0x108>
 800b8a2:	613c      	str	r4, [r7, #16]
 800b8a4:	4630      	mov	r0, r6
 800b8a6:	b003      	add	sp, #12
 800b8a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8ac:	6812      	ldr	r2, [r2, #0]
 800b8ae:	3b04      	subs	r3, #4
 800b8b0:	2a00      	cmp	r2, #0
 800b8b2:	d1cb      	bne.n	800b84c <quorem+0x9c>
 800b8b4:	3c01      	subs	r4, #1
 800b8b6:	e7c6      	b.n	800b846 <quorem+0x96>
 800b8b8:	6812      	ldr	r2, [r2, #0]
 800b8ba:	3b04      	subs	r3, #4
 800b8bc:	2a00      	cmp	r2, #0
 800b8be:	d1f0      	bne.n	800b8a2 <quorem+0xf2>
 800b8c0:	3c01      	subs	r4, #1
 800b8c2:	e7eb      	b.n	800b89c <quorem+0xec>
 800b8c4:	2000      	movs	r0, #0
 800b8c6:	e7ee      	b.n	800b8a6 <quorem+0xf6>

0800b8c8 <_dtoa_r>:
 800b8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8cc:	4616      	mov	r6, r2
 800b8ce:	461f      	mov	r7, r3
 800b8d0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b8d2:	b099      	sub	sp, #100	; 0x64
 800b8d4:	4605      	mov	r5, r0
 800b8d6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b8da:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800b8de:	b974      	cbnz	r4, 800b8fe <_dtoa_r+0x36>
 800b8e0:	2010      	movs	r0, #16
 800b8e2:	f001 f949 	bl	800cb78 <malloc>
 800b8e6:	4602      	mov	r2, r0
 800b8e8:	6268      	str	r0, [r5, #36]	; 0x24
 800b8ea:	b920      	cbnz	r0, 800b8f6 <_dtoa_r+0x2e>
 800b8ec:	21ea      	movs	r1, #234	; 0xea
 800b8ee:	4ba8      	ldr	r3, [pc, #672]	; (800bb90 <_dtoa_r+0x2c8>)
 800b8f0:	48a8      	ldr	r0, [pc, #672]	; (800bb94 <_dtoa_r+0x2cc>)
 800b8f2:	f002 f8b3 	bl	800da5c <__assert_func>
 800b8f6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b8fa:	6004      	str	r4, [r0, #0]
 800b8fc:	60c4      	str	r4, [r0, #12]
 800b8fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b900:	6819      	ldr	r1, [r3, #0]
 800b902:	b151      	cbz	r1, 800b91a <_dtoa_r+0x52>
 800b904:	685a      	ldr	r2, [r3, #4]
 800b906:	2301      	movs	r3, #1
 800b908:	4093      	lsls	r3, r2
 800b90a:	604a      	str	r2, [r1, #4]
 800b90c:	608b      	str	r3, [r1, #8]
 800b90e:	4628      	mov	r0, r5
 800b910:	f001 f9a8 	bl	800cc64 <_Bfree>
 800b914:	2200      	movs	r2, #0
 800b916:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b918:	601a      	str	r2, [r3, #0]
 800b91a:	1e3b      	subs	r3, r7, #0
 800b91c:	bfaf      	iteee	ge
 800b91e:	2300      	movge	r3, #0
 800b920:	2201      	movlt	r2, #1
 800b922:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b926:	9305      	strlt	r3, [sp, #20]
 800b928:	bfa8      	it	ge
 800b92a:	f8c8 3000 	strge.w	r3, [r8]
 800b92e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800b932:	4b99      	ldr	r3, [pc, #612]	; (800bb98 <_dtoa_r+0x2d0>)
 800b934:	bfb8      	it	lt
 800b936:	f8c8 2000 	strlt.w	r2, [r8]
 800b93a:	ea33 0309 	bics.w	r3, r3, r9
 800b93e:	d119      	bne.n	800b974 <_dtoa_r+0xac>
 800b940:	f242 730f 	movw	r3, #9999	; 0x270f
 800b944:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b946:	6013      	str	r3, [r2, #0]
 800b948:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b94c:	4333      	orrs	r3, r6
 800b94e:	f000 857f 	beq.w	800c450 <_dtoa_r+0xb88>
 800b952:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b954:	b953      	cbnz	r3, 800b96c <_dtoa_r+0xa4>
 800b956:	4b91      	ldr	r3, [pc, #580]	; (800bb9c <_dtoa_r+0x2d4>)
 800b958:	e022      	b.n	800b9a0 <_dtoa_r+0xd8>
 800b95a:	4b91      	ldr	r3, [pc, #580]	; (800bba0 <_dtoa_r+0x2d8>)
 800b95c:	9303      	str	r3, [sp, #12]
 800b95e:	3308      	adds	r3, #8
 800b960:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b962:	6013      	str	r3, [r2, #0]
 800b964:	9803      	ldr	r0, [sp, #12]
 800b966:	b019      	add	sp, #100	; 0x64
 800b968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b96c:	4b8b      	ldr	r3, [pc, #556]	; (800bb9c <_dtoa_r+0x2d4>)
 800b96e:	9303      	str	r3, [sp, #12]
 800b970:	3303      	adds	r3, #3
 800b972:	e7f5      	b.n	800b960 <_dtoa_r+0x98>
 800b974:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b978:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800b97c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b980:	2200      	movs	r2, #0
 800b982:	2300      	movs	r3, #0
 800b984:	f7f5 f810 	bl	80009a8 <__aeabi_dcmpeq>
 800b988:	4680      	mov	r8, r0
 800b98a:	b158      	cbz	r0, 800b9a4 <_dtoa_r+0xdc>
 800b98c:	2301      	movs	r3, #1
 800b98e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b990:	6013      	str	r3, [r2, #0]
 800b992:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b994:	2b00      	cmp	r3, #0
 800b996:	f000 8558 	beq.w	800c44a <_dtoa_r+0xb82>
 800b99a:	4882      	ldr	r0, [pc, #520]	; (800bba4 <_dtoa_r+0x2dc>)
 800b99c:	6018      	str	r0, [r3, #0]
 800b99e:	1e43      	subs	r3, r0, #1
 800b9a0:	9303      	str	r3, [sp, #12]
 800b9a2:	e7df      	b.n	800b964 <_dtoa_r+0x9c>
 800b9a4:	ab16      	add	r3, sp, #88	; 0x58
 800b9a6:	9301      	str	r3, [sp, #4]
 800b9a8:	ab17      	add	r3, sp, #92	; 0x5c
 800b9aa:	9300      	str	r3, [sp, #0]
 800b9ac:	4628      	mov	r0, r5
 800b9ae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b9b2:	f001 fd01 	bl	800d3b8 <__d2b>
 800b9b6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b9ba:	4683      	mov	fp, r0
 800b9bc:	2c00      	cmp	r4, #0
 800b9be:	d07f      	beq.n	800bac0 <_dtoa_r+0x1f8>
 800b9c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b9c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b9c6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b9ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b9ce:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800b9d2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b9d6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800b9da:	2200      	movs	r2, #0
 800b9dc:	4b72      	ldr	r3, [pc, #456]	; (800bba8 <_dtoa_r+0x2e0>)
 800b9de:	f7f4 fbc3 	bl	8000168 <__aeabi_dsub>
 800b9e2:	a365      	add	r3, pc, #404	; (adr r3, 800bb78 <_dtoa_r+0x2b0>)
 800b9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e8:	f7f4 fd76 	bl	80004d8 <__aeabi_dmul>
 800b9ec:	a364      	add	r3, pc, #400	; (adr r3, 800bb80 <_dtoa_r+0x2b8>)
 800b9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f2:	f7f4 fbbb 	bl	800016c <__adddf3>
 800b9f6:	4606      	mov	r6, r0
 800b9f8:	4620      	mov	r0, r4
 800b9fa:	460f      	mov	r7, r1
 800b9fc:	f7f4 fd02 	bl	8000404 <__aeabi_i2d>
 800ba00:	a361      	add	r3, pc, #388	; (adr r3, 800bb88 <_dtoa_r+0x2c0>)
 800ba02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba06:	f7f4 fd67 	bl	80004d8 <__aeabi_dmul>
 800ba0a:	4602      	mov	r2, r0
 800ba0c:	460b      	mov	r3, r1
 800ba0e:	4630      	mov	r0, r6
 800ba10:	4639      	mov	r1, r7
 800ba12:	f7f4 fbab 	bl	800016c <__adddf3>
 800ba16:	4606      	mov	r6, r0
 800ba18:	460f      	mov	r7, r1
 800ba1a:	f7f5 f80d 	bl	8000a38 <__aeabi_d2iz>
 800ba1e:	2200      	movs	r2, #0
 800ba20:	4682      	mov	sl, r0
 800ba22:	2300      	movs	r3, #0
 800ba24:	4630      	mov	r0, r6
 800ba26:	4639      	mov	r1, r7
 800ba28:	f7f4 ffc8 	bl	80009bc <__aeabi_dcmplt>
 800ba2c:	b148      	cbz	r0, 800ba42 <_dtoa_r+0x17a>
 800ba2e:	4650      	mov	r0, sl
 800ba30:	f7f4 fce8 	bl	8000404 <__aeabi_i2d>
 800ba34:	4632      	mov	r2, r6
 800ba36:	463b      	mov	r3, r7
 800ba38:	f7f4 ffb6 	bl	80009a8 <__aeabi_dcmpeq>
 800ba3c:	b908      	cbnz	r0, 800ba42 <_dtoa_r+0x17a>
 800ba3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ba42:	f1ba 0f16 	cmp.w	sl, #22
 800ba46:	d858      	bhi.n	800bafa <_dtoa_r+0x232>
 800ba48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ba4c:	4b57      	ldr	r3, [pc, #348]	; (800bbac <_dtoa_r+0x2e4>)
 800ba4e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ba52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba56:	f7f4 ffb1 	bl	80009bc <__aeabi_dcmplt>
 800ba5a:	2800      	cmp	r0, #0
 800ba5c:	d04f      	beq.n	800bafe <_dtoa_r+0x236>
 800ba5e:	2300      	movs	r3, #0
 800ba60:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ba64:	930f      	str	r3, [sp, #60]	; 0x3c
 800ba66:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ba68:	1b1c      	subs	r4, r3, r4
 800ba6a:	1e63      	subs	r3, r4, #1
 800ba6c:	9309      	str	r3, [sp, #36]	; 0x24
 800ba6e:	bf49      	itett	mi
 800ba70:	f1c4 0301 	rsbmi	r3, r4, #1
 800ba74:	2300      	movpl	r3, #0
 800ba76:	9306      	strmi	r3, [sp, #24]
 800ba78:	2300      	movmi	r3, #0
 800ba7a:	bf54      	ite	pl
 800ba7c:	9306      	strpl	r3, [sp, #24]
 800ba7e:	9309      	strmi	r3, [sp, #36]	; 0x24
 800ba80:	f1ba 0f00 	cmp.w	sl, #0
 800ba84:	db3d      	blt.n	800bb02 <_dtoa_r+0x23a>
 800ba86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba88:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800ba8c:	4453      	add	r3, sl
 800ba8e:	9309      	str	r3, [sp, #36]	; 0x24
 800ba90:	2300      	movs	r3, #0
 800ba92:	930a      	str	r3, [sp, #40]	; 0x28
 800ba94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ba96:	2b09      	cmp	r3, #9
 800ba98:	f200 808c 	bhi.w	800bbb4 <_dtoa_r+0x2ec>
 800ba9c:	2b05      	cmp	r3, #5
 800ba9e:	bfc4      	itt	gt
 800baa0:	3b04      	subgt	r3, #4
 800baa2:	9322      	strgt	r3, [sp, #136]	; 0x88
 800baa4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800baa6:	bfc8      	it	gt
 800baa8:	2400      	movgt	r4, #0
 800baaa:	f1a3 0302 	sub.w	r3, r3, #2
 800baae:	bfd8      	it	le
 800bab0:	2401      	movle	r4, #1
 800bab2:	2b03      	cmp	r3, #3
 800bab4:	f200 808a 	bhi.w	800bbcc <_dtoa_r+0x304>
 800bab8:	e8df f003 	tbb	[pc, r3]
 800babc:	5b4d4f2d 	.word	0x5b4d4f2d
 800bac0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800bac4:	441c      	add	r4, r3
 800bac6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800baca:	2b20      	cmp	r3, #32
 800bacc:	bfc3      	ittte	gt
 800bace:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bad2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800bad6:	fa09 f303 	lslgt.w	r3, r9, r3
 800bada:	f1c3 0320 	rsble	r3, r3, #32
 800bade:	bfc6      	itte	gt
 800bae0:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bae4:	4318      	orrgt	r0, r3
 800bae6:	fa06 f003 	lslle.w	r0, r6, r3
 800baea:	f7f4 fc7b 	bl	80003e4 <__aeabi_ui2d>
 800baee:	2301      	movs	r3, #1
 800baf0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800baf4:	3c01      	subs	r4, #1
 800baf6:	9313      	str	r3, [sp, #76]	; 0x4c
 800baf8:	e76f      	b.n	800b9da <_dtoa_r+0x112>
 800bafa:	2301      	movs	r3, #1
 800bafc:	e7b2      	b.n	800ba64 <_dtoa_r+0x19c>
 800bafe:	900f      	str	r0, [sp, #60]	; 0x3c
 800bb00:	e7b1      	b.n	800ba66 <_dtoa_r+0x19e>
 800bb02:	9b06      	ldr	r3, [sp, #24]
 800bb04:	eba3 030a 	sub.w	r3, r3, sl
 800bb08:	9306      	str	r3, [sp, #24]
 800bb0a:	f1ca 0300 	rsb	r3, sl, #0
 800bb0e:	930a      	str	r3, [sp, #40]	; 0x28
 800bb10:	2300      	movs	r3, #0
 800bb12:	930e      	str	r3, [sp, #56]	; 0x38
 800bb14:	e7be      	b.n	800ba94 <_dtoa_r+0x1cc>
 800bb16:	2300      	movs	r3, #0
 800bb18:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb1a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	dc58      	bgt.n	800bbd2 <_dtoa_r+0x30a>
 800bb20:	f04f 0901 	mov.w	r9, #1
 800bb24:	464b      	mov	r3, r9
 800bb26:	f8cd 9020 	str.w	r9, [sp, #32]
 800bb2a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800bb2e:	2200      	movs	r2, #0
 800bb30:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800bb32:	6042      	str	r2, [r0, #4]
 800bb34:	2204      	movs	r2, #4
 800bb36:	f102 0614 	add.w	r6, r2, #20
 800bb3a:	429e      	cmp	r6, r3
 800bb3c:	6841      	ldr	r1, [r0, #4]
 800bb3e:	d94e      	bls.n	800bbde <_dtoa_r+0x316>
 800bb40:	4628      	mov	r0, r5
 800bb42:	f001 f84f 	bl	800cbe4 <_Balloc>
 800bb46:	9003      	str	r0, [sp, #12]
 800bb48:	2800      	cmp	r0, #0
 800bb4a:	d14c      	bne.n	800bbe6 <_dtoa_r+0x31e>
 800bb4c:	4602      	mov	r2, r0
 800bb4e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bb52:	4b17      	ldr	r3, [pc, #92]	; (800bbb0 <_dtoa_r+0x2e8>)
 800bb54:	e6cc      	b.n	800b8f0 <_dtoa_r+0x28>
 800bb56:	2301      	movs	r3, #1
 800bb58:	e7de      	b.n	800bb18 <_dtoa_r+0x250>
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb5e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bb60:	eb0a 0903 	add.w	r9, sl, r3
 800bb64:	f109 0301 	add.w	r3, r9, #1
 800bb68:	2b01      	cmp	r3, #1
 800bb6a:	9308      	str	r3, [sp, #32]
 800bb6c:	bfb8      	it	lt
 800bb6e:	2301      	movlt	r3, #1
 800bb70:	e7dd      	b.n	800bb2e <_dtoa_r+0x266>
 800bb72:	2301      	movs	r3, #1
 800bb74:	e7f2      	b.n	800bb5c <_dtoa_r+0x294>
 800bb76:	bf00      	nop
 800bb78:	636f4361 	.word	0x636f4361
 800bb7c:	3fd287a7 	.word	0x3fd287a7
 800bb80:	8b60c8b3 	.word	0x8b60c8b3
 800bb84:	3fc68a28 	.word	0x3fc68a28
 800bb88:	509f79fb 	.word	0x509f79fb
 800bb8c:	3fd34413 	.word	0x3fd34413
 800bb90:	0800f116 	.word	0x0800f116
 800bb94:	0800f12d 	.word	0x0800f12d
 800bb98:	7ff00000 	.word	0x7ff00000
 800bb9c:	0800f112 	.word	0x0800f112
 800bba0:	0800f109 	.word	0x0800f109
 800bba4:	0800ef8d 	.word	0x0800ef8d
 800bba8:	3ff80000 	.word	0x3ff80000
 800bbac:	0800f298 	.word	0x0800f298
 800bbb0:	0800f188 	.word	0x0800f188
 800bbb4:	2401      	movs	r4, #1
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	940b      	str	r4, [sp, #44]	; 0x2c
 800bbba:	9322      	str	r3, [sp, #136]	; 0x88
 800bbbc:	f04f 39ff 	mov.w	r9, #4294967295
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	2312      	movs	r3, #18
 800bbc4:	f8cd 9020 	str.w	r9, [sp, #32]
 800bbc8:	9223      	str	r2, [sp, #140]	; 0x8c
 800bbca:	e7b0      	b.n	800bb2e <_dtoa_r+0x266>
 800bbcc:	2301      	movs	r3, #1
 800bbce:	930b      	str	r3, [sp, #44]	; 0x2c
 800bbd0:	e7f4      	b.n	800bbbc <_dtoa_r+0x2f4>
 800bbd2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800bbd6:	464b      	mov	r3, r9
 800bbd8:	f8cd 9020 	str.w	r9, [sp, #32]
 800bbdc:	e7a7      	b.n	800bb2e <_dtoa_r+0x266>
 800bbde:	3101      	adds	r1, #1
 800bbe0:	6041      	str	r1, [r0, #4]
 800bbe2:	0052      	lsls	r2, r2, #1
 800bbe4:	e7a7      	b.n	800bb36 <_dtoa_r+0x26e>
 800bbe6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bbe8:	9a03      	ldr	r2, [sp, #12]
 800bbea:	601a      	str	r2, [r3, #0]
 800bbec:	9b08      	ldr	r3, [sp, #32]
 800bbee:	2b0e      	cmp	r3, #14
 800bbf0:	f200 80a8 	bhi.w	800bd44 <_dtoa_r+0x47c>
 800bbf4:	2c00      	cmp	r4, #0
 800bbf6:	f000 80a5 	beq.w	800bd44 <_dtoa_r+0x47c>
 800bbfa:	f1ba 0f00 	cmp.w	sl, #0
 800bbfe:	dd34      	ble.n	800bc6a <_dtoa_r+0x3a2>
 800bc00:	4a9a      	ldr	r2, [pc, #616]	; (800be6c <_dtoa_r+0x5a4>)
 800bc02:	f00a 030f 	and.w	r3, sl, #15
 800bc06:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bc0a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800bc0e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bc12:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800bc16:	ea4f 142a 	mov.w	r4, sl, asr #4
 800bc1a:	d016      	beq.n	800bc4a <_dtoa_r+0x382>
 800bc1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bc20:	4b93      	ldr	r3, [pc, #588]	; (800be70 <_dtoa_r+0x5a8>)
 800bc22:	2703      	movs	r7, #3
 800bc24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bc28:	f7f4 fd80 	bl	800072c <__aeabi_ddiv>
 800bc2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bc30:	f004 040f 	and.w	r4, r4, #15
 800bc34:	4e8e      	ldr	r6, [pc, #568]	; (800be70 <_dtoa_r+0x5a8>)
 800bc36:	b954      	cbnz	r4, 800bc4e <_dtoa_r+0x386>
 800bc38:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bc3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc40:	f7f4 fd74 	bl	800072c <__aeabi_ddiv>
 800bc44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bc48:	e029      	b.n	800bc9e <_dtoa_r+0x3d6>
 800bc4a:	2702      	movs	r7, #2
 800bc4c:	e7f2      	b.n	800bc34 <_dtoa_r+0x36c>
 800bc4e:	07e1      	lsls	r1, r4, #31
 800bc50:	d508      	bpl.n	800bc64 <_dtoa_r+0x39c>
 800bc52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bc56:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bc5a:	f7f4 fc3d 	bl	80004d8 <__aeabi_dmul>
 800bc5e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bc62:	3701      	adds	r7, #1
 800bc64:	1064      	asrs	r4, r4, #1
 800bc66:	3608      	adds	r6, #8
 800bc68:	e7e5      	b.n	800bc36 <_dtoa_r+0x36e>
 800bc6a:	f000 80a5 	beq.w	800bdb8 <_dtoa_r+0x4f0>
 800bc6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bc72:	f1ca 0400 	rsb	r4, sl, #0
 800bc76:	4b7d      	ldr	r3, [pc, #500]	; (800be6c <_dtoa_r+0x5a4>)
 800bc78:	f004 020f 	and.w	r2, r4, #15
 800bc7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc84:	f7f4 fc28 	bl	80004d8 <__aeabi_dmul>
 800bc88:	2702      	movs	r7, #2
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bc90:	4e77      	ldr	r6, [pc, #476]	; (800be70 <_dtoa_r+0x5a8>)
 800bc92:	1124      	asrs	r4, r4, #4
 800bc94:	2c00      	cmp	r4, #0
 800bc96:	f040 8084 	bne.w	800bda2 <_dtoa_r+0x4da>
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d1d2      	bne.n	800bc44 <_dtoa_r+0x37c>
 800bc9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	f000 808b 	beq.w	800bdbc <_dtoa_r+0x4f4>
 800bca6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800bcaa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800bcae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	4b6f      	ldr	r3, [pc, #444]	; (800be74 <_dtoa_r+0x5ac>)
 800bcb6:	f7f4 fe81 	bl	80009bc <__aeabi_dcmplt>
 800bcba:	2800      	cmp	r0, #0
 800bcbc:	d07e      	beq.n	800bdbc <_dtoa_r+0x4f4>
 800bcbe:	9b08      	ldr	r3, [sp, #32]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d07b      	beq.n	800bdbc <_dtoa_r+0x4f4>
 800bcc4:	f1b9 0f00 	cmp.w	r9, #0
 800bcc8:	dd38      	ble.n	800bd3c <_dtoa_r+0x474>
 800bcca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bcce:	2200      	movs	r2, #0
 800bcd0:	4b69      	ldr	r3, [pc, #420]	; (800be78 <_dtoa_r+0x5b0>)
 800bcd2:	f7f4 fc01 	bl	80004d8 <__aeabi_dmul>
 800bcd6:	464c      	mov	r4, r9
 800bcd8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bcdc:	f10a 38ff 	add.w	r8, sl, #4294967295
 800bce0:	3701      	adds	r7, #1
 800bce2:	4638      	mov	r0, r7
 800bce4:	f7f4 fb8e 	bl	8000404 <__aeabi_i2d>
 800bce8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bcec:	f7f4 fbf4 	bl	80004d8 <__aeabi_dmul>
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	4b62      	ldr	r3, [pc, #392]	; (800be7c <_dtoa_r+0x5b4>)
 800bcf4:	f7f4 fa3a 	bl	800016c <__adddf3>
 800bcf8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800bcfc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bd00:	9611      	str	r6, [sp, #68]	; 0x44
 800bd02:	2c00      	cmp	r4, #0
 800bd04:	d15d      	bne.n	800bdc2 <_dtoa_r+0x4fa>
 800bd06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	4b5c      	ldr	r3, [pc, #368]	; (800be80 <_dtoa_r+0x5b8>)
 800bd0e:	f7f4 fa2b 	bl	8000168 <__aeabi_dsub>
 800bd12:	4602      	mov	r2, r0
 800bd14:	460b      	mov	r3, r1
 800bd16:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bd1a:	4633      	mov	r3, r6
 800bd1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bd1e:	f7f4 fe6b 	bl	80009f8 <__aeabi_dcmpgt>
 800bd22:	2800      	cmp	r0, #0
 800bd24:	f040 829c 	bne.w	800c260 <_dtoa_r+0x998>
 800bd28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bd2e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800bd32:	f7f4 fe43 	bl	80009bc <__aeabi_dcmplt>
 800bd36:	2800      	cmp	r0, #0
 800bd38:	f040 8290 	bne.w	800c25c <_dtoa_r+0x994>
 800bd3c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800bd40:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bd44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	f2c0 8152 	blt.w	800bff0 <_dtoa_r+0x728>
 800bd4c:	f1ba 0f0e 	cmp.w	sl, #14
 800bd50:	f300 814e 	bgt.w	800bff0 <_dtoa_r+0x728>
 800bd54:	4b45      	ldr	r3, [pc, #276]	; (800be6c <_dtoa_r+0x5a4>)
 800bd56:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bd5a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bd5e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800bd62:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	f280 80db 	bge.w	800bf20 <_dtoa_r+0x658>
 800bd6a:	9b08      	ldr	r3, [sp, #32]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	f300 80d7 	bgt.w	800bf20 <_dtoa_r+0x658>
 800bd72:	f040 8272 	bne.w	800c25a <_dtoa_r+0x992>
 800bd76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	4b40      	ldr	r3, [pc, #256]	; (800be80 <_dtoa_r+0x5b8>)
 800bd7e:	f7f4 fbab 	bl	80004d8 <__aeabi_dmul>
 800bd82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd86:	f7f4 fe2d 	bl	80009e4 <__aeabi_dcmpge>
 800bd8a:	9c08      	ldr	r4, [sp, #32]
 800bd8c:	4626      	mov	r6, r4
 800bd8e:	2800      	cmp	r0, #0
 800bd90:	f040 8248 	bne.w	800c224 <_dtoa_r+0x95c>
 800bd94:	2331      	movs	r3, #49	; 0x31
 800bd96:	9f03      	ldr	r7, [sp, #12]
 800bd98:	f10a 0a01 	add.w	sl, sl, #1
 800bd9c:	f807 3b01 	strb.w	r3, [r7], #1
 800bda0:	e244      	b.n	800c22c <_dtoa_r+0x964>
 800bda2:	07e2      	lsls	r2, r4, #31
 800bda4:	d505      	bpl.n	800bdb2 <_dtoa_r+0x4ea>
 800bda6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bdaa:	f7f4 fb95 	bl	80004d8 <__aeabi_dmul>
 800bdae:	2301      	movs	r3, #1
 800bdb0:	3701      	adds	r7, #1
 800bdb2:	1064      	asrs	r4, r4, #1
 800bdb4:	3608      	adds	r6, #8
 800bdb6:	e76d      	b.n	800bc94 <_dtoa_r+0x3cc>
 800bdb8:	2702      	movs	r7, #2
 800bdba:	e770      	b.n	800bc9e <_dtoa_r+0x3d6>
 800bdbc:	46d0      	mov	r8, sl
 800bdbe:	9c08      	ldr	r4, [sp, #32]
 800bdc0:	e78f      	b.n	800bce2 <_dtoa_r+0x41a>
 800bdc2:	9903      	ldr	r1, [sp, #12]
 800bdc4:	4b29      	ldr	r3, [pc, #164]	; (800be6c <_dtoa_r+0x5a4>)
 800bdc6:	4421      	add	r1, r4
 800bdc8:	9112      	str	r1, [sp, #72]	; 0x48
 800bdca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bdcc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bdd0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800bdd4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bdd8:	2900      	cmp	r1, #0
 800bdda:	d055      	beq.n	800be88 <_dtoa_r+0x5c0>
 800bddc:	2000      	movs	r0, #0
 800bdde:	4929      	ldr	r1, [pc, #164]	; (800be84 <_dtoa_r+0x5bc>)
 800bde0:	f7f4 fca4 	bl	800072c <__aeabi_ddiv>
 800bde4:	463b      	mov	r3, r7
 800bde6:	4632      	mov	r2, r6
 800bde8:	f7f4 f9be 	bl	8000168 <__aeabi_dsub>
 800bdec:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bdf0:	9f03      	ldr	r7, [sp, #12]
 800bdf2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bdf6:	f7f4 fe1f 	bl	8000a38 <__aeabi_d2iz>
 800bdfa:	4604      	mov	r4, r0
 800bdfc:	f7f4 fb02 	bl	8000404 <__aeabi_i2d>
 800be00:	4602      	mov	r2, r0
 800be02:	460b      	mov	r3, r1
 800be04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be08:	f7f4 f9ae 	bl	8000168 <__aeabi_dsub>
 800be0c:	4602      	mov	r2, r0
 800be0e:	460b      	mov	r3, r1
 800be10:	3430      	adds	r4, #48	; 0x30
 800be12:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800be16:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800be1a:	f807 4b01 	strb.w	r4, [r7], #1
 800be1e:	f7f4 fdcd 	bl	80009bc <__aeabi_dcmplt>
 800be22:	2800      	cmp	r0, #0
 800be24:	d174      	bne.n	800bf10 <_dtoa_r+0x648>
 800be26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be2a:	2000      	movs	r0, #0
 800be2c:	4911      	ldr	r1, [pc, #68]	; (800be74 <_dtoa_r+0x5ac>)
 800be2e:	f7f4 f99b 	bl	8000168 <__aeabi_dsub>
 800be32:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800be36:	f7f4 fdc1 	bl	80009bc <__aeabi_dcmplt>
 800be3a:	2800      	cmp	r0, #0
 800be3c:	f040 80b7 	bne.w	800bfae <_dtoa_r+0x6e6>
 800be40:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800be42:	429f      	cmp	r7, r3
 800be44:	f43f af7a 	beq.w	800bd3c <_dtoa_r+0x474>
 800be48:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800be4c:	2200      	movs	r2, #0
 800be4e:	4b0a      	ldr	r3, [pc, #40]	; (800be78 <_dtoa_r+0x5b0>)
 800be50:	f7f4 fb42 	bl	80004d8 <__aeabi_dmul>
 800be54:	2200      	movs	r2, #0
 800be56:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800be5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be5e:	4b06      	ldr	r3, [pc, #24]	; (800be78 <_dtoa_r+0x5b0>)
 800be60:	f7f4 fb3a 	bl	80004d8 <__aeabi_dmul>
 800be64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800be68:	e7c3      	b.n	800bdf2 <_dtoa_r+0x52a>
 800be6a:	bf00      	nop
 800be6c:	0800f298 	.word	0x0800f298
 800be70:	0800f270 	.word	0x0800f270
 800be74:	3ff00000 	.word	0x3ff00000
 800be78:	40240000 	.word	0x40240000
 800be7c:	401c0000 	.word	0x401c0000
 800be80:	40140000 	.word	0x40140000
 800be84:	3fe00000 	.word	0x3fe00000
 800be88:	4630      	mov	r0, r6
 800be8a:	4639      	mov	r1, r7
 800be8c:	f7f4 fb24 	bl	80004d8 <__aeabi_dmul>
 800be90:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800be92:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800be96:	9c03      	ldr	r4, [sp, #12]
 800be98:	9314      	str	r3, [sp, #80]	; 0x50
 800be9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be9e:	f7f4 fdcb 	bl	8000a38 <__aeabi_d2iz>
 800bea2:	9015      	str	r0, [sp, #84]	; 0x54
 800bea4:	f7f4 faae 	bl	8000404 <__aeabi_i2d>
 800bea8:	4602      	mov	r2, r0
 800beaa:	460b      	mov	r3, r1
 800beac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800beb0:	f7f4 f95a 	bl	8000168 <__aeabi_dsub>
 800beb4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800beb6:	4606      	mov	r6, r0
 800beb8:	3330      	adds	r3, #48	; 0x30
 800beba:	f804 3b01 	strb.w	r3, [r4], #1
 800bebe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bec0:	460f      	mov	r7, r1
 800bec2:	429c      	cmp	r4, r3
 800bec4:	f04f 0200 	mov.w	r2, #0
 800bec8:	d124      	bne.n	800bf14 <_dtoa_r+0x64c>
 800beca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bece:	4bb0      	ldr	r3, [pc, #704]	; (800c190 <_dtoa_r+0x8c8>)
 800bed0:	f7f4 f94c 	bl	800016c <__adddf3>
 800bed4:	4602      	mov	r2, r0
 800bed6:	460b      	mov	r3, r1
 800bed8:	4630      	mov	r0, r6
 800beda:	4639      	mov	r1, r7
 800bedc:	f7f4 fd8c 	bl	80009f8 <__aeabi_dcmpgt>
 800bee0:	2800      	cmp	r0, #0
 800bee2:	d163      	bne.n	800bfac <_dtoa_r+0x6e4>
 800bee4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bee8:	2000      	movs	r0, #0
 800beea:	49a9      	ldr	r1, [pc, #676]	; (800c190 <_dtoa_r+0x8c8>)
 800beec:	f7f4 f93c 	bl	8000168 <__aeabi_dsub>
 800bef0:	4602      	mov	r2, r0
 800bef2:	460b      	mov	r3, r1
 800bef4:	4630      	mov	r0, r6
 800bef6:	4639      	mov	r1, r7
 800bef8:	f7f4 fd60 	bl	80009bc <__aeabi_dcmplt>
 800befc:	2800      	cmp	r0, #0
 800befe:	f43f af1d 	beq.w	800bd3c <_dtoa_r+0x474>
 800bf02:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800bf04:	1e7b      	subs	r3, r7, #1
 800bf06:	9314      	str	r3, [sp, #80]	; 0x50
 800bf08:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800bf0c:	2b30      	cmp	r3, #48	; 0x30
 800bf0e:	d0f8      	beq.n	800bf02 <_dtoa_r+0x63a>
 800bf10:	46c2      	mov	sl, r8
 800bf12:	e03b      	b.n	800bf8c <_dtoa_r+0x6c4>
 800bf14:	4b9f      	ldr	r3, [pc, #636]	; (800c194 <_dtoa_r+0x8cc>)
 800bf16:	f7f4 fadf 	bl	80004d8 <__aeabi_dmul>
 800bf1a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bf1e:	e7bc      	b.n	800be9a <_dtoa_r+0x5d2>
 800bf20:	9f03      	ldr	r7, [sp, #12]
 800bf22:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800bf26:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bf2a:	4640      	mov	r0, r8
 800bf2c:	4649      	mov	r1, r9
 800bf2e:	f7f4 fbfd 	bl	800072c <__aeabi_ddiv>
 800bf32:	f7f4 fd81 	bl	8000a38 <__aeabi_d2iz>
 800bf36:	4604      	mov	r4, r0
 800bf38:	f7f4 fa64 	bl	8000404 <__aeabi_i2d>
 800bf3c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bf40:	f7f4 faca 	bl	80004d8 <__aeabi_dmul>
 800bf44:	4602      	mov	r2, r0
 800bf46:	460b      	mov	r3, r1
 800bf48:	4640      	mov	r0, r8
 800bf4a:	4649      	mov	r1, r9
 800bf4c:	f7f4 f90c 	bl	8000168 <__aeabi_dsub>
 800bf50:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800bf54:	f807 6b01 	strb.w	r6, [r7], #1
 800bf58:	9e03      	ldr	r6, [sp, #12]
 800bf5a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800bf5e:	1bbe      	subs	r6, r7, r6
 800bf60:	45b4      	cmp	ip, r6
 800bf62:	4602      	mov	r2, r0
 800bf64:	460b      	mov	r3, r1
 800bf66:	d136      	bne.n	800bfd6 <_dtoa_r+0x70e>
 800bf68:	f7f4 f900 	bl	800016c <__adddf3>
 800bf6c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bf70:	4680      	mov	r8, r0
 800bf72:	4689      	mov	r9, r1
 800bf74:	f7f4 fd40 	bl	80009f8 <__aeabi_dcmpgt>
 800bf78:	bb58      	cbnz	r0, 800bfd2 <_dtoa_r+0x70a>
 800bf7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bf7e:	4640      	mov	r0, r8
 800bf80:	4649      	mov	r1, r9
 800bf82:	f7f4 fd11 	bl	80009a8 <__aeabi_dcmpeq>
 800bf86:	b108      	cbz	r0, 800bf8c <_dtoa_r+0x6c4>
 800bf88:	07e1      	lsls	r1, r4, #31
 800bf8a:	d422      	bmi.n	800bfd2 <_dtoa_r+0x70a>
 800bf8c:	4628      	mov	r0, r5
 800bf8e:	4659      	mov	r1, fp
 800bf90:	f000 fe68 	bl	800cc64 <_Bfree>
 800bf94:	2300      	movs	r3, #0
 800bf96:	703b      	strb	r3, [r7, #0]
 800bf98:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bf9a:	f10a 0001 	add.w	r0, sl, #1
 800bf9e:	6018      	str	r0, [r3, #0]
 800bfa0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	f43f acde 	beq.w	800b964 <_dtoa_r+0x9c>
 800bfa8:	601f      	str	r7, [r3, #0]
 800bfaa:	e4db      	b.n	800b964 <_dtoa_r+0x9c>
 800bfac:	4627      	mov	r7, r4
 800bfae:	463b      	mov	r3, r7
 800bfb0:	461f      	mov	r7, r3
 800bfb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bfb6:	2a39      	cmp	r2, #57	; 0x39
 800bfb8:	d107      	bne.n	800bfca <_dtoa_r+0x702>
 800bfba:	9a03      	ldr	r2, [sp, #12]
 800bfbc:	429a      	cmp	r2, r3
 800bfbe:	d1f7      	bne.n	800bfb0 <_dtoa_r+0x6e8>
 800bfc0:	2230      	movs	r2, #48	; 0x30
 800bfc2:	9903      	ldr	r1, [sp, #12]
 800bfc4:	f108 0801 	add.w	r8, r8, #1
 800bfc8:	700a      	strb	r2, [r1, #0]
 800bfca:	781a      	ldrb	r2, [r3, #0]
 800bfcc:	3201      	adds	r2, #1
 800bfce:	701a      	strb	r2, [r3, #0]
 800bfd0:	e79e      	b.n	800bf10 <_dtoa_r+0x648>
 800bfd2:	46d0      	mov	r8, sl
 800bfd4:	e7eb      	b.n	800bfae <_dtoa_r+0x6e6>
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	4b6e      	ldr	r3, [pc, #440]	; (800c194 <_dtoa_r+0x8cc>)
 800bfda:	f7f4 fa7d 	bl	80004d8 <__aeabi_dmul>
 800bfde:	2200      	movs	r2, #0
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	4680      	mov	r8, r0
 800bfe4:	4689      	mov	r9, r1
 800bfe6:	f7f4 fcdf 	bl	80009a8 <__aeabi_dcmpeq>
 800bfea:	2800      	cmp	r0, #0
 800bfec:	d09b      	beq.n	800bf26 <_dtoa_r+0x65e>
 800bfee:	e7cd      	b.n	800bf8c <_dtoa_r+0x6c4>
 800bff0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bff2:	2a00      	cmp	r2, #0
 800bff4:	f000 80d0 	beq.w	800c198 <_dtoa_r+0x8d0>
 800bff8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800bffa:	2a01      	cmp	r2, #1
 800bffc:	f300 80ae 	bgt.w	800c15c <_dtoa_r+0x894>
 800c000:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c002:	2a00      	cmp	r2, #0
 800c004:	f000 80a6 	beq.w	800c154 <_dtoa_r+0x88c>
 800c008:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c00c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c00e:	9f06      	ldr	r7, [sp, #24]
 800c010:	9a06      	ldr	r2, [sp, #24]
 800c012:	2101      	movs	r1, #1
 800c014:	441a      	add	r2, r3
 800c016:	9206      	str	r2, [sp, #24]
 800c018:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c01a:	4628      	mov	r0, r5
 800c01c:	441a      	add	r2, r3
 800c01e:	9209      	str	r2, [sp, #36]	; 0x24
 800c020:	f000 ff20 	bl	800ce64 <__i2b>
 800c024:	4606      	mov	r6, r0
 800c026:	2f00      	cmp	r7, #0
 800c028:	dd0c      	ble.n	800c044 <_dtoa_r+0x77c>
 800c02a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	dd09      	ble.n	800c044 <_dtoa_r+0x77c>
 800c030:	42bb      	cmp	r3, r7
 800c032:	bfa8      	it	ge
 800c034:	463b      	movge	r3, r7
 800c036:	9a06      	ldr	r2, [sp, #24]
 800c038:	1aff      	subs	r7, r7, r3
 800c03a:	1ad2      	subs	r2, r2, r3
 800c03c:	9206      	str	r2, [sp, #24]
 800c03e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c040:	1ad3      	subs	r3, r2, r3
 800c042:	9309      	str	r3, [sp, #36]	; 0x24
 800c044:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c046:	b1f3      	cbz	r3, 800c086 <_dtoa_r+0x7be>
 800c048:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	f000 80a8 	beq.w	800c1a0 <_dtoa_r+0x8d8>
 800c050:	2c00      	cmp	r4, #0
 800c052:	dd10      	ble.n	800c076 <_dtoa_r+0x7ae>
 800c054:	4631      	mov	r1, r6
 800c056:	4622      	mov	r2, r4
 800c058:	4628      	mov	r0, r5
 800c05a:	f000 ffc1 	bl	800cfe0 <__pow5mult>
 800c05e:	465a      	mov	r2, fp
 800c060:	4601      	mov	r1, r0
 800c062:	4606      	mov	r6, r0
 800c064:	4628      	mov	r0, r5
 800c066:	f000 ff13 	bl	800ce90 <__multiply>
 800c06a:	4680      	mov	r8, r0
 800c06c:	4659      	mov	r1, fp
 800c06e:	4628      	mov	r0, r5
 800c070:	f000 fdf8 	bl	800cc64 <_Bfree>
 800c074:	46c3      	mov	fp, r8
 800c076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c078:	1b1a      	subs	r2, r3, r4
 800c07a:	d004      	beq.n	800c086 <_dtoa_r+0x7be>
 800c07c:	4659      	mov	r1, fp
 800c07e:	4628      	mov	r0, r5
 800c080:	f000 ffae 	bl	800cfe0 <__pow5mult>
 800c084:	4683      	mov	fp, r0
 800c086:	2101      	movs	r1, #1
 800c088:	4628      	mov	r0, r5
 800c08a:	f000 feeb 	bl	800ce64 <__i2b>
 800c08e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c090:	4604      	mov	r4, r0
 800c092:	2b00      	cmp	r3, #0
 800c094:	f340 8086 	ble.w	800c1a4 <_dtoa_r+0x8dc>
 800c098:	461a      	mov	r2, r3
 800c09a:	4601      	mov	r1, r0
 800c09c:	4628      	mov	r0, r5
 800c09e:	f000 ff9f 	bl	800cfe0 <__pow5mult>
 800c0a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c0a4:	4604      	mov	r4, r0
 800c0a6:	2b01      	cmp	r3, #1
 800c0a8:	dd7f      	ble.n	800c1aa <_dtoa_r+0x8e2>
 800c0aa:	f04f 0800 	mov.w	r8, #0
 800c0ae:	6923      	ldr	r3, [r4, #16]
 800c0b0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c0b4:	6918      	ldr	r0, [r3, #16]
 800c0b6:	f000 fe87 	bl	800cdc8 <__hi0bits>
 800c0ba:	f1c0 0020 	rsb	r0, r0, #32
 800c0be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0c0:	4418      	add	r0, r3
 800c0c2:	f010 001f 	ands.w	r0, r0, #31
 800c0c6:	f000 8092 	beq.w	800c1ee <_dtoa_r+0x926>
 800c0ca:	f1c0 0320 	rsb	r3, r0, #32
 800c0ce:	2b04      	cmp	r3, #4
 800c0d0:	f340 808a 	ble.w	800c1e8 <_dtoa_r+0x920>
 800c0d4:	f1c0 001c 	rsb	r0, r0, #28
 800c0d8:	9b06      	ldr	r3, [sp, #24]
 800c0da:	4407      	add	r7, r0
 800c0dc:	4403      	add	r3, r0
 800c0de:	9306      	str	r3, [sp, #24]
 800c0e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0e2:	4403      	add	r3, r0
 800c0e4:	9309      	str	r3, [sp, #36]	; 0x24
 800c0e6:	9b06      	ldr	r3, [sp, #24]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	dd05      	ble.n	800c0f8 <_dtoa_r+0x830>
 800c0ec:	4659      	mov	r1, fp
 800c0ee:	461a      	mov	r2, r3
 800c0f0:	4628      	mov	r0, r5
 800c0f2:	f000 ffcf 	bl	800d094 <__lshift>
 800c0f6:	4683      	mov	fp, r0
 800c0f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	dd05      	ble.n	800c10a <_dtoa_r+0x842>
 800c0fe:	4621      	mov	r1, r4
 800c100:	461a      	mov	r2, r3
 800c102:	4628      	mov	r0, r5
 800c104:	f000 ffc6 	bl	800d094 <__lshift>
 800c108:	4604      	mov	r4, r0
 800c10a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d070      	beq.n	800c1f2 <_dtoa_r+0x92a>
 800c110:	4621      	mov	r1, r4
 800c112:	4658      	mov	r0, fp
 800c114:	f001 f82e 	bl	800d174 <__mcmp>
 800c118:	2800      	cmp	r0, #0
 800c11a:	da6a      	bge.n	800c1f2 <_dtoa_r+0x92a>
 800c11c:	2300      	movs	r3, #0
 800c11e:	4659      	mov	r1, fp
 800c120:	220a      	movs	r2, #10
 800c122:	4628      	mov	r0, r5
 800c124:	f000 fdc0 	bl	800cca8 <__multadd>
 800c128:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c12a:	4683      	mov	fp, r0
 800c12c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c130:	2b00      	cmp	r3, #0
 800c132:	f000 8194 	beq.w	800c45e <_dtoa_r+0xb96>
 800c136:	4631      	mov	r1, r6
 800c138:	2300      	movs	r3, #0
 800c13a:	220a      	movs	r2, #10
 800c13c:	4628      	mov	r0, r5
 800c13e:	f000 fdb3 	bl	800cca8 <__multadd>
 800c142:	f1b9 0f00 	cmp.w	r9, #0
 800c146:	4606      	mov	r6, r0
 800c148:	f300 8093 	bgt.w	800c272 <_dtoa_r+0x9aa>
 800c14c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c14e:	2b02      	cmp	r3, #2
 800c150:	dc57      	bgt.n	800c202 <_dtoa_r+0x93a>
 800c152:	e08e      	b.n	800c272 <_dtoa_r+0x9aa>
 800c154:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c156:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c15a:	e757      	b.n	800c00c <_dtoa_r+0x744>
 800c15c:	9b08      	ldr	r3, [sp, #32]
 800c15e:	1e5c      	subs	r4, r3, #1
 800c160:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c162:	42a3      	cmp	r3, r4
 800c164:	bfb7      	itett	lt
 800c166:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c168:	1b1c      	subge	r4, r3, r4
 800c16a:	1ae2      	sublt	r2, r4, r3
 800c16c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800c16e:	bfbe      	ittt	lt
 800c170:	940a      	strlt	r4, [sp, #40]	; 0x28
 800c172:	189b      	addlt	r3, r3, r2
 800c174:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c176:	9b08      	ldr	r3, [sp, #32]
 800c178:	bfb8      	it	lt
 800c17a:	2400      	movlt	r4, #0
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	bfbb      	ittet	lt
 800c180:	9b06      	ldrlt	r3, [sp, #24]
 800c182:	9a08      	ldrlt	r2, [sp, #32]
 800c184:	9f06      	ldrge	r7, [sp, #24]
 800c186:	1a9f      	sublt	r7, r3, r2
 800c188:	bfac      	ite	ge
 800c18a:	9b08      	ldrge	r3, [sp, #32]
 800c18c:	2300      	movlt	r3, #0
 800c18e:	e73f      	b.n	800c010 <_dtoa_r+0x748>
 800c190:	3fe00000 	.word	0x3fe00000
 800c194:	40240000 	.word	0x40240000
 800c198:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c19a:	9f06      	ldr	r7, [sp, #24]
 800c19c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800c19e:	e742      	b.n	800c026 <_dtoa_r+0x75e>
 800c1a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c1a2:	e76b      	b.n	800c07c <_dtoa_r+0x7b4>
 800c1a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c1a6:	2b01      	cmp	r3, #1
 800c1a8:	dc19      	bgt.n	800c1de <_dtoa_r+0x916>
 800c1aa:	9b04      	ldr	r3, [sp, #16]
 800c1ac:	b9bb      	cbnz	r3, 800c1de <_dtoa_r+0x916>
 800c1ae:	9b05      	ldr	r3, [sp, #20]
 800c1b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c1b4:	b99b      	cbnz	r3, 800c1de <_dtoa_r+0x916>
 800c1b6:	9b05      	ldr	r3, [sp, #20]
 800c1b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c1bc:	0d1b      	lsrs	r3, r3, #20
 800c1be:	051b      	lsls	r3, r3, #20
 800c1c0:	b183      	cbz	r3, 800c1e4 <_dtoa_r+0x91c>
 800c1c2:	f04f 0801 	mov.w	r8, #1
 800c1c6:	9b06      	ldr	r3, [sp, #24]
 800c1c8:	3301      	adds	r3, #1
 800c1ca:	9306      	str	r3, [sp, #24]
 800c1cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1ce:	3301      	adds	r3, #1
 800c1d0:	9309      	str	r3, [sp, #36]	; 0x24
 800c1d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	f47f af6a 	bne.w	800c0ae <_dtoa_r+0x7e6>
 800c1da:	2001      	movs	r0, #1
 800c1dc:	e76f      	b.n	800c0be <_dtoa_r+0x7f6>
 800c1de:	f04f 0800 	mov.w	r8, #0
 800c1e2:	e7f6      	b.n	800c1d2 <_dtoa_r+0x90a>
 800c1e4:	4698      	mov	r8, r3
 800c1e6:	e7f4      	b.n	800c1d2 <_dtoa_r+0x90a>
 800c1e8:	f43f af7d 	beq.w	800c0e6 <_dtoa_r+0x81e>
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	301c      	adds	r0, #28
 800c1f0:	e772      	b.n	800c0d8 <_dtoa_r+0x810>
 800c1f2:	9b08      	ldr	r3, [sp, #32]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	dc36      	bgt.n	800c266 <_dtoa_r+0x99e>
 800c1f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c1fa:	2b02      	cmp	r3, #2
 800c1fc:	dd33      	ble.n	800c266 <_dtoa_r+0x99e>
 800c1fe:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c202:	f1b9 0f00 	cmp.w	r9, #0
 800c206:	d10d      	bne.n	800c224 <_dtoa_r+0x95c>
 800c208:	4621      	mov	r1, r4
 800c20a:	464b      	mov	r3, r9
 800c20c:	2205      	movs	r2, #5
 800c20e:	4628      	mov	r0, r5
 800c210:	f000 fd4a 	bl	800cca8 <__multadd>
 800c214:	4601      	mov	r1, r0
 800c216:	4604      	mov	r4, r0
 800c218:	4658      	mov	r0, fp
 800c21a:	f000 ffab 	bl	800d174 <__mcmp>
 800c21e:	2800      	cmp	r0, #0
 800c220:	f73f adb8 	bgt.w	800bd94 <_dtoa_r+0x4cc>
 800c224:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c226:	9f03      	ldr	r7, [sp, #12]
 800c228:	ea6f 0a03 	mvn.w	sl, r3
 800c22c:	f04f 0800 	mov.w	r8, #0
 800c230:	4621      	mov	r1, r4
 800c232:	4628      	mov	r0, r5
 800c234:	f000 fd16 	bl	800cc64 <_Bfree>
 800c238:	2e00      	cmp	r6, #0
 800c23a:	f43f aea7 	beq.w	800bf8c <_dtoa_r+0x6c4>
 800c23e:	f1b8 0f00 	cmp.w	r8, #0
 800c242:	d005      	beq.n	800c250 <_dtoa_r+0x988>
 800c244:	45b0      	cmp	r8, r6
 800c246:	d003      	beq.n	800c250 <_dtoa_r+0x988>
 800c248:	4641      	mov	r1, r8
 800c24a:	4628      	mov	r0, r5
 800c24c:	f000 fd0a 	bl	800cc64 <_Bfree>
 800c250:	4631      	mov	r1, r6
 800c252:	4628      	mov	r0, r5
 800c254:	f000 fd06 	bl	800cc64 <_Bfree>
 800c258:	e698      	b.n	800bf8c <_dtoa_r+0x6c4>
 800c25a:	2400      	movs	r4, #0
 800c25c:	4626      	mov	r6, r4
 800c25e:	e7e1      	b.n	800c224 <_dtoa_r+0x95c>
 800c260:	46c2      	mov	sl, r8
 800c262:	4626      	mov	r6, r4
 800c264:	e596      	b.n	800bd94 <_dtoa_r+0x4cc>
 800c266:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c268:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	f000 80fd 	beq.w	800c46c <_dtoa_r+0xba4>
 800c272:	2f00      	cmp	r7, #0
 800c274:	dd05      	ble.n	800c282 <_dtoa_r+0x9ba>
 800c276:	4631      	mov	r1, r6
 800c278:	463a      	mov	r2, r7
 800c27a:	4628      	mov	r0, r5
 800c27c:	f000 ff0a 	bl	800d094 <__lshift>
 800c280:	4606      	mov	r6, r0
 800c282:	f1b8 0f00 	cmp.w	r8, #0
 800c286:	d05c      	beq.n	800c342 <_dtoa_r+0xa7a>
 800c288:	4628      	mov	r0, r5
 800c28a:	6871      	ldr	r1, [r6, #4]
 800c28c:	f000 fcaa 	bl	800cbe4 <_Balloc>
 800c290:	4607      	mov	r7, r0
 800c292:	b928      	cbnz	r0, 800c2a0 <_dtoa_r+0x9d8>
 800c294:	4602      	mov	r2, r0
 800c296:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c29a:	4b7f      	ldr	r3, [pc, #508]	; (800c498 <_dtoa_r+0xbd0>)
 800c29c:	f7ff bb28 	b.w	800b8f0 <_dtoa_r+0x28>
 800c2a0:	6932      	ldr	r2, [r6, #16]
 800c2a2:	f106 010c 	add.w	r1, r6, #12
 800c2a6:	3202      	adds	r2, #2
 800c2a8:	0092      	lsls	r2, r2, #2
 800c2aa:	300c      	adds	r0, #12
 800c2ac:	f000 fc8c 	bl	800cbc8 <memcpy>
 800c2b0:	2201      	movs	r2, #1
 800c2b2:	4639      	mov	r1, r7
 800c2b4:	4628      	mov	r0, r5
 800c2b6:	f000 feed 	bl	800d094 <__lshift>
 800c2ba:	46b0      	mov	r8, r6
 800c2bc:	4606      	mov	r6, r0
 800c2be:	9b03      	ldr	r3, [sp, #12]
 800c2c0:	3301      	adds	r3, #1
 800c2c2:	9308      	str	r3, [sp, #32]
 800c2c4:	9b03      	ldr	r3, [sp, #12]
 800c2c6:	444b      	add	r3, r9
 800c2c8:	930a      	str	r3, [sp, #40]	; 0x28
 800c2ca:	9b04      	ldr	r3, [sp, #16]
 800c2cc:	f003 0301 	and.w	r3, r3, #1
 800c2d0:	9309      	str	r3, [sp, #36]	; 0x24
 800c2d2:	9b08      	ldr	r3, [sp, #32]
 800c2d4:	4621      	mov	r1, r4
 800c2d6:	3b01      	subs	r3, #1
 800c2d8:	4658      	mov	r0, fp
 800c2da:	9304      	str	r3, [sp, #16]
 800c2dc:	f7ff fa68 	bl	800b7b0 <quorem>
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	4641      	mov	r1, r8
 800c2e4:	3330      	adds	r3, #48	; 0x30
 800c2e6:	9006      	str	r0, [sp, #24]
 800c2e8:	4658      	mov	r0, fp
 800c2ea:	930b      	str	r3, [sp, #44]	; 0x2c
 800c2ec:	f000 ff42 	bl	800d174 <__mcmp>
 800c2f0:	4632      	mov	r2, r6
 800c2f2:	4681      	mov	r9, r0
 800c2f4:	4621      	mov	r1, r4
 800c2f6:	4628      	mov	r0, r5
 800c2f8:	f000 ff58 	bl	800d1ac <__mdiff>
 800c2fc:	68c2      	ldr	r2, [r0, #12]
 800c2fe:	4607      	mov	r7, r0
 800c300:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c302:	bb02      	cbnz	r2, 800c346 <_dtoa_r+0xa7e>
 800c304:	4601      	mov	r1, r0
 800c306:	4658      	mov	r0, fp
 800c308:	f000 ff34 	bl	800d174 <__mcmp>
 800c30c:	4602      	mov	r2, r0
 800c30e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c310:	4639      	mov	r1, r7
 800c312:	4628      	mov	r0, r5
 800c314:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800c318:	f000 fca4 	bl	800cc64 <_Bfree>
 800c31c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c31e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c320:	9f08      	ldr	r7, [sp, #32]
 800c322:	ea43 0102 	orr.w	r1, r3, r2
 800c326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c328:	430b      	orrs	r3, r1
 800c32a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c32c:	d10d      	bne.n	800c34a <_dtoa_r+0xa82>
 800c32e:	2b39      	cmp	r3, #57	; 0x39
 800c330:	d029      	beq.n	800c386 <_dtoa_r+0xabe>
 800c332:	f1b9 0f00 	cmp.w	r9, #0
 800c336:	dd01      	ble.n	800c33c <_dtoa_r+0xa74>
 800c338:	9b06      	ldr	r3, [sp, #24]
 800c33a:	3331      	adds	r3, #49	; 0x31
 800c33c:	9a04      	ldr	r2, [sp, #16]
 800c33e:	7013      	strb	r3, [r2, #0]
 800c340:	e776      	b.n	800c230 <_dtoa_r+0x968>
 800c342:	4630      	mov	r0, r6
 800c344:	e7b9      	b.n	800c2ba <_dtoa_r+0x9f2>
 800c346:	2201      	movs	r2, #1
 800c348:	e7e2      	b.n	800c310 <_dtoa_r+0xa48>
 800c34a:	f1b9 0f00 	cmp.w	r9, #0
 800c34e:	db06      	blt.n	800c35e <_dtoa_r+0xa96>
 800c350:	9922      	ldr	r1, [sp, #136]	; 0x88
 800c352:	ea41 0909 	orr.w	r9, r1, r9
 800c356:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c358:	ea59 0101 	orrs.w	r1, r9, r1
 800c35c:	d120      	bne.n	800c3a0 <_dtoa_r+0xad8>
 800c35e:	2a00      	cmp	r2, #0
 800c360:	ddec      	ble.n	800c33c <_dtoa_r+0xa74>
 800c362:	4659      	mov	r1, fp
 800c364:	2201      	movs	r2, #1
 800c366:	4628      	mov	r0, r5
 800c368:	9308      	str	r3, [sp, #32]
 800c36a:	f000 fe93 	bl	800d094 <__lshift>
 800c36e:	4621      	mov	r1, r4
 800c370:	4683      	mov	fp, r0
 800c372:	f000 feff 	bl	800d174 <__mcmp>
 800c376:	2800      	cmp	r0, #0
 800c378:	9b08      	ldr	r3, [sp, #32]
 800c37a:	dc02      	bgt.n	800c382 <_dtoa_r+0xaba>
 800c37c:	d1de      	bne.n	800c33c <_dtoa_r+0xa74>
 800c37e:	07da      	lsls	r2, r3, #31
 800c380:	d5dc      	bpl.n	800c33c <_dtoa_r+0xa74>
 800c382:	2b39      	cmp	r3, #57	; 0x39
 800c384:	d1d8      	bne.n	800c338 <_dtoa_r+0xa70>
 800c386:	2339      	movs	r3, #57	; 0x39
 800c388:	9a04      	ldr	r2, [sp, #16]
 800c38a:	7013      	strb	r3, [r2, #0]
 800c38c:	463b      	mov	r3, r7
 800c38e:	461f      	mov	r7, r3
 800c390:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800c394:	3b01      	subs	r3, #1
 800c396:	2a39      	cmp	r2, #57	; 0x39
 800c398:	d050      	beq.n	800c43c <_dtoa_r+0xb74>
 800c39a:	3201      	adds	r2, #1
 800c39c:	701a      	strb	r2, [r3, #0]
 800c39e:	e747      	b.n	800c230 <_dtoa_r+0x968>
 800c3a0:	2a00      	cmp	r2, #0
 800c3a2:	dd03      	ble.n	800c3ac <_dtoa_r+0xae4>
 800c3a4:	2b39      	cmp	r3, #57	; 0x39
 800c3a6:	d0ee      	beq.n	800c386 <_dtoa_r+0xabe>
 800c3a8:	3301      	adds	r3, #1
 800c3aa:	e7c7      	b.n	800c33c <_dtoa_r+0xa74>
 800c3ac:	9a08      	ldr	r2, [sp, #32]
 800c3ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c3b0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c3b4:	428a      	cmp	r2, r1
 800c3b6:	d02a      	beq.n	800c40e <_dtoa_r+0xb46>
 800c3b8:	4659      	mov	r1, fp
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	220a      	movs	r2, #10
 800c3be:	4628      	mov	r0, r5
 800c3c0:	f000 fc72 	bl	800cca8 <__multadd>
 800c3c4:	45b0      	cmp	r8, r6
 800c3c6:	4683      	mov	fp, r0
 800c3c8:	f04f 0300 	mov.w	r3, #0
 800c3cc:	f04f 020a 	mov.w	r2, #10
 800c3d0:	4641      	mov	r1, r8
 800c3d2:	4628      	mov	r0, r5
 800c3d4:	d107      	bne.n	800c3e6 <_dtoa_r+0xb1e>
 800c3d6:	f000 fc67 	bl	800cca8 <__multadd>
 800c3da:	4680      	mov	r8, r0
 800c3dc:	4606      	mov	r6, r0
 800c3de:	9b08      	ldr	r3, [sp, #32]
 800c3e0:	3301      	adds	r3, #1
 800c3e2:	9308      	str	r3, [sp, #32]
 800c3e4:	e775      	b.n	800c2d2 <_dtoa_r+0xa0a>
 800c3e6:	f000 fc5f 	bl	800cca8 <__multadd>
 800c3ea:	4631      	mov	r1, r6
 800c3ec:	4680      	mov	r8, r0
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	220a      	movs	r2, #10
 800c3f2:	4628      	mov	r0, r5
 800c3f4:	f000 fc58 	bl	800cca8 <__multadd>
 800c3f8:	4606      	mov	r6, r0
 800c3fa:	e7f0      	b.n	800c3de <_dtoa_r+0xb16>
 800c3fc:	f1b9 0f00 	cmp.w	r9, #0
 800c400:	bfcc      	ite	gt
 800c402:	464f      	movgt	r7, r9
 800c404:	2701      	movle	r7, #1
 800c406:	f04f 0800 	mov.w	r8, #0
 800c40a:	9a03      	ldr	r2, [sp, #12]
 800c40c:	4417      	add	r7, r2
 800c40e:	4659      	mov	r1, fp
 800c410:	2201      	movs	r2, #1
 800c412:	4628      	mov	r0, r5
 800c414:	9308      	str	r3, [sp, #32]
 800c416:	f000 fe3d 	bl	800d094 <__lshift>
 800c41a:	4621      	mov	r1, r4
 800c41c:	4683      	mov	fp, r0
 800c41e:	f000 fea9 	bl	800d174 <__mcmp>
 800c422:	2800      	cmp	r0, #0
 800c424:	dcb2      	bgt.n	800c38c <_dtoa_r+0xac4>
 800c426:	d102      	bne.n	800c42e <_dtoa_r+0xb66>
 800c428:	9b08      	ldr	r3, [sp, #32]
 800c42a:	07db      	lsls	r3, r3, #31
 800c42c:	d4ae      	bmi.n	800c38c <_dtoa_r+0xac4>
 800c42e:	463b      	mov	r3, r7
 800c430:	461f      	mov	r7, r3
 800c432:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c436:	2a30      	cmp	r2, #48	; 0x30
 800c438:	d0fa      	beq.n	800c430 <_dtoa_r+0xb68>
 800c43a:	e6f9      	b.n	800c230 <_dtoa_r+0x968>
 800c43c:	9a03      	ldr	r2, [sp, #12]
 800c43e:	429a      	cmp	r2, r3
 800c440:	d1a5      	bne.n	800c38e <_dtoa_r+0xac6>
 800c442:	2331      	movs	r3, #49	; 0x31
 800c444:	f10a 0a01 	add.w	sl, sl, #1
 800c448:	e779      	b.n	800c33e <_dtoa_r+0xa76>
 800c44a:	4b14      	ldr	r3, [pc, #80]	; (800c49c <_dtoa_r+0xbd4>)
 800c44c:	f7ff baa8 	b.w	800b9a0 <_dtoa_r+0xd8>
 800c450:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c452:	2b00      	cmp	r3, #0
 800c454:	f47f aa81 	bne.w	800b95a <_dtoa_r+0x92>
 800c458:	4b11      	ldr	r3, [pc, #68]	; (800c4a0 <_dtoa_r+0xbd8>)
 800c45a:	f7ff baa1 	b.w	800b9a0 <_dtoa_r+0xd8>
 800c45e:	f1b9 0f00 	cmp.w	r9, #0
 800c462:	dc03      	bgt.n	800c46c <_dtoa_r+0xba4>
 800c464:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c466:	2b02      	cmp	r3, #2
 800c468:	f73f aecb 	bgt.w	800c202 <_dtoa_r+0x93a>
 800c46c:	9f03      	ldr	r7, [sp, #12]
 800c46e:	4621      	mov	r1, r4
 800c470:	4658      	mov	r0, fp
 800c472:	f7ff f99d 	bl	800b7b0 <quorem>
 800c476:	9a03      	ldr	r2, [sp, #12]
 800c478:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c47c:	f807 3b01 	strb.w	r3, [r7], #1
 800c480:	1aba      	subs	r2, r7, r2
 800c482:	4591      	cmp	r9, r2
 800c484:	ddba      	ble.n	800c3fc <_dtoa_r+0xb34>
 800c486:	4659      	mov	r1, fp
 800c488:	2300      	movs	r3, #0
 800c48a:	220a      	movs	r2, #10
 800c48c:	4628      	mov	r0, r5
 800c48e:	f000 fc0b 	bl	800cca8 <__multadd>
 800c492:	4683      	mov	fp, r0
 800c494:	e7eb      	b.n	800c46e <_dtoa_r+0xba6>
 800c496:	bf00      	nop
 800c498:	0800f188 	.word	0x0800f188
 800c49c:	0800ef8c 	.word	0x0800ef8c
 800c4a0:	0800f109 	.word	0x0800f109

0800c4a4 <rshift>:
 800c4a4:	6903      	ldr	r3, [r0, #16]
 800c4a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c4aa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c4ae:	f100 0414 	add.w	r4, r0, #20
 800c4b2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c4b6:	dd46      	ble.n	800c546 <rshift+0xa2>
 800c4b8:	f011 011f 	ands.w	r1, r1, #31
 800c4bc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c4c0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c4c4:	d10c      	bne.n	800c4e0 <rshift+0x3c>
 800c4c6:	4629      	mov	r1, r5
 800c4c8:	f100 0710 	add.w	r7, r0, #16
 800c4cc:	42b1      	cmp	r1, r6
 800c4ce:	d335      	bcc.n	800c53c <rshift+0x98>
 800c4d0:	1a9b      	subs	r3, r3, r2
 800c4d2:	009b      	lsls	r3, r3, #2
 800c4d4:	1eea      	subs	r2, r5, #3
 800c4d6:	4296      	cmp	r6, r2
 800c4d8:	bf38      	it	cc
 800c4da:	2300      	movcc	r3, #0
 800c4dc:	4423      	add	r3, r4
 800c4de:	e015      	b.n	800c50c <rshift+0x68>
 800c4e0:	46a1      	mov	r9, r4
 800c4e2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c4e6:	f1c1 0820 	rsb	r8, r1, #32
 800c4ea:	40cf      	lsrs	r7, r1
 800c4ec:	f105 0e04 	add.w	lr, r5, #4
 800c4f0:	4576      	cmp	r6, lr
 800c4f2:	46f4      	mov	ip, lr
 800c4f4:	d816      	bhi.n	800c524 <rshift+0x80>
 800c4f6:	1a9a      	subs	r2, r3, r2
 800c4f8:	0092      	lsls	r2, r2, #2
 800c4fa:	3a04      	subs	r2, #4
 800c4fc:	3501      	adds	r5, #1
 800c4fe:	42ae      	cmp	r6, r5
 800c500:	bf38      	it	cc
 800c502:	2200      	movcc	r2, #0
 800c504:	18a3      	adds	r3, r4, r2
 800c506:	50a7      	str	r7, [r4, r2]
 800c508:	b107      	cbz	r7, 800c50c <rshift+0x68>
 800c50a:	3304      	adds	r3, #4
 800c50c:	42a3      	cmp	r3, r4
 800c50e:	eba3 0204 	sub.w	r2, r3, r4
 800c512:	bf08      	it	eq
 800c514:	2300      	moveq	r3, #0
 800c516:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c51a:	6102      	str	r2, [r0, #16]
 800c51c:	bf08      	it	eq
 800c51e:	6143      	streq	r3, [r0, #20]
 800c520:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c524:	f8dc c000 	ldr.w	ip, [ip]
 800c528:	fa0c fc08 	lsl.w	ip, ip, r8
 800c52c:	ea4c 0707 	orr.w	r7, ip, r7
 800c530:	f849 7b04 	str.w	r7, [r9], #4
 800c534:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c538:	40cf      	lsrs	r7, r1
 800c53a:	e7d9      	b.n	800c4f0 <rshift+0x4c>
 800c53c:	f851 cb04 	ldr.w	ip, [r1], #4
 800c540:	f847 cf04 	str.w	ip, [r7, #4]!
 800c544:	e7c2      	b.n	800c4cc <rshift+0x28>
 800c546:	4623      	mov	r3, r4
 800c548:	e7e0      	b.n	800c50c <rshift+0x68>

0800c54a <__hexdig_fun>:
 800c54a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c54e:	2b09      	cmp	r3, #9
 800c550:	d802      	bhi.n	800c558 <__hexdig_fun+0xe>
 800c552:	3820      	subs	r0, #32
 800c554:	b2c0      	uxtb	r0, r0
 800c556:	4770      	bx	lr
 800c558:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c55c:	2b05      	cmp	r3, #5
 800c55e:	d801      	bhi.n	800c564 <__hexdig_fun+0x1a>
 800c560:	3847      	subs	r0, #71	; 0x47
 800c562:	e7f7      	b.n	800c554 <__hexdig_fun+0xa>
 800c564:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c568:	2b05      	cmp	r3, #5
 800c56a:	d801      	bhi.n	800c570 <__hexdig_fun+0x26>
 800c56c:	3827      	subs	r0, #39	; 0x27
 800c56e:	e7f1      	b.n	800c554 <__hexdig_fun+0xa>
 800c570:	2000      	movs	r0, #0
 800c572:	4770      	bx	lr

0800c574 <__gethex>:
 800c574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c578:	b08b      	sub	sp, #44	; 0x2c
 800c57a:	9305      	str	r3, [sp, #20]
 800c57c:	4bb2      	ldr	r3, [pc, #712]	; (800c848 <__gethex+0x2d4>)
 800c57e:	9002      	str	r0, [sp, #8]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	468b      	mov	fp, r1
 800c584:	4618      	mov	r0, r3
 800c586:	4690      	mov	r8, r2
 800c588:	9303      	str	r3, [sp, #12]
 800c58a:	f7f3 fde1 	bl	8000150 <strlen>
 800c58e:	4682      	mov	sl, r0
 800c590:	9b03      	ldr	r3, [sp, #12]
 800c592:	f8db 2000 	ldr.w	r2, [fp]
 800c596:	4403      	add	r3, r0
 800c598:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c59c:	9306      	str	r3, [sp, #24]
 800c59e:	1c93      	adds	r3, r2, #2
 800c5a0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c5a4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c5a8:	32fe      	adds	r2, #254	; 0xfe
 800c5aa:	18d1      	adds	r1, r2, r3
 800c5ac:	461f      	mov	r7, r3
 800c5ae:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c5b2:	9101      	str	r1, [sp, #4]
 800c5b4:	2830      	cmp	r0, #48	; 0x30
 800c5b6:	d0f8      	beq.n	800c5aa <__gethex+0x36>
 800c5b8:	f7ff ffc7 	bl	800c54a <__hexdig_fun>
 800c5bc:	4604      	mov	r4, r0
 800c5be:	2800      	cmp	r0, #0
 800c5c0:	d13a      	bne.n	800c638 <__gethex+0xc4>
 800c5c2:	4652      	mov	r2, sl
 800c5c4:	4638      	mov	r0, r7
 800c5c6:	9903      	ldr	r1, [sp, #12]
 800c5c8:	f001 fa26 	bl	800da18 <strncmp>
 800c5cc:	4605      	mov	r5, r0
 800c5ce:	2800      	cmp	r0, #0
 800c5d0:	d166      	bne.n	800c6a0 <__gethex+0x12c>
 800c5d2:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c5d6:	eb07 060a 	add.w	r6, r7, sl
 800c5da:	f7ff ffb6 	bl	800c54a <__hexdig_fun>
 800c5de:	2800      	cmp	r0, #0
 800c5e0:	d060      	beq.n	800c6a4 <__gethex+0x130>
 800c5e2:	4633      	mov	r3, r6
 800c5e4:	7818      	ldrb	r0, [r3, #0]
 800c5e6:	461f      	mov	r7, r3
 800c5e8:	2830      	cmp	r0, #48	; 0x30
 800c5ea:	f103 0301 	add.w	r3, r3, #1
 800c5ee:	d0f9      	beq.n	800c5e4 <__gethex+0x70>
 800c5f0:	f7ff ffab 	bl	800c54a <__hexdig_fun>
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	fab0 f480 	clz	r4, r0
 800c5fa:	4635      	mov	r5, r6
 800c5fc:	0964      	lsrs	r4, r4, #5
 800c5fe:	9301      	str	r3, [sp, #4]
 800c600:	463a      	mov	r2, r7
 800c602:	4616      	mov	r6, r2
 800c604:	7830      	ldrb	r0, [r6, #0]
 800c606:	3201      	adds	r2, #1
 800c608:	f7ff ff9f 	bl	800c54a <__hexdig_fun>
 800c60c:	2800      	cmp	r0, #0
 800c60e:	d1f8      	bne.n	800c602 <__gethex+0x8e>
 800c610:	4652      	mov	r2, sl
 800c612:	4630      	mov	r0, r6
 800c614:	9903      	ldr	r1, [sp, #12]
 800c616:	f001 f9ff 	bl	800da18 <strncmp>
 800c61a:	b980      	cbnz	r0, 800c63e <__gethex+0xca>
 800c61c:	b94d      	cbnz	r5, 800c632 <__gethex+0xbe>
 800c61e:	eb06 050a 	add.w	r5, r6, sl
 800c622:	462a      	mov	r2, r5
 800c624:	4616      	mov	r6, r2
 800c626:	7830      	ldrb	r0, [r6, #0]
 800c628:	3201      	adds	r2, #1
 800c62a:	f7ff ff8e 	bl	800c54a <__hexdig_fun>
 800c62e:	2800      	cmp	r0, #0
 800c630:	d1f8      	bne.n	800c624 <__gethex+0xb0>
 800c632:	1bad      	subs	r5, r5, r6
 800c634:	00ad      	lsls	r5, r5, #2
 800c636:	e004      	b.n	800c642 <__gethex+0xce>
 800c638:	2400      	movs	r4, #0
 800c63a:	4625      	mov	r5, r4
 800c63c:	e7e0      	b.n	800c600 <__gethex+0x8c>
 800c63e:	2d00      	cmp	r5, #0
 800c640:	d1f7      	bne.n	800c632 <__gethex+0xbe>
 800c642:	7833      	ldrb	r3, [r6, #0]
 800c644:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c648:	2b50      	cmp	r3, #80	; 0x50
 800c64a:	d139      	bne.n	800c6c0 <__gethex+0x14c>
 800c64c:	7873      	ldrb	r3, [r6, #1]
 800c64e:	2b2b      	cmp	r3, #43	; 0x2b
 800c650:	d02a      	beq.n	800c6a8 <__gethex+0x134>
 800c652:	2b2d      	cmp	r3, #45	; 0x2d
 800c654:	d02c      	beq.n	800c6b0 <__gethex+0x13c>
 800c656:	f04f 0900 	mov.w	r9, #0
 800c65a:	1c71      	adds	r1, r6, #1
 800c65c:	7808      	ldrb	r0, [r1, #0]
 800c65e:	f7ff ff74 	bl	800c54a <__hexdig_fun>
 800c662:	1e43      	subs	r3, r0, #1
 800c664:	b2db      	uxtb	r3, r3
 800c666:	2b18      	cmp	r3, #24
 800c668:	d82a      	bhi.n	800c6c0 <__gethex+0x14c>
 800c66a:	f1a0 0210 	sub.w	r2, r0, #16
 800c66e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c672:	f7ff ff6a 	bl	800c54a <__hexdig_fun>
 800c676:	1e43      	subs	r3, r0, #1
 800c678:	b2db      	uxtb	r3, r3
 800c67a:	2b18      	cmp	r3, #24
 800c67c:	d91b      	bls.n	800c6b6 <__gethex+0x142>
 800c67e:	f1b9 0f00 	cmp.w	r9, #0
 800c682:	d000      	beq.n	800c686 <__gethex+0x112>
 800c684:	4252      	negs	r2, r2
 800c686:	4415      	add	r5, r2
 800c688:	f8cb 1000 	str.w	r1, [fp]
 800c68c:	b1d4      	cbz	r4, 800c6c4 <__gethex+0x150>
 800c68e:	9b01      	ldr	r3, [sp, #4]
 800c690:	2b00      	cmp	r3, #0
 800c692:	bf14      	ite	ne
 800c694:	2700      	movne	r7, #0
 800c696:	2706      	moveq	r7, #6
 800c698:	4638      	mov	r0, r7
 800c69a:	b00b      	add	sp, #44	; 0x2c
 800c69c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6a0:	463e      	mov	r6, r7
 800c6a2:	4625      	mov	r5, r4
 800c6a4:	2401      	movs	r4, #1
 800c6a6:	e7cc      	b.n	800c642 <__gethex+0xce>
 800c6a8:	f04f 0900 	mov.w	r9, #0
 800c6ac:	1cb1      	adds	r1, r6, #2
 800c6ae:	e7d5      	b.n	800c65c <__gethex+0xe8>
 800c6b0:	f04f 0901 	mov.w	r9, #1
 800c6b4:	e7fa      	b.n	800c6ac <__gethex+0x138>
 800c6b6:	230a      	movs	r3, #10
 800c6b8:	fb03 0202 	mla	r2, r3, r2, r0
 800c6bc:	3a10      	subs	r2, #16
 800c6be:	e7d6      	b.n	800c66e <__gethex+0xfa>
 800c6c0:	4631      	mov	r1, r6
 800c6c2:	e7e1      	b.n	800c688 <__gethex+0x114>
 800c6c4:	4621      	mov	r1, r4
 800c6c6:	1bf3      	subs	r3, r6, r7
 800c6c8:	3b01      	subs	r3, #1
 800c6ca:	2b07      	cmp	r3, #7
 800c6cc:	dc0a      	bgt.n	800c6e4 <__gethex+0x170>
 800c6ce:	9802      	ldr	r0, [sp, #8]
 800c6d0:	f000 fa88 	bl	800cbe4 <_Balloc>
 800c6d4:	4604      	mov	r4, r0
 800c6d6:	b940      	cbnz	r0, 800c6ea <__gethex+0x176>
 800c6d8:	4602      	mov	r2, r0
 800c6da:	21de      	movs	r1, #222	; 0xde
 800c6dc:	4b5b      	ldr	r3, [pc, #364]	; (800c84c <__gethex+0x2d8>)
 800c6de:	485c      	ldr	r0, [pc, #368]	; (800c850 <__gethex+0x2dc>)
 800c6e0:	f001 f9bc 	bl	800da5c <__assert_func>
 800c6e4:	3101      	adds	r1, #1
 800c6e6:	105b      	asrs	r3, r3, #1
 800c6e8:	e7ef      	b.n	800c6ca <__gethex+0x156>
 800c6ea:	f04f 0b00 	mov.w	fp, #0
 800c6ee:	f100 0914 	add.w	r9, r0, #20
 800c6f2:	f1ca 0301 	rsb	r3, sl, #1
 800c6f6:	f8cd 9010 	str.w	r9, [sp, #16]
 800c6fa:	f8cd b004 	str.w	fp, [sp, #4]
 800c6fe:	9308      	str	r3, [sp, #32]
 800c700:	42b7      	cmp	r7, r6
 800c702:	d33f      	bcc.n	800c784 <__gethex+0x210>
 800c704:	9f04      	ldr	r7, [sp, #16]
 800c706:	9b01      	ldr	r3, [sp, #4]
 800c708:	f847 3b04 	str.w	r3, [r7], #4
 800c70c:	eba7 0709 	sub.w	r7, r7, r9
 800c710:	10bf      	asrs	r7, r7, #2
 800c712:	6127      	str	r7, [r4, #16]
 800c714:	4618      	mov	r0, r3
 800c716:	f000 fb57 	bl	800cdc8 <__hi0bits>
 800c71a:	017f      	lsls	r7, r7, #5
 800c71c:	f8d8 6000 	ldr.w	r6, [r8]
 800c720:	1a3f      	subs	r7, r7, r0
 800c722:	42b7      	cmp	r7, r6
 800c724:	dd62      	ble.n	800c7ec <__gethex+0x278>
 800c726:	1bbf      	subs	r7, r7, r6
 800c728:	4639      	mov	r1, r7
 800c72a:	4620      	mov	r0, r4
 800c72c:	f000 fef1 	bl	800d512 <__any_on>
 800c730:	4682      	mov	sl, r0
 800c732:	b1a8      	cbz	r0, 800c760 <__gethex+0x1ec>
 800c734:	f04f 0a01 	mov.w	sl, #1
 800c738:	1e7b      	subs	r3, r7, #1
 800c73a:	1159      	asrs	r1, r3, #5
 800c73c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c740:	f003 021f 	and.w	r2, r3, #31
 800c744:	fa0a f202 	lsl.w	r2, sl, r2
 800c748:	420a      	tst	r2, r1
 800c74a:	d009      	beq.n	800c760 <__gethex+0x1ec>
 800c74c:	4553      	cmp	r3, sl
 800c74e:	dd05      	ble.n	800c75c <__gethex+0x1e8>
 800c750:	4620      	mov	r0, r4
 800c752:	1eb9      	subs	r1, r7, #2
 800c754:	f000 fedd 	bl	800d512 <__any_on>
 800c758:	2800      	cmp	r0, #0
 800c75a:	d144      	bne.n	800c7e6 <__gethex+0x272>
 800c75c:	f04f 0a02 	mov.w	sl, #2
 800c760:	4639      	mov	r1, r7
 800c762:	4620      	mov	r0, r4
 800c764:	f7ff fe9e 	bl	800c4a4 <rshift>
 800c768:	443d      	add	r5, r7
 800c76a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c76e:	42ab      	cmp	r3, r5
 800c770:	da4a      	bge.n	800c808 <__gethex+0x294>
 800c772:	4621      	mov	r1, r4
 800c774:	9802      	ldr	r0, [sp, #8]
 800c776:	f000 fa75 	bl	800cc64 <_Bfree>
 800c77a:	2300      	movs	r3, #0
 800c77c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c77e:	27a3      	movs	r7, #163	; 0xa3
 800c780:	6013      	str	r3, [r2, #0]
 800c782:	e789      	b.n	800c698 <__gethex+0x124>
 800c784:	1e73      	subs	r3, r6, #1
 800c786:	9a06      	ldr	r2, [sp, #24]
 800c788:	9307      	str	r3, [sp, #28]
 800c78a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c78e:	4293      	cmp	r3, r2
 800c790:	d019      	beq.n	800c7c6 <__gethex+0x252>
 800c792:	f1bb 0f20 	cmp.w	fp, #32
 800c796:	d107      	bne.n	800c7a8 <__gethex+0x234>
 800c798:	9b04      	ldr	r3, [sp, #16]
 800c79a:	9a01      	ldr	r2, [sp, #4]
 800c79c:	f843 2b04 	str.w	r2, [r3], #4
 800c7a0:	9304      	str	r3, [sp, #16]
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	469b      	mov	fp, r3
 800c7a6:	9301      	str	r3, [sp, #4]
 800c7a8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c7ac:	f7ff fecd 	bl	800c54a <__hexdig_fun>
 800c7b0:	9b01      	ldr	r3, [sp, #4]
 800c7b2:	f000 000f 	and.w	r0, r0, #15
 800c7b6:	fa00 f00b 	lsl.w	r0, r0, fp
 800c7ba:	4303      	orrs	r3, r0
 800c7bc:	9301      	str	r3, [sp, #4]
 800c7be:	f10b 0b04 	add.w	fp, fp, #4
 800c7c2:	9b07      	ldr	r3, [sp, #28]
 800c7c4:	e00d      	b.n	800c7e2 <__gethex+0x26e>
 800c7c6:	9a08      	ldr	r2, [sp, #32]
 800c7c8:	1e73      	subs	r3, r6, #1
 800c7ca:	4413      	add	r3, r2
 800c7cc:	42bb      	cmp	r3, r7
 800c7ce:	d3e0      	bcc.n	800c792 <__gethex+0x21e>
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	4652      	mov	r2, sl
 800c7d4:	9903      	ldr	r1, [sp, #12]
 800c7d6:	9309      	str	r3, [sp, #36]	; 0x24
 800c7d8:	f001 f91e 	bl	800da18 <strncmp>
 800c7dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7de:	2800      	cmp	r0, #0
 800c7e0:	d1d7      	bne.n	800c792 <__gethex+0x21e>
 800c7e2:	461e      	mov	r6, r3
 800c7e4:	e78c      	b.n	800c700 <__gethex+0x18c>
 800c7e6:	f04f 0a03 	mov.w	sl, #3
 800c7ea:	e7b9      	b.n	800c760 <__gethex+0x1ec>
 800c7ec:	da09      	bge.n	800c802 <__gethex+0x28e>
 800c7ee:	1bf7      	subs	r7, r6, r7
 800c7f0:	4621      	mov	r1, r4
 800c7f2:	463a      	mov	r2, r7
 800c7f4:	9802      	ldr	r0, [sp, #8]
 800c7f6:	f000 fc4d 	bl	800d094 <__lshift>
 800c7fa:	4604      	mov	r4, r0
 800c7fc:	1bed      	subs	r5, r5, r7
 800c7fe:	f100 0914 	add.w	r9, r0, #20
 800c802:	f04f 0a00 	mov.w	sl, #0
 800c806:	e7b0      	b.n	800c76a <__gethex+0x1f6>
 800c808:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c80c:	42a8      	cmp	r0, r5
 800c80e:	dd72      	ble.n	800c8f6 <__gethex+0x382>
 800c810:	1b45      	subs	r5, r0, r5
 800c812:	42ae      	cmp	r6, r5
 800c814:	dc35      	bgt.n	800c882 <__gethex+0x30e>
 800c816:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c81a:	2b02      	cmp	r3, #2
 800c81c:	d029      	beq.n	800c872 <__gethex+0x2fe>
 800c81e:	2b03      	cmp	r3, #3
 800c820:	d02b      	beq.n	800c87a <__gethex+0x306>
 800c822:	2b01      	cmp	r3, #1
 800c824:	d11c      	bne.n	800c860 <__gethex+0x2ec>
 800c826:	42ae      	cmp	r6, r5
 800c828:	d11a      	bne.n	800c860 <__gethex+0x2ec>
 800c82a:	2e01      	cmp	r6, #1
 800c82c:	d112      	bne.n	800c854 <__gethex+0x2e0>
 800c82e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c832:	9a05      	ldr	r2, [sp, #20]
 800c834:	2762      	movs	r7, #98	; 0x62
 800c836:	6013      	str	r3, [r2, #0]
 800c838:	2301      	movs	r3, #1
 800c83a:	6123      	str	r3, [r4, #16]
 800c83c:	f8c9 3000 	str.w	r3, [r9]
 800c840:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c842:	601c      	str	r4, [r3, #0]
 800c844:	e728      	b.n	800c698 <__gethex+0x124>
 800c846:	bf00      	nop
 800c848:	0800f200 	.word	0x0800f200
 800c84c:	0800f188 	.word	0x0800f188
 800c850:	0800f199 	.word	0x0800f199
 800c854:	4620      	mov	r0, r4
 800c856:	1e71      	subs	r1, r6, #1
 800c858:	f000 fe5b 	bl	800d512 <__any_on>
 800c85c:	2800      	cmp	r0, #0
 800c85e:	d1e6      	bne.n	800c82e <__gethex+0x2ba>
 800c860:	4621      	mov	r1, r4
 800c862:	9802      	ldr	r0, [sp, #8]
 800c864:	f000 f9fe 	bl	800cc64 <_Bfree>
 800c868:	2300      	movs	r3, #0
 800c86a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c86c:	2750      	movs	r7, #80	; 0x50
 800c86e:	6013      	str	r3, [r2, #0]
 800c870:	e712      	b.n	800c698 <__gethex+0x124>
 800c872:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c874:	2b00      	cmp	r3, #0
 800c876:	d1f3      	bne.n	800c860 <__gethex+0x2ec>
 800c878:	e7d9      	b.n	800c82e <__gethex+0x2ba>
 800c87a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d1d6      	bne.n	800c82e <__gethex+0x2ba>
 800c880:	e7ee      	b.n	800c860 <__gethex+0x2ec>
 800c882:	1e6f      	subs	r7, r5, #1
 800c884:	f1ba 0f00 	cmp.w	sl, #0
 800c888:	d132      	bne.n	800c8f0 <__gethex+0x37c>
 800c88a:	b127      	cbz	r7, 800c896 <__gethex+0x322>
 800c88c:	4639      	mov	r1, r7
 800c88e:	4620      	mov	r0, r4
 800c890:	f000 fe3f 	bl	800d512 <__any_on>
 800c894:	4682      	mov	sl, r0
 800c896:	2101      	movs	r1, #1
 800c898:	117b      	asrs	r3, r7, #5
 800c89a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c89e:	f007 071f 	and.w	r7, r7, #31
 800c8a2:	fa01 f707 	lsl.w	r7, r1, r7
 800c8a6:	421f      	tst	r7, r3
 800c8a8:	f04f 0702 	mov.w	r7, #2
 800c8ac:	4629      	mov	r1, r5
 800c8ae:	4620      	mov	r0, r4
 800c8b0:	bf18      	it	ne
 800c8b2:	f04a 0a02 	orrne.w	sl, sl, #2
 800c8b6:	1b76      	subs	r6, r6, r5
 800c8b8:	f7ff fdf4 	bl	800c4a4 <rshift>
 800c8bc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c8c0:	f1ba 0f00 	cmp.w	sl, #0
 800c8c4:	d048      	beq.n	800c958 <__gethex+0x3e4>
 800c8c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c8ca:	2b02      	cmp	r3, #2
 800c8cc:	d015      	beq.n	800c8fa <__gethex+0x386>
 800c8ce:	2b03      	cmp	r3, #3
 800c8d0:	d017      	beq.n	800c902 <__gethex+0x38e>
 800c8d2:	2b01      	cmp	r3, #1
 800c8d4:	d109      	bne.n	800c8ea <__gethex+0x376>
 800c8d6:	f01a 0f02 	tst.w	sl, #2
 800c8da:	d006      	beq.n	800c8ea <__gethex+0x376>
 800c8dc:	f8d9 0000 	ldr.w	r0, [r9]
 800c8e0:	ea4a 0a00 	orr.w	sl, sl, r0
 800c8e4:	f01a 0f01 	tst.w	sl, #1
 800c8e8:	d10e      	bne.n	800c908 <__gethex+0x394>
 800c8ea:	f047 0710 	orr.w	r7, r7, #16
 800c8ee:	e033      	b.n	800c958 <__gethex+0x3e4>
 800c8f0:	f04f 0a01 	mov.w	sl, #1
 800c8f4:	e7cf      	b.n	800c896 <__gethex+0x322>
 800c8f6:	2701      	movs	r7, #1
 800c8f8:	e7e2      	b.n	800c8c0 <__gethex+0x34c>
 800c8fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c8fc:	f1c3 0301 	rsb	r3, r3, #1
 800c900:	9315      	str	r3, [sp, #84]	; 0x54
 800c902:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c904:	2b00      	cmp	r3, #0
 800c906:	d0f0      	beq.n	800c8ea <__gethex+0x376>
 800c908:	f04f 0c00 	mov.w	ip, #0
 800c90c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c910:	f104 0314 	add.w	r3, r4, #20
 800c914:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c918:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c91c:	4618      	mov	r0, r3
 800c91e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c922:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c926:	d01c      	beq.n	800c962 <__gethex+0x3ee>
 800c928:	3201      	adds	r2, #1
 800c92a:	6002      	str	r2, [r0, #0]
 800c92c:	2f02      	cmp	r7, #2
 800c92e:	f104 0314 	add.w	r3, r4, #20
 800c932:	d13d      	bne.n	800c9b0 <__gethex+0x43c>
 800c934:	f8d8 2000 	ldr.w	r2, [r8]
 800c938:	3a01      	subs	r2, #1
 800c93a:	42b2      	cmp	r2, r6
 800c93c:	d10a      	bne.n	800c954 <__gethex+0x3e0>
 800c93e:	2201      	movs	r2, #1
 800c940:	1171      	asrs	r1, r6, #5
 800c942:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c946:	f006 061f 	and.w	r6, r6, #31
 800c94a:	fa02 f606 	lsl.w	r6, r2, r6
 800c94e:	421e      	tst	r6, r3
 800c950:	bf18      	it	ne
 800c952:	4617      	movne	r7, r2
 800c954:	f047 0720 	orr.w	r7, r7, #32
 800c958:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c95a:	601c      	str	r4, [r3, #0]
 800c95c:	9b05      	ldr	r3, [sp, #20]
 800c95e:	601d      	str	r5, [r3, #0]
 800c960:	e69a      	b.n	800c698 <__gethex+0x124>
 800c962:	4299      	cmp	r1, r3
 800c964:	f843 cc04 	str.w	ip, [r3, #-4]
 800c968:	d8d8      	bhi.n	800c91c <__gethex+0x3a8>
 800c96a:	68a3      	ldr	r3, [r4, #8]
 800c96c:	459b      	cmp	fp, r3
 800c96e:	db17      	blt.n	800c9a0 <__gethex+0x42c>
 800c970:	6861      	ldr	r1, [r4, #4]
 800c972:	9802      	ldr	r0, [sp, #8]
 800c974:	3101      	adds	r1, #1
 800c976:	f000 f935 	bl	800cbe4 <_Balloc>
 800c97a:	4681      	mov	r9, r0
 800c97c:	b918      	cbnz	r0, 800c986 <__gethex+0x412>
 800c97e:	4602      	mov	r2, r0
 800c980:	2184      	movs	r1, #132	; 0x84
 800c982:	4b19      	ldr	r3, [pc, #100]	; (800c9e8 <__gethex+0x474>)
 800c984:	e6ab      	b.n	800c6de <__gethex+0x16a>
 800c986:	6922      	ldr	r2, [r4, #16]
 800c988:	f104 010c 	add.w	r1, r4, #12
 800c98c:	3202      	adds	r2, #2
 800c98e:	0092      	lsls	r2, r2, #2
 800c990:	300c      	adds	r0, #12
 800c992:	f000 f919 	bl	800cbc8 <memcpy>
 800c996:	4621      	mov	r1, r4
 800c998:	9802      	ldr	r0, [sp, #8]
 800c99a:	f000 f963 	bl	800cc64 <_Bfree>
 800c99e:	464c      	mov	r4, r9
 800c9a0:	6923      	ldr	r3, [r4, #16]
 800c9a2:	1c5a      	adds	r2, r3, #1
 800c9a4:	6122      	str	r2, [r4, #16]
 800c9a6:	2201      	movs	r2, #1
 800c9a8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c9ac:	615a      	str	r2, [r3, #20]
 800c9ae:	e7bd      	b.n	800c92c <__gethex+0x3b8>
 800c9b0:	6922      	ldr	r2, [r4, #16]
 800c9b2:	455a      	cmp	r2, fp
 800c9b4:	dd0b      	ble.n	800c9ce <__gethex+0x45a>
 800c9b6:	2101      	movs	r1, #1
 800c9b8:	4620      	mov	r0, r4
 800c9ba:	f7ff fd73 	bl	800c4a4 <rshift>
 800c9be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c9c2:	3501      	adds	r5, #1
 800c9c4:	42ab      	cmp	r3, r5
 800c9c6:	f6ff aed4 	blt.w	800c772 <__gethex+0x1fe>
 800c9ca:	2701      	movs	r7, #1
 800c9cc:	e7c2      	b.n	800c954 <__gethex+0x3e0>
 800c9ce:	f016 061f 	ands.w	r6, r6, #31
 800c9d2:	d0fa      	beq.n	800c9ca <__gethex+0x456>
 800c9d4:	4453      	add	r3, sl
 800c9d6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c9da:	f000 f9f5 	bl	800cdc8 <__hi0bits>
 800c9de:	f1c6 0620 	rsb	r6, r6, #32
 800c9e2:	42b0      	cmp	r0, r6
 800c9e4:	dbe7      	blt.n	800c9b6 <__gethex+0x442>
 800c9e6:	e7f0      	b.n	800c9ca <__gethex+0x456>
 800c9e8:	0800f188 	.word	0x0800f188

0800c9ec <L_shift>:
 800c9ec:	f1c2 0208 	rsb	r2, r2, #8
 800c9f0:	0092      	lsls	r2, r2, #2
 800c9f2:	b570      	push	{r4, r5, r6, lr}
 800c9f4:	f1c2 0620 	rsb	r6, r2, #32
 800c9f8:	6843      	ldr	r3, [r0, #4]
 800c9fa:	6804      	ldr	r4, [r0, #0]
 800c9fc:	fa03 f506 	lsl.w	r5, r3, r6
 800ca00:	432c      	orrs	r4, r5
 800ca02:	40d3      	lsrs	r3, r2
 800ca04:	6004      	str	r4, [r0, #0]
 800ca06:	f840 3f04 	str.w	r3, [r0, #4]!
 800ca0a:	4288      	cmp	r0, r1
 800ca0c:	d3f4      	bcc.n	800c9f8 <L_shift+0xc>
 800ca0e:	bd70      	pop	{r4, r5, r6, pc}

0800ca10 <__match>:
 800ca10:	b530      	push	{r4, r5, lr}
 800ca12:	6803      	ldr	r3, [r0, #0]
 800ca14:	3301      	adds	r3, #1
 800ca16:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca1a:	b914      	cbnz	r4, 800ca22 <__match+0x12>
 800ca1c:	6003      	str	r3, [r0, #0]
 800ca1e:	2001      	movs	r0, #1
 800ca20:	bd30      	pop	{r4, r5, pc}
 800ca22:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca26:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ca2a:	2d19      	cmp	r5, #25
 800ca2c:	bf98      	it	ls
 800ca2e:	3220      	addls	r2, #32
 800ca30:	42a2      	cmp	r2, r4
 800ca32:	d0f0      	beq.n	800ca16 <__match+0x6>
 800ca34:	2000      	movs	r0, #0
 800ca36:	e7f3      	b.n	800ca20 <__match+0x10>

0800ca38 <__hexnan>:
 800ca38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca3c:	2500      	movs	r5, #0
 800ca3e:	680b      	ldr	r3, [r1, #0]
 800ca40:	4682      	mov	sl, r0
 800ca42:	115e      	asrs	r6, r3, #5
 800ca44:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ca48:	f013 031f 	ands.w	r3, r3, #31
 800ca4c:	bf18      	it	ne
 800ca4e:	3604      	addne	r6, #4
 800ca50:	1f37      	subs	r7, r6, #4
 800ca52:	46b9      	mov	r9, r7
 800ca54:	463c      	mov	r4, r7
 800ca56:	46ab      	mov	fp, r5
 800ca58:	b087      	sub	sp, #28
 800ca5a:	4690      	mov	r8, r2
 800ca5c:	6802      	ldr	r2, [r0, #0]
 800ca5e:	9301      	str	r3, [sp, #4]
 800ca60:	f846 5c04 	str.w	r5, [r6, #-4]
 800ca64:	9502      	str	r5, [sp, #8]
 800ca66:	7851      	ldrb	r1, [r2, #1]
 800ca68:	1c53      	adds	r3, r2, #1
 800ca6a:	9303      	str	r3, [sp, #12]
 800ca6c:	b341      	cbz	r1, 800cac0 <__hexnan+0x88>
 800ca6e:	4608      	mov	r0, r1
 800ca70:	9205      	str	r2, [sp, #20]
 800ca72:	9104      	str	r1, [sp, #16]
 800ca74:	f7ff fd69 	bl	800c54a <__hexdig_fun>
 800ca78:	2800      	cmp	r0, #0
 800ca7a:	d14f      	bne.n	800cb1c <__hexnan+0xe4>
 800ca7c:	9904      	ldr	r1, [sp, #16]
 800ca7e:	9a05      	ldr	r2, [sp, #20]
 800ca80:	2920      	cmp	r1, #32
 800ca82:	d818      	bhi.n	800cab6 <__hexnan+0x7e>
 800ca84:	9b02      	ldr	r3, [sp, #8]
 800ca86:	459b      	cmp	fp, r3
 800ca88:	dd13      	ble.n	800cab2 <__hexnan+0x7a>
 800ca8a:	454c      	cmp	r4, r9
 800ca8c:	d206      	bcs.n	800ca9c <__hexnan+0x64>
 800ca8e:	2d07      	cmp	r5, #7
 800ca90:	dc04      	bgt.n	800ca9c <__hexnan+0x64>
 800ca92:	462a      	mov	r2, r5
 800ca94:	4649      	mov	r1, r9
 800ca96:	4620      	mov	r0, r4
 800ca98:	f7ff ffa8 	bl	800c9ec <L_shift>
 800ca9c:	4544      	cmp	r4, r8
 800ca9e:	d950      	bls.n	800cb42 <__hexnan+0x10a>
 800caa0:	2300      	movs	r3, #0
 800caa2:	f1a4 0904 	sub.w	r9, r4, #4
 800caa6:	f844 3c04 	str.w	r3, [r4, #-4]
 800caaa:	461d      	mov	r5, r3
 800caac:	464c      	mov	r4, r9
 800caae:	f8cd b008 	str.w	fp, [sp, #8]
 800cab2:	9a03      	ldr	r2, [sp, #12]
 800cab4:	e7d7      	b.n	800ca66 <__hexnan+0x2e>
 800cab6:	2929      	cmp	r1, #41	; 0x29
 800cab8:	d156      	bne.n	800cb68 <__hexnan+0x130>
 800caba:	3202      	adds	r2, #2
 800cabc:	f8ca 2000 	str.w	r2, [sl]
 800cac0:	f1bb 0f00 	cmp.w	fp, #0
 800cac4:	d050      	beq.n	800cb68 <__hexnan+0x130>
 800cac6:	454c      	cmp	r4, r9
 800cac8:	d206      	bcs.n	800cad8 <__hexnan+0xa0>
 800caca:	2d07      	cmp	r5, #7
 800cacc:	dc04      	bgt.n	800cad8 <__hexnan+0xa0>
 800cace:	462a      	mov	r2, r5
 800cad0:	4649      	mov	r1, r9
 800cad2:	4620      	mov	r0, r4
 800cad4:	f7ff ff8a 	bl	800c9ec <L_shift>
 800cad8:	4544      	cmp	r4, r8
 800cada:	d934      	bls.n	800cb46 <__hexnan+0x10e>
 800cadc:	4623      	mov	r3, r4
 800cade:	f1a8 0204 	sub.w	r2, r8, #4
 800cae2:	f853 1b04 	ldr.w	r1, [r3], #4
 800cae6:	429f      	cmp	r7, r3
 800cae8:	f842 1f04 	str.w	r1, [r2, #4]!
 800caec:	d2f9      	bcs.n	800cae2 <__hexnan+0xaa>
 800caee:	1b3b      	subs	r3, r7, r4
 800caf0:	f023 0303 	bic.w	r3, r3, #3
 800caf4:	3304      	adds	r3, #4
 800caf6:	3401      	adds	r4, #1
 800caf8:	3e03      	subs	r6, #3
 800cafa:	42b4      	cmp	r4, r6
 800cafc:	bf88      	it	hi
 800cafe:	2304      	movhi	r3, #4
 800cb00:	2200      	movs	r2, #0
 800cb02:	4443      	add	r3, r8
 800cb04:	f843 2b04 	str.w	r2, [r3], #4
 800cb08:	429f      	cmp	r7, r3
 800cb0a:	d2fb      	bcs.n	800cb04 <__hexnan+0xcc>
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	b91b      	cbnz	r3, 800cb18 <__hexnan+0xe0>
 800cb10:	4547      	cmp	r7, r8
 800cb12:	d127      	bne.n	800cb64 <__hexnan+0x12c>
 800cb14:	2301      	movs	r3, #1
 800cb16:	603b      	str	r3, [r7, #0]
 800cb18:	2005      	movs	r0, #5
 800cb1a:	e026      	b.n	800cb6a <__hexnan+0x132>
 800cb1c:	3501      	adds	r5, #1
 800cb1e:	2d08      	cmp	r5, #8
 800cb20:	f10b 0b01 	add.w	fp, fp, #1
 800cb24:	dd06      	ble.n	800cb34 <__hexnan+0xfc>
 800cb26:	4544      	cmp	r4, r8
 800cb28:	d9c3      	bls.n	800cab2 <__hexnan+0x7a>
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	2501      	movs	r5, #1
 800cb2e:	f844 3c04 	str.w	r3, [r4, #-4]
 800cb32:	3c04      	subs	r4, #4
 800cb34:	6822      	ldr	r2, [r4, #0]
 800cb36:	f000 000f 	and.w	r0, r0, #15
 800cb3a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800cb3e:	6022      	str	r2, [r4, #0]
 800cb40:	e7b7      	b.n	800cab2 <__hexnan+0x7a>
 800cb42:	2508      	movs	r5, #8
 800cb44:	e7b5      	b.n	800cab2 <__hexnan+0x7a>
 800cb46:	9b01      	ldr	r3, [sp, #4]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d0df      	beq.n	800cb0c <__hexnan+0xd4>
 800cb4c:	f04f 32ff 	mov.w	r2, #4294967295
 800cb50:	f1c3 0320 	rsb	r3, r3, #32
 800cb54:	fa22 f303 	lsr.w	r3, r2, r3
 800cb58:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cb5c:	401a      	ands	r2, r3
 800cb5e:	f846 2c04 	str.w	r2, [r6, #-4]
 800cb62:	e7d3      	b.n	800cb0c <__hexnan+0xd4>
 800cb64:	3f04      	subs	r7, #4
 800cb66:	e7d1      	b.n	800cb0c <__hexnan+0xd4>
 800cb68:	2004      	movs	r0, #4
 800cb6a:	b007      	add	sp, #28
 800cb6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cb70 <_localeconv_r>:
 800cb70:	4800      	ldr	r0, [pc, #0]	; (800cb74 <_localeconv_r+0x4>)
 800cb72:	4770      	bx	lr
 800cb74:	200001f8 	.word	0x200001f8

0800cb78 <malloc>:
 800cb78:	4b02      	ldr	r3, [pc, #8]	; (800cb84 <malloc+0xc>)
 800cb7a:	4601      	mov	r1, r0
 800cb7c:	6818      	ldr	r0, [r3, #0]
 800cb7e:	f000 bd65 	b.w	800d64c <_malloc_r>
 800cb82:	bf00      	nop
 800cb84:	200000a0 	.word	0x200000a0

0800cb88 <__ascii_mbtowc>:
 800cb88:	b082      	sub	sp, #8
 800cb8a:	b901      	cbnz	r1, 800cb8e <__ascii_mbtowc+0x6>
 800cb8c:	a901      	add	r1, sp, #4
 800cb8e:	b142      	cbz	r2, 800cba2 <__ascii_mbtowc+0x1a>
 800cb90:	b14b      	cbz	r3, 800cba6 <__ascii_mbtowc+0x1e>
 800cb92:	7813      	ldrb	r3, [r2, #0]
 800cb94:	600b      	str	r3, [r1, #0]
 800cb96:	7812      	ldrb	r2, [r2, #0]
 800cb98:	1e10      	subs	r0, r2, #0
 800cb9a:	bf18      	it	ne
 800cb9c:	2001      	movne	r0, #1
 800cb9e:	b002      	add	sp, #8
 800cba0:	4770      	bx	lr
 800cba2:	4610      	mov	r0, r2
 800cba4:	e7fb      	b.n	800cb9e <__ascii_mbtowc+0x16>
 800cba6:	f06f 0001 	mvn.w	r0, #1
 800cbaa:	e7f8      	b.n	800cb9e <__ascii_mbtowc+0x16>

0800cbac <memchr>:
 800cbac:	4603      	mov	r3, r0
 800cbae:	b510      	push	{r4, lr}
 800cbb0:	b2c9      	uxtb	r1, r1
 800cbb2:	4402      	add	r2, r0
 800cbb4:	4293      	cmp	r3, r2
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	d101      	bne.n	800cbbe <memchr+0x12>
 800cbba:	2000      	movs	r0, #0
 800cbbc:	e003      	b.n	800cbc6 <memchr+0x1a>
 800cbbe:	7804      	ldrb	r4, [r0, #0]
 800cbc0:	3301      	adds	r3, #1
 800cbc2:	428c      	cmp	r4, r1
 800cbc4:	d1f6      	bne.n	800cbb4 <memchr+0x8>
 800cbc6:	bd10      	pop	{r4, pc}

0800cbc8 <memcpy>:
 800cbc8:	440a      	add	r2, r1
 800cbca:	4291      	cmp	r1, r2
 800cbcc:	f100 33ff 	add.w	r3, r0, #4294967295
 800cbd0:	d100      	bne.n	800cbd4 <memcpy+0xc>
 800cbd2:	4770      	bx	lr
 800cbd4:	b510      	push	{r4, lr}
 800cbd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cbda:	4291      	cmp	r1, r2
 800cbdc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cbe0:	d1f9      	bne.n	800cbd6 <memcpy+0xe>
 800cbe2:	bd10      	pop	{r4, pc}

0800cbe4 <_Balloc>:
 800cbe4:	b570      	push	{r4, r5, r6, lr}
 800cbe6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cbe8:	4604      	mov	r4, r0
 800cbea:	460d      	mov	r5, r1
 800cbec:	b976      	cbnz	r6, 800cc0c <_Balloc+0x28>
 800cbee:	2010      	movs	r0, #16
 800cbf0:	f7ff ffc2 	bl	800cb78 <malloc>
 800cbf4:	4602      	mov	r2, r0
 800cbf6:	6260      	str	r0, [r4, #36]	; 0x24
 800cbf8:	b920      	cbnz	r0, 800cc04 <_Balloc+0x20>
 800cbfa:	2166      	movs	r1, #102	; 0x66
 800cbfc:	4b17      	ldr	r3, [pc, #92]	; (800cc5c <_Balloc+0x78>)
 800cbfe:	4818      	ldr	r0, [pc, #96]	; (800cc60 <_Balloc+0x7c>)
 800cc00:	f000 ff2c 	bl	800da5c <__assert_func>
 800cc04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cc08:	6006      	str	r6, [r0, #0]
 800cc0a:	60c6      	str	r6, [r0, #12]
 800cc0c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cc0e:	68f3      	ldr	r3, [r6, #12]
 800cc10:	b183      	cbz	r3, 800cc34 <_Balloc+0x50>
 800cc12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc14:	68db      	ldr	r3, [r3, #12]
 800cc16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cc1a:	b9b8      	cbnz	r0, 800cc4c <_Balloc+0x68>
 800cc1c:	2101      	movs	r1, #1
 800cc1e:	fa01 f605 	lsl.w	r6, r1, r5
 800cc22:	1d72      	adds	r2, r6, #5
 800cc24:	4620      	mov	r0, r4
 800cc26:	0092      	lsls	r2, r2, #2
 800cc28:	f000 fc94 	bl	800d554 <_calloc_r>
 800cc2c:	b160      	cbz	r0, 800cc48 <_Balloc+0x64>
 800cc2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cc32:	e00e      	b.n	800cc52 <_Balloc+0x6e>
 800cc34:	2221      	movs	r2, #33	; 0x21
 800cc36:	2104      	movs	r1, #4
 800cc38:	4620      	mov	r0, r4
 800cc3a:	f000 fc8b 	bl	800d554 <_calloc_r>
 800cc3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc40:	60f0      	str	r0, [r6, #12]
 800cc42:	68db      	ldr	r3, [r3, #12]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d1e4      	bne.n	800cc12 <_Balloc+0x2e>
 800cc48:	2000      	movs	r0, #0
 800cc4a:	bd70      	pop	{r4, r5, r6, pc}
 800cc4c:	6802      	ldr	r2, [r0, #0]
 800cc4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cc52:	2300      	movs	r3, #0
 800cc54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cc58:	e7f7      	b.n	800cc4a <_Balloc+0x66>
 800cc5a:	bf00      	nop
 800cc5c:	0800f116 	.word	0x0800f116
 800cc60:	0800f214 	.word	0x0800f214

0800cc64 <_Bfree>:
 800cc64:	b570      	push	{r4, r5, r6, lr}
 800cc66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cc68:	4605      	mov	r5, r0
 800cc6a:	460c      	mov	r4, r1
 800cc6c:	b976      	cbnz	r6, 800cc8c <_Bfree+0x28>
 800cc6e:	2010      	movs	r0, #16
 800cc70:	f7ff ff82 	bl	800cb78 <malloc>
 800cc74:	4602      	mov	r2, r0
 800cc76:	6268      	str	r0, [r5, #36]	; 0x24
 800cc78:	b920      	cbnz	r0, 800cc84 <_Bfree+0x20>
 800cc7a:	218a      	movs	r1, #138	; 0x8a
 800cc7c:	4b08      	ldr	r3, [pc, #32]	; (800cca0 <_Bfree+0x3c>)
 800cc7e:	4809      	ldr	r0, [pc, #36]	; (800cca4 <_Bfree+0x40>)
 800cc80:	f000 feec 	bl	800da5c <__assert_func>
 800cc84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cc88:	6006      	str	r6, [r0, #0]
 800cc8a:	60c6      	str	r6, [r0, #12]
 800cc8c:	b13c      	cbz	r4, 800cc9e <_Bfree+0x3a>
 800cc8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cc90:	6862      	ldr	r2, [r4, #4]
 800cc92:	68db      	ldr	r3, [r3, #12]
 800cc94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cc98:	6021      	str	r1, [r4, #0]
 800cc9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cc9e:	bd70      	pop	{r4, r5, r6, pc}
 800cca0:	0800f116 	.word	0x0800f116
 800cca4:	0800f214 	.word	0x0800f214

0800cca8 <__multadd>:
 800cca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccac:	4607      	mov	r7, r0
 800ccae:	460c      	mov	r4, r1
 800ccb0:	461e      	mov	r6, r3
 800ccb2:	2000      	movs	r0, #0
 800ccb4:	690d      	ldr	r5, [r1, #16]
 800ccb6:	f101 0c14 	add.w	ip, r1, #20
 800ccba:	f8dc 3000 	ldr.w	r3, [ip]
 800ccbe:	3001      	adds	r0, #1
 800ccc0:	b299      	uxth	r1, r3
 800ccc2:	fb02 6101 	mla	r1, r2, r1, r6
 800ccc6:	0c1e      	lsrs	r6, r3, #16
 800ccc8:	0c0b      	lsrs	r3, r1, #16
 800ccca:	fb02 3306 	mla	r3, r2, r6, r3
 800ccce:	b289      	uxth	r1, r1
 800ccd0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ccd4:	4285      	cmp	r5, r0
 800ccd6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ccda:	f84c 1b04 	str.w	r1, [ip], #4
 800ccde:	dcec      	bgt.n	800ccba <__multadd+0x12>
 800cce0:	b30e      	cbz	r6, 800cd26 <__multadd+0x7e>
 800cce2:	68a3      	ldr	r3, [r4, #8]
 800cce4:	42ab      	cmp	r3, r5
 800cce6:	dc19      	bgt.n	800cd1c <__multadd+0x74>
 800cce8:	6861      	ldr	r1, [r4, #4]
 800ccea:	4638      	mov	r0, r7
 800ccec:	3101      	adds	r1, #1
 800ccee:	f7ff ff79 	bl	800cbe4 <_Balloc>
 800ccf2:	4680      	mov	r8, r0
 800ccf4:	b928      	cbnz	r0, 800cd02 <__multadd+0x5a>
 800ccf6:	4602      	mov	r2, r0
 800ccf8:	21b5      	movs	r1, #181	; 0xb5
 800ccfa:	4b0c      	ldr	r3, [pc, #48]	; (800cd2c <__multadd+0x84>)
 800ccfc:	480c      	ldr	r0, [pc, #48]	; (800cd30 <__multadd+0x88>)
 800ccfe:	f000 fead 	bl	800da5c <__assert_func>
 800cd02:	6922      	ldr	r2, [r4, #16]
 800cd04:	f104 010c 	add.w	r1, r4, #12
 800cd08:	3202      	adds	r2, #2
 800cd0a:	0092      	lsls	r2, r2, #2
 800cd0c:	300c      	adds	r0, #12
 800cd0e:	f7ff ff5b 	bl	800cbc8 <memcpy>
 800cd12:	4621      	mov	r1, r4
 800cd14:	4638      	mov	r0, r7
 800cd16:	f7ff ffa5 	bl	800cc64 <_Bfree>
 800cd1a:	4644      	mov	r4, r8
 800cd1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cd20:	3501      	adds	r5, #1
 800cd22:	615e      	str	r6, [r3, #20]
 800cd24:	6125      	str	r5, [r4, #16]
 800cd26:	4620      	mov	r0, r4
 800cd28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd2c:	0800f188 	.word	0x0800f188
 800cd30:	0800f214 	.word	0x0800f214

0800cd34 <__s2b>:
 800cd34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd38:	4615      	mov	r5, r2
 800cd3a:	2209      	movs	r2, #9
 800cd3c:	461f      	mov	r7, r3
 800cd3e:	3308      	adds	r3, #8
 800cd40:	460c      	mov	r4, r1
 800cd42:	fb93 f3f2 	sdiv	r3, r3, r2
 800cd46:	4606      	mov	r6, r0
 800cd48:	2201      	movs	r2, #1
 800cd4a:	2100      	movs	r1, #0
 800cd4c:	429a      	cmp	r2, r3
 800cd4e:	db09      	blt.n	800cd64 <__s2b+0x30>
 800cd50:	4630      	mov	r0, r6
 800cd52:	f7ff ff47 	bl	800cbe4 <_Balloc>
 800cd56:	b940      	cbnz	r0, 800cd6a <__s2b+0x36>
 800cd58:	4602      	mov	r2, r0
 800cd5a:	21ce      	movs	r1, #206	; 0xce
 800cd5c:	4b18      	ldr	r3, [pc, #96]	; (800cdc0 <__s2b+0x8c>)
 800cd5e:	4819      	ldr	r0, [pc, #100]	; (800cdc4 <__s2b+0x90>)
 800cd60:	f000 fe7c 	bl	800da5c <__assert_func>
 800cd64:	0052      	lsls	r2, r2, #1
 800cd66:	3101      	adds	r1, #1
 800cd68:	e7f0      	b.n	800cd4c <__s2b+0x18>
 800cd6a:	9b08      	ldr	r3, [sp, #32]
 800cd6c:	2d09      	cmp	r5, #9
 800cd6e:	6143      	str	r3, [r0, #20]
 800cd70:	f04f 0301 	mov.w	r3, #1
 800cd74:	6103      	str	r3, [r0, #16]
 800cd76:	dd16      	ble.n	800cda6 <__s2b+0x72>
 800cd78:	f104 0909 	add.w	r9, r4, #9
 800cd7c:	46c8      	mov	r8, r9
 800cd7e:	442c      	add	r4, r5
 800cd80:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cd84:	4601      	mov	r1, r0
 800cd86:	220a      	movs	r2, #10
 800cd88:	4630      	mov	r0, r6
 800cd8a:	3b30      	subs	r3, #48	; 0x30
 800cd8c:	f7ff ff8c 	bl	800cca8 <__multadd>
 800cd90:	45a0      	cmp	r8, r4
 800cd92:	d1f5      	bne.n	800cd80 <__s2b+0x4c>
 800cd94:	f1a5 0408 	sub.w	r4, r5, #8
 800cd98:	444c      	add	r4, r9
 800cd9a:	1b2d      	subs	r5, r5, r4
 800cd9c:	1963      	adds	r3, r4, r5
 800cd9e:	42bb      	cmp	r3, r7
 800cda0:	db04      	blt.n	800cdac <__s2b+0x78>
 800cda2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cda6:	2509      	movs	r5, #9
 800cda8:	340a      	adds	r4, #10
 800cdaa:	e7f6      	b.n	800cd9a <__s2b+0x66>
 800cdac:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cdb0:	4601      	mov	r1, r0
 800cdb2:	220a      	movs	r2, #10
 800cdb4:	4630      	mov	r0, r6
 800cdb6:	3b30      	subs	r3, #48	; 0x30
 800cdb8:	f7ff ff76 	bl	800cca8 <__multadd>
 800cdbc:	e7ee      	b.n	800cd9c <__s2b+0x68>
 800cdbe:	bf00      	nop
 800cdc0:	0800f188 	.word	0x0800f188
 800cdc4:	0800f214 	.word	0x0800f214

0800cdc8 <__hi0bits>:
 800cdc8:	0c02      	lsrs	r2, r0, #16
 800cdca:	0412      	lsls	r2, r2, #16
 800cdcc:	4603      	mov	r3, r0
 800cdce:	b9ca      	cbnz	r2, 800ce04 <__hi0bits+0x3c>
 800cdd0:	0403      	lsls	r3, r0, #16
 800cdd2:	2010      	movs	r0, #16
 800cdd4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800cdd8:	bf04      	itt	eq
 800cdda:	021b      	lsleq	r3, r3, #8
 800cddc:	3008      	addeq	r0, #8
 800cdde:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800cde2:	bf04      	itt	eq
 800cde4:	011b      	lsleq	r3, r3, #4
 800cde6:	3004      	addeq	r0, #4
 800cde8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800cdec:	bf04      	itt	eq
 800cdee:	009b      	lsleq	r3, r3, #2
 800cdf0:	3002      	addeq	r0, #2
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	db05      	blt.n	800ce02 <__hi0bits+0x3a>
 800cdf6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800cdfa:	f100 0001 	add.w	r0, r0, #1
 800cdfe:	bf08      	it	eq
 800ce00:	2020      	moveq	r0, #32
 800ce02:	4770      	bx	lr
 800ce04:	2000      	movs	r0, #0
 800ce06:	e7e5      	b.n	800cdd4 <__hi0bits+0xc>

0800ce08 <__lo0bits>:
 800ce08:	6803      	ldr	r3, [r0, #0]
 800ce0a:	4602      	mov	r2, r0
 800ce0c:	f013 0007 	ands.w	r0, r3, #7
 800ce10:	d00b      	beq.n	800ce2a <__lo0bits+0x22>
 800ce12:	07d9      	lsls	r1, r3, #31
 800ce14:	d421      	bmi.n	800ce5a <__lo0bits+0x52>
 800ce16:	0798      	lsls	r0, r3, #30
 800ce18:	bf49      	itett	mi
 800ce1a:	085b      	lsrmi	r3, r3, #1
 800ce1c:	089b      	lsrpl	r3, r3, #2
 800ce1e:	2001      	movmi	r0, #1
 800ce20:	6013      	strmi	r3, [r2, #0]
 800ce22:	bf5c      	itt	pl
 800ce24:	2002      	movpl	r0, #2
 800ce26:	6013      	strpl	r3, [r2, #0]
 800ce28:	4770      	bx	lr
 800ce2a:	b299      	uxth	r1, r3
 800ce2c:	b909      	cbnz	r1, 800ce32 <__lo0bits+0x2a>
 800ce2e:	2010      	movs	r0, #16
 800ce30:	0c1b      	lsrs	r3, r3, #16
 800ce32:	b2d9      	uxtb	r1, r3
 800ce34:	b909      	cbnz	r1, 800ce3a <__lo0bits+0x32>
 800ce36:	3008      	adds	r0, #8
 800ce38:	0a1b      	lsrs	r3, r3, #8
 800ce3a:	0719      	lsls	r1, r3, #28
 800ce3c:	bf04      	itt	eq
 800ce3e:	091b      	lsreq	r3, r3, #4
 800ce40:	3004      	addeq	r0, #4
 800ce42:	0799      	lsls	r1, r3, #30
 800ce44:	bf04      	itt	eq
 800ce46:	089b      	lsreq	r3, r3, #2
 800ce48:	3002      	addeq	r0, #2
 800ce4a:	07d9      	lsls	r1, r3, #31
 800ce4c:	d403      	bmi.n	800ce56 <__lo0bits+0x4e>
 800ce4e:	085b      	lsrs	r3, r3, #1
 800ce50:	f100 0001 	add.w	r0, r0, #1
 800ce54:	d003      	beq.n	800ce5e <__lo0bits+0x56>
 800ce56:	6013      	str	r3, [r2, #0]
 800ce58:	4770      	bx	lr
 800ce5a:	2000      	movs	r0, #0
 800ce5c:	4770      	bx	lr
 800ce5e:	2020      	movs	r0, #32
 800ce60:	4770      	bx	lr
	...

0800ce64 <__i2b>:
 800ce64:	b510      	push	{r4, lr}
 800ce66:	460c      	mov	r4, r1
 800ce68:	2101      	movs	r1, #1
 800ce6a:	f7ff febb 	bl	800cbe4 <_Balloc>
 800ce6e:	4602      	mov	r2, r0
 800ce70:	b928      	cbnz	r0, 800ce7e <__i2b+0x1a>
 800ce72:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ce76:	4b04      	ldr	r3, [pc, #16]	; (800ce88 <__i2b+0x24>)
 800ce78:	4804      	ldr	r0, [pc, #16]	; (800ce8c <__i2b+0x28>)
 800ce7a:	f000 fdef 	bl	800da5c <__assert_func>
 800ce7e:	2301      	movs	r3, #1
 800ce80:	6144      	str	r4, [r0, #20]
 800ce82:	6103      	str	r3, [r0, #16]
 800ce84:	bd10      	pop	{r4, pc}
 800ce86:	bf00      	nop
 800ce88:	0800f188 	.word	0x0800f188
 800ce8c:	0800f214 	.word	0x0800f214

0800ce90 <__multiply>:
 800ce90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce94:	4691      	mov	r9, r2
 800ce96:	690a      	ldr	r2, [r1, #16]
 800ce98:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ce9c:	460c      	mov	r4, r1
 800ce9e:	429a      	cmp	r2, r3
 800cea0:	bfbe      	ittt	lt
 800cea2:	460b      	movlt	r3, r1
 800cea4:	464c      	movlt	r4, r9
 800cea6:	4699      	movlt	r9, r3
 800cea8:	6927      	ldr	r7, [r4, #16]
 800ceaa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ceae:	68a3      	ldr	r3, [r4, #8]
 800ceb0:	6861      	ldr	r1, [r4, #4]
 800ceb2:	eb07 060a 	add.w	r6, r7, sl
 800ceb6:	42b3      	cmp	r3, r6
 800ceb8:	b085      	sub	sp, #20
 800ceba:	bfb8      	it	lt
 800cebc:	3101      	addlt	r1, #1
 800cebe:	f7ff fe91 	bl	800cbe4 <_Balloc>
 800cec2:	b930      	cbnz	r0, 800ced2 <__multiply+0x42>
 800cec4:	4602      	mov	r2, r0
 800cec6:	f240 115d 	movw	r1, #349	; 0x15d
 800ceca:	4b43      	ldr	r3, [pc, #268]	; (800cfd8 <__multiply+0x148>)
 800cecc:	4843      	ldr	r0, [pc, #268]	; (800cfdc <__multiply+0x14c>)
 800cece:	f000 fdc5 	bl	800da5c <__assert_func>
 800ced2:	f100 0514 	add.w	r5, r0, #20
 800ced6:	462b      	mov	r3, r5
 800ced8:	2200      	movs	r2, #0
 800ceda:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cede:	4543      	cmp	r3, r8
 800cee0:	d321      	bcc.n	800cf26 <__multiply+0x96>
 800cee2:	f104 0314 	add.w	r3, r4, #20
 800cee6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ceea:	f109 0314 	add.w	r3, r9, #20
 800ceee:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cef2:	9202      	str	r2, [sp, #8]
 800cef4:	1b3a      	subs	r2, r7, r4
 800cef6:	3a15      	subs	r2, #21
 800cef8:	f022 0203 	bic.w	r2, r2, #3
 800cefc:	3204      	adds	r2, #4
 800cefe:	f104 0115 	add.w	r1, r4, #21
 800cf02:	428f      	cmp	r7, r1
 800cf04:	bf38      	it	cc
 800cf06:	2204      	movcc	r2, #4
 800cf08:	9201      	str	r2, [sp, #4]
 800cf0a:	9a02      	ldr	r2, [sp, #8]
 800cf0c:	9303      	str	r3, [sp, #12]
 800cf0e:	429a      	cmp	r2, r3
 800cf10:	d80c      	bhi.n	800cf2c <__multiply+0x9c>
 800cf12:	2e00      	cmp	r6, #0
 800cf14:	dd03      	ble.n	800cf1e <__multiply+0x8e>
 800cf16:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d059      	beq.n	800cfd2 <__multiply+0x142>
 800cf1e:	6106      	str	r6, [r0, #16]
 800cf20:	b005      	add	sp, #20
 800cf22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf26:	f843 2b04 	str.w	r2, [r3], #4
 800cf2a:	e7d8      	b.n	800cede <__multiply+0x4e>
 800cf2c:	f8b3 a000 	ldrh.w	sl, [r3]
 800cf30:	f1ba 0f00 	cmp.w	sl, #0
 800cf34:	d023      	beq.n	800cf7e <__multiply+0xee>
 800cf36:	46a9      	mov	r9, r5
 800cf38:	f04f 0c00 	mov.w	ip, #0
 800cf3c:	f104 0e14 	add.w	lr, r4, #20
 800cf40:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cf44:	f8d9 1000 	ldr.w	r1, [r9]
 800cf48:	fa1f fb82 	uxth.w	fp, r2
 800cf4c:	b289      	uxth	r1, r1
 800cf4e:	fb0a 110b 	mla	r1, sl, fp, r1
 800cf52:	4461      	add	r1, ip
 800cf54:	f8d9 c000 	ldr.w	ip, [r9]
 800cf58:	0c12      	lsrs	r2, r2, #16
 800cf5a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800cf5e:	fb0a c202 	mla	r2, sl, r2, ip
 800cf62:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cf66:	b289      	uxth	r1, r1
 800cf68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cf6c:	4577      	cmp	r7, lr
 800cf6e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cf72:	f849 1b04 	str.w	r1, [r9], #4
 800cf76:	d8e3      	bhi.n	800cf40 <__multiply+0xb0>
 800cf78:	9a01      	ldr	r2, [sp, #4]
 800cf7a:	f845 c002 	str.w	ip, [r5, r2]
 800cf7e:	9a03      	ldr	r2, [sp, #12]
 800cf80:	3304      	adds	r3, #4
 800cf82:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cf86:	f1b9 0f00 	cmp.w	r9, #0
 800cf8a:	d020      	beq.n	800cfce <__multiply+0x13e>
 800cf8c:	46ae      	mov	lr, r5
 800cf8e:	f04f 0a00 	mov.w	sl, #0
 800cf92:	6829      	ldr	r1, [r5, #0]
 800cf94:	f104 0c14 	add.w	ip, r4, #20
 800cf98:	f8bc b000 	ldrh.w	fp, [ip]
 800cf9c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cfa0:	b289      	uxth	r1, r1
 800cfa2:	fb09 220b 	mla	r2, r9, fp, r2
 800cfa6:	4492      	add	sl, r2
 800cfa8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800cfac:	f84e 1b04 	str.w	r1, [lr], #4
 800cfb0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cfb4:	f8be 1000 	ldrh.w	r1, [lr]
 800cfb8:	0c12      	lsrs	r2, r2, #16
 800cfba:	fb09 1102 	mla	r1, r9, r2, r1
 800cfbe:	4567      	cmp	r7, ip
 800cfc0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800cfc4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cfc8:	d8e6      	bhi.n	800cf98 <__multiply+0x108>
 800cfca:	9a01      	ldr	r2, [sp, #4]
 800cfcc:	50a9      	str	r1, [r5, r2]
 800cfce:	3504      	adds	r5, #4
 800cfd0:	e79b      	b.n	800cf0a <__multiply+0x7a>
 800cfd2:	3e01      	subs	r6, #1
 800cfd4:	e79d      	b.n	800cf12 <__multiply+0x82>
 800cfd6:	bf00      	nop
 800cfd8:	0800f188 	.word	0x0800f188
 800cfdc:	0800f214 	.word	0x0800f214

0800cfe0 <__pow5mult>:
 800cfe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfe4:	4615      	mov	r5, r2
 800cfe6:	f012 0203 	ands.w	r2, r2, #3
 800cfea:	4606      	mov	r6, r0
 800cfec:	460f      	mov	r7, r1
 800cfee:	d007      	beq.n	800d000 <__pow5mult+0x20>
 800cff0:	4c25      	ldr	r4, [pc, #148]	; (800d088 <__pow5mult+0xa8>)
 800cff2:	3a01      	subs	r2, #1
 800cff4:	2300      	movs	r3, #0
 800cff6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cffa:	f7ff fe55 	bl	800cca8 <__multadd>
 800cffe:	4607      	mov	r7, r0
 800d000:	10ad      	asrs	r5, r5, #2
 800d002:	d03d      	beq.n	800d080 <__pow5mult+0xa0>
 800d004:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d006:	b97c      	cbnz	r4, 800d028 <__pow5mult+0x48>
 800d008:	2010      	movs	r0, #16
 800d00a:	f7ff fdb5 	bl	800cb78 <malloc>
 800d00e:	4602      	mov	r2, r0
 800d010:	6270      	str	r0, [r6, #36]	; 0x24
 800d012:	b928      	cbnz	r0, 800d020 <__pow5mult+0x40>
 800d014:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d018:	4b1c      	ldr	r3, [pc, #112]	; (800d08c <__pow5mult+0xac>)
 800d01a:	481d      	ldr	r0, [pc, #116]	; (800d090 <__pow5mult+0xb0>)
 800d01c:	f000 fd1e 	bl	800da5c <__assert_func>
 800d020:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d024:	6004      	str	r4, [r0, #0]
 800d026:	60c4      	str	r4, [r0, #12]
 800d028:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d02c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d030:	b94c      	cbnz	r4, 800d046 <__pow5mult+0x66>
 800d032:	f240 2171 	movw	r1, #625	; 0x271
 800d036:	4630      	mov	r0, r6
 800d038:	f7ff ff14 	bl	800ce64 <__i2b>
 800d03c:	2300      	movs	r3, #0
 800d03e:	4604      	mov	r4, r0
 800d040:	f8c8 0008 	str.w	r0, [r8, #8]
 800d044:	6003      	str	r3, [r0, #0]
 800d046:	f04f 0900 	mov.w	r9, #0
 800d04a:	07eb      	lsls	r3, r5, #31
 800d04c:	d50a      	bpl.n	800d064 <__pow5mult+0x84>
 800d04e:	4639      	mov	r1, r7
 800d050:	4622      	mov	r2, r4
 800d052:	4630      	mov	r0, r6
 800d054:	f7ff ff1c 	bl	800ce90 <__multiply>
 800d058:	4680      	mov	r8, r0
 800d05a:	4639      	mov	r1, r7
 800d05c:	4630      	mov	r0, r6
 800d05e:	f7ff fe01 	bl	800cc64 <_Bfree>
 800d062:	4647      	mov	r7, r8
 800d064:	106d      	asrs	r5, r5, #1
 800d066:	d00b      	beq.n	800d080 <__pow5mult+0xa0>
 800d068:	6820      	ldr	r0, [r4, #0]
 800d06a:	b938      	cbnz	r0, 800d07c <__pow5mult+0x9c>
 800d06c:	4622      	mov	r2, r4
 800d06e:	4621      	mov	r1, r4
 800d070:	4630      	mov	r0, r6
 800d072:	f7ff ff0d 	bl	800ce90 <__multiply>
 800d076:	6020      	str	r0, [r4, #0]
 800d078:	f8c0 9000 	str.w	r9, [r0]
 800d07c:	4604      	mov	r4, r0
 800d07e:	e7e4      	b.n	800d04a <__pow5mult+0x6a>
 800d080:	4638      	mov	r0, r7
 800d082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d086:	bf00      	nop
 800d088:	0800f360 	.word	0x0800f360
 800d08c:	0800f116 	.word	0x0800f116
 800d090:	0800f214 	.word	0x0800f214

0800d094 <__lshift>:
 800d094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d098:	460c      	mov	r4, r1
 800d09a:	4607      	mov	r7, r0
 800d09c:	4691      	mov	r9, r2
 800d09e:	6923      	ldr	r3, [r4, #16]
 800d0a0:	6849      	ldr	r1, [r1, #4]
 800d0a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d0a6:	68a3      	ldr	r3, [r4, #8]
 800d0a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d0ac:	f108 0601 	add.w	r6, r8, #1
 800d0b0:	42b3      	cmp	r3, r6
 800d0b2:	db0b      	blt.n	800d0cc <__lshift+0x38>
 800d0b4:	4638      	mov	r0, r7
 800d0b6:	f7ff fd95 	bl	800cbe4 <_Balloc>
 800d0ba:	4605      	mov	r5, r0
 800d0bc:	b948      	cbnz	r0, 800d0d2 <__lshift+0x3e>
 800d0be:	4602      	mov	r2, r0
 800d0c0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d0c4:	4b29      	ldr	r3, [pc, #164]	; (800d16c <__lshift+0xd8>)
 800d0c6:	482a      	ldr	r0, [pc, #168]	; (800d170 <__lshift+0xdc>)
 800d0c8:	f000 fcc8 	bl	800da5c <__assert_func>
 800d0cc:	3101      	adds	r1, #1
 800d0ce:	005b      	lsls	r3, r3, #1
 800d0d0:	e7ee      	b.n	800d0b0 <__lshift+0x1c>
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	f100 0114 	add.w	r1, r0, #20
 800d0d8:	f100 0210 	add.w	r2, r0, #16
 800d0dc:	4618      	mov	r0, r3
 800d0de:	4553      	cmp	r3, sl
 800d0e0:	db37      	blt.n	800d152 <__lshift+0xbe>
 800d0e2:	6920      	ldr	r0, [r4, #16]
 800d0e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d0e8:	f104 0314 	add.w	r3, r4, #20
 800d0ec:	f019 091f 	ands.w	r9, r9, #31
 800d0f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d0f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d0f8:	d02f      	beq.n	800d15a <__lshift+0xc6>
 800d0fa:	468a      	mov	sl, r1
 800d0fc:	f04f 0c00 	mov.w	ip, #0
 800d100:	f1c9 0e20 	rsb	lr, r9, #32
 800d104:	681a      	ldr	r2, [r3, #0]
 800d106:	fa02 f209 	lsl.w	r2, r2, r9
 800d10a:	ea42 020c 	orr.w	r2, r2, ip
 800d10e:	f84a 2b04 	str.w	r2, [sl], #4
 800d112:	f853 2b04 	ldr.w	r2, [r3], #4
 800d116:	4298      	cmp	r0, r3
 800d118:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d11c:	d8f2      	bhi.n	800d104 <__lshift+0x70>
 800d11e:	1b03      	subs	r3, r0, r4
 800d120:	3b15      	subs	r3, #21
 800d122:	f023 0303 	bic.w	r3, r3, #3
 800d126:	3304      	adds	r3, #4
 800d128:	f104 0215 	add.w	r2, r4, #21
 800d12c:	4290      	cmp	r0, r2
 800d12e:	bf38      	it	cc
 800d130:	2304      	movcc	r3, #4
 800d132:	f841 c003 	str.w	ip, [r1, r3]
 800d136:	f1bc 0f00 	cmp.w	ip, #0
 800d13a:	d001      	beq.n	800d140 <__lshift+0xac>
 800d13c:	f108 0602 	add.w	r6, r8, #2
 800d140:	3e01      	subs	r6, #1
 800d142:	4638      	mov	r0, r7
 800d144:	4621      	mov	r1, r4
 800d146:	612e      	str	r6, [r5, #16]
 800d148:	f7ff fd8c 	bl	800cc64 <_Bfree>
 800d14c:	4628      	mov	r0, r5
 800d14e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d152:	f842 0f04 	str.w	r0, [r2, #4]!
 800d156:	3301      	adds	r3, #1
 800d158:	e7c1      	b.n	800d0de <__lshift+0x4a>
 800d15a:	3904      	subs	r1, #4
 800d15c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d160:	4298      	cmp	r0, r3
 800d162:	f841 2f04 	str.w	r2, [r1, #4]!
 800d166:	d8f9      	bhi.n	800d15c <__lshift+0xc8>
 800d168:	e7ea      	b.n	800d140 <__lshift+0xac>
 800d16a:	bf00      	nop
 800d16c:	0800f188 	.word	0x0800f188
 800d170:	0800f214 	.word	0x0800f214

0800d174 <__mcmp>:
 800d174:	4603      	mov	r3, r0
 800d176:	690a      	ldr	r2, [r1, #16]
 800d178:	6900      	ldr	r0, [r0, #16]
 800d17a:	b530      	push	{r4, r5, lr}
 800d17c:	1a80      	subs	r0, r0, r2
 800d17e:	d10d      	bne.n	800d19c <__mcmp+0x28>
 800d180:	3314      	adds	r3, #20
 800d182:	3114      	adds	r1, #20
 800d184:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d188:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d18c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d190:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d194:	4295      	cmp	r5, r2
 800d196:	d002      	beq.n	800d19e <__mcmp+0x2a>
 800d198:	d304      	bcc.n	800d1a4 <__mcmp+0x30>
 800d19a:	2001      	movs	r0, #1
 800d19c:	bd30      	pop	{r4, r5, pc}
 800d19e:	42a3      	cmp	r3, r4
 800d1a0:	d3f4      	bcc.n	800d18c <__mcmp+0x18>
 800d1a2:	e7fb      	b.n	800d19c <__mcmp+0x28>
 800d1a4:	f04f 30ff 	mov.w	r0, #4294967295
 800d1a8:	e7f8      	b.n	800d19c <__mcmp+0x28>
	...

0800d1ac <__mdiff>:
 800d1ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1b0:	460d      	mov	r5, r1
 800d1b2:	4607      	mov	r7, r0
 800d1b4:	4611      	mov	r1, r2
 800d1b6:	4628      	mov	r0, r5
 800d1b8:	4614      	mov	r4, r2
 800d1ba:	f7ff ffdb 	bl	800d174 <__mcmp>
 800d1be:	1e06      	subs	r6, r0, #0
 800d1c0:	d111      	bne.n	800d1e6 <__mdiff+0x3a>
 800d1c2:	4631      	mov	r1, r6
 800d1c4:	4638      	mov	r0, r7
 800d1c6:	f7ff fd0d 	bl	800cbe4 <_Balloc>
 800d1ca:	4602      	mov	r2, r0
 800d1cc:	b928      	cbnz	r0, 800d1da <__mdiff+0x2e>
 800d1ce:	f240 2132 	movw	r1, #562	; 0x232
 800d1d2:	4b3a      	ldr	r3, [pc, #232]	; (800d2bc <__mdiff+0x110>)
 800d1d4:	483a      	ldr	r0, [pc, #232]	; (800d2c0 <__mdiff+0x114>)
 800d1d6:	f000 fc41 	bl	800da5c <__assert_func>
 800d1da:	2301      	movs	r3, #1
 800d1dc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d1e0:	4610      	mov	r0, r2
 800d1e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1e6:	bfa4      	itt	ge
 800d1e8:	4623      	movge	r3, r4
 800d1ea:	462c      	movge	r4, r5
 800d1ec:	4638      	mov	r0, r7
 800d1ee:	6861      	ldr	r1, [r4, #4]
 800d1f0:	bfa6      	itte	ge
 800d1f2:	461d      	movge	r5, r3
 800d1f4:	2600      	movge	r6, #0
 800d1f6:	2601      	movlt	r6, #1
 800d1f8:	f7ff fcf4 	bl	800cbe4 <_Balloc>
 800d1fc:	4602      	mov	r2, r0
 800d1fe:	b918      	cbnz	r0, 800d208 <__mdiff+0x5c>
 800d200:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d204:	4b2d      	ldr	r3, [pc, #180]	; (800d2bc <__mdiff+0x110>)
 800d206:	e7e5      	b.n	800d1d4 <__mdiff+0x28>
 800d208:	f102 0814 	add.w	r8, r2, #20
 800d20c:	46c2      	mov	sl, r8
 800d20e:	f04f 0c00 	mov.w	ip, #0
 800d212:	6927      	ldr	r7, [r4, #16]
 800d214:	60c6      	str	r6, [r0, #12]
 800d216:	692e      	ldr	r6, [r5, #16]
 800d218:	f104 0014 	add.w	r0, r4, #20
 800d21c:	f105 0914 	add.w	r9, r5, #20
 800d220:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800d224:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d228:	3410      	adds	r4, #16
 800d22a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800d22e:	f859 3b04 	ldr.w	r3, [r9], #4
 800d232:	fa1f f18b 	uxth.w	r1, fp
 800d236:	448c      	add	ip, r1
 800d238:	b299      	uxth	r1, r3
 800d23a:	0c1b      	lsrs	r3, r3, #16
 800d23c:	ebac 0101 	sub.w	r1, ip, r1
 800d240:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d244:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d248:	b289      	uxth	r1, r1
 800d24a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800d24e:	454e      	cmp	r6, r9
 800d250:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d254:	f84a 3b04 	str.w	r3, [sl], #4
 800d258:	d8e7      	bhi.n	800d22a <__mdiff+0x7e>
 800d25a:	1b73      	subs	r3, r6, r5
 800d25c:	3b15      	subs	r3, #21
 800d25e:	f023 0303 	bic.w	r3, r3, #3
 800d262:	3515      	adds	r5, #21
 800d264:	3304      	adds	r3, #4
 800d266:	42ae      	cmp	r6, r5
 800d268:	bf38      	it	cc
 800d26a:	2304      	movcc	r3, #4
 800d26c:	4418      	add	r0, r3
 800d26e:	4443      	add	r3, r8
 800d270:	461e      	mov	r6, r3
 800d272:	4605      	mov	r5, r0
 800d274:	4575      	cmp	r5, lr
 800d276:	d30e      	bcc.n	800d296 <__mdiff+0xea>
 800d278:	f10e 0103 	add.w	r1, lr, #3
 800d27c:	1a09      	subs	r1, r1, r0
 800d27e:	f021 0103 	bic.w	r1, r1, #3
 800d282:	3803      	subs	r0, #3
 800d284:	4586      	cmp	lr, r0
 800d286:	bf38      	it	cc
 800d288:	2100      	movcc	r1, #0
 800d28a:	4419      	add	r1, r3
 800d28c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800d290:	b18b      	cbz	r3, 800d2b6 <__mdiff+0x10a>
 800d292:	6117      	str	r7, [r2, #16]
 800d294:	e7a4      	b.n	800d1e0 <__mdiff+0x34>
 800d296:	f855 8b04 	ldr.w	r8, [r5], #4
 800d29a:	fa1f f188 	uxth.w	r1, r8
 800d29e:	4461      	add	r1, ip
 800d2a0:	140c      	asrs	r4, r1, #16
 800d2a2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d2a6:	b289      	uxth	r1, r1
 800d2a8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d2ac:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800d2b0:	f846 1b04 	str.w	r1, [r6], #4
 800d2b4:	e7de      	b.n	800d274 <__mdiff+0xc8>
 800d2b6:	3f01      	subs	r7, #1
 800d2b8:	e7e8      	b.n	800d28c <__mdiff+0xe0>
 800d2ba:	bf00      	nop
 800d2bc:	0800f188 	.word	0x0800f188
 800d2c0:	0800f214 	.word	0x0800f214

0800d2c4 <__ulp>:
 800d2c4:	4b11      	ldr	r3, [pc, #68]	; (800d30c <__ulp+0x48>)
 800d2c6:	400b      	ands	r3, r1
 800d2c8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	dd02      	ble.n	800d2d6 <__ulp+0x12>
 800d2d0:	2000      	movs	r0, #0
 800d2d2:	4619      	mov	r1, r3
 800d2d4:	4770      	bx	lr
 800d2d6:	425b      	negs	r3, r3
 800d2d8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800d2dc:	f04f 0000 	mov.w	r0, #0
 800d2e0:	f04f 0100 	mov.w	r1, #0
 800d2e4:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d2e8:	da04      	bge.n	800d2f4 <__ulp+0x30>
 800d2ea:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d2ee:	fa43 f102 	asr.w	r1, r3, r2
 800d2f2:	4770      	bx	lr
 800d2f4:	f1a2 0314 	sub.w	r3, r2, #20
 800d2f8:	2b1e      	cmp	r3, #30
 800d2fa:	bfd6      	itet	le
 800d2fc:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800d300:	2301      	movgt	r3, #1
 800d302:	fa22 f303 	lsrle.w	r3, r2, r3
 800d306:	4618      	mov	r0, r3
 800d308:	4770      	bx	lr
 800d30a:	bf00      	nop
 800d30c:	7ff00000 	.word	0x7ff00000

0800d310 <__b2d>:
 800d310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d314:	6907      	ldr	r7, [r0, #16]
 800d316:	f100 0914 	add.w	r9, r0, #20
 800d31a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800d31e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800d322:	f1a7 0804 	sub.w	r8, r7, #4
 800d326:	4630      	mov	r0, r6
 800d328:	f7ff fd4e 	bl	800cdc8 <__hi0bits>
 800d32c:	f1c0 0320 	rsb	r3, r0, #32
 800d330:	280a      	cmp	r0, #10
 800d332:	600b      	str	r3, [r1, #0]
 800d334:	491f      	ldr	r1, [pc, #124]	; (800d3b4 <__b2d+0xa4>)
 800d336:	dc17      	bgt.n	800d368 <__b2d+0x58>
 800d338:	45c1      	cmp	r9, r8
 800d33a:	bf28      	it	cs
 800d33c:	2200      	movcs	r2, #0
 800d33e:	f1c0 0c0b 	rsb	ip, r0, #11
 800d342:	fa26 f30c 	lsr.w	r3, r6, ip
 800d346:	bf38      	it	cc
 800d348:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800d34c:	ea43 0501 	orr.w	r5, r3, r1
 800d350:	f100 0315 	add.w	r3, r0, #21
 800d354:	fa06 f303 	lsl.w	r3, r6, r3
 800d358:	fa22 f20c 	lsr.w	r2, r2, ip
 800d35c:	ea43 0402 	orr.w	r4, r3, r2
 800d360:	4620      	mov	r0, r4
 800d362:	4629      	mov	r1, r5
 800d364:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d368:	45c1      	cmp	r9, r8
 800d36a:	bf2e      	itee	cs
 800d36c:	2200      	movcs	r2, #0
 800d36e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800d372:	f1a7 0808 	subcc.w	r8, r7, #8
 800d376:	f1b0 030b 	subs.w	r3, r0, #11
 800d37a:	d016      	beq.n	800d3aa <__b2d+0x9a>
 800d37c:	f1c3 0720 	rsb	r7, r3, #32
 800d380:	fa22 f107 	lsr.w	r1, r2, r7
 800d384:	45c8      	cmp	r8, r9
 800d386:	fa06 f603 	lsl.w	r6, r6, r3
 800d38a:	ea46 0601 	orr.w	r6, r6, r1
 800d38e:	bf94      	ite	ls
 800d390:	2100      	movls	r1, #0
 800d392:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800d396:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800d39a:	fa02 f003 	lsl.w	r0, r2, r3
 800d39e:	40f9      	lsrs	r1, r7
 800d3a0:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d3a4:	ea40 0401 	orr.w	r4, r0, r1
 800d3a8:	e7da      	b.n	800d360 <__b2d+0x50>
 800d3aa:	4614      	mov	r4, r2
 800d3ac:	ea46 0501 	orr.w	r5, r6, r1
 800d3b0:	e7d6      	b.n	800d360 <__b2d+0x50>
 800d3b2:	bf00      	nop
 800d3b4:	3ff00000 	.word	0x3ff00000

0800d3b8 <__d2b>:
 800d3b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d3bc:	2101      	movs	r1, #1
 800d3be:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800d3c2:	4690      	mov	r8, r2
 800d3c4:	461d      	mov	r5, r3
 800d3c6:	f7ff fc0d 	bl	800cbe4 <_Balloc>
 800d3ca:	4604      	mov	r4, r0
 800d3cc:	b930      	cbnz	r0, 800d3dc <__d2b+0x24>
 800d3ce:	4602      	mov	r2, r0
 800d3d0:	f240 310a 	movw	r1, #778	; 0x30a
 800d3d4:	4b24      	ldr	r3, [pc, #144]	; (800d468 <__d2b+0xb0>)
 800d3d6:	4825      	ldr	r0, [pc, #148]	; (800d46c <__d2b+0xb4>)
 800d3d8:	f000 fb40 	bl	800da5c <__assert_func>
 800d3dc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800d3e0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800d3e4:	bb2d      	cbnz	r5, 800d432 <__d2b+0x7a>
 800d3e6:	9301      	str	r3, [sp, #4]
 800d3e8:	f1b8 0300 	subs.w	r3, r8, #0
 800d3ec:	d026      	beq.n	800d43c <__d2b+0x84>
 800d3ee:	4668      	mov	r0, sp
 800d3f0:	9300      	str	r3, [sp, #0]
 800d3f2:	f7ff fd09 	bl	800ce08 <__lo0bits>
 800d3f6:	9900      	ldr	r1, [sp, #0]
 800d3f8:	b1f0      	cbz	r0, 800d438 <__d2b+0x80>
 800d3fa:	9a01      	ldr	r2, [sp, #4]
 800d3fc:	f1c0 0320 	rsb	r3, r0, #32
 800d400:	fa02 f303 	lsl.w	r3, r2, r3
 800d404:	430b      	orrs	r3, r1
 800d406:	40c2      	lsrs	r2, r0
 800d408:	6163      	str	r3, [r4, #20]
 800d40a:	9201      	str	r2, [sp, #4]
 800d40c:	9b01      	ldr	r3, [sp, #4]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	bf14      	ite	ne
 800d412:	2102      	movne	r1, #2
 800d414:	2101      	moveq	r1, #1
 800d416:	61a3      	str	r3, [r4, #24]
 800d418:	6121      	str	r1, [r4, #16]
 800d41a:	b1c5      	cbz	r5, 800d44e <__d2b+0x96>
 800d41c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d420:	4405      	add	r5, r0
 800d422:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d426:	603d      	str	r5, [r7, #0]
 800d428:	6030      	str	r0, [r6, #0]
 800d42a:	4620      	mov	r0, r4
 800d42c:	b002      	add	sp, #8
 800d42e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d432:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d436:	e7d6      	b.n	800d3e6 <__d2b+0x2e>
 800d438:	6161      	str	r1, [r4, #20]
 800d43a:	e7e7      	b.n	800d40c <__d2b+0x54>
 800d43c:	a801      	add	r0, sp, #4
 800d43e:	f7ff fce3 	bl	800ce08 <__lo0bits>
 800d442:	2101      	movs	r1, #1
 800d444:	9b01      	ldr	r3, [sp, #4]
 800d446:	6121      	str	r1, [r4, #16]
 800d448:	6163      	str	r3, [r4, #20]
 800d44a:	3020      	adds	r0, #32
 800d44c:	e7e5      	b.n	800d41a <__d2b+0x62>
 800d44e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800d452:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d456:	6038      	str	r0, [r7, #0]
 800d458:	6918      	ldr	r0, [r3, #16]
 800d45a:	f7ff fcb5 	bl	800cdc8 <__hi0bits>
 800d45e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800d462:	6031      	str	r1, [r6, #0]
 800d464:	e7e1      	b.n	800d42a <__d2b+0x72>
 800d466:	bf00      	nop
 800d468:	0800f188 	.word	0x0800f188
 800d46c:	0800f214 	.word	0x0800f214

0800d470 <__ratio>:
 800d470:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d474:	4688      	mov	r8, r1
 800d476:	4669      	mov	r1, sp
 800d478:	4681      	mov	r9, r0
 800d47a:	f7ff ff49 	bl	800d310 <__b2d>
 800d47e:	460f      	mov	r7, r1
 800d480:	4604      	mov	r4, r0
 800d482:	460d      	mov	r5, r1
 800d484:	4640      	mov	r0, r8
 800d486:	a901      	add	r1, sp, #4
 800d488:	f7ff ff42 	bl	800d310 <__b2d>
 800d48c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d490:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d494:	468b      	mov	fp, r1
 800d496:	eba3 0c02 	sub.w	ip, r3, r2
 800d49a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d49e:	1a9b      	subs	r3, r3, r2
 800d4a0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	bfd5      	itete	le
 800d4a8:	460a      	movle	r2, r1
 800d4aa:	462a      	movgt	r2, r5
 800d4ac:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d4b0:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d4b4:	bfd8      	it	le
 800d4b6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d4ba:	465b      	mov	r3, fp
 800d4bc:	4602      	mov	r2, r0
 800d4be:	4639      	mov	r1, r7
 800d4c0:	4620      	mov	r0, r4
 800d4c2:	f7f3 f933 	bl	800072c <__aeabi_ddiv>
 800d4c6:	b003      	add	sp, #12
 800d4c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d4cc <__copybits>:
 800d4cc:	3901      	subs	r1, #1
 800d4ce:	b570      	push	{r4, r5, r6, lr}
 800d4d0:	1149      	asrs	r1, r1, #5
 800d4d2:	6914      	ldr	r4, [r2, #16]
 800d4d4:	3101      	adds	r1, #1
 800d4d6:	f102 0314 	add.w	r3, r2, #20
 800d4da:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d4de:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d4e2:	1f05      	subs	r5, r0, #4
 800d4e4:	42a3      	cmp	r3, r4
 800d4e6:	d30c      	bcc.n	800d502 <__copybits+0x36>
 800d4e8:	1aa3      	subs	r3, r4, r2
 800d4ea:	3b11      	subs	r3, #17
 800d4ec:	f023 0303 	bic.w	r3, r3, #3
 800d4f0:	3211      	adds	r2, #17
 800d4f2:	42a2      	cmp	r2, r4
 800d4f4:	bf88      	it	hi
 800d4f6:	2300      	movhi	r3, #0
 800d4f8:	4418      	add	r0, r3
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	4288      	cmp	r0, r1
 800d4fe:	d305      	bcc.n	800d50c <__copybits+0x40>
 800d500:	bd70      	pop	{r4, r5, r6, pc}
 800d502:	f853 6b04 	ldr.w	r6, [r3], #4
 800d506:	f845 6f04 	str.w	r6, [r5, #4]!
 800d50a:	e7eb      	b.n	800d4e4 <__copybits+0x18>
 800d50c:	f840 3b04 	str.w	r3, [r0], #4
 800d510:	e7f4      	b.n	800d4fc <__copybits+0x30>

0800d512 <__any_on>:
 800d512:	f100 0214 	add.w	r2, r0, #20
 800d516:	6900      	ldr	r0, [r0, #16]
 800d518:	114b      	asrs	r3, r1, #5
 800d51a:	4298      	cmp	r0, r3
 800d51c:	b510      	push	{r4, lr}
 800d51e:	db11      	blt.n	800d544 <__any_on+0x32>
 800d520:	dd0a      	ble.n	800d538 <__any_on+0x26>
 800d522:	f011 011f 	ands.w	r1, r1, #31
 800d526:	d007      	beq.n	800d538 <__any_on+0x26>
 800d528:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d52c:	fa24 f001 	lsr.w	r0, r4, r1
 800d530:	fa00 f101 	lsl.w	r1, r0, r1
 800d534:	428c      	cmp	r4, r1
 800d536:	d10b      	bne.n	800d550 <__any_on+0x3e>
 800d538:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d53c:	4293      	cmp	r3, r2
 800d53e:	d803      	bhi.n	800d548 <__any_on+0x36>
 800d540:	2000      	movs	r0, #0
 800d542:	bd10      	pop	{r4, pc}
 800d544:	4603      	mov	r3, r0
 800d546:	e7f7      	b.n	800d538 <__any_on+0x26>
 800d548:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d54c:	2900      	cmp	r1, #0
 800d54e:	d0f5      	beq.n	800d53c <__any_on+0x2a>
 800d550:	2001      	movs	r0, #1
 800d552:	e7f6      	b.n	800d542 <__any_on+0x30>

0800d554 <_calloc_r>:
 800d554:	b570      	push	{r4, r5, r6, lr}
 800d556:	fba1 5402 	umull	r5, r4, r1, r2
 800d55a:	b934      	cbnz	r4, 800d56a <_calloc_r+0x16>
 800d55c:	4629      	mov	r1, r5
 800d55e:	f000 f875 	bl	800d64c <_malloc_r>
 800d562:	4606      	mov	r6, r0
 800d564:	b928      	cbnz	r0, 800d572 <_calloc_r+0x1e>
 800d566:	4630      	mov	r0, r6
 800d568:	bd70      	pop	{r4, r5, r6, pc}
 800d56a:	220c      	movs	r2, #12
 800d56c:	2600      	movs	r6, #0
 800d56e:	6002      	str	r2, [r0, #0]
 800d570:	e7f9      	b.n	800d566 <_calloc_r+0x12>
 800d572:	462a      	mov	r2, r5
 800d574:	4621      	mov	r1, r4
 800d576:	f7fc fbaf 	bl	8009cd8 <memset>
 800d57a:	e7f4      	b.n	800d566 <_calloc_r+0x12>

0800d57c <_free_r>:
 800d57c:	b538      	push	{r3, r4, r5, lr}
 800d57e:	4605      	mov	r5, r0
 800d580:	2900      	cmp	r1, #0
 800d582:	d040      	beq.n	800d606 <_free_r+0x8a>
 800d584:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d588:	1f0c      	subs	r4, r1, #4
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	bfb8      	it	lt
 800d58e:	18e4      	addlt	r4, r4, r3
 800d590:	f000 faae 	bl	800daf0 <__malloc_lock>
 800d594:	4a1c      	ldr	r2, [pc, #112]	; (800d608 <_free_r+0x8c>)
 800d596:	6813      	ldr	r3, [r2, #0]
 800d598:	b933      	cbnz	r3, 800d5a8 <_free_r+0x2c>
 800d59a:	6063      	str	r3, [r4, #4]
 800d59c:	6014      	str	r4, [r2, #0]
 800d59e:	4628      	mov	r0, r5
 800d5a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d5a4:	f000 baaa 	b.w	800dafc <__malloc_unlock>
 800d5a8:	42a3      	cmp	r3, r4
 800d5aa:	d908      	bls.n	800d5be <_free_r+0x42>
 800d5ac:	6820      	ldr	r0, [r4, #0]
 800d5ae:	1821      	adds	r1, r4, r0
 800d5b0:	428b      	cmp	r3, r1
 800d5b2:	bf01      	itttt	eq
 800d5b4:	6819      	ldreq	r1, [r3, #0]
 800d5b6:	685b      	ldreq	r3, [r3, #4]
 800d5b8:	1809      	addeq	r1, r1, r0
 800d5ba:	6021      	streq	r1, [r4, #0]
 800d5bc:	e7ed      	b.n	800d59a <_free_r+0x1e>
 800d5be:	461a      	mov	r2, r3
 800d5c0:	685b      	ldr	r3, [r3, #4]
 800d5c2:	b10b      	cbz	r3, 800d5c8 <_free_r+0x4c>
 800d5c4:	42a3      	cmp	r3, r4
 800d5c6:	d9fa      	bls.n	800d5be <_free_r+0x42>
 800d5c8:	6811      	ldr	r1, [r2, #0]
 800d5ca:	1850      	adds	r0, r2, r1
 800d5cc:	42a0      	cmp	r0, r4
 800d5ce:	d10b      	bne.n	800d5e8 <_free_r+0x6c>
 800d5d0:	6820      	ldr	r0, [r4, #0]
 800d5d2:	4401      	add	r1, r0
 800d5d4:	1850      	adds	r0, r2, r1
 800d5d6:	4283      	cmp	r3, r0
 800d5d8:	6011      	str	r1, [r2, #0]
 800d5da:	d1e0      	bne.n	800d59e <_free_r+0x22>
 800d5dc:	6818      	ldr	r0, [r3, #0]
 800d5de:	685b      	ldr	r3, [r3, #4]
 800d5e0:	4401      	add	r1, r0
 800d5e2:	6011      	str	r1, [r2, #0]
 800d5e4:	6053      	str	r3, [r2, #4]
 800d5e6:	e7da      	b.n	800d59e <_free_r+0x22>
 800d5e8:	d902      	bls.n	800d5f0 <_free_r+0x74>
 800d5ea:	230c      	movs	r3, #12
 800d5ec:	602b      	str	r3, [r5, #0]
 800d5ee:	e7d6      	b.n	800d59e <_free_r+0x22>
 800d5f0:	6820      	ldr	r0, [r4, #0]
 800d5f2:	1821      	adds	r1, r4, r0
 800d5f4:	428b      	cmp	r3, r1
 800d5f6:	bf01      	itttt	eq
 800d5f8:	6819      	ldreq	r1, [r3, #0]
 800d5fa:	685b      	ldreq	r3, [r3, #4]
 800d5fc:	1809      	addeq	r1, r1, r0
 800d5fe:	6021      	streq	r1, [r4, #0]
 800d600:	6063      	str	r3, [r4, #4]
 800d602:	6054      	str	r4, [r2, #4]
 800d604:	e7cb      	b.n	800d59e <_free_r+0x22>
 800d606:	bd38      	pop	{r3, r4, r5, pc}
 800d608:	20000aa0 	.word	0x20000aa0

0800d60c <sbrk_aligned>:
 800d60c:	b570      	push	{r4, r5, r6, lr}
 800d60e:	4e0e      	ldr	r6, [pc, #56]	; (800d648 <sbrk_aligned+0x3c>)
 800d610:	460c      	mov	r4, r1
 800d612:	6831      	ldr	r1, [r6, #0]
 800d614:	4605      	mov	r5, r0
 800d616:	b911      	cbnz	r1, 800d61e <sbrk_aligned+0x12>
 800d618:	f000 f9ee 	bl	800d9f8 <_sbrk_r>
 800d61c:	6030      	str	r0, [r6, #0]
 800d61e:	4621      	mov	r1, r4
 800d620:	4628      	mov	r0, r5
 800d622:	f000 f9e9 	bl	800d9f8 <_sbrk_r>
 800d626:	1c43      	adds	r3, r0, #1
 800d628:	d00a      	beq.n	800d640 <sbrk_aligned+0x34>
 800d62a:	1cc4      	adds	r4, r0, #3
 800d62c:	f024 0403 	bic.w	r4, r4, #3
 800d630:	42a0      	cmp	r0, r4
 800d632:	d007      	beq.n	800d644 <sbrk_aligned+0x38>
 800d634:	1a21      	subs	r1, r4, r0
 800d636:	4628      	mov	r0, r5
 800d638:	f000 f9de 	bl	800d9f8 <_sbrk_r>
 800d63c:	3001      	adds	r0, #1
 800d63e:	d101      	bne.n	800d644 <sbrk_aligned+0x38>
 800d640:	f04f 34ff 	mov.w	r4, #4294967295
 800d644:	4620      	mov	r0, r4
 800d646:	bd70      	pop	{r4, r5, r6, pc}
 800d648:	20000aa4 	.word	0x20000aa4

0800d64c <_malloc_r>:
 800d64c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d650:	1ccd      	adds	r5, r1, #3
 800d652:	f025 0503 	bic.w	r5, r5, #3
 800d656:	3508      	adds	r5, #8
 800d658:	2d0c      	cmp	r5, #12
 800d65a:	bf38      	it	cc
 800d65c:	250c      	movcc	r5, #12
 800d65e:	2d00      	cmp	r5, #0
 800d660:	4607      	mov	r7, r0
 800d662:	db01      	blt.n	800d668 <_malloc_r+0x1c>
 800d664:	42a9      	cmp	r1, r5
 800d666:	d905      	bls.n	800d674 <_malloc_r+0x28>
 800d668:	230c      	movs	r3, #12
 800d66a:	2600      	movs	r6, #0
 800d66c:	603b      	str	r3, [r7, #0]
 800d66e:	4630      	mov	r0, r6
 800d670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d674:	4e2e      	ldr	r6, [pc, #184]	; (800d730 <_malloc_r+0xe4>)
 800d676:	f000 fa3b 	bl	800daf0 <__malloc_lock>
 800d67a:	6833      	ldr	r3, [r6, #0]
 800d67c:	461c      	mov	r4, r3
 800d67e:	bb34      	cbnz	r4, 800d6ce <_malloc_r+0x82>
 800d680:	4629      	mov	r1, r5
 800d682:	4638      	mov	r0, r7
 800d684:	f7ff ffc2 	bl	800d60c <sbrk_aligned>
 800d688:	1c43      	adds	r3, r0, #1
 800d68a:	4604      	mov	r4, r0
 800d68c:	d14d      	bne.n	800d72a <_malloc_r+0xde>
 800d68e:	6834      	ldr	r4, [r6, #0]
 800d690:	4626      	mov	r6, r4
 800d692:	2e00      	cmp	r6, #0
 800d694:	d140      	bne.n	800d718 <_malloc_r+0xcc>
 800d696:	6823      	ldr	r3, [r4, #0]
 800d698:	4631      	mov	r1, r6
 800d69a:	4638      	mov	r0, r7
 800d69c:	eb04 0803 	add.w	r8, r4, r3
 800d6a0:	f000 f9aa 	bl	800d9f8 <_sbrk_r>
 800d6a4:	4580      	cmp	r8, r0
 800d6a6:	d13a      	bne.n	800d71e <_malloc_r+0xd2>
 800d6a8:	6821      	ldr	r1, [r4, #0]
 800d6aa:	3503      	adds	r5, #3
 800d6ac:	1a6d      	subs	r5, r5, r1
 800d6ae:	f025 0503 	bic.w	r5, r5, #3
 800d6b2:	3508      	adds	r5, #8
 800d6b4:	2d0c      	cmp	r5, #12
 800d6b6:	bf38      	it	cc
 800d6b8:	250c      	movcc	r5, #12
 800d6ba:	4638      	mov	r0, r7
 800d6bc:	4629      	mov	r1, r5
 800d6be:	f7ff ffa5 	bl	800d60c <sbrk_aligned>
 800d6c2:	3001      	adds	r0, #1
 800d6c4:	d02b      	beq.n	800d71e <_malloc_r+0xd2>
 800d6c6:	6823      	ldr	r3, [r4, #0]
 800d6c8:	442b      	add	r3, r5
 800d6ca:	6023      	str	r3, [r4, #0]
 800d6cc:	e00e      	b.n	800d6ec <_malloc_r+0xa0>
 800d6ce:	6822      	ldr	r2, [r4, #0]
 800d6d0:	1b52      	subs	r2, r2, r5
 800d6d2:	d41e      	bmi.n	800d712 <_malloc_r+0xc6>
 800d6d4:	2a0b      	cmp	r2, #11
 800d6d6:	d916      	bls.n	800d706 <_malloc_r+0xba>
 800d6d8:	1961      	adds	r1, r4, r5
 800d6da:	42a3      	cmp	r3, r4
 800d6dc:	6025      	str	r5, [r4, #0]
 800d6de:	bf18      	it	ne
 800d6e0:	6059      	strne	r1, [r3, #4]
 800d6e2:	6863      	ldr	r3, [r4, #4]
 800d6e4:	bf08      	it	eq
 800d6e6:	6031      	streq	r1, [r6, #0]
 800d6e8:	5162      	str	r2, [r4, r5]
 800d6ea:	604b      	str	r3, [r1, #4]
 800d6ec:	4638      	mov	r0, r7
 800d6ee:	f104 060b 	add.w	r6, r4, #11
 800d6f2:	f000 fa03 	bl	800dafc <__malloc_unlock>
 800d6f6:	f026 0607 	bic.w	r6, r6, #7
 800d6fa:	1d23      	adds	r3, r4, #4
 800d6fc:	1af2      	subs	r2, r6, r3
 800d6fe:	d0b6      	beq.n	800d66e <_malloc_r+0x22>
 800d700:	1b9b      	subs	r3, r3, r6
 800d702:	50a3      	str	r3, [r4, r2]
 800d704:	e7b3      	b.n	800d66e <_malloc_r+0x22>
 800d706:	6862      	ldr	r2, [r4, #4]
 800d708:	42a3      	cmp	r3, r4
 800d70a:	bf0c      	ite	eq
 800d70c:	6032      	streq	r2, [r6, #0]
 800d70e:	605a      	strne	r2, [r3, #4]
 800d710:	e7ec      	b.n	800d6ec <_malloc_r+0xa0>
 800d712:	4623      	mov	r3, r4
 800d714:	6864      	ldr	r4, [r4, #4]
 800d716:	e7b2      	b.n	800d67e <_malloc_r+0x32>
 800d718:	4634      	mov	r4, r6
 800d71a:	6876      	ldr	r6, [r6, #4]
 800d71c:	e7b9      	b.n	800d692 <_malloc_r+0x46>
 800d71e:	230c      	movs	r3, #12
 800d720:	4638      	mov	r0, r7
 800d722:	603b      	str	r3, [r7, #0]
 800d724:	f000 f9ea 	bl	800dafc <__malloc_unlock>
 800d728:	e7a1      	b.n	800d66e <_malloc_r+0x22>
 800d72a:	6025      	str	r5, [r4, #0]
 800d72c:	e7de      	b.n	800d6ec <_malloc_r+0xa0>
 800d72e:	bf00      	nop
 800d730:	20000aa0 	.word	0x20000aa0

0800d734 <__ssputs_r>:
 800d734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d738:	688e      	ldr	r6, [r1, #8]
 800d73a:	4682      	mov	sl, r0
 800d73c:	429e      	cmp	r6, r3
 800d73e:	460c      	mov	r4, r1
 800d740:	4690      	mov	r8, r2
 800d742:	461f      	mov	r7, r3
 800d744:	d838      	bhi.n	800d7b8 <__ssputs_r+0x84>
 800d746:	898a      	ldrh	r2, [r1, #12]
 800d748:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d74c:	d032      	beq.n	800d7b4 <__ssputs_r+0x80>
 800d74e:	6825      	ldr	r5, [r4, #0]
 800d750:	6909      	ldr	r1, [r1, #16]
 800d752:	3301      	adds	r3, #1
 800d754:	eba5 0901 	sub.w	r9, r5, r1
 800d758:	6965      	ldr	r5, [r4, #20]
 800d75a:	444b      	add	r3, r9
 800d75c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d760:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d764:	106d      	asrs	r5, r5, #1
 800d766:	429d      	cmp	r5, r3
 800d768:	bf38      	it	cc
 800d76a:	461d      	movcc	r5, r3
 800d76c:	0553      	lsls	r3, r2, #21
 800d76e:	d531      	bpl.n	800d7d4 <__ssputs_r+0xa0>
 800d770:	4629      	mov	r1, r5
 800d772:	f7ff ff6b 	bl	800d64c <_malloc_r>
 800d776:	4606      	mov	r6, r0
 800d778:	b950      	cbnz	r0, 800d790 <__ssputs_r+0x5c>
 800d77a:	230c      	movs	r3, #12
 800d77c:	f04f 30ff 	mov.w	r0, #4294967295
 800d780:	f8ca 3000 	str.w	r3, [sl]
 800d784:	89a3      	ldrh	r3, [r4, #12]
 800d786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d78a:	81a3      	strh	r3, [r4, #12]
 800d78c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d790:	464a      	mov	r2, r9
 800d792:	6921      	ldr	r1, [r4, #16]
 800d794:	f7ff fa18 	bl	800cbc8 <memcpy>
 800d798:	89a3      	ldrh	r3, [r4, #12]
 800d79a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d79e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7a2:	81a3      	strh	r3, [r4, #12]
 800d7a4:	6126      	str	r6, [r4, #16]
 800d7a6:	444e      	add	r6, r9
 800d7a8:	6026      	str	r6, [r4, #0]
 800d7aa:	463e      	mov	r6, r7
 800d7ac:	6165      	str	r5, [r4, #20]
 800d7ae:	eba5 0509 	sub.w	r5, r5, r9
 800d7b2:	60a5      	str	r5, [r4, #8]
 800d7b4:	42be      	cmp	r6, r7
 800d7b6:	d900      	bls.n	800d7ba <__ssputs_r+0x86>
 800d7b8:	463e      	mov	r6, r7
 800d7ba:	4632      	mov	r2, r6
 800d7bc:	4641      	mov	r1, r8
 800d7be:	6820      	ldr	r0, [r4, #0]
 800d7c0:	f000 f97c 	bl	800dabc <memmove>
 800d7c4:	68a3      	ldr	r3, [r4, #8]
 800d7c6:	2000      	movs	r0, #0
 800d7c8:	1b9b      	subs	r3, r3, r6
 800d7ca:	60a3      	str	r3, [r4, #8]
 800d7cc:	6823      	ldr	r3, [r4, #0]
 800d7ce:	4433      	add	r3, r6
 800d7d0:	6023      	str	r3, [r4, #0]
 800d7d2:	e7db      	b.n	800d78c <__ssputs_r+0x58>
 800d7d4:	462a      	mov	r2, r5
 800d7d6:	f000 f997 	bl	800db08 <_realloc_r>
 800d7da:	4606      	mov	r6, r0
 800d7dc:	2800      	cmp	r0, #0
 800d7de:	d1e1      	bne.n	800d7a4 <__ssputs_r+0x70>
 800d7e0:	4650      	mov	r0, sl
 800d7e2:	6921      	ldr	r1, [r4, #16]
 800d7e4:	f7ff feca 	bl	800d57c <_free_r>
 800d7e8:	e7c7      	b.n	800d77a <__ssputs_r+0x46>
	...

0800d7ec <_svfiprintf_r>:
 800d7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7f0:	4698      	mov	r8, r3
 800d7f2:	898b      	ldrh	r3, [r1, #12]
 800d7f4:	4607      	mov	r7, r0
 800d7f6:	061b      	lsls	r3, r3, #24
 800d7f8:	460d      	mov	r5, r1
 800d7fa:	4614      	mov	r4, r2
 800d7fc:	b09d      	sub	sp, #116	; 0x74
 800d7fe:	d50e      	bpl.n	800d81e <_svfiprintf_r+0x32>
 800d800:	690b      	ldr	r3, [r1, #16]
 800d802:	b963      	cbnz	r3, 800d81e <_svfiprintf_r+0x32>
 800d804:	2140      	movs	r1, #64	; 0x40
 800d806:	f7ff ff21 	bl	800d64c <_malloc_r>
 800d80a:	6028      	str	r0, [r5, #0]
 800d80c:	6128      	str	r0, [r5, #16]
 800d80e:	b920      	cbnz	r0, 800d81a <_svfiprintf_r+0x2e>
 800d810:	230c      	movs	r3, #12
 800d812:	603b      	str	r3, [r7, #0]
 800d814:	f04f 30ff 	mov.w	r0, #4294967295
 800d818:	e0d1      	b.n	800d9be <_svfiprintf_r+0x1d2>
 800d81a:	2340      	movs	r3, #64	; 0x40
 800d81c:	616b      	str	r3, [r5, #20]
 800d81e:	2300      	movs	r3, #0
 800d820:	9309      	str	r3, [sp, #36]	; 0x24
 800d822:	2320      	movs	r3, #32
 800d824:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d828:	2330      	movs	r3, #48	; 0x30
 800d82a:	f04f 0901 	mov.w	r9, #1
 800d82e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d832:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d9d8 <_svfiprintf_r+0x1ec>
 800d836:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d83a:	4623      	mov	r3, r4
 800d83c:	469a      	mov	sl, r3
 800d83e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d842:	b10a      	cbz	r2, 800d848 <_svfiprintf_r+0x5c>
 800d844:	2a25      	cmp	r2, #37	; 0x25
 800d846:	d1f9      	bne.n	800d83c <_svfiprintf_r+0x50>
 800d848:	ebba 0b04 	subs.w	fp, sl, r4
 800d84c:	d00b      	beq.n	800d866 <_svfiprintf_r+0x7a>
 800d84e:	465b      	mov	r3, fp
 800d850:	4622      	mov	r2, r4
 800d852:	4629      	mov	r1, r5
 800d854:	4638      	mov	r0, r7
 800d856:	f7ff ff6d 	bl	800d734 <__ssputs_r>
 800d85a:	3001      	adds	r0, #1
 800d85c:	f000 80aa 	beq.w	800d9b4 <_svfiprintf_r+0x1c8>
 800d860:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d862:	445a      	add	r2, fp
 800d864:	9209      	str	r2, [sp, #36]	; 0x24
 800d866:	f89a 3000 	ldrb.w	r3, [sl]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	f000 80a2 	beq.w	800d9b4 <_svfiprintf_r+0x1c8>
 800d870:	2300      	movs	r3, #0
 800d872:	f04f 32ff 	mov.w	r2, #4294967295
 800d876:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d87a:	f10a 0a01 	add.w	sl, sl, #1
 800d87e:	9304      	str	r3, [sp, #16]
 800d880:	9307      	str	r3, [sp, #28]
 800d882:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d886:	931a      	str	r3, [sp, #104]	; 0x68
 800d888:	4654      	mov	r4, sl
 800d88a:	2205      	movs	r2, #5
 800d88c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d890:	4851      	ldr	r0, [pc, #324]	; (800d9d8 <_svfiprintf_r+0x1ec>)
 800d892:	f7ff f98b 	bl	800cbac <memchr>
 800d896:	9a04      	ldr	r2, [sp, #16]
 800d898:	b9d8      	cbnz	r0, 800d8d2 <_svfiprintf_r+0xe6>
 800d89a:	06d0      	lsls	r0, r2, #27
 800d89c:	bf44      	itt	mi
 800d89e:	2320      	movmi	r3, #32
 800d8a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d8a4:	0711      	lsls	r1, r2, #28
 800d8a6:	bf44      	itt	mi
 800d8a8:	232b      	movmi	r3, #43	; 0x2b
 800d8aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d8ae:	f89a 3000 	ldrb.w	r3, [sl]
 800d8b2:	2b2a      	cmp	r3, #42	; 0x2a
 800d8b4:	d015      	beq.n	800d8e2 <_svfiprintf_r+0xf6>
 800d8b6:	4654      	mov	r4, sl
 800d8b8:	2000      	movs	r0, #0
 800d8ba:	f04f 0c0a 	mov.w	ip, #10
 800d8be:	9a07      	ldr	r2, [sp, #28]
 800d8c0:	4621      	mov	r1, r4
 800d8c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d8c6:	3b30      	subs	r3, #48	; 0x30
 800d8c8:	2b09      	cmp	r3, #9
 800d8ca:	d94e      	bls.n	800d96a <_svfiprintf_r+0x17e>
 800d8cc:	b1b0      	cbz	r0, 800d8fc <_svfiprintf_r+0x110>
 800d8ce:	9207      	str	r2, [sp, #28]
 800d8d0:	e014      	b.n	800d8fc <_svfiprintf_r+0x110>
 800d8d2:	eba0 0308 	sub.w	r3, r0, r8
 800d8d6:	fa09 f303 	lsl.w	r3, r9, r3
 800d8da:	4313      	orrs	r3, r2
 800d8dc:	46a2      	mov	sl, r4
 800d8de:	9304      	str	r3, [sp, #16]
 800d8e0:	e7d2      	b.n	800d888 <_svfiprintf_r+0x9c>
 800d8e2:	9b03      	ldr	r3, [sp, #12]
 800d8e4:	1d19      	adds	r1, r3, #4
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	9103      	str	r1, [sp, #12]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	bfbb      	ittet	lt
 800d8ee:	425b      	neglt	r3, r3
 800d8f0:	f042 0202 	orrlt.w	r2, r2, #2
 800d8f4:	9307      	strge	r3, [sp, #28]
 800d8f6:	9307      	strlt	r3, [sp, #28]
 800d8f8:	bfb8      	it	lt
 800d8fa:	9204      	strlt	r2, [sp, #16]
 800d8fc:	7823      	ldrb	r3, [r4, #0]
 800d8fe:	2b2e      	cmp	r3, #46	; 0x2e
 800d900:	d10c      	bne.n	800d91c <_svfiprintf_r+0x130>
 800d902:	7863      	ldrb	r3, [r4, #1]
 800d904:	2b2a      	cmp	r3, #42	; 0x2a
 800d906:	d135      	bne.n	800d974 <_svfiprintf_r+0x188>
 800d908:	9b03      	ldr	r3, [sp, #12]
 800d90a:	3402      	adds	r4, #2
 800d90c:	1d1a      	adds	r2, r3, #4
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	9203      	str	r2, [sp, #12]
 800d912:	2b00      	cmp	r3, #0
 800d914:	bfb8      	it	lt
 800d916:	f04f 33ff 	movlt.w	r3, #4294967295
 800d91a:	9305      	str	r3, [sp, #20]
 800d91c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800d9dc <_svfiprintf_r+0x1f0>
 800d920:	2203      	movs	r2, #3
 800d922:	4650      	mov	r0, sl
 800d924:	7821      	ldrb	r1, [r4, #0]
 800d926:	f7ff f941 	bl	800cbac <memchr>
 800d92a:	b140      	cbz	r0, 800d93e <_svfiprintf_r+0x152>
 800d92c:	2340      	movs	r3, #64	; 0x40
 800d92e:	eba0 000a 	sub.w	r0, r0, sl
 800d932:	fa03 f000 	lsl.w	r0, r3, r0
 800d936:	9b04      	ldr	r3, [sp, #16]
 800d938:	3401      	adds	r4, #1
 800d93a:	4303      	orrs	r3, r0
 800d93c:	9304      	str	r3, [sp, #16]
 800d93e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d942:	2206      	movs	r2, #6
 800d944:	4826      	ldr	r0, [pc, #152]	; (800d9e0 <_svfiprintf_r+0x1f4>)
 800d946:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d94a:	f7ff f92f 	bl	800cbac <memchr>
 800d94e:	2800      	cmp	r0, #0
 800d950:	d038      	beq.n	800d9c4 <_svfiprintf_r+0x1d8>
 800d952:	4b24      	ldr	r3, [pc, #144]	; (800d9e4 <_svfiprintf_r+0x1f8>)
 800d954:	bb1b      	cbnz	r3, 800d99e <_svfiprintf_r+0x1b2>
 800d956:	9b03      	ldr	r3, [sp, #12]
 800d958:	3307      	adds	r3, #7
 800d95a:	f023 0307 	bic.w	r3, r3, #7
 800d95e:	3308      	adds	r3, #8
 800d960:	9303      	str	r3, [sp, #12]
 800d962:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d964:	4433      	add	r3, r6
 800d966:	9309      	str	r3, [sp, #36]	; 0x24
 800d968:	e767      	b.n	800d83a <_svfiprintf_r+0x4e>
 800d96a:	460c      	mov	r4, r1
 800d96c:	2001      	movs	r0, #1
 800d96e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d972:	e7a5      	b.n	800d8c0 <_svfiprintf_r+0xd4>
 800d974:	2300      	movs	r3, #0
 800d976:	f04f 0c0a 	mov.w	ip, #10
 800d97a:	4619      	mov	r1, r3
 800d97c:	3401      	adds	r4, #1
 800d97e:	9305      	str	r3, [sp, #20]
 800d980:	4620      	mov	r0, r4
 800d982:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d986:	3a30      	subs	r2, #48	; 0x30
 800d988:	2a09      	cmp	r2, #9
 800d98a:	d903      	bls.n	800d994 <_svfiprintf_r+0x1a8>
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d0c5      	beq.n	800d91c <_svfiprintf_r+0x130>
 800d990:	9105      	str	r1, [sp, #20]
 800d992:	e7c3      	b.n	800d91c <_svfiprintf_r+0x130>
 800d994:	4604      	mov	r4, r0
 800d996:	2301      	movs	r3, #1
 800d998:	fb0c 2101 	mla	r1, ip, r1, r2
 800d99c:	e7f0      	b.n	800d980 <_svfiprintf_r+0x194>
 800d99e:	ab03      	add	r3, sp, #12
 800d9a0:	9300      	str	r3, [sp, #0]
 800d9a2:	462a      	mov	r2, r5
 800d9a4:	4638      	mov	r0, r7
 800d9a6:	4b10      	ldr	r3, [pc, #64]	; (800d9e8 <_svfiprintf_r+0x1fc>)
 800d9a8:	a904      	add	r1, sp, #16
 800d9aa:	f7fc fa3b 	bl	8009e24 <_printf_float>
 800d9ae:	1c42      	adds	r2, r0, #1
 800d9b0:	4606      	mov	r6, r0
 800d9b2:	d1d6      	bne.n	800d962 <_svfiprintf_r+0x176>
 800d9b4:	89ab      	ldrh	r3, [r5, #12]
 800d9b6:	065b      	lsls	r3, r3, #25
 800d9b8:	f53f af2c 	bmi.w	800d814 <_svfiprintf_r+0x28>
 800d9bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d9be:	b01d      	add	sp, #116	; 0x74
 800d9c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9c4:	ab03      	add	r3, sp, #12
 800d9c6:	9300      	str	r3, [sp, #0]
 800d9c8:	462a      	mov	r2, r5
 800d9ca:	4638      	mov	r0, r7
 800d9cc:	4b06      	ldr	r3, [pc, #24]	; (800d9e8 <_svfiprintf_r+0x1fc>)
 800d9ce:	a904      	add	r1, sp, #16
 800d9d0:	f7fc fcc4 	bl	800a35c <_printf_i>
 800d9d4:	e7eb      	b.n	800d9ae <_svfiprintf_r+0x1c2>
 800d9d6:	bf00      	nop
 800d9d8:	0800f36c 	.word	0x0800f36c
 800d9dc:	0800f372 	.word	0x0800f372
 800d9e0:	0800f376 	.word	0x0800f376
 800d9e4:	08009e25 	.word	0x08009e25
 800d9e8:	0800d735 	.word	0x0800d735

0800d9ec <nan>:
 800d9ec:	2000      	movs	r0, #0
 800d9ee:	4901      	ldr	r1, [pc, #4]	; (800d9f4 <nan+0x8>)
 800d9f0:	4770      	bx	lr
 800d9f2:	bf00      	nop
 800d9f4:	7ff80000 	.word	0x7ff80000

0800d9f8 <_sbrk_r>:
 800d9f8:	b538      	push	{r3, r4, r5, lr}
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	4d05      	ldr	r5, [pc, #20]	; (800da14 <_sbrk_r+0x1c>)
 800d9fe:	4604      	mov	r4, r0
 800da00:	4608      	mov	r0, r1
 800da02:	602b      	str	r3, [r5, #0]
 800da04:	f7f7 fc7c 	bl	8005300 <_sbrk>
 800da08:	1c43      	adds	r3, r0, #1
 800da0a:	d102      	bne.n	800da12 <_sbrk_r+0x1a>
 800da0c:	682b      	ldr	r3, [r5, #0]
 800da0e:	b103      	cbz	r3, 800da12 <_sbrk_r+0x1a>
 800da10:	6023      	str	r3, [r4, #0]
 800da12:	bd38      	pop	{r3, r4, r5, pc}
 800da14:	20000aa8 	.word	0x20000aa8

0800da18 <strncmp>:
 800da18:	4603      	mov	r3, r0
 800da1a:	b510      	push	{r4, lr}
 800da1c:	b172      	cbz	r2, 800da3c <strncmp+0x24>
 800da1e:	3901      	subs	r1, #1
 800da20:	1884      	adds	r4, r0, r2
 800da22:	f813 0b01 	ldrb.w	r0, [r3], #1
 800da26:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800da2a:	4290      	cmp	r0, r2
 800da2c:	d101      	bne.n	800da32 <strncmp+0x1a>
 800da2e:	42a3      	cmp	r3, r4
 800da30:	d101      	bne.n	800da36 <strncmp+0x1e>
 800da32:	1a80      	subs	r0, r0, r2
 800da34:	bd10      	pop	{r4, pc}
 800da36:	2800      	cmp	r0, #0
 800da38:	d1f3      	bne.n	800da22 <strncmp+0xa>
 800da3a:	e7fa      	b.n	800da32 <strncmp+0x1a>
 800da3c:	4610      	mov	r0, r2
 800da3e:	e7f9      	b.n	800da34 <strncmp+0x1c>

0800da40 <__ascii_wctomb>:
 800da40:	4603      	mov	r3, r0
 800da42:	4608      	mov	r0, r1
 800da44:	b141      	cbz	r1, 800da58 <__ascii_wctomb+0x18>
 800da46:	2aff      	cmp	r2, #255	; 0xff
 800da48:	d904      	bls.n	800da54 <__ascii_wctomb+0x14>
 800da4a:	228a      	movs	r2, #138	; 0x8a
 800da4c:	f04f 30ff 	mov.w	r0, #4294967295
 800da50:	601a      	str	r2, [r3, #0]
 800da52:	4770      	bx	lr
 800da54:	2001      	movs	r0, #1
 800da56:	700a      	strb	r2, [r1, #0]
 800da58:	4770      	bx	lr
	...

0800da5c <__assert_func>:
 800da5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800da5e:	4614      	mov	r4, r2
 800da60:	461a      	mov	r2, r3
 800da62:	4b09      	ldr	r3, [pc, #36]	; (800da88 <__assert_func+0x2c>)
 800da64:	4605      	mov	r5, r0
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	68d8      	ldr	r0, [r3, #12]
 800da6a:	b14c      	cbz	r4, 800da80 <__assert_func+0x24>
 800da6c:	4b07      	ldr	r3, [pc, #28]	; (800da8c <__assert_func+0x30>)
 800da6e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800da72:	9100      	str	r1, [sp, #0]
 800da74:	462b      	mov	r3, r5
 800da76:	4906      	ldr	r1, [pc, #24]	; (800da90 <__assert_func+0x34>)
 800da78:	f000 f80e 	bl	800da98 <fiprintf>
 800da7c:	f000 fa8a 	bl	800df94 <abort>
 800da80:	4b04      	ldr	r3, [pc, #16]	; (800da94 <__assert_func+0x38>)
 800da82:	461c      	mov	r4, r3
 800da84:	e7f3      	b.n	800da6e <__assert_func+0x12>
 800da86:	bf00      	nop
 800da88:	200000a0 	.word	0x200000a0
 800da8c:	0800f37d 	.word	0x0800f37d
 800da90:	0800f38a 	.word	0x0800f38a
 800da94:	0800f3b8 	.word	0x0800f3b8

0800da98 <fiprintf>:
 800da98:	b40e      	push	{r1, r2, r3}
 800da9a:	b503      	push	{r0, r1, lr}
 800da9c:	4601      	mov	r1, r0
 800da9e:	ab03      	add	r3, sp, #12
 800daa0:	4805      	ldr	r0, [pc, #20]	; (800dab8 <fiprintf+0x20>)
 800daa2:	f853 2b04 	ldr.w	r2, [r3], #4
 800daa6:	6800      	ldr	r0, [r0, #0]
 800daa8:	9301      	str	r3, [sp, #4]
 800daaa:	f000 f883 	bl	800dbb4 <_vfiprintf_r>
 800daae:	b002      	add	sp, #8
 800dab0:	f85d eb04 	ldr.w	lr, [sp], #4
 800dab4:	b003      	add	sp, #12
 800dab6:	4770      	bx	lr
 800dab8:	200000a0 	.word	0x200000a0

0800dabc <memmove>:
 800dabc:	4288      	cmp	r0, r1
 800dabe:	b510      	push	{r4, lr}
 800dac0:	eb01 0402 	add.w	r4, r1, r2
 800dac4:	d902      	bls.n	800dacc <memmove+0x10>
 800dac6:	4284      	cmp	r4, r0
 800dac8:	4623      	mov	r3, r4
 800daca:	d807      	bhi.n	800dadc <memmove+0x20>
 800dacc:	1e43      	subs	r3, r0, #1
 800dace:	42a1      	cmp	r1, r4
 800dad0:	d008      	beq.n	800dae4 <memmove+0x28>
 800dad2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dad6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dada:	e7f8      	b.n	800dace <memmove+0x12>
 800dadc:	4601      	mov	r1, r0
 800dade:	4402      	add	r2, r0
 800dae0:	428a      	cmp	r2, r1
 800dae2:	d100      	bne.n	800dae6 <memmove+0x2a>
 800dae4:	bd10      	pop	{r4, pc}
 800dae6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800daea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800daee:	e7f7      	b.n	800dae0 <memmove+0x24>

0800daf0 <__malloc_lock>:
 800daf0:	4801      	ldr	r0, [pc, #4]	; (800daf8 <__malloc_lock+0x8>)
 800daf2:	f000 bc0b 	b.w	800e30c <__retarget_lock_acquire_recursive>
 800daf6:	bf00      	nop
 800daf8:	20000aac 	.word	0x20000aac

0800dafc <__malloc_unlock>:
 800dafc:	4801      	ldr	r0, [pc, #4]	; (800db04 <__malloc_unlock+0x8>)
 800dafe:	f000 bc06 	b.w	800e30e <__retarget_lock_release_recursive>
 800db02:	bf00      	nop
 800db04:	20000aac 	.word	0x20000aac

0800db08 <_realloc_r>:
 800db08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db0c:	4680      	mov	r8, r0
 800db0e:	4614      	mov	r4, r2
 800db10:	460e      	mov	r6, r1
 800db12:	b921      	cbnz	r1, 800db1e <_realloc_r+0x16>
 800db14:	4611      	mov	r1, r2
 800db16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db1a:	f7ff bd97 	b.w	800d64c <_malloc_r>
 800db1e:	b92a      	cbnz	r2, 800db2c <_realloc_r+0x24>
 800db20:	f7ff fd2c 	bl	800d57c <_free_r>
 800db24:	4625      	mov	r5, r4
 800db26:	4628      	mov	r0, r5
 800db28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db2c:	f000 fc56 	bl	800e3dc <_malloc_usable_size_r>
 800db30:	4284      	cmp	r4, r0
 800db32:	4607      	mov	r7, r0
 800db34:	d802      	bhi.n	800db3c <_realloc_r+0x34>
 800db36:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800db3a:	d812      	bhi.n	800db62 <_realloc_r+0x5a>
 800db3c:	4621      	mov	r1, r4
 800db3e:	4640      	mov	r0, r8
 800db40:	f7ff fd84 	bl	800d64c <_malloc_r>
 800db44:	4605      	mov	r5, r0
 800db46:	2800      	cmp	r0, #0
 800db48:	d0ed      	beq.n	800db26 <_realloc_r+0x1e>
 800db4a:	42bc      	cmp	r4, r7
 800db4c:	4622      	mov	r2, r4
 800db4e:	4631      	mov	r1, r6
 800db50:	bf28      	it	cs
 800db52:	463a      	movcs	r2, r7
 800db54:	f7ff f838 	bl	800cbc8 <memcpy>
 800db58:	4631      	mov	r1, r6
 800db5a:	4640      	mov	r0, r8
 800db5c:	f7ff fd0e 	bl	800d57c <_free_r>
 800db60:	e7e1      	b.n	800db26 <_realloc_r+0x1e>
 800db62:	4635      	mov	r5, r6
 800db64:	e7df      	b.n	800db26 <_realloc_r+0x1e>

0800db66 <__sfputc_r>:
 800db66:	6893      	ldr	r3, [r2, #8]
 800db68:	b410      	push	{r4}
 800db6a:	3b01      	subs	r3, #1
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	6093      	str	r3, [r2, #8]
 800db70:	da07      	bge.n	800db82 <__sfputc_r+0x1c>
 800db72:	6994      	ldr	r4, [r2, #24]
 800db74:	42a3      	cmp	r3, r4
 800db76:	db01      	blt.n	800db7c <__sfputc_r+0x16>
 800db78:	290a      	cmp	r1, #10
 800db7a:	d102      	bne.n	800db82 <__sfputc_r+0x1c>
 800db7c:	bc10      	pop	{r4}
 800db7e:	f000 b949 	b.w	800de14 <__swbuf_r>
 800db82:	6813      	ldr	r3, [r2, #0]
 800db84:	1c58      	adds	r0, r3, #1
 800db86:	6010      	str	r0, [r2, #0]
 800db88:	7019      	strb	r1, [r3, #0]
 800db8a:	4608      	mov	r0, r1
 800db8c:	bc10      	pop	{r4}
 800db8e:	4770      	bx	lr

0800db90 <__sfputs_r>:
 800db90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db92:	4606      	mov	r6, r0
 800db94:	460f      	mov	r7, r1
 800db96:	4614      	mov	r4, r2
 800db98:	18d5      	adds	r5, r2, r3
 800db9a:	42ac      	cmp	r4, r5
 800db9c:	d101      	bne.n	800dba2 <__sfputs_r+0x12>
 800db9e:	2000      	movs	r0, #0
 800dba0:	e007      	b.n	800dbb2 <__sfputs_r+0x22>
 800dba2:	463a      	mov	r2, r7
 800dba4:	4630      	mov	r0, r6
 800dba6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbaa:	f7ff ffdc 	bl	800db66 <__sfputc_r>
 800dbae:	1c43      	adds	r3, r0, #1
 800dbb0:	d1f3      	bne.n	800db9a <__sfputs_r+0xa>
 800dbb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dbb4 <_vfiprintf_r>:
 800dbb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbb8:	460d      	mov	r5, r1
 800dbba:	4614      	mov	r4, r2
 800dbbc:	4698      	mov	r8, r3
 800dbbe:	4606      	mov	r6, r0
 800dbc0:	b09d      	sub	sp, #116	; 0x74
 800dbc2:	b118      	cbz	r0, 800dbcc <_vfiprintf_r+0x18>
 800dbc4:	6983      	ldr	r3, [r0, #24]
 800dbc6:	b90b      	cbnz	r3, 800dbcc <_vfiprintf_r+0x18>
 800dbc8:	f000 fb02 	bl	800e1d0 <__sinit>
 800dbcc:	4b89      	ldr	r3, [pc, #548]	; (800ddf4 <_vfiprintf_r+0x240>)
 800dbce:	429d      	cmp	r5, r3
 800dbd0:	d11b      	bne.n	800dc0a <_vfiprintf_r+0x56>
 800dbd2:	6875      	ldr	r5, [r6, #4]
 800dbd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dbd6:	07d9      	lsls	r1, r3, #31
 800dbd8:	d405      	bmi.n	800dbe6 <_vfiprintf_r+0x32>
 800dbda:	89ab      	ldrh	r3, [r5, #12]
 800dbdc:	059a      	lsls	r2, r3, #22
 800dbde:	d402      	bmi.n	800dbe6 <_vfiprintf_r+0x32>
 800dbe0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dbe2:	f000 fb93 	bl	800e30c <__retarget_lock_acquire_recursive>
 800dbe6:	89ab      	ldrh	r3, [r5, #12]
 800dbe8:	071b      	lsls	r3, r3, #28
 800dbea:	d501      	bpl.n	800dbf0 <_vfiprintf_r+0x3c>
 800dbec:	692b      	ldr	r3, [r5, #16]
 800dbee:	b9eb      	cbnz	r3, 800dc2c <_vfiprintf_r+0x78>
 800dbf0:	4629      	mov	r1, r5
 800dbf2:	4630      	mov	r0, r6
 800dbf4:	f000 f960 	bl	800deb8 <__swsetup_r>
 800dbf8:	b1c0      	cbz	r0, 800dc2c <_vfiprintf_r+0x78>
 800dbfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dbfc:	07dc      	lsls	r4, r3, #31
 800dbfe:	d50e      	bpl.n	800dc1e <_vfiprintf_r+0x6a>
 800dc00:	f04f 30ff 	mov.w	r0, #4294967295
 800dc04:	b01d      	add	sp, #116	; 0x74
 800dc06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc0a:	4b7b      	ldr	r3, [pc, #492]	; (800ddf8 <_vfiprintf_r+0x244>)
 800dc0c:	429d      	cmp	r5, r3
 800dc0e:	d101      	bne.n	800dc14 <_vfiprintf_r+0x60>
 800dc10:	68b5      	ldr	r5, [r6, #8]
 800dc12:	e7df      	b.n	800dbd4 <_vfiprintf_r+0x20>
 800dc14:	4b79      	ldr	r3, [pc, #484]	; (800ddfc <_vfiprintf_r+0x248>)
 800dc16:	429d      	cmp	r5, r3
 800dc18:	bf08      	it	eq
 800dc1a:	68f5      	ldreq	r5, [r6, #12]
 800dc1c:	e7da      	b.n	800dbd4 <_vfiprintf_r+0x20>
 800dc1e:	89ab      	ldrh	r3, [r5, #12]
 800dc20:	0598      	lsls	r0, r3, #22
 800dc22:	d4ed      	bmi.n	800dc00 <_vfiprintf_r+0x4c>
 800dc24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dc26:	f000 fb72 	bl	800e30e <__retarget_lock_release_recursive>
 800dc2a:	e7e9      	b.n	800dc00 <_vfiprintf_r+0x4c>
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	9309      	str	r3, [sp, #36]	; 0x24
 800dc30:	2320      	movs	r3, #32
 800dc32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dc36:	2330      	movs	r3, #48	; 0x30
 800dc38:	f04f 0901 	mov.w	r9, #1
 800dc3c:	f8cd 800c 	str.w	r8, [sp, #12]
 800dc40:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800de00 <_vfiprintf_r+0x24c>
 800dc44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dc48:	4623      	mov	r3, r4
 800dc4a:	469a      	mov	sl, r3
 800dc4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc50:	b10a      	cbz	r2, 800dc56 <_vfiprintf_r+0xa2>
 800dc52:	2a25      	cmp	r2, #37	; 0x25
 800dc54:	d1f9      	bne.n	800dc4a <_vfiprintf_r+0x96>
 800dc56:	ebba 0b04 	subs.w	fp, sl, r4
 800dc5a:	d00b      	beq.n	800dc74 <_vfiprintf_r+0xc0>
 800dc5c:	465b      	mov	r3, fp
 800dc5e:	4622      	mov	r2, r4
 800dc60:	4629      	mov	r1, r5
 800dc62:	4630      	mov	r0, r6
 800dc64:	f7ff ff94 	bl	800db90 <__sfputs_r>
 800dc68:	3001      	adds	r0, #1
 800dc6a:	f000 80aa 	beq.w	800ddc2 <_vfiprintf_r+0x20e>
 800dc6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dc70:	445a      	add	r2, fp
 800dc72:	9209      	str	r2, [sp, #36]	; 0x24
 800dc74:	f89a 3000 	ldrb.w	r3, [sl]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	f000 80a2 	beq.w	800ddc2 <_vfiprintf_r+0x20e>
 800dc7e:	2300      	movs	r3, #0
 800dc80:	f04f 32ff 	mov.w	r2, #4294967295
 800dc84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc88:	f10a 0a01 	add.w	sl, sl, #1
 800dc8c:	9304      	str	r3, [sp, #16]
 800dc8e:	9307      	str	r3, [sp, #28]
 800dc90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dc94:	931a      	str	r3, [sp, #104]	; 0x68
 800dc96:	4654      	mov	r4, sl
 800dc98:	2205      	movs	r2, #5
 800dc9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc9e:	4858      	ldr	r0, [pc, #352]	; (800de00 <_vfiprintf_r+0x24c>)
 800dca0:	f7fe ff84 	bl	800cbac <memchr>
 800dca4:	9a04      	ldr	r2, [sp, #16]
 800dca6:	b9d8      	cbnz	r0, 800dce0 <_vfiprintf_r+0x12c>
 800dca8:	06d1      	lsls	r1, r2, #27
 800dcaa:	bf44      	itt	mi
 800dcac:	2320      	movmi	r3, #32
 800dcae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dcb2:	0713      	lsls	r3, r2, #28
 800dcb4:	bf44      	itt	mi
 800dcb6:	232b      	movmi	r3, #43	; 0x2b
 800dcb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dcbc:	f89a 3000 	ldrb.w	r3, [sl]
 800dcc0:	2b2a      	cmp	r3, #42	; 0x2a
 800dcc2:	d015      	beq.n	800dcf0 <_vfiprintf_r+0x13c>
 800dcc4:	4654      	mov	r4, sl
 800dcc6:	2000      	movs	r0, #0
 800dcc8:	f04f 0c0a 	mov.w	ip, #10
 800dccc:	9a07      	ldr	r2, [sp, #28]
 800dcce:	4621      	mov	r1, r4
 800dcd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dcd4:	3b30      	subs	r3, #48	; 0x30
 800dcd6:	2b09      	cmp	r3, #9
 800dcd8:	d94e      	bls.n	800dd78 <_vfiprintf_r+0x1c4>
 800dcda:	b1b0      	cbz	r0, 800dd0a <_vfiprintf_r+0x156>
 800dcdc:	9207      	str	r2, [sp, #28]
 800dcde:	e014      	b.n	800dd0a <_vfiprintf_r+0x156>
 800dce0:	eba0 0308 	sub.w	r3, r0, r8
 800dce4:	fa09 f303 	lsl.w	r3, r9, r3
 800dce8:	4313      	orrs	r3, r2
 800dcea:	46a2      	mov	sl, r4
 800dcec:	9304      	str	r3, [sp, #16]
 800dcee:	e7d2      	b.n	800dc96 <_vfiprintf_r+0xe2>
 800dcf0:	9b03      	ldr	r3, [sp, #12]
 800dcf2:	1d19      	adds	r1, r3, #4
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	9103      	str	r1, [sp, #12]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	bfbb      	ittet	lt
 800dcfc:	425b      	neglt	r3, r3
 800dcfe:	f042 0202 	orrlt.w	r2, r2, #2
 800dd02:	9307      	strge	r3, [sp, #28]
 800dd04:	9307      	strlt	r3, [sp, #28]
 800dd06:	bfb8      	it	lt
 800dd08:	9204      	strlt	r2, [sp, #16]
 800dd0a:	7823      	ldrb	r3, [r4, #0]
 800dd0c:	2b2e      	cmp	r3, #46	; 0x2e
 800dd0e:	d10c      	bne.n	800dd2a <_vfiprintf_r+0x176>
 800dd10:	7863      	ldrb	r3, [r4, #1]
 800dd12:	2b2a      	cmp	r3, #42	; 0x2a
 800dd14:	d135      	bne.n	800dd82 <_vfiprintf_r+0x1ce>
 800dd16:	9b03      	ldr	r3, [sp, #12]
 800dd18:	3402      	adds	r4, #2
 800dd1a:	1d1a      	adds	r2, r3, #4
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	9203      	str	r2, [sp, #12]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	bfb8      	it	lt
 800dd24:	f04f 33ff 	movlt.w	r3, #4294967295
 800dd28:	9305      	str	r3, [sp, #20]
 800dd2a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800de04 <_vfiprintf_r+0x250>
 800dd2e:	2203      	movs	r2, #3
 800dd30:	4650      	mov	r0, sl
 800dd32:	7821      	ldrb	r1, [r4, #0]
 800dd34:	f7fe ff3a 	bl	800cbac <memchr>
 800dd38:	b140      	cbz	r0, 800dd4c <_vfiprintf_r+0x198>
 800dd3a:	2340      	movs	r3, #64	; 0x40
 800dd3c:	eba0 000a 	sub.w	r0, r0, sl
 800dd40:	fa03 f000 	lsl.w	r0, r3, r0
 800dd44:	9b04      	ldr	r3, [sp, #16]
 800dd46:	3401      	adds	r4, #1
 800dd48:	4303      	orrs	r3, r0
 800dd4a:	9304      	str	r3, [sp, #16]
 800dd4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd50:	2206      	movs	r2, #6
 800dd52:	482d      	ldr	r0, [pc, #180]	; (800de08 <_vfiprintf_r+0x254>)
 800dd54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dd58:	f7fe ff28 	bl	800cbac <memchr>
 800dd5c:	2800      	cmp	r0, #0
 800dd5e:	d03f      	beq.n	800dde0 <_vfiprintf_r+0x22c>
 800dd60:	4b2a      	ldr	r3, [pc, #168]	; (800de0c <_vfiprintf_r+0x258>)
 800dd62:	bb1b      	cbnz	r3, 800ddac <_vfiprintf_r+0x1f8>
 800dd64:	9b03      	ldr	r3, [sp, #12]
 800dd66:	3307      	adds	r3, #7
 800dd68:	f023 0307 	bic.w	r3, r3, #7
 800dd6c:	3308      	adds	r3, #8
 800dd6e:	9303      	str	r3, [sp, #12]
 800dd70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd72:	443b      	add	r3, r7
 800dd74:	9309      	str	r3, [sp, #36]	; 0x24
 800dd76:	e767      	b.n	800dc48 <_vfiprintf_r+0x94>
 800dd78:	460c      	mov	r4, r1
 800dd7a:	2001      	movs	r0, #1
 800dd7c:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd80:	e7a5      	b.n	800dcce <_vfiprintf_r+0x11a>
 800dd82:	2300      	movs	r3, #0
 800dd84:	f04f 0c0a 	mov.w	ip, #10
 800dd88:	4619      	mov	r1, r3
 800dd8a:	3401      	adds	r4, #1
 800dd8c:	9305      	str	r3, [sp, #20]
 800dd8e:	4620      	mov	r0, r4
 800dd90:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd94:	3a30      	subs	r2, #48	; 0x30
 800dd96:	2a09      	cmp	r2, #9
 800dd98:	d903      	bls.n	800dda2 <_vfiprintf_r+0x1ee>
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d0c5      	beq.n	800dd2a <_vfiprintf_r+0x176>
 800dd9e:	9105      	str	r1, [sp, #20]
 800dda0:	e7c3      	b.n	800dd2a <_vfiprintf_r+0x176>
 800dda2:	4604      	mov	r4, r0
 800dda4:	2301      	movs	r3, #1
 800dda6:	fb0c 2101 	mla	r1, ip, r1, r2
 800ddaa:	e7f0      	b.n	800dd8e <_vfiprintf_r+0x1da>
 800ddac:	ab03      	add	r3, sp, #12
 800ddae:	9300      	str	r3, [sp, #0]
 800ddb0:	462a      	mov	r2, r5
 800ddb2:	4630      	mov	r0, r6
 800ddb4:	4b16      	ldr	r3, [pc, #88]	; (800de10 <_vfiprintf_r+0x25c>)
 800ddb6:	a904      	add	r1, sp, #16
 800ddb8:	f7fc f834 	bl	8009e24 <_printf_float>
 800ddbc:	4607      	mov	r7, r0
 800ddbe:	1c78      	adds	r0, r7, #1
 800ddc0:	d1d6      	bne.n	800dd70 <_vfiprintf_r+0x1bc>
 800ddc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ddc4:	07d9      	lsls	r1, r3, #31
 800ddc6:	d405      	bmi.n	800ddd4 <_vfiprintf_r+0x220>
 800ddc8:	89ab      	ldrh	r3, [r5, #12]
 800ddca:	059a      	lsls	r2, r3, #22
 800ddcc:	d402      	bmi.n	800ddd4 <_vfiprintf_r+0x220>
 800ddce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ddd0:	f000 fa9d 	bl	800e30e <__retarget_lock_release_recursive>
 800ddd4:	89ab      	ldrh	r3, [r5, #12]
 800ddd6:	065b      	lsls	r3, r3, #25
 800ddd8:	f53f af12 	bmi.w	800dc00 <_vfiprintf_r+0x4c>
 800dddc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ddde:	e711      	b.n	800dc04 <_vfiprintf_r+0x50>
 800dde0:	ab03      	add	r3, sp, #12
 800dde2:	9300      	str	r3, [sp, #0]
 800dde4:	462a      	mov	r2, r5
 800dde6:	4630      	mov	r0, r6
 800dde8:	4b09      	ldr	r3, [pc, #36]	; (800de10 <_vfiprintf_r+0x25c>)
 800ddea:	a904      	add	r1, sp, #16
 800ddec:	f7fc fab6 	bl	800a35c <_printf_i>
 800ddf0:	e7e4      	b.n	800ddbc <_vfiprintf_r+0x208>
 800ddf2:	bf00      	nop
 800ddf4:	0800f3dc 	.word	0x0800f3dc
 800ddf8:	0800f3fc 	.word	0x0800f3fc
 800ddfc:	0800f3bc 	.word	0x0800f3bc
 800de00:	0800f36c 	.word	0x0800f36c
 800de04:	0800f372 	.word	0x0800f372
 800de08:	0800f376 	.word	0x0800f376
 800de0c:	08009e25 	.word	0x08009e25
 800de10:	0800db91 	.word	0x0800db91

0800de14 <__swbuf_r>:
 800de14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de16:	460e      	mov	r6, r1
 800de18:	4614      	mov	r4, r2
 800de1a:	4605      	mov	r5, r0
 800de1c:	b118      	cbz	r0, 800de26 <__swbuf_r+0x12>
 800de1e:	6983      	ldr	r3, [r0, #24]
 800de20:	b90b      	cbnz	r3, 800de26 <__swbuf_r+0x12>
 800de22:	f000 f9d5 	bl	800e1d0 <__sinit>
 800de26:	4b21      	ldr	r3, [pc, #132]	; (800deac <__swbuf_r+0x98>)
 800de28:	429c      	cmp	r4, r3
 800de2a:	d12b      	bne.n	800de84 <__swbuf_r+0x70>
 800de2c:	686c      	ldr	r4, [r5, #4]
 800de2e:	69a3      	ldr	r3, [r4, #24]
 800de30:	60a3      	str	r3, [r4, #8]
 800de32:	89a3      	ldrh	r3, [r4, #12]
 800de34:	071a      	lsls	r2, r3, #28
 800de36:	d52f      	bpl.n	800de98 <__swbuf_r+0x84>
 800de38:	6923      	ldr	r3, [r4, #16]
 800de3a:	b36b      	cbz	r3, 800de98 <__swbuf_r+0x84>
 800de3c:	6923      	ldr	r3, [r4, #16]
 800de3e:	6820      	ldr	r0, [r4, #0]
 800de40:	b2f6      	uxtb	r6, r6
 800de42:	1ac0      	subs	r0, r0, r3
 800de44:	6963      	ldr	r3, [r4, #20]
 800de46:	4637      	mov	r7, r6
 800de48:	4283      	cmp	r3, r0
 800de4a:	dc04      	bgt.n	800de56 <__swbuf_r+0x42>
 800de4c:	4621      	mov	r1, r4
 800de4e:	4628      	mov	r0, r5
 800de50:	f000 f92a 	bl	800e0a8 <_fflush_r>
 800de54:	bb30      	cbnz	r0, 800dea4 <__swbuf_r+0x90>
 800de56:	68a3      	ldr	r3, [r4, #8]
 800de58:	3001      	adds	r0, #1
 800de5a:	3b01      	subs	r3, #1
 800de5c:	60a3      	str	r3, [r4, #8]
 800de5e:	6823      	ldr	r3, [r4, #0]
 800de60:	1c5a      	adds	r2, r3, #1
 800de62:	6022      	str	r2, [r4, #0]
 800de64:	701e      	strb	r6, [r3, #0]
 800de66:	6963      	ldr	r3, [r4, #20]
 800de68:	4283      	cmp	r3, r0
 800de6a:	d004      	beq.n	800de76 <__swbuf_r+0x62>
 800de6c:	89a3      	ldrh	r3, [r4, #12]
 800de6e:	07db      	lsls	r3, r3, #31
 800de70:	d506      	bpl.n	800de80 <__swbuf_r+0x6c>
 800de72:	2e0a      	cmp	r6, #10
 800de74:	d104      	bne.n	800de80 <__swbuf_r+0x6c>
 800de76:	4621      	mov	r1, r4
 800de78:	4628      	mov	r0, r5
 800de7a:	f000 f915 	bl	800e0a8 <_fflush_r>
 800de7e:	b988      	cbnz	r0, 800dea4 <__swbuf_r+0x90>
 800de80:	4638      	mov	r0, r7
 800de82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de84:	4b0a      	ldr	r3, [pc, #40]	; (800deb0 <__swbuf_r+0x9c>)
 800de86:	429c      	cmp	r4, r3
 800de88:	d101      	bne.n	800de8e <__swbuf_r+0x7a>
 800de8a:	68ac      	ldr	r4, [r5, #8]
 800de8c:	e7cf      	b.n	800de2e <__swbuf_r+0x1a>
 800de8e:	4b09      	ldr	r3, [pc, #36]	; (800deb4 <__swbuf_r+0xa0>)
 800de90:	429c      	cmp	r4, r3
 800de92:	bf08      	it	eq
 800de94:	68ec      	ldreq	r4, [r5, #12]
 800de96:	e7ca      	b.n	800de2e <__swbuf_r+0x1a>
 800de98:	4621      	mov	r1, r4
 800de9a:	4628      	mov	r0, r5
 800de9c:	f000 f80c 	bl	800deb8 <__swsetup_r>
 800dea0:	2800      	cmp	r0, #0
 800dea2:	d0cb      	beq.n	800de3c <__swbuf_r+0x28>
 800dea4:	f04f 37ff 	mov.w	r7, #4294967295
 800dea8:	e7ea      	b.n	800de80 <__swbuf_r+0x6c>
 800deaa:	bf00      	nop
 800deac:	0800f3dc 	.word	0x0800f3dc
 800deb0:	0800f3fc 	.word	0x0800f3fc
 800deb4:	0800f3bc 	.word	0x0800f3bc

0800deb8 <__swsetup_r>:
 800deb8:	4b32      	ldr	r3, [pc, #200]	; (800df84 <__swsetup_r+0xcc>)
 800deba:	b570      	push	{r4, r5, r6, lr}
 800debc:	681d      	ldr	r5, [r3, #0]
 800debe:	4606      	mov	r6, r0
 800dec0:	460c      	mov	r4, r1
 800dec2:	b125      	cbz	r5, 800dece <__swsetup_r+0x16>
 800dec4:	69ab      	ldr	r3, [r5, #24]
 800dec6:	b913      	cbnz	r3, 800dece <__swsetup_r+0x16>
 800dec8:	4628      	mov	r0, r5
 800deca:	f000 f981 	bl	800e1d0 <__sinit>
 800dece:	4b2e      	ldr	r3, [pc, #184]	; (800df88 <__swsetup_r+0xd0>)
 800ded0:	429c      	cmp	r4, r3
 800ded2:	d10f      	bne.n	800def4 <__swsetup_r+0x3c>
 800ded4:	686c      	ldr	r4, [r5, #4]
 800ded6:	89a3      	ldrh	r3, [r4, #12]
 800ded8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dedc:	0719      	lsls	r1, r3, #28
 800dede:	d42c      	bmi.n	800df3a <__swsetup_r+0x82>
 800dee0:	06dd      	lsls	r5, r3, #27
 800dee2:	d411      	bmi.n	800df08 <__swsetup_r+0x50>
 800dee4:	2309      	movs	r3, #9
 800dee6:	6033      	str	r3, [r6, #0]
 800dee8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800deec:	f04f 30ff 	mov.w	r0, #4294967295
 800def0:	81a3      	strh	r3, [r4, #12]
 800def2:	e03e      	b.n	800df72 <__swsetup_r+0xba>
 800def4:	4b25      	ldr	r3, [pc, #148]	; (800df8c <__swsetup_r+0xd4>)
 800def6:	429c      	cmp	r4, r3
 800def8:	d101      	bne.n	800defe <__swsetup_r+0x46>
 800defa:	68ac      	ldr	r4, [r5, #8]
 800defc:	e7eb      	b.n	800ded6 <__swsetup_r+0x1e>
 800defe:	4b24      	ldr	r3, [pc, #144]	; (800df90 <__swsetup_r+0xd8>)
 800df00:	429c      	cmp	r4, r3
 800df02:	bf08      	it	eq
 800df04:	68ec      	ldreq	r4, [r5, #12]
 800df06:	e7e6      	b.n	800ded6 <__swsetup_r+0x1e>
 800df08:	0758      	lsls	r0, r3, #29
 800df0a:	d512      	bpl.n	800df32 <__swsetup_r+0x7a>
 800df0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800df0e:	b141      	cbz	r1, 800df22 <__swsetup_r+0x6a>
 800df10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800df14:	4299      	cmp	r1, r3
 800df16:	d002      	beq.n	800df1e <__swsetup_r+0x66>
 800df18:	4630      	mov	r0, r6
 800df1a:	f7ff fb2f 	bl	800d57c <_free_r>
 800df1e:	2300      	movs	r3, #0
 800df20:	6363      	str	r3, [r4, #52]	; 0x34
 800df22:	89a3      	ldrh	r3, [r4, #12]
 800df24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800df28:	81a3      	strh	r3, [r4, #12]
 800df2a:	2300      	movs	r3, #0
 800df2c:	6063      	str	r3, [r4, #4]
 800df2e:	6923      	ldr	r3, [r4, #16]
 800df30:	6023      	str	r3, [r4, #0]
 800df32:	89a3      	ldrh	r3, [r4, #12]
 800df34:	f043 0308 	orr.w	r3, r3, #8
 800df38:	81a3      	strh	r3, [r4, #12]
 800df3a:	6923      	ldr	r3, [r4, #16]
 800df3c:	b94b      	cbnz	r3, 800df52 <__swsetup_r+0x9a>
 800df3e:	89a3      	ldrh	r3, [r4, #12]
 800df40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800df44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800df48:	d003      	beq.n	800df52 <__swsetup_r+0x9a>
 800df4a:	4621      	mov	r1, r4
 800df4c:	4630      	mov	r0, r6
 800df4e:	f000 fa05 	bl	800e35c <__smakebuf_r>
 800df52:	89a0      	ldrh	r0, [r4, #12]
 800df54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800df58:	f010 0301 	ands.w	r3, r0, #1
 800df5c:	d00a      	beq.n	800df74 <__swsetup_r+0xbc>
 800df5e:	2300      	movs	r3, #0
 800df60:	60a3      	str	r3, [r4, #8]
 800df62:	6963      	ldr	r3, [r4, #20]
 800df64:	425b      	negs	r3, r3
 800df66:	61a3      	str	r3, [r4, #24]
 800df68:	6923      	ldr	r3, [r4, #16]
 800df6a:	b943      	cbnz	r3, 800df7e <__swsetup_r+0xc6>
 800df6c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800df70:	d1ba      	bne.n	800dee8 <__swsetup_r+0x30>
 800df72:	bd70      	pop	{r4, r5, r6, pc}
 800df74:	0781      	lsls	r1, r0, #30
 800df76:	bf58      	it	pl
 800df78:	6963      	ldrpl	r3, [r4, #20]
 800df7a:	60a3      	str	r3, [r4, #8]
 800df7c:	e7f4      	b.n	800df68 <__swsetup_r+0xb0>
 800df7e:	2000      	movs	r0, #0
 800df80:	e7f7      	b.n	800df72 <__swsetup_r+0xba>
 800df82:	bf00      	nop
 800df84:	200000a0 	.word	0x200000a0
 800df88:	0800f3dc 	.word	0x0800f3dc
 800df8c:	0800f3fc 	.word	0x0800f3fc
 800df90:	0800f3bc 	.word	0x0800f3bc

0800df94 <abort>:
 800df94:	2006      	movs	r0, #6
 800df96:	b508      	push	{r3, lr}
 800df98:	f000 fa50 	bl	800e43c <raise>
 800df9c:	2001      	movs	r0, #1
 800df9e:	f7f7 f93c 	bl	800521a <_exit>
	...

0800dfa4 <__sflush_r>:
 800dfa4:	898a      	ldrh	r2, [r1, #12]
 800dfa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfa8:	4605      	mov	r5, r0
 800dfaa:	0710      	lsls	r0, r2, #28
 800dfac:	460c      	mov	r4, r1
 800dfae:	d457      	bmi.n	800e060 <__sflush_r+0xbc>
 800dfb0:	684b      	ldr	r3, [r1, #4]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	dc04      	bgt.n	800dfc0 <__sflush_r+0x1c>
 800dfb6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	dc01      	bgt.n	800dfc0 <__sflush_r+0x1c>
 800dfbc:	2000      	movs	r0, #0
 800dfbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dfc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dfc2:	2e00      	cmp	r6, #0
 800dfc4:	d0fa      	beq.n	800dfbc <__sflush_r+0x18>
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dfcc:	682f      	ldr	r7, [r5, #0]
 800dfce:	602b      	str	r3, [r5, #0]
 800dfd0:	d032      	beq.n	800e038 <__sflush_r+0x94>
 800dfd2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dfd4:	89a3      	ldrh	r3, [r4, #12]
 800dfd6:	075a      	lsls	r2, r3, #29
 800dfd8:	d505      	bpl.n	800dfe6 <__sflush_r+0x42>
 800dfda:	6863      	ldr	r3, [r4, #4]
 800dfdc:	1ac0      	subs	r0, r0, r3
 800dfde:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dfe0:	b10b      	cbz	r3, 800dfe6 <__sflush_r+0x42>
 800dfe2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dfe4:	1ac0      	subs	r0, r0, r3
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	4602      	mov	r2, r0
 800dfea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dfec:	4628      	mov	r0, r5
 800dfee:	6a21      	ldr	r1, [r4, #32]
 800dff0:	47b0      	blx	r6
 800dff2:	1c43      	adds	r3, r0, #1
 800dff4:	89a3      	ldrh	r3, [r4, #12]
 800dff6:	d106      	bne.n	800e006 <__sflush_r+0x62>
 800dff8:	6829      	ldr	r1, [r5, #0]
 800dffa:	291d      	cmp	r1, #29
 800dffc:	d82c      	bhi.n	800e058 <__sflush_r+0xb4>
 800dffe:	4a29      	ldr	r2, [pc, #164]	; (800e0a4 <__sflush_r+0x100>)
 800e000:	40ca      	lsrs	r2, r1
 800e002:	07d6      	lsls	r6, r2, #31
 800e004:	d528      	bpl.n	800e058 <__sflush_r+0xb4>
 800e006:	2200      	movs	r2, #0
 800e008:	6062      	str	r2, [r4, #4]
 800e00a:	6922      	ldr	r2, [r4, #16]
 800e00c:	04d9      	lsls	r1, r3, #19
 800e00e:	6022      	str	r2, [r4, #0]
 800e010:	d504      	bpl.n	800e01c <__sflush_r+0x78>
 800e012:	1c42      	adds	r2, r0, #1
 800e014:	d101      	bne.n	800e01a <__sflush_r+0x76>
 800e016:	682b      	ldr	r3, [r5, #0]
 800e018:	b903      	cbnz	r3, 800e01c <__sflush_r+0x78>
 800e01a:	6560      	str	r0, [r4, #84]	; 0x54
 800e01c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e01e:	602f      	str	r7, [r5, #0]
 800e020:	2900      	cmp	r1, #0
 800e022:	d0cb      	beq.n	800dfbc <__sflush_r+0x18>
 800e024:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e028:	4299      	cmp	r1, r3
 800e02a:	d002      	beq.n	800e032 <__sflush_r+0x8e>
 800e02c:	4628      	mov	r0, r5
 800e02e:	f7ff faa5 	bl	800d57c <_free_r>
 800e032:	2000      	movs	r0, #0
 800e034:	6360      	str	r0, [r4, #52]	; 0x34
 800e036:	e7c2      	b.n	800dfbe <__sflush_r+0x1a>
 800e038:	6a21      	ldr	r1, [r4, #32]
 800e03a:	2301      	movs	r3, #1
 800e03c:	4628      	mov	r0, r5
 800e03e:	47b0      	blx	r6
 800e040:	1c41      	adds	r1, r0, #1
 800e042:	d1c7      	bne.n	800dfd4 <__sflush_r+0x30>
 800e044:	682b      	ldr	r3, [r5, #0]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d0c4      	beq.n	800dfd4 <__sflush_r+0x30>
 800e04a:	2b1d      	cmp	r3, #29
 800e04c:	d001      	beq.n	800e052 <__sflush_r+0xae>
 800e04e:	2b16      	cmp	r3, #22
 800e050:	d101      	bne.n	800e056 <__sflush_r+0xb2>
 800e052:	602f      	str	r7, [r5, #0]
 800e054:	e7b2      	b.n	800dfbc <__sflush_r+0x18>
 800e056:	89a3      	ldrh	r3, [r4, #12]
 800e058:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e05c:	81a3      	strh	r3, [r4, #12]
 800e05e:	e7ae      	b.n	800dfbe <__sflush_r+0x1a>
 800e060:	690f      	ldr	r7, [r1, #16]
 800e062:	2f00      	cmp	r7, #0
 800e064:	d0aa      	beq.n	800dfbc <__sflush_r+0x18>
 800e066:	0793      	lsls	r3, r2, #30
 800e068:	bf18      	it	ne
 800e06a:	2300      	movne	r3, #0
 800e06c:	680e      	ldr	r6, [r1, #0]
 800e06e:	bf08      	it	eq
 800e070:	694b      	ldreq	r3, [r1, #20]
 800e072:	1bf6      	subs	r6, r6, r7
 800e074:	600f      	str	r7, [r1, #0]
 800e076:	608b      	str	r3, [r1, #8]
 800e078:	2e00      	cmp	r6, #0
 800e07a:	dd9f      	ble.n	800dfbc <__sflush_r+0x18>
 800e07c:	4633      	mov	r3, r6
 800e07e:	463a      	mov	r2, r7
 800e080:	4628      	mov	r0, r5
 800e082:	6a21      	ldr	r1, [r4, #32]
 800e084:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800e088:	47e0      	blx	ip
 800e08a:	2800      	cmp	r0, #0
 800e08c:	dc06      	bgt.n	800e09c <__sflush_r+0xf8>
 800e08e:	89a3      	ldrh	r3, [r4, #12]
 800e090:	f04f 30ff 	mov.w	r0, #4294967295
 800e094:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e098:	81a3      	strh	r3, [r4, #12]
 800e09a:	e790      	b.n	800dfbe <__sflush_r+0x1a>
 800e09c:	4407      	add	r7, r0
 800e09e:	1a36      	subs	r6, r6, r0
 800e0a0:	e7ea      	b.n	800e078 <__sflush_r+0xd4>
 800e0a2:	bf00      	nop
 800e0a4:	20400001 	.word	0x20400001

0800e0a8 <_fflush_r>:
 800e0a8:	b538      	push	{r3, r4, r5, lr}
 800e0aa:	690b      	ldr	r3, [r1, #16]
 800e0ac:	4605      	mov	r5, r0
 800e0ae:	460c      	mov	r4, r1
 800e0b0:	b913      	cbnz	r3, 800e0b8 <_fflush_r+0x10>
 800e0b2:	2500      	movs	r5, #0
 800e0b4:	4628      	mov	r0, r5
 800e0b6:	bd38      	pop	{r3, r4, r5, pc}
 800e0b8:	b118      	cbz	r0, 800e0c2 <_fflush_r+0x1a>
 800e0ba:	6983      	ldr	r3, [r0, #24]
 800e0bc:	b90b      	cbnz	r3, 800e0c2 <_fflush_r+0x1a>
 800e0be:	f000 f887 	bl	800e1d0 <__sinit>
 800e0c2:	4b14      	ldr	r3, [pc, #80]	; (800e114 <_fflush_r+0x6c>)
 800e0c4:	429c      	cmp	r4, r3
 800e0c6:	d11b      	bne.n	800e100 <_fflush_r+0x58>
 800e0c8:	686c      	ldr	r4, [r5, #4]
 800e0ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d0ef      	beq.n	800e0b2 <_fflush_r+0xa>
 800e0d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e0d4:	07d0      	lsls	r0, r2, #31
 800e0d6:	d404      	bmi.n	800e0e2 <_fflush_r+0x3a>
 800e0d8:	0599      	lsls	r1, r3, #22
 800e0da:	d402      	bmi.n	800e0e2 <_fflush_r+0x3a>
 800e0dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e0de:	f000 f915 	bl	800e30c <__retarget_lock_acquire_recursive>
 800e0e2:	4628      	mov	r0, r5
 800e0e4:	4621      	mov	r1, r4
 800e0e6:	f7ff ff5d 	bl	800dfa4 <__sflush_r>
 800e0ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e0ec:	4605      	mov	r5, r0
 800e0ee:	07da      	lsls	r2, r3, #31
 800e0f0:	d4e0      	bmi.n	800e0b4 <_fflush_r+0xc>
 800e0f2:	89a3      	ldrh	r3, [r4, #12]
 800e0f4:	059b      	lsls	r3, r3, #22
 800e0f6:	d4dd      	bmi.n	800e0b4 <_fflush_r+0xc>
 800e0f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e0fa:	f000 f908 	bl	800e30e <__retarget_lock_release_recursive>
 800e0fe:	e7d9      	b.n	800e0b4 <_fflush_r+0xc>
 800e100:	4b05      	ldr	r3, [pc, #20]	; (800e118 <_fflush_r+0x70>)
 800e102:	429c      	cmp	r4, r3
 800e104:	d101      	bne.n	800e10a <_fflush_r+0x62>
 800e106:	68ac      	ldr	r4, [r5, #8]
 800e108:	e7df      	b.n	800e0ca <_fflush_r+0x22>
 800e10a:	4b04      	ldr	r3, [pc, #16]	; (800e11c <_fflush_r+0x74>)
 800e10c:	429c      	cmp	r4, r3
 800e10e:	bf08      	it	eq
 800e110:	68ec      	ldreq	r4, [r5, #12]
 800e112:	e7da      	b.n	800e0ca <_fflush_r+0x22>
 800e114:	0800f3dc 	.word	0x0800f3dc
 800e118:	0800f3fc 	.word	0x0800f3fc
 800e11c:	0800f3bc 	.word	0x0800f3bc

0800e120 <std>:
 800e120:	2300      	movs	r3, #0
 800e122:	b510      	push	{r4, lr}
 800e124:	4604      	mov	r4, r0
 800e126:	e9c0 3300 	strd	r3, r3, [r0]
 800e12a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e12e:	6083      	str	r3, [r0, #8]
 800e130:	8181      	strh	r1, [r0, #12]
 800e132:	6643      	str	r3, [r0, #100]	; 0x64
 800e134:	81c2      	strh	r2, [r0, #14]
 800e136:	6183      	str	r3, [r0, #24]
 800e138:	4619      	mov	r1, r3
 800e13a:	2208      	movs	r2, #8
 800e13c:	305c      	adds	r0, #92	; 0x5c
 800e13e:	f7fb fdcb 	bl	8009cd8 <memset>
 800e142:	4b05      	ldr	r3, [pc, #20]	; (800e158 <std+0x38>)
 800e144:	6224      	str	r4, [r4, #32]
 800e146:	6263      	str	r3, [r4, #36]	; 0x24
 800e148:	4b04      	ldr	r3, [pc, #16]	; (800e15c <std+0x3c>)
 800e14a:	62a3      	str	r3, [r4, #40]	; 0x28
 800e14c:	4b04      	ldr	r3, [pc, #16]	; (800e160 <std+0x40>)
 800e14e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e150:	4b04      	ldr	r3, [pc, #16]	; (800e164 <std+0x44>)
 800e152:	6323      	str	r3, [r4, #48]	; 0x30
 800e154:	bd10      	pop	{r4, pc}
 800e156:	bf00      	nop
 800e158:	0800e475 	.word	0x0800e475
 800e15c:	0800e497 	.word	0x0800e497
 800e160:	0800e4cf 	.word	0x0800e4cf
 800e164:	0800e4f3 	.word	0x0800e4f3

0800e168 <_cleanup_r>:
 800e168:	4901      	ldr	r1, [pc, #4]	; (800e170 <_cleanup_r+0x8>)
 800e16a:	f000 b8af 	b.w	800e2cc <_fwalk_reent>
 800e16e:	bf00      	nop
 800e170:	0800e0a9 	.word	0x0800e0a9

0800e174 <__sfmoreglue>:
 800e174:	2268      	movs	r2, #104	; 0x68
 800e176:	b570      	push	{r4, r5, r6, lr}
 800e178:	1e4d      	subs	r5, r1, #1
 800e17a:	4355      	muls	r5, r2
 800e17c:	460e      	mov	r6, r1
 800e17e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e182:	f7ff fa63 	bl	800d64c <_malloc_r>
 800e186:	4604      	mov	r4, r0
 800e188:	b140      	cbz	r0, 800e19c <__sfmoreglue+0x28>
 800e18a:	2100      	movs	r1, #0
 800e18c:	e9c0 1600 	strd	r1, r6, [r0]
 800e190:	300c      	adds	r0, #12
 800e192:	60a0      	str	r0, [r4, #8]
 800e194:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e198:	f7fb fd9e 	bl	8009cd8 <memset>
 800e19c:	4620      	mov	r0, r4
 800e19e:	bd70      	pop	{r4, r5, r6, pc}

0800e1a0 <__sfp_lock_acquire>:
 800e1a0:	4801      	ldr	r0, [pc, #4]	; (800e1a8 <__sfp_lock_acquire+0x8>)
 800e1a2:	f000 b8b3 	b.w	800e30c <__retarget_lock_acquire_recursive>
 800e1a6:	bf00      	nop
 800e1a8:	20000aad 	.word	0x20000aad

0800e1ac <__sfp_lock_release>:
 800e1ac:	4801      	ldr	r0, [pc, #4]	; (800e1b4 <__sfp_lock_release+0x8>)
 800e1ae:	f000 b8ae 	b.w	800e30e <__retarget_lock_release_recursive>
 800e1b2:	bf00      	nop
 800e1b4:	20000aad 	.word	0x20000aad

0800e1b8 <__sinit_lock_acquire>:
 800e1b8:	4801      	ldr	r0, [pc, #4]	; (800e1c0 <__sinit_lock_acquire+0x8>)
 800e1ba:	f000 b8a7 	b.w	800e30c <__retarget_lock_acquire_recursive>
 800e1be:	bf00      	nop
 800e1c0:	20000aae 	.word	0x20000aae

0800e1c4 <__sinit_lock_release>:
 800e1c4:	4801      	ldr	r0, [pc, #4]	; (800e1cc <__sinit_lock_release+0x8>)
 800e1c6:	f000 b8a2 	b.w	800e30e <__retarget_lock_release_recursive>
 800e1ca:	bf00      	nop
 800e1cc:	20000aae 	.word	0x20000aae

0800e1d0 <__sinit>:
 800e1d0:	b510      	push	{r4, lr}
 800e1d2:	4604      	mov	r4, r0
 800e1d4:	f7ff fff0 	bl	800e1b8 <__sinit_lock_acquire>
 800e1d8:	69a3      	ldr	r3, [r4, #24]
 800e1da:	b11b      	cbz	r3, 800e1e4 <__sinit+0x14>
 800e1dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e1e0:	f7ff bff0 	b.w	800e1c4 <__sinit_lock_release>
 800e1e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e1e8:	6523      	str	r3, [r4, #80]	; 0x50
 800e1ea:	4b13      	ldr	r3, [pc, #76]	; (800e238 <__sinit+0x68>)
 800e1ec:	4a13      	ldr	r2, [pc, #76]	; (800e23c <__sinit+0x6c>)
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	62a2      	str	r2, [r4, #40]	; 0x28
 800e1f2:	42a3      	cmp	r3, r4
 800e1f4:	bf08      	it	eq
 800e1f6:	2301      	moveq	r3, #1
 800e1f8:	4620      	mov	r0, r4
 800e1fa:	bf08      	it	eq
 800e1fc:	61a3      	streq	r3, [r4, #24]
 800e1fe:	f000 f81f 	bl	800e240 <__sfp>
 800e202:	6060      	str	r0, [r4, #4]
 800e204:	4620      	mov	r0, r4
 800e206:	f000 f81b 	bl	800e240 <__sfp>
 800e20a:	60a0      	str	r0, [r4, #8]
 800e20c:	4620      	mov	r0, r4
 800e20e:	f000 f817 	bl	800e240 <__sfp>
 800e212:	2200      	movs	r2, #0
 800e214:	2104      	movs	r1, #4
 800e216:	60e0      	str	r0, [r4, #12]
 800e218:	6860      	ldr	r0, [r4, #4]
 800e21a:	f7ff ff81 	bl	800e120 <std>
 800e21e:	2201      	movs	r2, #1
 800e220:	2109      	movs	r1, #9
 800e222:	68a0      	ldr	r0, [r4, #8]
 800e224:	f7ff ff7c 	bl	800e120 <std>
 800e228:	2202      	movs	r2, #2
 800e22a:	2112      	movs	r1, #18
 800e22c:	68e0      	ldr	r0, [r4, #12]
 800e22e:	f7ff ff77 	bl	800e120 <std>
 800e232:	2301      	movs	r3, #1
 800e234:	61a3      	str	r3, [r4, #24]
 800e236:	e7d1      	b.n	800e1dc <__sinit+0xc>
 800e238:	0800ef78 	.word	0x0800ef78
 800e23c:	0800e169 	.word	0x0800e169

0800e240 <__sfp>:
 800e240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e242:	4607      	mov	r7, r0
 800e244:	f7ff ffac 	bl	800e1a0 <__sfp_lock_acquire>
 800e248:	4b1e      	ldr	r3, [pc, #120]	; (800e2c4 <__sfp+0x84>)
 800e24a:	681e      	ldr	r6, [r3, #0]
 800e24c:	69b3      	ldr	r3, [r6, #24]
 800e24e:	b913      	cbnz	r3, 800e256 <__sfp+0x16>
 800e250:	4630      	mov	r0, r6
 800e252:	f7ff ffbd 	bl	800e1d0 <__sinit>
 800e256:	3648      	adds	r6, #72	; 0x48
 800e258:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e25c:	3b01      	subs	r3, #1
 800e25e:	d503      	bpl.n	800e268 <__sfp+0x28>
 800e260:	6833      	ldr	r3, [r6, #0]
 800e262:	b30b      	cbz	r3, 800e2a8 <__sfp+0x68>
 800e264:	6836      	ldr	r6, [r6, #0]
 800e266:	e7f7      	b.n	800e258 <__sfp+0x18>
 800e268:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e26c:	b9d5      	cbnz	r5, 800e2a4 <__sfp+0x64>
 800e26e:	4b16      	ldr	r3, [pc, #88]	; (800e2c8 <__sfp+0x88>)
 800e270:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e274:	60e3      	str	r3, [r4, #12]
 800e276:	6665      	str	r5, [r4, #100]	; 0x64
 800e278:	f000 f847 	bl	800e30a <__retarget_lock_init_recursive>
 800e27c:	f7ff ff96 	bl	800e1ac <__sfp_lock_release>
 800e280:	2208      	movs	r2, #8
 800e282:	4629      	mov	r1, r5
 800e284:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e288:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e28c:	6025      	str	r5, [r4, #0]
 800e28e:	61a5      	str	r5, [r4, #24]
 800e290:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e294:	f7fb fd20 	bl	8009cd8 <memset>
 800e298:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e29c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e2a0:	4620      	mov	r0, r4
 800e2a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2a4:	3468      	adds	r4, #104	; 0x68
 800e2a6:	e7d9      	b.n	800e25c <__sfp+0x1c>
 800e2a8:	2104      	movs	r1, #4
 800e2aa:	4638      	mov	r0, r7
 800e2ac:	f7ff ff62 	bl	800e174 <__sfmoreglue>
 800e2b0:	4604      	mov	r4, r0
 800e2b2:	6030      	str	r0, [r6, #0]
 800e2b4:	2800      	cmp	r0, #0
 800e2b6:	d1d5      	bne.n	800e264 <__sfp+0x24>
 800e2b8:	f7ff ff78 	bl	800e1ac <__sfp_lock_release>
 800e2bc:	230c      	movs	r3, #12
 800e2be:	603b      	str	r3, [r7, #0]
 800e2c0:	e7ee      	b.n	800e2a0 <__sfp+0x60>
 800e2c2:	bf00      	nop
 800e2c4:	0800ef78 	.word	0x0800ef78
 800e2c8:	ffff0001 	.word	0xffff0001

0800e2cc <_fwalk_reent>:
 800e2cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2d0:	4606      	mov	r6, r0
 800e2d2:	4688      	mov	r8, r1
 800e2d4:	2700      	movs	r7, #0
 800e2d6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e2da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e2de:	f1b9 0901 	subs.w	r9, r9, #1
 800e2e2:	d505      	bpl.n	800e2f0 <_fwalk_reent+0x24>
 800e2e4:	6824      	ldr	r4, [r4, #0]
 800e2e6:	2c00      	cmp	r4, #0
 800e2e8:	d1f7      	bne.n	800e2da <_fwalk_reent+0xe>
 800e2ea:	4638      	mov	r0, r7
 800e2ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2f0:	89ab      	ldrh	r3, [r5, #12]
 800e2f2:	2b01      	cmp	r3, #1
 800e2f4:	d907      	bls.n	800e306 <_fwalk_reent+0x3a>
 800e2f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e2fa:	3301      	adds	r3, #1
 800e2fc:	d003      	beq.n	800e306 <_fwalk_reent+0x3a>
 800e2fe:	4629      	mov	r1, r5
 800e300:	4630      	mov	r0, r6
 800e302:	47c0      	blx	r8
 800e304:	4307      	orrs	r7, r0
 800e306:	3568      	adds	r5, #104	; 0x68
 800e308:	e7e9      	b.n	800e2de <_fwalk_reent+0x12>

0800e30a <__retarget_lock_init_recursive>:
 800e30a:	4770      	bx	lr

0800e30c <__retarget_lock_acquire_recursive>:
 800e30c:	4770      	bx	lr

0800e30e <__retarget_lock_release_recursive>:
 800e30e:	4770      	bx	lr

0800e310 <__swhatbuf_r>:
 800e310:	b570      	push	{r4, r5, r6, lr}
 800e312:	460e      	mov	r6, r1
 800e314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e318:	4614      	mov	r4, r2
 800e31a:	2900      	cmp	r1, #0
 800e31c:	461d      	mov	r5, r3
 800e31e:	b096      	sub	sp, #88	; 0x58
 800e320:	da08      	bge.n	800e334 <__swhatbuf_r+0x24>
 800e322:	2200      	movs	r2, #0
 800e324:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e328:	602a      	str	r2, [r5, #0]
 800e32a:	061a      	lsls	r2, r3, #24
 800e32c:	d410      	bmi.n	800e350 <__swhatbuf_r+0x40>
 800e32e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e332:	e00e      	b.n	800e352 <__swhatbuf_r+0x42>
 800e334:	466a      	mov	r2, sp
 800e336:	f000 f903 	bl	800e540 <_fstat_r>
 800e33a:	2800      	cmp	r0, #0
 800e33c:	dbf1      	blt.n	800e322 <__swhatbuf_r+0x12>
 800e33e:	9a01      	ldr	r2, [sp, #4]
 800e340:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e344:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e348:	425a      	negs	r2, r3
 800e34a:	415a      	adcs	r2, r3
 800e34c:	602a      	str	r2, [r5, #0]
 800e34e:	e7ee      	b.n	800e32e <__swhatbuf_r+0x1e>
 800e350:	2340      	movs	r3, #64	; 0x40
 800e352:	2000      	movs	r0, #0
 800e354:	6023      	str	r3, [r4, #0]
 800e356:	b016      	add	sp, #88	; 0x58
 800e358:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e35c <__smakebuf_r>:
 800e35c:	898b      	ldrh	r3, [r1, #12]
 800e35e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e360:	079d      	lsls	r5, r3, #30
 800e362:	4606      	mov	r6, r0
 800e364:	460c      	mov	r4, r1
 800e366:	d507      	bpl.n	800e378 <__smakebuf_r+0x1c>
 800e368:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e36c:	6023      	str	r3, [r4, #0]
 800e36e:	6123      	str	r3, [r4, #16]
 800e370:	2301      	movs	r3, #1
 800e372:	6163      	str	r3, [r4, #20]
 800e374:	b002      	add	sp, #8
 800e376:	bd70      	pop	{r4, r5, r6, pc}
 800e378:	466a      	mov	r2, sp
 800e37a:	ab01      	add	r3, sp, #4
 800e37c:	f7ff ffc8 	bl	800e310 <__swhatbuf_r>
 800e380:	9900      	ldr	r1, [sp, #0]
 800e382:	4605      	mov	r5, r0
 800e384:	4630      	mov	r0, r6
 800e386:	f7ff f961 	bl	800d64c <_malloc_r>
 800e38a:	b948      	cbnz	r0, 800e3a0 <__smakebuf_r+0x44>
 800e38c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e390:	059a      	lsls	r2, r3, #22
 800e392:	d4ef      	bmi.n	800e374 <__smakebuf_r+0x18>
 800e394:	f023 0303 	bic.w	r3, r3, #3
 800e398:	f043 0302 	orr.w	r3, r3, #2
 800e39c:	81a3      	strh	r3, [r4, #12]
 800e39e:	e7e3      	b.n	800e368 <__smakebuf_r+0xc>
 800e3a0:	4b0d      	ldr	r3, [pc, #52]	; (800e3d8 <__smakebuf_r+0x7c>)
 800e3a2:	62b3      	str	r3, [r6, #40]	; 0x28
 800e3a4:	89a3      	ldrh	r3, [r4, #12]
 800e3a6:	6020      	str	r0, [r4, #0]
 800e3a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e3ac:	81a3      	strh	r3, [r4, #12]
 800e3ae:	9b00      	ldr	r3, [sp, #0]
 800e3b0:	6120      	str	r0, [r4, #16]
 800e3b2:	6163      	str	r3, [r4, #20]
 800e3b4:	9b01      	ldr	r3, [sp, #4]
 800e3b6:	b15b      	cbz	r3, 800e3d0 <__smakebuf_r+0x74>
 800e3b8:	4630      	mov	r0, r6
 800e3ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e3be:	f000 f8d1 	bl	800e564 <_isatty_r>
 800e3c2:	b128      	cbz	r0, 800e3d0 <__smakebuf_r+0x74>
 800e3c4:	89a3      	ldrh	r3, [r4, #12]
 800e3c6:	f023 0303 	bic.w	r3, r3, #3
 800e3ca:	f043 0301 	orr.w	r3, r3, #1
 800e3ce:	81a3      	strh	r3, [r4, #12]
 800e3d0:	89a0      	ldrh	r0, [r4, #12]
 800e3d2:	4305      	orrs	r5, r0
 800e3d4:	81a5      	strh	r5, [r4, #12]
 800e3d6:	e7cd      	b.n	800e374 <__smakebuf_r+0x18>
 800e3d8:	0800e169 	.word	0x0800e169

0800e3dc <_malloc_usable_size_r>:
 800e3dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e3e0:	1f18      	subs	r0, r3, #4
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	bfbc      	itt	lt
 800e3e6:	580b      	ldrlt	r3, [r1, r0]
 800e3e8:	18c0      	addlt	r0, r0, r3
 800e3ea:	4770      	bx	lr

0800e3ec <_raise_r>:
 800e3ec:	291f      	cmp	r1, #31
 800e3ee:	b538      	push	{r3, r4, r5, lr}
 800e3f0:	4604      	mov	r4, r0
 800e3f2:	460d      	mov	r5, r1
 800e3f4:	d904      	bls.n	800e400 <_raise_r+0x14>
 800e3f6:	2316      	movs	r3, #22
 800e3f8:	6003      	str	r3, [r0, #0]
 800e3fa:	f04f 30ff 	mov.w	r0, #4294967295
 800e3fe:	bd38      	pop	{r3, r4, r5, pc}
 800e400:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e402:	b112      	cbz	r2, 800e40a <_raise_r+0x1e>
 800e404:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e408:	b94b      	cbnz	r3, 800e41e <_raise_r+0x32>
 800e40a:	4620      	mov	r0, r4
 800e40c:	f000 f830 	bl	800e470 <_getpid_r>
 800e410:	462a      	mov	r2, r5
 800e412:	4601      	mov	r1, r0
 800e414:	4620      	mov	r0, r4
 800e416:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e41a:	f000 b817 	b.w	800e44c <_kill_r>
 800e41e:	2b01      	cmp	r3, #1
 800e420:	d00a      	beq.n	800e438 <_raise_r+0x4c>
 800e422:	1c59      	adds	r1, r3, #1
 800e424:	d103      	bne.n	800e42e <_raise_r+0x42>
 800e426:	2316      	movs	r3, #22
 800e428:	6003      	str	r3, [r0, #0]
 800e42a:	2001      	movs	r0, #1
 800e42c:	e7e7      	b.n	800e3fe <_raise_r+0x12>
 800e42e:	2400      	movs	r4, #0
 800e430:	4628      	mov	r0, r5
 800e432:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e436:	4798      	blx	r3
 800e438:	2000      	movs	r0, #0
 800e43a:	e7e0      	b.n	800e3fe <_raise_r+0x12>

0800e43c <raise>:
 800e43c:	4b02      	ldr	r3, [pc, #8]	; (800e448 <raise+0xc>)
 800e43e:	4601      	mov	r1, r0
 800e440:	6818      	ldr	r0, [r3, #0]
 800e442:	f7ff bfd3 	b.w	800e3ec <_raise_r>
 800e446:	bf00      	nop
 800e448:	200000a0 	.word	0x200000a0

0800e44c <_kill_r>:
 800e44c:	b538      	push	{r3, r4, r5, lr}
 800e44e:	2300      	movs	r3, #0
 800e450:	4d06      	ldr	r5, [pc, #24]	; (800e46c <_kill_r+0x20>)
 800e452:	4604      	mov	r4, r0
 800e454:	4608      	mov	r0, r1
 800e456:	4611      	mov	r1, r2
 800e458:	602b      	str	r3, [r5, #0]
 800e45a:	f7f6 fece 	bl	80051fa <_kill>
 800e45e:	1c43      	adds	r3, r0, #1
 800e460:	d102      	bne.n	800e468 <_kill_r+0x1c>
 800e462:	682b      	ldr	r3, [r5, #0]
 800e464:	b103      	cbz	r3, 800e468 <_kill_r+0x1c>
 800e466:	6023      	str	r3, [r4, #0]
 800e468:	bd38      	pop	{r3, r4, r5, pc}
 800e46a:	bf00      	nop
 800e46c:	20000aa8 	.word	0x20000aa8

0800e470 <_getpid_r>:
 800e470:	f7f6 bebc 	b.w	80051ec <_getpid>

0800e474 <__sread>:
 800e474:	b510      	push	{r4, lr}
 800e476:	460c      	mov	r4, r1
 800e478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e47c:	f000 f894 	bl	800e5a8 <_read_r>
 800e480:	2800      	cmp	r0, #0
 800e482:	bfab      	itete	ge
 800e484:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e486:	89a3      	ldrhlt	r3, [r4, #12]
 800e488:	181b      	addge	r3, r3, r0
 800e48a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e48e:	bfac      	ite	ge
 800e490:	6563      	strge	r3, [r4, #84]	; 0x54
 800e492:	81a3      	strhlt	r3, [r4, #12]
 800e494:	bd10      	pop	{r4, pc}

0800e496 <__swrite>:
 800e496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e49a:	461f      	mov	r7, r3
 800e49c:	898b      	ldrh	r3, [r1, #12]
 800e49e:	4605      	mov	r5, r0
 800e4a0:	05db      	lsls	r3, r3, #23
 800e4a2:	460c      	mov	r4, r1
 800e4a4:	4616      	mov	r6, r2
 800e4a6:	d505      	bpl.n	800e4b4 <__swrite+0x1e>
 800e4a8:	2302      	movs	r3, #2
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4b0:	f000 f868 	bl	800e584 <_lseek_r>
 800e4b4:	89a3      	ldrh	r3, [r4, #12]
 800e4b6:	4632      	mov	r2, r6
 800e4b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e4bc:	81a3      	strh	r3, [r4, #12]
 800e4be:	4628      	mov	r0, r5
 800e4c0:	463b      	mov	r3, r7
 800e4c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e4c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e4ca:	f000 b817 	b.w	800e4fc <_write_r>

0800e4ce <__sseek>:
 800e4ce:	b510      	push	{r4, lr}
 800e4d0:	460c      	mov	r4, r1
 800e4d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4d6:	f000 f855 	bl	800e584 <_lseek_r>
 800e4da:	1c43      	adds	r3, r0, #1
 800e4dc:	89a3      	ldrh	r3, [r4, #12]
 800e4de:	bf15      	itete	ne
 800e4e0:	6560      	strne	r0, [r4, #84]	; 0x54
 800e4e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e4e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e4ea:	81a3      	strheq	r3, [r4, #12]
 800e4ec:	bf18      	it	ne
 800e4ee:	81a3      	strhne	r3, [r4, #12]
 800e4f0:	bd10      	pop	{r4, pc}

0800e4f2 <__sclose>:
 800e4f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4f6:	f000 b813 	b.w	800e520 <_close_r>
	...

0800e4fc <_write_r>:
 800e4fc:	b538      	push	{r3, r4, r5, lr}
 800e4fe:	4604      	mov	r4, r0
 800e500:	4608      	mov	r0, r1
 800e502:	4611      	mov	r1, r2
 800e504:	2200      	movs	r2, #0
 800e506:	4d05      	ldr	r5, [pc, #20]	; (800e51c <_write_r+0x20>)
 800e508:	602a      	str	r2, [r5, #0]
 800e50a:	461a      	mov	r2, r3
 800e50c:	f7f6 feac 	bl	8005268 <_write>
 800e510:	1c43      	adds	r3, r0, #1
 800e512:	d102      	bne.n	800e51a <_write_r+0x1e>
 800e514:	682b      	ldr	r3, [r5, #0]
 800e516:	b103      	cbz	r3, 800e51a <_write_r+0x1e>
 800e518:	6023      	str	r3, [r4, #0]
 800e51a:	bd38      	pop	{r3, r4, r5, pc}
 800e51c:	20000aa8 	.word	0x20000aa8

0800e520 <_close_r>:
 800e520:	b538      	push	{r3, r4, r5, lr}
 800e522:	2300      	movs	r3, #0
 800e524:	4d05      	ldr	r5, [pc, #20]	; (800e53c <_close_r+0x1c>)
 800e526:	4604      	mov	r4, r0
 800e528:	4608      	mov	r0, r1
 800e52a:	602b      	str	r3, [r5, #0]
 800e52c:	f7f6 feb8 	bl	80052a0 <_close>
 800e530:	1c43      	adds	r3, r0, #1
 800e532:	d102      	bne.n	800e53a <_close_r+0x1a>
 800e534:	682b      	ldr	r3, [r5, #0]
 800e536:	b103      	cbz	r3, 800e53a <_close_r+0x1a>
 800e538:	6023      	str	r3, [r4, #0]
 800e53a:	bd38      	pop	{r3, r4, r5, pc}
 800e53c:	20000aa8 	.word	0x20000aa8

0800e540 <_fstat_r>:
 800e540:	b538      	push	{r3, r4, r5, lr}
 800e542:	2300      	movs	r3, #0
 800e544:	4d06      	ldr	r5, [pc, #24]	; (800e560 <_fstat_r+0x20>)
 800e546:	4604      	mov	r4, r0
 800e548:	4608      	mov	r0, r1
 800e54a:	4611      	mov	r1, r2
 800e54c:	602b      	str	r3, [r5, #0]
 800e54e:	f7f6 feb2 	bl	80052b6 <_fstat>
 800e552:	1c43      	adds	r3, r0, #1
 800e554:	d102      	bne.n	800e55c <_fstat_r+0x1c>
 800e556:	682b      	ldr	r3, [r5, #0]
 800e558:	b103      	cbz	r3, 800e55c <_fstat_r+0x1c>
 800e55a:	6023      	str	r3, [r4, #0]
 800e55c:	bd38      	pop	{r3, r4, r5, pc}
 800e55e:	bf00      	nop
 800e560:	20000aa8 	.word	0x20000aa8

0800e564 <_isatty_r>:
 800e564:	b538      	push	{r3, r4, r5, lr}
 800e566:	2300      	movs	r3, #0
 800e568:	4d05      	ldr	r5, [pc, #20]	; (800e580 <_isatty_r+0x1c>)
 800e56a:	4604      	mov	r4, r0
 800e56c:	4608      	mov	r0, r1
 800e56e:	602b      	str	r3, [r5, #0]
 800e570:	f7f6 feb0 	bl	80052d4 <_isatty>
 800e574:	1c43      	adds	r3, r0, #1
 800e576:	d102      	bne.n	800e57e <_isatty_r+0x1a>
 800e578:	682b      	ldr	r3, [r5, #0]
 800e57a:	b103      	cbz	r3, 800e57e <_isatty_r+0x1a>
 800e57c:	6023      	str	r3, [r4, #0]
 800e57e:	bd38      	pop	{r3, r4, r5, pc}
 800e580:	20000aa8 	.word	0x20000aa8

0800e584 <_lseek_r>:
 800e584:	b538      	push	{r3, r4, r5, lr}
 800e586:	4604      	mov	r4, r0
 800e588:	4608      	mov	r0, r1
 800e58a:	4611      	mov	r1, r2
 800e58c:	2200      	movs	r2, #0
 800e58e:	4d05      	ldr	r5, [pc, #20]	; (800e5a4 <_lseek_r+0x20>)
 800e590:	602a      	str	r2, [r5, #0]
 800e592:	461a      	mov	r2, r3
 800e594:	f7f6 fea8 	bl	80052e8 <_lseek>
 800e598:	1c43      	adds	r3, r0, #1
 800e59a:	d102      	bne.n	800e5a2 <_lseek_r+0x1e>
 800e59c:	682b      	ldr	r3, [r5, #0]
 800e59e:	b103      	cbz	r3, 800e5a2 <_lseek_r+0x1e>
 800e5a0:	6023      	str	r3, [r4, #0]
 800e5a2:	bd38      	pop	{r3, r4, r5, pc}
 800e5a4:	20000aa8 	.word	0x20000aa8

0800e5a8 <_read_r>:
 800e5a8:	b538      	push	{r3, r4, r5, lr}
 800e5aa:	4604      	mov	r4, r0
 800e5ac:	4608      	mov	r0, r1
 800e5ae:	4611      	mov	r1, r2
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	4d05      	ldr	r5, [pc, #20]	; (800e5c8 <_read_r+0x20>)
 800e5b4:	602a      	str	r2, [r5, #0]
 800e5b6:	461a      	mov	r2, r3
 800e5b8:	f7f6 fe39 	bl	800522e <_read>
 800e5bc:	1c43      	adds	r3, r0, #1
 800e5be:	d102      	bne.n	800e5c6 <_read_r+0x1e>
 800e5c0:	682b      	ldr	r3, [r5, #0]
 800e5c2:	b103      	cbz	r3, 800e5c6 <_read_r+0x1e>
 800e5c4:	6023      	str	r3, [r4, #0]
 800e5c6:	bd38      	pop	{r3, r4, r5, pc}
 800e5c8:	20000aa8 	.word	0x20000aa8
 800e5cc:	00000000 	.word	0x00000000

0800e5d0 <atan>:
 800e5d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5d4:	4bb6      	ldr	r3, [pc, #728]	; (800e8b0 <atan+0x2e0>)
 800e5d6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e5da:	429e      	cmp	r6, r3
 800e5dc:	4604      	mov	r4, r0
 800e5de:	460d      	mov	r5, r1
 800e5e0:	468b      	mov	fp, r1
 800e5e2:	dd17      	ble.n	800e614 <atan+0x44>
 800e5e4:	4bb3      	ldr	r3, [pc, #716]	; (800e8b4 <atan+0x2e4>)
 800e5e6:	429e      	cmp	r6, r3
 800e5e8:	dc01      	bgt.n	800e5ee <atan+0x1e>
 800e5ea:	d109      	bne.n	800e600 <atan+0x30>
 800e5ec:	b140      	cbz	r0, 800e600 <atan+0x30>
 800e5ee:	4622      	mov	r2, r4
 800e5f0:	462b      	mov	r3, r5
 800e5f2:	4620      	mov	r0, r4
 800e5f4:	4629      	mov	r1, r5
 800e5f6:	f7f1 fdb9 	bl	800016c <__adddf3>
 800e5fa:	4604      	mov	r4, r0
 800e5fc:	460d      	mov	r5, r1
 800e5fe:	e005      	b.n	800e60c <atan+0x3c>
 800e600:	f1bb 0f00 	cmp.w	fp, #0
 800e604:	4cac      	ldr	r4, [pc, #688]	; (800e8b8 <atan+0x2e8>)
 800e606:	f300 8121 	bgt.w	800e84c <atan+0x27c>
 800e60a:	4dac      	ldr	r5, [pc, #688]	; (800e8bc <atan+0x2ec>)
 800e60c:	4620      	mov	r0, r4
 800e60e:	4629      	mov	r1, r5
 800e610:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e614:	4baa      	ldr	r3, [pc, #680]	; (800e8c0 <atan+0x2f0>)
 800e616:	429e      	cmp	r6, r3
 800e618:	dc11      	bgt.n	800e63e <atan+0x6e>
 800e61a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800e61e:	429e      	cmp	r6, r3
 800e620:	dc0a      	bgt.n	800e638 <atan+0x68>
 800e622:	a38b      	add	r3, pc, #556	; (adr r3, 800e850 <atan+0x280>)
 800e624:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e628:	f7f1 fda0 	bl	800016c <__adddf3>
 800e62c:	2200      	movs	r2, #0
 800e62e:	4ba5      	ldr	r3, [pc, #660]	; (800e8c4 <atan+0x2f4>)
 800e630:	f7f2 f9e2 	bl	80009f8 <__aeabi_dcmpgt>
 800e634:	2800      	cmp	r0, #0
 800e636:	d1e9      	bne.n	800e60c <atan+0x3c>
 800e638:	f04f 3aff 	mov.w	sl, #4294967295
 800e63c:	e027      	b.n	800e68e <atan+0xbe>
 800e63e:	f000 f951 	bl	800e8e4 <fabs>
 800e642:	4ba1      	ldr	r3, [pc, #644]	; (800e8c8 <atan+0x2f8>)
 800e644:	4604      	mov	r4, r0
 800e646:	429e      	cmp	r6, r3
 800e648:	460d      	mov	r5, r1
 800e64a:	f300 80b8 	bgt.w	800e7be <atan+0x1ee>
 800e64e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800e652:	429e      	cmp	r6, r3
 800e654:	f300 809c 	bgt.w	800e790 <atan+0x1c0>
 800e658:	4602      	mov	r2, r0
 800e65a:	460b      	mov	r3, r1
 800e65c:	f7f1 fd86 	bl	800016c <__adddf3>
 800e660:	2200      	movs	r2, #0
 800e662:	4b98      	ldr	r3, [pc, #608]	; (800e8c4 <atan+0x2f4>)
 800e664:	f7f1 fd80 	bl	8000168 <__aeabi_dsub>
 800e668:	2200      	movs	r2, #0
 800e66a:	4606      	mov	r6, r0
 800e66c:	460f      	mov	r7, r1
 800e66e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e672:	4620      	mov	r0, r4
 800e674:	4629      	mov	r1, r5
 800e676:	f7f1 fd79 	bl	800016c <__adddf3>
 800e67a:	4602      	mov	r2, r0
 800e67c:	460b      	mov	r3, r1
 800e67e:	4630      	mov	r0, r6
 800e680:	4639      	mov	r1, r7
 800e682:	f7f2 f853 	bl	800072c <__aeabi_ddiv>
 800e686:	f04f 0a00 	mov.w	sl, #0
 800e68a:	4604      	mov	r4, r0
 800e68c:	460d      	mov	r5, r1
 800e68e:	4622      	mov	r2, r4
 800e690:	462b      	mov	r3, r5
 800e692:	4620      	mov	r0, r4
 800e694:	4629      	mov	r1, r5
 800e696:	f7f1 ff1f 	bl	80004d8 <__aeabi_dmul>
 800e69a:	4602      	mov	r2, r0
 800e69c:	460b      	mov	r3, r1
 800e69e:	4680      	mov	r8, r0
 800e6a0:	4689      	mov	r9, r1
 800e6a2:	f7f1 ff19 	bl	80004d8 <__aeabi_dmul>
 800e6a6:	a36c      	add	r3, pc, #432	; (adr r3, 800e858 <atan+0x288>)
 800e6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ac:	4606      	mov	r6, r0
 800e6ae:	460f      	mov	r7, r1
 800e6b0:	f7f1 ff12 	bl	80004d8 <__aeabi_dmul>
 800e6b4:	a36a      	add	r3, pc, #424	; (adr r3, 800e860 <atan+0x290>)
 800e6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ba:	f7f1 fd57 	bl	800016c <__adddf3>
 800e6be:	4632      	mov	r2, r6
 800e6c0:	463b      	mov	r3, r7
 800e6c2:	f7f1 ff09 	bl	80004d8 <__aeabi_dmul>
 800e6c6:	a368      	add	r3, pc, #416	; (adr r3, 800e868 <atan+0x298>)
 800e6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6cc:	f7f1 fd4e 	bl	800016c <__adddf3>
 800e6d0:	4632      	mov	r2, r6
 800e6d2:	463b      	mov	r3, r7
 800e6d4:	f7f1 ff00 	bl	80004d8 <__aeabi_dmul>
 800e6d8:	a365      	add	r3, pc, #404	; (adr r3, 800e870 <atan+0x2a0>)
 800e6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6de:	f7f1 fd45 	bl	800016c <__adddf3>
 800e6e2:	4632      	mov	r2, r6
 800e6e4:	463b      	mov	r3, r7
 800e6e6:	f7f1 fef7 	bl	80004d8 <__aeabi_dmul>
 800e6ea:	a363      	add	r3, pc, #396	; (adr r3, 800e878 <atan+0x2a8>)
 800e6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6f0:	f7f1 fd3c 	bl	800016c <__adddf3>
 800e6f4:	4632      	mov	r2, r6
 800e6f6:	463b      	mov	r3, r7
 800e6f8:	f7f1 feee 	bl	80004d8 <__aeabi_dmul>
 800e6fc:	a360      	add	r3, pc, #384	; (adr r3, 800e880 <atan+0x2b0>)
 800e6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e702:	f7f1 fd33 	bl	800016c <__adddf3>
 800e706:	4642      	mov	r2, r8
 800e708:	464b      	mov	r3, r9
 800e70a:	f7f1 fee5 	bl	80004d8 <__aeabi_dmul>
 800e70e:	a35e      	add	r3, pc, #376	; (adr r3, 800e888 <atan+0x2b8>)
 800e710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e714:	4680      	mov	r8, r0
 800e716:	4689      	mov	r9, r1
 800e718:	4630      	mov	r0, r6
 800e71a:	4639      	mov	r1, r7
 800e71c:	f7f1 fedc 	bl	80004d8 <__aeabi_dmul>
 800e720:	a35b      	add	r3, pc, #364	; (adr r3, 800e890 <atan+0x2c0>)
 800e722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e726:	f7f1 fd1f 	bl	8000168 <__aeabi_dsub>
 800e72a:	4632      	mov	r2, r6
 800e72c:	463b      	mov	r3, r7
 800e72e:	f7f1 fed3 	bl	80004d8 <__aeabi_dmul>
 800e732:	a359      	add	r3, pc, #356	; (adr r3, 800e898 <atan+0x2c8>)
 800e734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e738:	f7f1 fd16 	bl	8000168 <__aeabi_dsub>
 800e73c:	4632      	mov	r2, r6
 800e73e:	463b      	mov	r3, r7
 800e740:	f7f1 feca 	bl	80004d8 <__aeabi_dmul>
 800e744:	a356      	add	r3, pc, #344	; (adr r3, 800e8a0 <atan+0x2d0>)
 800e746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e74a:	f7f1 fd0d 	bl	8000168 <__aeabi_dsub>
 800e74e:	4632      	mov	r2, r6
 800e750:	463b      	mov	r3, r7
 800e752:	f7f1 fec1 	bl	80004d8 <__aeabi_dmul>
 800e756:	a354      	add	r3, pc, #336	; (adr r3, 800e8a8 <atan+0x2d8>)
 800e758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e75c:	f7f1 fd04 	bl	8000168 <__aeabi_dsub>
 800e760:	4632      	mov	r2, r6
 800e762:	463b      	mov	r3, r7
 800e764:	f7f1 feb8 	bl	80004d8 <__aeabi_dmul>
 800e768:	4602      	mov	r2, r0
 800e76a:	460b      	mov	r3, r1
 800e76c:	4640      	mov	r0, r8
 800e76e:	4649      	mov	r1, r9
 800e770:	f7f1 fcfc 	bl	800016c <__adddf3>
 800e774:	4622      	mov	r2, r4
 800e776:	462b      	mov	r3, r5
 800e778:	f7f1 feae 	bl	80004d8 <__aeabi_dmul>
 800e77c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800e780:	4602      	mov	r2, r0
 800e782:	460b      	mov	r3, r1
 800e784:	d144      	bne.n	800e810 <atan+0x240>
 800e786:	4620      	mov	r0, r4
 800e788:	4629      	mov	r1, r5
 800e78a:	f7f1 fced 	bl	8000168 <__aeabi_dsub>
 800e78e:	e734      	b.n	800e5fa <atan+0x2a>
 800e790:	2200      	movs	r2, #0
 800e792:	4b4c      	ldr	r3, [pc, #304]	; (800e8c4 <atan+0x2f4>)
 800e794:	f7f1 fce8 	bl	8000168 <__aeabi_dsub>
 800e798:	2200      	movs	r2, #0
 800e79a:	4606      	mov	r6, r0
 800e79c:	460f      	mov	r7, r1
 800e79e:	4620      	mov	r0, r4
 800e7a0:	4629      	mov	r1, r5
 800e7a2:	4b48      	ldr	r3, [pc, #288]	; (800e8c4 <atan+0x2f4>)
 800e7a4:	f7f1 fce2 	bl	800016c <__adddf3>
 800e7a8:	4602      	mov	r2, r0
 800e7aa:	460b      	mov	r3, r1
 800e7ac:	4630      	mov	r0, r6
 800e7ae:	4639      	mov	r1, r7
 800e7b0:	f7f1 ffbc 	bl	800072c <__aeabi_ddiv>
 800e7b4:	f04f 0a01 	mov.w	sl, #1
 800e7b8:	4604      	mov	r4, r0
 800e7ba:	460d      	mov	r5, r1
 800e7bc:	e767      	b.n	800e68e <atan+0xbe>
 800e7be:	4b43      	ldr	r3, [pc, #268]	; (800e8cc <atan+0x2fc>)
 800e7c0:	429e      	cmp	r6, r3
 800e7c2:	da1a      	bge.n	800e7fa <atan+0x22a>
 800e7c4:	2200      	movs	r2, #0
 800e7c6:	4b42      	ldr	r3, [pc, #264]	; (800e8d0 <atan+0x300>)
 800e7c8:	f7f1 fcce 	bl	8000168 <__aeabi_dsub>
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	4606      	mov	r6, r0
 800e7d0:	460f      	mov	r7, r1
 800e7d2:	4620      	mov	r0, r4
 800e7d4:	4629      	mov	r1, r5
 800e7d6:	4b3e      	ldr	r3, [pc, #248]	; (800e8d0 <atan+0x300>)
 800e7d8:	f7f1 fe7e 	bl	80004d8 <__aeabi_dmul>
 800e7dc:	2200      	movs	r2, #0
 800e7de:	4b39      	ldr	r3, [pc, #228]	; (800e8c4 <atan+0x2f4>)
 800e7e0:	f7f1 fcc4 	bl	800016c <__adddf3>
 800e7e4:	4602      	mov	r2, r0
 800e7e6:	460b      	mov	r3, r1
 800e7e8:	4630      	mov	r0, r6
 800e7ea:	4639      	mov	r1, r7
 800e7ec:	f7f1 ff9e 	bl	800072c <__aeabi_ddiv>
 800e7f0:	f04f 0a02 	mov.w	sl, #2
 800e7f4:	4604      	mov	r4, r0
 800e7f6:	460d      	mov	r5, r1
 800e7f8:	e749      	b.n	800e68e <atan+0xbe>
 800e7fa:	4602      	mov	r2, r0
 800e7fc:	460b      	mov	r3, r1
 800e7fe:	2000      	movs	r0, #0
 800e800:	4934      	ldr	r1, [pc, #208]	; (800e8d4 <atan+0x304>)
 800e802:	f7f1 ff93 	bl	800072c <__aeabi_ddiv>
 800e806:	f04f 0a03 	mov.w	sl, #3
 800e80a:	4604      	mov	r4, r0
 800e80c:	460d      	mov	r5, r1
 800e80e:	e73e      	b.n	800e68e <atan+0xbe>
 800e810:	4b31      	ldr	r3, [pc, #196]	; (800e8d8 <atan+0x308>)
 800e812:	4e32      	ldr	r6, [pc, #200]	; (800e8dc <atan+0x30c>)
 800e814:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800e818:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800e81c:	e9da 2300 	ldrd	r2, r3, [sl]
 800e820:	f7f1 fca2 	bl	8000168 <__aeabi_dsub>
 800e824:	4622      	mov	r2, r4
 800e826:	462b      	mov	r3, r5
 800e828:	f7f1 fc9e 	bl	8000168 <__aeabi_dsub>
 800e82c:	4602      	mov	r2, r0
 800e82e:	460b      	mov	r3, r1
 800e830:	e9d6 0100 	ldrd	r0, r1, [r6]
 800e834:	f7f1 fc98 	bl	8000168 <__aeabi_dsub>
 800e838:	f1bb 0f00 	cmp.w	fp, #0
 800e83c:	4604      	mov	r4, r0
 800e83e:	460d      	mov	r5, r1
 800e840:	f6bf aee4 	bge.w	800e60c <atan+0x3c>
 800e844:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e848:	461d      	mov	r5, r3
 800e84a:	e6df      	b.n	800e60c <atan+0x3c>
 800e84c:	4d24      	ldr	r5, [pc, #144]	; (800e8e0 <atan+0x310>)
 800e84e:	e6dd      	b.n	800e60c <atan+0x3c>
 800e850:	8800759c 	.word	0x8800759c
 800e854:	7e37e43c 	.word	0x7e37e43c
 800e858:	e322da11 	.word	0xe322da11
 800e85c:	3f90ad3a 	.word	0x3f90ad3a
 800e860:	24760deb 	.word	0x24760deb
 800e864:	3fa97b4b 	.word	0x3fa97b4b
 800e868:	a0d03d51 	.word	0xa0d03d51
 800e86c:	3fb10d66 	.word	0x3fb10d66
 800e870:	c54c206e 	.word	0xc54c206e
 800e874:	3fb745cd 	.word	0x3fb745cd
 800e878:	920083ff 	.word	0x920083ff
 800e87c:	3fc24924 	.word	0x3fc24924
 800e880:	5555550d 	.word	0x5555550d
 800e884:	3fd55555 	.word	0x3fd55555
 800e888:	2c6a6c2f 	.word	0x2c6a6c2f
 800e88c:	bfa2b444 	.word	0xbfa2b444
 800e890:	52defd9a 	.word	0x52defd9a
 800e894:	3fadde2d 	.word	0x3fadde2d
 800e898:	af749a6d 	.word	0xaf749a6d
 800e89c:	3fb3b0f2 	.word	0x3fb3b0f2
 800e8a0:	fe231671 	.word	0xfe231671
 800e8a4:	3fbc71c6 	.word	0x3fbc71c6
 800e8a8:	9998ebc4 	.word	0x9998ebc4
 800e8ac:	3fc99999 	.word	0x3fc99999
 800e8b0:	440fffff 	.word	0x440fffff
 800e8b4:	7ff00000 	.word	0x7ff00000
 800e8b8:	54442d18 	.word	0x54442d18
 800e8bc:	bff921fb 	.word	0xbff921fb
 800e8c0:	3fdbffff 	.word	0x3fdbffff
 800e8c4:	3ff00000 	.word	0x3ff00000
 800e8c8:	3ff2ffff 	.word	0x3ff2ffff
 800e8cc:	40038000 	.word	0x40038000
 800e8d0:	3ff80000 	.word	0x3ff80000
 800e8d4:	bff00000 	.word	0xbff00000
 800e8d8:	0800f440 	.word	0x0800f440
 800e8dc:	0800f420 	.word	0x0800f420
 800e8e0:	3ff921fb 	.word	0x3ff921fb

0800e8e4 <fabs>:
 800e8e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e8e8:	4770      	bx	lr

0800e8ea <atan2>:
 800e8ea:	f000 b825 	b.w	800e938 <__ieee754_atan2>

0800e8ee <sqrt>:
 800e8ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8f0:	4606      	mov	r6, r0
 800e8f2:	460f      	mov	r7, r1
 800e8f4:	f000 f8f2 	bl	800eadc <__ieee754_sqrt>
 800e8f8:	4632      	mov	r2, r6
 800e8fa:	4604      	mov	r4, r0
 800e8fc:	460d      	mov	r5, r1
 800e8fe:	463b      	mov	r3, r7
 800e900:	4630      	mov	r0, r6
 800e902:	4639      	mov	r1, r7
 800e904:	f7f2 f882 	bl	8000a0c <__aeabi_dcmpun>
 800e908:	b990      	cbnz	r0, 800e930 <sqrt+0x42>
 800e90a:	2200      	movs	r2, #0
 800e90c:	2300      	movs	r3, #0
 800e90e:	4630      	mov	r0, r6
 800e910:	4639      	mov	r1, r7
 800e912:	f7f2 f853 	bl	80009bc <__aeabi_dcmplt>
 800e916:	b158      	cbz	r0, 800e930 <sqrt+0x42>
 800e918:	f7fb f9b4 	bl	8009c84 <__errno>
 800e91c:	2321      	movs	r3, #33	; 0x21
 800e91e:	2200      	movs	r2, #0
 800e920:	6003      	str	r3, [r0, #0]
 800e922:	2300      	movs	r3, #0
 800e924:	4610      	mov	r0, r2
 800e926:	4619      	mov	r1, r3
 800e928:	f7f1 ff00 	bl	800072c <__aeabi_ddiv>
 800e92c:	4604      	mov	r4, r0
 800e92e:	460d      	mov	r5, r1
 800e930:	4620      	mov	r0, r4
 800e932:	4629      	mov	r1, r5
 800e934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e938 <__ieee754_atan2>:
 800e938:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e93c:	4692      	mov	sl, r2
 800e93e:	4699      	mov	r9, r3
 800e940:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800e944:	461f      	mov	r7, r3
 800e946:	f1ca 0300 	rsb	r3, sl, #0
 800e94a:	f8df e184 	ldr.w	lr, [pc, #388]	; 800ead0 <__ieee754_atan2+0x198>
 800e94e:	ea43 030a 	orr.w	r3, r3, sl
 800e952:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800e956:	4573      	cmp	r3, lr
 800e958:	4604      	mov	r4, r0
 800e95a:	460d      	mov	r5, r1
 800e95c:	d808      	bhi.n	800e970 <__ieee754_atan2+0x38>
 800e95e:	4246      	negs	r6, r0
 800e960:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e964:	4306      	orrs	r6, r0
 800e966:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800e96a:	4576      	cmp	r6, lr
 800e96c:	468c      	mov	ip, r1
 800e96e:	d908      	bls.n	800e982 <__ieee754_atan2+0x4a>
 800e970:	4652      	mov	r2, sl
 800e972:	464b      	mov	r3, r9
 800e974:	4620      	mov	r0, r4
 800e976:	4629      	mov	r1, r5
 800e978:	f7f1 fbf8 	bl	800016c <__adddf3>
 800e97c:	4604      	mov	r4, r0
 800e97e:	460d      	mov	r5, r1
 800e980:	e019      	b.n	800e9b6 <__ieee754_atan2+0x7e>
 800e982:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 800e986:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800e98a:	ea56 060a 	orrs.w	r6, r6, sl
 800e98e:	d103      	bne.n	800e998 <__ieee754_atan2+0x60>
 800e990:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e994:	f7ff be1c 	b.w	800e5d0 <atan>
 800e998:	17be      	asrs	r6, r7, #30
 800e99a:	f006 0602 	and.w	r6, r6, #2
 800e99e:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800e9a2:	ea53 0100 	orrs.w	r1, r3, r0
 800e9a6:	d10a      	bne.n	800e9be <__ieee754_atan2+0x86>
 800e9a8:	2e02      	cmp	r6, #2
 800e9aa:	d067      	beq.n	800ea7c <__ieee754_atan2+0x144>
 800e9ac:	2e03      	cmp	r6, #3
 800e9ae:	d102      	bne.n	800e9b6 <__ieee754_atan2+0x7e>
 800e9b0:	a53b      	add	r5, pc, #236	; (adr r5, 800eaa0 <__ieee754_atan2+0x168>)
 800e9b2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e9b6:	4620      	mov	r0, r4
 800e9b8:	4629      	mov	r1, r5
 800e9ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9be:	ea52 010a 	orrs.w	r1, r2, sl
 800e9c2:	d106      	bne.n	800e9d2 <__ieee754_atan2+0x9a>
 800e9c4:	f1bc 0f00 	cmp.w	ip, #0
 800e9c8:	da63      	bge.n	800ea92 <__ieee754_atan2+0x15a>
 800e9ca:	a537      	add	r5, pc, #220	; (adr r5, 800eaa8 <__ieee754_atan2+0x170>)
 800e9cc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e9d0:	e7f1      	b.n	800e9b6 <__ieee754_atan2+0x7e>
 800e9d2:	4572      	cmp	r2, lr
 800e9d4:	d10f      	bne.n	800e9f6 <__ieee754_atan2+0xbe>
 800e9d6:	4293      	cmp	r3, r2
 800e9d8:	f106 36ff 	add.w	r6, r6, #4294967295
 800e9dc:	d107      	bne.n	800e9ee <__ieee754_atan2+0xb6>
 800e9de:	2e02      	cmp	r6, #2
 800e9e0:	d850      	bhi.n	800ea84 <__ieee754_atan2+0x14c>
 800e9e2:	4b3c      	ldr	r3, [pc, #240]	; (800ead4 <__ieee754_atan2+0x19c>)
 800e9e4:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800e9e8:	e9d6 4500 	ldrd	r4, r5, [r6]
 800e9ec:	e7e3      	b.n	800e9b6 <__ieee754_atan2+0x7e>
 800e9ee:	2e02      	cmp	r6, #2
 800e9f0:	d84c      	bhi.n	800ea8c <__ieee754_atan2+0x154>
 800e9f2:	4b39      	ldr	r3, [pc, #228]	; (800ead8 <__ieee754_atan2+0x1a0>)
 800e9f4:	e7f6      	b.n	800e9e4 <__ieee754_atan2+0xac>
 800e9f6:	4573      	cmp	r3, lr
 800e9f8:	d0e4      	beq.n	800e9c4 <__ieee754_atan2+0x8c>
 800e9fa:	1a9b      	subs	r3, r3, r2
 800e9fc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800ea00:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ea04:	da20      	bge.n	800ea48 <__ieee754_atan2+0x110>
 800ea06:	2f00      	cmp	r7, #0
 800ea08:	da01      	bge.n	800ea0e <__ieee754_atan2+0xd6>
 800ea0a:	323c      	adds	r2, #60	; 0x3c
 800ea0c:	db20      	blt.n	800ea50 <__ieee754_atan2+0x118>
 800ea0e:	4652      	mov	r2, sl
 800ea10:	464b      	mov	r3, r9
 800ea12:	4620      	mov	r0, r4
 800ea14:	4629      	mov	r1, r5
 800ea16:	f7f1 fe89 	bl	800072c <__aeabi_ddiv>
 800ea1a:	f7ff ff63 	bl	800e8e4 <fabs>
 800ea1e:	f7ff fdd7 	bl	800e5d0 <atan>
 800ea22:	4604      	mov	r4, r0
 800ea24:	460d      	mov	r5, r1
 800ea26:	2e01      	cmp	r6, #1
 800ea28:	d015      	beq.n	800ea56 <__ieee754_atan2+0x11e>
 800ea2a:	2e02      	cmp	r6, #2
 800ea2c:	d017      	beq.n	800ea5e <__ieee754_atan2+0x126>
 800ea2e:	2e00      	cmp	r6, #0
 800ea30:	d0c1      	beq.n	800e9b6 <__ieee754_atan2+0x7e>
 800ea32:	a31f      	add	r3, pc, #124	; (adr r3, 800eab0 <__ieee754_atan2+0x178>)
 800ea34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea38:	4620      	mov	r0, r4
 800ea3a:	4629      	mov	r1, r5
 800ea3c:	f7f1 fb94 	bl	8000168 <__aeabi_dsub>
 800ea40:	a31d      	add	r3, pc, #116	; (adr r3, 800eab8 <__ieee754_atan2+0x180>)
 800ea42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea46:	e016      	b.n	800ea76 <__ieee754_atan2+0x13e>
 800ea48:	a51d      	add	r5, pc, #116	; (adr r5, 800eac0 <__ieee754_atan2+0x188>)
 800ea4a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ea4e:	e7ea      	b.n	800ea26 <__ieee754_atan2+0xee>
 800ea50:	2400      	movs	r4, #0
 800ea52:	2500      	movs	r5, #0
 800ea54:	e7e7      	b.n	800ea26 <__ieee754_atan2+0xee>
 800ea56:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800ea5a:	461d      	mov	r5, r3
 800ea5c:	e7ab      	b.n	800e9b6 <__ieee754_atan2+0x7e>
 800ea5e:	a314      	add	r3, pc, #80	; (adr r3, 800eab0 <__ieee754_atan2+0x178>)
 800ea60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea64:	4620      	mov	r0, r4
 800ea66:	4629      	mov	r1, r5
 800ea68:	f7f1 fb7e 	bl	8000168 <__aeabi_dsub>
 800ea6c:	4602      	mov	r2, r0
 800ea6e:	460b      	mov	r3, r1
 800ea70:	a111      	add	r1, pc, #68	; (adr r1, 800eab8 <__ieee754_atan2+0x180>)
 800ea72:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ea76:	f7f1 fb77 	bl	8000168 <__aeabi_dsub>
 800ea7a:	e77f      	b.n	800e97c <__ieee754_atan2+0x44>
 800ea7c:	a50e      	add	r5, pc, #56	; (adr r5, 800eab8 <__ieee754_atan2+0x180>)
 800ea7e:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ea82:	e798      	b.n	800e9b6 <__ieee754_atan2+0x7e>
 800ea84:	a510      	add	r5, pc, #64	; (adr r5, 800eac8 <__ieee754_atan2+0x190>)
 800ea86:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ea8a:	e794      	b.n	800e9b6 <__ieee754_atan2+0x7e>
 800ea8c:	2400      	movs	r4, #0
 800ea8e:	2500      	movs	r5, #0
 800ea90:	e791      	b.n	800e9b6 <__ieee754_atan2+0x7e>
 800ea92:	a50b      	add	r5, pc, #44	; (adr r5, 800eac0 <__ieee754_atan2+0x188>)
 800ea94:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ea98:	e78d      	b.n	800e9b6 <__ieee754_atan2+0x7e>
 800ea9a:	bf00      	nop
 800ea9c:	f3af 8000 	nop.w
 800eaa0:	54442d18 	.word	0x54442d18
 800eaa4:	c00921fb 	.word	0xc00921fb
 800eaa8:	54442d18 	.word	0x54442d18
 800eaac:	bff921fb 	.word	0xbff921fb
 800eab0:	33145c07 	.word	0x33145c07
 800eab4:	3ca1a626 	.word	0x3ca1a626
 800eab8:	54442d18 	.word	0x54442d18
 800eabc:	400921fb 	.word	0x400921fb
 800eac0:	54442d18 	.word	0x54442d18
 800eac4:	3ff921fb 	.word	0x3ff921fb
 800eac8:	54442d18 	.word	0x54442d18
 800eacc:	3fe921fb 	.word	0x3fe921fb
 800ead0:	7ff00000 	.word	0x7ff00000
 800ead4:	0800f460 	.word	0x0800f460
 800ead8:	0800f478 	.word	0x0800f478

0800eadc <__ieee754_sqrt>:
 800eadc:	f8df c158 	ldr.w	ip, [pc, #344]	; 800ec38 <__ieee754_sqrt+0x15c>
 800eae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eae4:	ea3c 0c01 	bics.w	ip, ip, r1
 800eae8:	4606      	mov	r6, r0
 800eaea:	460d      	mov	r5, r1
 800eaec:	460c      	mov	r4, r1
 800eaee:	460a      	mov	r2, r1
 800eaf0:	4607      	mov	r7, r0
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	d10f      	bne.n	800eb16 <__ieee754_sqrt+0x3a>
 800eaf6:	4602      	mov	r2, r0
 800eaf8:	460b      	mov	r3, r1
 800eafa:	f7f1 fced 	bl	80004d8 <__aeabi_dmul>
 800eafe:	4602      	mov	r2, r0
 800eb00:	460b      	mov	r3, r1
 800eb02:	4630      	mov	r0, r6
 800eb04:	4629      	mov	r1, r5
 800eb06:	f7f1 fb31 	bl	800016c <__adddf3>
 800eb0a:	4606      	mov	r6, r0
 800eb0c:	460d      	mov	r5, r1
 800eb0e:	4630      	mov	r0, r6
 800eb10:	4629      	mov	r1, r5
 800eb12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb16:	2900      	cmp	r1, #0
 800eb18:	dc0e      	bgt.n	800eb38 <__ieee754_sqrt+0x5c>
 800eb1a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800eb1e:	ea5c 0707 	orrs.w	r7, ip, r7
 800eb22:	d0f4      	beq.n	800eb0e <__ieee754_sqrt+0x32>
 800eb24:	b141      	cbz	r1, 800eb38 <__ieee754_sqrt+0x5c>
 800eb26:	4602      	mov	r2, r0
 800eb28:	460b      	mov	r3, r1
 800eb2a:	f7f1 fb1d 	bl	8000168 <__aeabi_dsub>
 800eb2e:	4602      	mov	r2, r0
 800eb30:	460b      	mov	r3, r1
 800eb32:	f7f1 fdfb 	bl	800072c <__aeabi_ddiv>
 800eb36:	e7e8      	b.n	800eb0a <__ieee754_sqrt+0x2e>
 800eb38:	1521      	asrs	r1, r4, #20
 800eb3a:	d075      	beq.n	800ec28 <__ieee754_sqrt+0x14c>
 800eb3c:	07cc      	lsls	r4, r1, #31
 800eb3e:	f04f 0400 	mov.w	r4, #0
 800eb42:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800eb46:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800eb4a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800eb4e:	bf5e      	ittt	pl
 800eb50:	0fd9      	lsrpl	r1, r3, #31
 800eb52:	005b      	lslpl	r3, r3, #1
 800eb54:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800eb58:	0fd9      	lsrs	r1, r3, #31
 800eb5a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800eb5e:	2516      	movs	r5, #22
 800eb60:	4620      	mov	r0, r4
 800eb62:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800eb66:	107f      	asrs	r7, r7, #1
 800eb68:	005b      	lsls	r3, r3, #1
 800eb6a:	1846      	adds	r6, r0, r1
 800eb6c:	4296      	cmp	r6, r2
 800eb6e:	bfde      	ittt	le
 800eb70:	1b92      	suble	r2, r2, r6
 800eb72:	1870      	addle	r0, r6, r1
 800eb74:	1864      	addle	r4, r4, r1
 800eb76:	0052      	lsls	r2, r2, #1
 800eb78:	3d01      	subs	r5, #1
 800eb7a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800eb7e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800eb82:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800eb86:	d1f0      	bne.n	800eb6a <__ieee754_sqrt+0x8e>
 800eb88:	4629      	mov	r1, r5
 800eb8a:	f04f 0e20 	mov.w	lr, #32
 800eb8e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800eb92:	4282      	cmp	r2, r0
 800eb94:	eb06 0c05 	add.w	ip, r6, r5
 800eb98:	dc02      	bgt.n	800eba0 <__ieee754_sqrt+0xc4>
 800eb9a:	d113      	bne.n	800ebc4 <__ieee754_sqrt+0xe8>
 800eb9c:	459c      	cmp	ip, r3
 800eb9e:	d811      	bhi.n	800ebc4 <__ieee754_sqrt+0xe8>
 800eba0:	f1bc 0f00 	cmp.w	ip, #0
 800eba4:	eb0c 0506 	add.w	r5, ip, r6
 800eba8:	da43      	bge.n	800ec32 <__ieee754_sqrt+0x156>
 800ebaa:	2d00      	cmp	r5, #0
 800ebac:	db41      	blt.n	800ec32 <__ieee754_sqrt+0x156>
 800ebae:	f100 0801 	add.w	r8, r0, #1
 800ebb2:	1a12      	subs	r2, r2, r0
 800ebb4:	4640      	mov	r0, r8
 800ebb6:	459c      	cmp	ip, r3
 800ebb8:	bf88      	it	hi
 800ebba:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800ebbe:	eba3 030c 	sub.w	r3, r3, ip
 800ebc2:	4431      	add	r1, r6
 800ebc4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800ebc8:	f1be 0e01 	subs.w	lr, lr, #1
 800ebcc:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800ebd0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ebd4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ebd8:	d1db      	bne.n	800eb92 <__ieee754_sqrt+0xb6>
 800ebda:	4313      	orrs	r3, r2
 800ebdc:	d006      	beq.n	800ebec <__ieee754_sqrt+0x110>
 800ebde:	1c48      	adds	r0, r1, #1
 800ebe0:	bf0b      	itete	eq
 800ebe2:	4671      	moveq	r1, lr
 800ebe4:	3101      	addne	r1, #1
 800ebe6:	3401      	addeq	r4, #1
 800ebe8:	f021 0101 	bicne.w	r1, r1, #1
 800ebec:	1063      	asrs	r3, r4, #1
 800ebee:	0849      	lsrs	r1, r1, #1
 800ebf0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ebf4:	07e2      	lsls	r2, r4, #31
 800ebf6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ebfa:	bf48      	it	mi
 800ebfc:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800ec00:	460e      	mov	r6, r1
 800ec02:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800ec06:	e782      	b.n	800eb0e <__ieee754_sqrt+0x32>
 800ec08:	0ada      	lsrs	r2, r3, #11
 800ec0a:	3815      	subs	r0, #21
 800ec0c:	055b      	lsls	r3, r3, #21
 800ec0e:	2a00      	cmp	r2, #0
 800ec10:	d0fa      	beq.n	800ec08 <__ieee754_sqrt+0x12c>
 800ec12:	02d5      	lsls	r5, r2, #11
 800ec14:	d50a      	bpl.n	800ec2c <__ieee754_sqrt+0x150>
 800ec16:	f1c1 0420 	rsb	r4, r1, #32
 800ec1a:	fa23 f404 	lsr.w	r4, r3, r4
 800ec1e:	1e4d      	subs	r5, r1, #1
 800ec20:	408b      	lsls	r3, r1
 800ec22:	4322      	orrs	r2, r4
 800ec24:	1b41      	subs	r1, r0, r5
 800ec26:	e789      	b.n	800eb3c <__ieee754_sqrt+0x60>
 800ec28:	4608      	mov	r0, r1
 800ec2a:	e7f0      	b.n	800ec0e <__ieee754_sqrt+0x132>
 800ec2c:	0052      	lsls	r2, r2, #1
 800ec2e:	3101      	adds	r1, #1
 800ec30:	e7ef      	b.n	800ec12 <__ieee754_sqrt+0x136>
 800ec32:	4680      	mov	r8, r0
 800ec34:	e7bd      	b.n	800ebb2 <__ieee754_sqrt+0xd6>
 800ec36:	bf00      	nop
 800ec38:	7ff00000 	.word	0x7ff00000

0800ec3c <_init>:
 800ec3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec3e:	bf00      	nop
 800ec40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec42:	bc08      	pop	{r3}
 800ec44:	469e      	mov	lr, r3
 800ec46:	4770      	bx	lr

0800ec48 <_fini>:
 800ec48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec4a:	bf00      	nop
 800ec4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec4e:	bc08      	pop	{r3}
 800ec50:	469e      	mov	lr, r3
 800ec52:	4770      	bx	lr
