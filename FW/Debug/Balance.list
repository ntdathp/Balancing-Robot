
Balance.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da9c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007a8  0800dbb0  0800dbb0  0001dbb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e358  0800e358  00020230  2**0
                  CONTENTS
  4 .ARM          00000000  0800e358  0800e358  00020230  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e358  0800e358  00020230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e358  0800e358  0001e358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e35c  0800e35c  0001e35c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000230  20000000  0800e360  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000674  20000230  0800e590  00020230  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200008a4  0800e590  000208a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020259  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014c31  00000000  00000000  0002029c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003135  00000000  00000000  00034ecd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014a0  00000000  00000000  00038008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001024  00000000  00000000  000394a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a92b  00000000  00000000  0003a4cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018e01  00000000  00000000  00054df7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091128  00000000  00000000  0006dbf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006e38  00000000  00000000  000fed20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00105b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000230 	.word	0x20000230
 800012c:	00000000 	.word	0x00000000
 8000130:	0800db94 	.word	0x0800db94

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000234 	.word	0x20000234
 800014c:	0800db94 	.word	0x0800db94

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <__aeabi_f2uiz>:
 800115c:	0042      	lsls	r2, r0, #1
 800115e:	d20e      	bcs.n	800117e <__aeabi_f2uiz+0x22>
 8001160:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001164:	d30b      	bcc.n	800117e <__aeabi_f2uiz+0x22>
 8001166:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800116a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800116e:	d409      	bmi.n	8001184 <__aeabi_f2uiz+0x28>
 8001170:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001174:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001178:	fa23 f002 	lsr.w	r0, r3, r2
 800117c:	4770      	bx	lr
 800117e:	f04f 0000 	mov.w	r0, #0
 8001182:	4770      	bx	lr
 8001184:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001188:	d101      	bne.n	800118e <__aeabi_f2uiz+0x32>
 800118a:	0242      	lsls	r2, r0, #9
 800118c:	d102      	bne.n	8001194 <__aeabi_f2uiz+0x38>
 800118e:	f04f 30ff 	mov.w	r0, #4294967295
 8001192:	4770      	bx	lr
 8001194:	f04f 0000 	mov.w	r0, #0
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop

0800119c <__aeabi_d2lz>:
 800119c:	b538      	push	{r3, r4, r5, lr}
 800119e:	4605      	mov	r5, r0
 80011a0:	460c      	mov	r4, r1
 80011a2:	2200      	movs	r2, #0
 80011a4:	2300      	movs	r3, #0
 80011a6:	4628      	mov	r0, r5
 80011a8:	4621      	mov	r1, r4
 80011aa:	f7ff fc07 	bl	80009bc <__aeabi_dcmplt>
 80011ae:	b928      	cbnz	r0, 80011bc <__aeabi_d2lz+0x20>
 80011b0:	4628      	mov	r0, r5
 80011b2:	4621      	mov	r1, r4
 80011b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011b8:	f000 b80a 	b.w	80011d0 <__aeabi_d2ulz>
 80011bc:	4628      	mov	r0, r5
 80011be:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80011c2:	f000 f805 	bl	80011d0 <__aeabi_d2ulz>
 80011c6:	4240      	negs	r0, r0
 80011c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011cc:	bd38      	pop	{r3, r4, r5, pc}
 80011ce:	bf00      	nop

080011d0 <__aeabi_d2ulz>:
 80011d0:	b5d0      	push	{r4, r6, r7, lr}
 80011d2:	2200      	movs	r2, #0
 80011d4:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <__aeabi_d2ulz+0x34>)
 80011d6:	4606      	mov	r6, r0
 80011d8:	460f      	mov	r7, r1
 80011da:	f7ff f97d 	bl	80004d8 <__aeabi_dmul>
 80011de:	f7ff fc53 	bl	8000a88 <__aeabi_d2uiz>
 80011e2:	4604      	mov	r4, r0
 80011e4:	f7ff f8fe 	bl	80003e4 <__aeabi_ui2d>
 80011e8:	2200      	movs	r2, #0
 80011ea:	4b07      	ldr	r3, [pc, #28]	; (8001208 <__aeabi_d2ulz+0x38>)
 80011ec:	f7ff f974 	bl	80004d8 <__aeabi_dmul>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4630      	mov	r0, r6
 80011f6:	4639      	mov	r1, r7
 80011f8:	f7fe ffb6 	bl	8000168 <__aeabi_dsub>
 80011fc:	f7ff fc44 	bl	8000a88 <__aeabi_d2uiz>
 8001200:	4621      	mov	r1, r4
 8001202:	bdd0      	pop	{r4, r6, r7, pc}
 8001204:	3df00000 	.word	0x3df00000
 8001208:	41f00000 	.word	0x41f00000

0800120c <Balance_init>:
static const float u_ZE_p[] = { 0.0000f };
static const float u_PS_p[] = { 0.4500f };
static const float u_PM_p[] = { 0.7500f };
static const float u_PB_p[] = { 1.0000f };

void Balance_init( void ){
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	; 0x28
 8001210:	af0a      	add	r7, sp, #40	; 0x28
    /* Set inputs */
    qFIS_InputSetup( Balance_inputs, e, -1.0000f, 1.0000f );
 8001212:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001216:	4a91      	ldr	r2, [pc, #580]	; (800145c <Balance_init+0x250>)
 8001218:	2100      	movs	r1, #0
 800121a:	4891      	ldr	r0, [pc, #580]	; (8001460 <Balance_init+0x254>)
 800121c:	f001 fbba 	bl	8002994 <qFIS_InputSetup>
    qFIS_InputSetup( Balance_inputs, edot, -1.0000f, 1.0000f );
 8001220:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001224:	4a8d      	ldr	r2, [pc, #564]	; (800145c <Balance_init+0x250>)
 8001226:	2101      	movs	r1, #1
 8001228:	488d      	ldr	r0, [pc, #564]	; (8001460 <Balance_init+0x254>)
 800122a:	f001 fbb3 	bl	8002994 <qFIS_InputSetup>
    /* Set outputs */
    qFIS_OutputSetup( Balance_outputs, u, -1.0000f, 1.0000f );
 800122e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001232:	4a8a      	ldr	r2, [pc, #552]	; (800145c <Balance_init+0x250>)
 8001234:	2100      	movs	r1, #0
 8001236:	488b      	ldr	r0, [pc, #556]	; (8001464 <Balance_init+0x258>)
 8001238:	f001 fbd7 	bl	80029ea <qFIS_OutputSetup>
    /* Set membership functions for the inputs */
    qFIS_SetMF( MFin, e, e_NB, trapmf, NULL, e_NB_p, 1.0f );
 800123c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001240:	9302      	str	r3, [sp, #8]
 8001242:	4b89      	ldr	r3, [pc, #548]	; (8001468 <Balance_init+0x25c>)
 8001244:	9301      	str	r3, [sp, #4]
 8001246:	2300      	movs	r3, #0
 8001248:	9300      	str	r3, [sp, #0]
 800124a:	2302      	movs	r3, #2
 800124c:	2200      	movs	r2, #0
 800124e:	2100      	movs	r1, #0
 8001250:	4886      	ldr	r0, [pc, #536]	; (800146c <Balance_init+0x260>)
 8001252:	f001 fc73 	bl	8002b3c <qFIS_SetMF>
    qFIS_SetMF( MFin, e, e_ZE, trapmf, NULL, e_ZE_p, 1.0f );
 8001256:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800125a:	9302      	str	r3, [sp, #8]
 800125c:	4b84      	ldr	r3, [pc, #528]	; (8001470 <Balance_init+0x264>)
 800125e:	9301      	str	r3, [sp, #4]
 8001260:	2300      	movs	r3, #0
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	2302      	movs	r3, #2
 8001266:	2201      	movs	r2, #1
 8001268:	2100      	movs	r1, #0
 800126a:	4880      	ldr	r0, [pc, #512]	; (800146c <Balance_init+0x260>)
 800126c:	f001 fc66 	bl	8002b3c <qFIS_SetMF>
    qFIS_SetMF( MFin, e, e_PB, trapmf, NULL, e_PB_p, 1.0f );
 8001270:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001274:	9302      	str	r3, [sp, #8]
 8001276:	4b7f      	ldr	r3, [pc, #508]	; (8001474 <Balance_init+0x268>)
 8001278:	9301      	str	r3, [sp, #4]
 800127a:	2300      	movs	r3, #0
 800127c:	9300      	str	r3, [sp, #0]
 800127e:	2302      	movs	r3, #2
 8001280:	2202      	movs	r2, #2
 8001282:	2100      	movs	r1, #0
 8001284:	4879      	ldr	r0, [pc, #484]	; (800146c <Balance_init+0x260>)
 8001286:	f001 fc59 	bl	8002b3c <qFIS_SetMF>
    qFIS_SetMF( MFin, e, e_NS, trapmf, NULL, e_NS_p, 1.0f );
 800128a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800128e:	9302      	str	r3, [sp, #8]
 8001290:	4b79      	ldr	r3, [pc, #484]	; (8001478 <Balance_init+0x26c>)
 8001292:	9301      	str	r3, [sp, #4]
 8001294:	2300      	movs	r3, #0
 8001296:	9300      	str	r3, [sp, #0]
 8001298:	2302      	movs	r3, #2
 800129a:	2203      	movs	r2, #3
 800129c:	2100      	movs	r1, #0
 800129e:	4873      	ldr	r0, [pc, #460]	; (800146c <Balance_init+0x260>)
 80012a0:	f001 fc4c 	bl	8002b3c <qFIS_SetMF>
    qFIS_SetMF( MFin, e, e_PS, trapmf, NULL, e_PS_p, 1.0f );
 80012a4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012a8:	9302      	str	r3, [sp, #8]
 80012aa:	4b74      	ldr	r3, [pc, #464]	; (800147c <Balance_init+0x270>)
 80012ac:	9301      	str	r3, [sp, #4]
 80012ae:	2300      	movs	r3, #0
 80012b0:	9300      	str	r3, [sp, #0]
 80012b2:	2302      	movs	r3, #2
 80012b4:	2204      	movs	r2, #4
 80012b6:	2100      	movs	r1, #0
 80012b8:	486c      	ldr	r0, [pc, #432]	; (800146c <Balance_init+0x260>)
 80012ba:	f001 fc3f 	bl	8002b3c <qFIS_SetMF>
    qFIS_SetMF( MFin, edot, edot_NB, trimf, NULL, edot_NB_p, 1.0f );
 80012be:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012c2:	9302      	str	r3, [sp, #8]
 80012c4:	4b6e      	ldr	r3, [pc, #440]	; (8001480 <Balance_init+0x274>)
 80012c6:	9301      	str	r3, [sp, #4]
 80012c8:	2300      	movs	r3, #0
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	2301      	movs	r3, #1
 80012ce:	2205      	movs	r2, #5
 80012d0:	2101      	movs	r1, #1
 80012d2:	4866      	ldr	r0, [pc, #408]	; (800146c <Balance_init+0x260>)
 80012d4:	f001 fc32 	bl	8002b3c <qFIS_SetMF>
    qFIS_SetMF( MFin, edot, edot_ZE, trapmf, NULL, edot_ZE_p, 1.0f );
 80012d8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012dc:	9302      	str	r3, [sp, #8]
 80012de:	4b69      	ldr	r3, [pc, #420]	; (8001484 <Balance_init+0x278>)
 80012e0:	9301      	str	r3, [sp, #4]
 80012e2:	2300      	movs	r3, #0
 80012e4:	9300      	str	r3, [sp, #0]
 80012e6:	2302      	movs	r3, #2
 80012e8:	2206      	movs	r2, #6
 80012ea:	2101      	movs	r1, #1
 80012ec:	485f      	ldr	r0, [pc, #380]	; (800146c <Balance_init+0x260>)
 80012ee:	f001 fc25 	bl	8002b3c <qFIS_SetMF>
    qFIS_SetMF( MFin, edot, edot_PB, trimf, NULL, edot_PB_p, 1.0f );
 80012f2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012f6:	9302      	str	r3, [sp, #8]
 80012f8:	4b63      	ldr	r3, [pc, #396]	; (8001488 <Balance_init+0x27c>)
 80012fa:	9301      	str	r3, [sp, #4]
 80012fc:	2300      	movs	r3, #0
 80012fe:	9300      	str	r3, [sp, #0]
 8001300:	2301      	movs	r3, #1
 8001302:	2207      	movs	r2, #7
 8001304:	2101      	movs	r1, #1
 8001306:	4859      	ldr	r0, [pc, #356]	; (800146c <Balance_init+0x260>)
 8001308:	f001 fc18 	bl	8002b3c <qFIS_SetMF>
    qFIS_SetMF( MFin, edot, edot_NS, trimf, NULL, edot_NS_p, 1.0f );
 800130c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001310:	9302      	str	r3, [sp, #8]
 8001312:	4b5e      	ldr	r3, [pc, #376]	; (800148c <Balance_init+0x280>)
 8001314:	9301      	str	r3, [sp, #4]
 8001316:	2300      	movs	r3, #0
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	2301      	movs	r3, #1
 800131c:	2208      	movs	r2, #8
 800131e:	2101      	movs	r1, #1
 8001320:	4852      	ldr	r0, [pc, #328]	; (800146c <Balance_init+0x260>)
 8001322:	f001 fc0b 	bl	8002b3c <qFIS_SetMF>
    qFIS_SetMF( MFin, edot, edot_PS, trimf, NULL, edot_PS_p, 1.0f );
 8001326:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800132a:	9302      	str	r3, [sp, #8]
 800132c:	4b58      	ldr	r3, [pc, #352]	; (8001490 <Balance_init+0x284>)
 800132e:	9301      	str	r3, [sp, #4]
 8001330:	2300      	movs	r3, #0
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	2301      	movs	r3, #1
 8001336:	2209      	movs	r2, #9
 8001338:	2101      	movs	r1, #1
 800133a:	484c      	ldr	r0, [pc, #304]	; (800146c <Balance_init+0x260>)
 800133c:	f001 fbfe 	bl	8002b3c <qFIS_SetMF>
    /* Set membership functions for the outputs */
    qFIS_SetMF( MFout, u, u_NB, constantmf, NULL, u_NB_p, 1.0f );
 8001340:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001344:	9302      	str	r3, [sp, #8]
 8001346:	4b53      	ldr	r3, [pc, #332]	; (8001494 <Balance_init+0x288>)
 8001348:	9301      	str	r3, [sp, #4]
 800134a:	2300      	movs	r3, #0
 800134c:	9300      	str	r3, [sp, #0]
 800134e:	2313      	movs	r3, #19
 8001350:	2200      	movs	r2, #0
 8001352:	2100      	movs	r1, #0
 8001354:	4850      	ldr	r0, [pc, #320]	; (8001498 <Balance_init+0x28c>)
 8001356:	f001 fbf1 	bl	8002b3c <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_NM, constantmf, NULL, u_NM_p, 1.0f );
 800135a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800135e:	9302      	str	r3, [sp, #8]
 8001360:	4b4e      	ldr	r3, [pc, #312]	; (800149c <Balance_init+0x290>)
 8001362:	9301      	str	r3, [sp, #4]
 8001364:	2300      	movs	r3, #0
 8001366:	9300      	str	r3, [sp, #0]
 8001368:	2313      	movs	r3, #19
 800136a:	2201      	movs	r2, #1
 800136c:	2100      	movs	r1, #0
 800136e:	484a      	ldr	r0, [pc, #296]	; (8001498 <Balance_init+0x28c>)
 8001370:	f001 fbe4 	bl	8002b3c <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_NS, constantmf, NULL, u_NS_p, 1.0f );
 8001374:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001378:	9302      	str	r3, [sp, #8]
 800137a:	4b49      	ldr	r3, [pc, #292]	; (80014a0 <Balance_init+0x294>)
 800137c:	9301      	str	r3, [sp, #4]
 800137e:	2300      	movs	r3, #0
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	2313      	movs	r3, #19
 8001384:	2202      	movs	r2, #2
 8001386:	2100      	movs	r1, #0
 8001388:	4843      	ldr	r0, [pc, #268]	; (8001498 <Balance_init+0x28c>)
 800138a:	f001 fbd7 	bl	8002b3c <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_ZE, constantmf, NULL, u_ZE_p, 1.0f );
 800138e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001392:	9302      	str	r3, [sp, #8]
 8001394:	4b43      	ldr	r3, [pc, #268]	; (80014a4 <Balance_init+0x298>)
 8001396:	9301      	str	r3, [sp, #4]
 8001398:	2300      	movs	r3, #0
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	2313      	movs	r3, #19
 800139e:	2203      	movs	r2, #3
 80013a0:	2100      	movs	r1, #0
 80013a2:	483d      	ldr	r0, [pc, #244]	; (8001498 <Balance_init+0x28c>)
 80013a4:	f001 fbca 	bl	8002b3c <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_PS, constantmf, NULL, u_PS_p, 1.0f );
 80013a8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80013ac:	9302      	str	r3, [sp, #8]
 80013ae:	4b3e      	ldr	r3, [pc, #248]	; (80014a8 <Balance_init+0x29c>)
 80013b0:	9301      	str	r3, [sp, #4]
 80013b2:	2300      	movs	r3, #0
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	2313      	movs	r3, #19
 80013b8:	2204      	movs	r2, #4
 80013ba:	2100      	movs	r1, #0
 80013bc:	4836      	ldr	r0, [pc, #216]	; (8001498 <Balance_init+0x28c>)
 80013be:	f001 fbbd 	bl	8002b3c <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_PM, constantmf, NULL, u_PM_p, 1.0f );
 80013c2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80013c6:	9302      	str	r3, [sp, #8]
 80013c8:	4b38      	ldr	r3, [pc, #224]	; (80014ac <Balance_init+0x2a0>)
 80013ca:	9301      	str	r3, [sp, #4]
 80013cc:	2300      	movs	r3, #0
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	2313      	movs	r3, #19
 80013d2:	2205      	movs	r2, #5
 80013d4:	2100      	movs	r1, #0
 80013d6:	4830      	ldr	r0, [pc, #192]	; (8001498 <Balance_init+0x28c>)
 80013d8:	f001 fbb0 	bl	8002b3c <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_PB, constantmf, NULL, u_PB_p, 1.0f );
 80013dc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80013e0:	9302      	str	r3, [sp, #8]
 80013e2:	4b33      	ldr	r3, [pc, #204]	; (80014b0 <Balance_init+0x2a4>)
 80013e4:	9301      	str	r3, [sp, #4]
 80013e6:	2300      	movs	r3, #0
 80013e8:	9300      	str	r3, [sp, #0]
 80013ea:	2313      	movs	r3, #19
 80013ec:	2206      	movs	r2, #6
 80013ee:	2100      	movs	r1, #0
 80013f0:	4829      	ldr	r0, [pc, #164]	; (8001498 <Balance_init+0x28c>)
 80013f2:	f001 fba3 	bl	8002b3c <qFIS_SetMF>

    /* Configure the Inference System */
    qFIS_Setup( &Balance, Sugeno,
 80013f6:	2319      	movs	r3, #25
 80013f8:	9308      	str	r3, [sp, #32]
 80013fa:	4b2e      	ldr	r3, [pc, #184]	; (80014b4 <Balance_init+0x2a8>)
 80013fc:	9307      	str	r3, [sp, #28]
 80013fe:	4b2e      	ldr	r3, [pc, #184]	; (80014b8 <Balance_init+0x2ac>)
 8001400:	9306      	str	r3, [sp, #24]
 8001402:	238c      	movs	r3, #140	; 0x8c
 8001404:	9305      	str	r3, [sp, #20]
 8001406:	4b24      	ldr	r3, [pc, #144]	; (8001498 <Balance_init+0x28c>)
 8001408:	9304      	str	r3, [sp, #16]
 800140a:	23c8      	movs	r3, #200	; 0xc8
 800140c:	9303      	str	r3, [sp, #12]
 800140e:	4b17      	ldr	r3, [pc, #92]	; (800146c <Balance_init+0x260>)
 8001410:	9302      	str	r3, [sp, #8]
 8001412:	2334      	movs	r3, #52	; 0x34
 8001414:	9301      	str	r3, [sp, #4]
 8001416:	4b13      	ldr	r3, [pc, #76]	; (8001464 <Balance_init+0x258>)
 8001418:	9300      	str	r3, [sp, #0]
 800141a:	2318      	movs	r3, #24
 800141c:	4a10      	ldr	r2, [pc, #64]	; (8001460 <Balance_init+0x254>)
 800141e:	2101      	movs	r1, #1
 8001420:	4826      	ldr	r0, [pc, #152]	; (80014bc <Balance_init+0x2b0>)
 8001422:	f001 f9df 	bl	80027e4 <qFIS_Setup>
                Balance_inputs, sizeof(Balance_inputs),
                Balance_outputs, sizeof(Balance_outputs),
                MFin, sizeof(MFin), MFout, sizeof(MFout),
                rules, rStrength, 25u );
    qFIS_SetDeFuzzMethod( &Balance, wtsum );
 8001426:	2106      	movs	r1, #6
 8001428:	4824      	ldr	r0, [pc, #144]	; (80014bc <Balance_init+0x2b0>)
 800142a:	f001 f9a1 	bl	8002770 <qFIS_SetDeFuzzMethod>
    qFIS_SetParameter( &Balance, qFIS_AND, qFIS_PROD );
 800142e:	2201      	movs	r2, #1
 8001430:	2102      	movs	r1, #2
 8001432:	4822      	ldr	r0, [pc, #136]	; (80014bc <Balance_init+0x2b0>)
 8001434:	f001 f92c 	bl	8002690 <qFIS_SetParameter>
    qFIS_SetParameter( &Balance, qFIS_OR, qFIS_PROBOR );
 8001438:	2203      	movs	r2, #3
 800143a:	2103      	movs	r1, #3
 800143c:	481f      	ldr	r0, [pc, #124]	; (80014bc <Balance_init+0x2b0>)
 800143e:	f001 f927 	bl	8002690 <qFIS_SetParameter>
    qFIS_SetParameter( &Balance, qFIS_Implication, qFIS_PROD );
 8001442:	2201      	movs	r2, #1
 8001444:	2100      	movs	r1, #0
 8001446:	481d      	ldr	r0, [pc, #116]	; (80014bc <Balance_init+0x2b0>)
 8001448:	f001 f922 	bl	8002690 <qFIS_SetParameter>
    qFIS_SetParameter( &Balance, qFIS_Aggregation, qFIS_SUM );
 800144c:	2204      	movs	r2, #4
 800144e:	2101      	movs	r1, #1
 8001450:	481a      	ldr	r0, [pc, #104]	; (80014bc <Balance_init+0x2b0>)
 8001452:	f001 f91d 	bl	8002690 <qFIS_SetParameter>
}
 8001456:	bf00      	nop
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	bf800000 	.word	0xbf800000
 8001460:	200002ac 	.word	0x200002ac
 8001464:	200002c4 	.word	0x200002c4
 8001468:	0800dd44 	.word	0x0800dd44
 800146c:	200002f8 	.word	0x200002f8
 8001470:	0800dd54 	.word	0x0800dd54
 8001474:	0800dd64 	.word	0x0800dd64
 8001478:	0800dd74 	.word	0x0800dd74
 800147c:	0800dd84 	.word	0x0800dd84
 8001480:	0800dd94 	.word	0x0800dd94
 8001484:	0800dda0 	.word	0x0800dda0
 8001488:	0800ddb0 	.word	0x0800ddb0
 800148c:	0800ddbc 	.word	0x0800ddbc
 8001490:	0800ddc8 	.word	0x0800ddc8
 8001494:	0800ddd4 	.word	0x0800ddd4
 8001498:	200003c0 	.word	0x200003c0
 800149c:	0800ddd8 	.word	0x0800ddd8
 80014a0:	0800dddc 	.word	0x0800dddc
 80014a4:	0800dde0 	.word	0x0800dde0
 80014a8:	0800dde4 	.word	0x0800dde4
 80014ac:	0800dde8 	.word	0x0800dde8
 80014b0:	0800ddec 	.word	0x0800ddec
 80014b4:	2000044c 	.word	0x2000044c
 80014b8:	0800dbb0 	.word	0x0800dbb0
 80014bc:	2000024c 	.word	0x2000024c

080014c0 <Balance_run>:

void Balance_run( float *inputs, float *outputs ) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
    /* Set the crips inputs */
    qFIS_SetInput( Balance_inputs, e, inputs[ e ] );
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	461a      	mov	r2, r3
 80014d0:	2100      	movs	r1, #0
 80014d2:	4811      	ldr	r0, [pc, #68]	; (8001518 <Balance_run+0x58>)
 80014d4:	f001 faf6 	bl	8002ac4 <qFIS_SetInput>
    qFIS_SetInput( Balance_inputs, edot, inputs[ edot ] );
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3304      	adds	r3, #4
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	461a      	mov	r2, r3
 80014e0:	2101      	movs	r1, #1
 80014e2:	480d      	ldr	r0, [pc, #52]	; (8001518 <Balance_run+0x58>)
 80014e4:	f001 faee 	bl	8002ac4 <qFIS_SetInput>

    qFIS_Fuzzify( &Balance );
 80014e8:	480c      	ldr	r0, [pc, #48]	; (800151c <Balance_run+0x5c>)
 80014ea:	f001 fc06 	bl	8002cfa <qFIS_Fuzzify>
    if ( qFIS_Inference( &Balance ) > 0 ) {
 80014ee:	480b      	ldr	r0, [pc, #44]	; (800151c <Balance_run+0x5c>)
 80014f0:	f002 f9b8 	bl	8003864 <qFIS_Inference>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	dd02      	ble.n	8001500 <Balance_run+0x40>
        qFIS_DeFuzzify( &Balance );
 80014fa:	4808      	ldr	r0, [pc, #32]	; (800151c <Balance_run+0x5c>)
 80014fc:	f002 f870 	bl	80035e0 <qFIS_DeFuzzify>
    else {
        /* Error! */
    }

    /* Get the crips outputs */
    outputs[ u ] = qFIS_GetOutput( Balance_outputs, u );
 8001500:	2100      	movs	r1, #0
 8001502:	4807      	ldr	r0, [pc, #28]	; (8001520 <Balance_run+0x60>)
 8001504:	f001 fafe 	bl	8002b04 <qFIS_GetOutput>
 8001508:	4602      	mov	r2, r0
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	601a      	str	r2, [r3, #0]
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	200002ac 	.word	0x200002ac
 800151c:	2000024c 	.word	0x2000024c
 8001520:	200002c4 	.word	0x200002c4

08001524 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b088      	sub	sp, #32
 8001528:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152a:	f107 0310 	add.w	r3, r7, #16
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001538:	4b24      	ldr	r3, [pc, #144]	; (80015cc <MX_GPIO_Init+0xa8>)
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	4a23      	ldr	r2, [pc, #140]	; (80015cc <MX_GPIO_Init+0xa8>)
 800153e:	f043 0310 	orr.w	r3, r3, #16
 8001542:	6193      	str	r3, [r2, #24]
 8001544:	4b21      	ldr	r3, [pc, #132]	; (80015cc <MX_GPIO_Init+0xa8>)
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	f003 0310 	and.w	r3, r3, #16
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001550:	4b1e      	ldr	r3, [pc, #120]	; (80015cc <MX_GPIO_Init+0xa8>)
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	4a1d      	ldr	r2, [pc, #116]	; (80015cc <MX_GPIO_Init+0xa8>)
 8001556:	f043 0320 	orr.w	r3, r3, #32
 800155a:	6193      	str	r3, [r2, #24]
 800155c:	4b1b      	ldr	r3, [pc, #108]	; (80015cc <MX_GPIO_Init+0xa8>)
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	f003 0320 	and.w	r3, r3, #32
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001568:	4b18      	ldr	r3, [pc, #96]	; (80015cc <MX_GPIO_Init+0xa8>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	4a17      	ldr	r2, [pc, #92]	; (80015cc <MX_GPIO_Init+0xa8>)
 800156e:	f043 0304 	orr.w	r3, r3, #4
 8001572:	6193      	str	r3, [r2, #24]
 8001574:	4b15      	ldr	r3, [pc, #84]	; (80015cc <MX_GPIO_Init+0xa8>)
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	f003 0304 	and.w	r3, r3, #4
 800157c:	607b      	str	r3, [r7, #4]
 800157e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001580:	4b12      	ldr	r3, [pc, #72]	; (80015cc <MX_GPIO_Init+0xa8>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	4a11      	ldr	r2, [pc, #68]	; (80015cc <MX_GPIO_Init+0xa8>)
 8001586:	f043 0308 	orr.w	r3, r3, #8
 800158a:	6193      	str	r3, [r2, #24]
 800158c:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <MX_GPIO_Init+0xa8>)
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	f003 0308 	and.w	r3, r3, #8
 8001594:	603b      	str	r3, [r7, #0]
 8001596:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001598:	2200      	movs	r2, #0
 800159a:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800159e:	480c      	ldr	r0, [pc, #48]	; (80015d0 <MX_GPIO_Init+0xac>)
 80015a0:	f004 fa2c 	bl	80059fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80015a4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80015a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015aa:	2301      	movs	r3, #1
 80015ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b2:	2302      	movs	r3, #2
 80015b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015b6:	f107 0310 	add.w	r3, r7, #16
 80015ba:	4619      	mov	r1, r3
 80015bc:	4804      	ldr	r0, [pc, #16]	; (80015d0 <MX_GPIO_Init+0xac>)
 80015be:	f004 f899 	bl	80056f4 <HAL_GPIO_Init>

}
 80015c2:	bf00      	nop
 80015c4:	3720      	adds	r7, #32
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40021000 	.word	0x40021000
 80015d0:	40011000 	.word	0x40011000

080015d4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015d8:	4b12      	ldr	r3, [pc, #72]	; (8001624 <MX_I2C1_Init+0x50>)
 80015da:	4a13      	ldr	r2, [pc, #76]	; (8001628 <MX_I2C1_Init+0x54>)
 80015dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80015de:	4b11      	ldr	r3, [pc, #68]	; (8001624 <MX_I2C1_Init+0x50>)
 80015e0:	4a12      	ldr	r2, [pc, #72]	; (800162c <MX_I2C1_Init+0x58>)
 80015e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015e4:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <MX_I2C1_Init+0x50>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015ea:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <MX_I2C1_Init+0x50>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015f0:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <MX_I2C1_Init+0x50>)
 80015f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015f8:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <MX_I2C1_Init+0x50>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015fe:	4b09      	ldr	r3, [pc, #36]	; (8001624 <MX_I2C1_Init+0x50>)
 8001600:	2200      	movs	r2, #0
 8001602:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001604:	4b07      	ldr	r3, [pc, #28]	; (8001624 <MX_I2C1_Init+0x50>)
 8001606:	2200      	movs	r2, #0
 8001608:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <MX_I2C1_Init+0x50>)
 800160c:	2200      	movs	r2, #0
 800160e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001610:	4804      	ldr	r0, [pc, #16]	; (8001624 <MX_I2C1_Init+0x50>)
 8001612:	f004 fa0b 	bl	8005a2c <HAL_I2C_Init>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800161c:	f000 f9c4 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001620:	bf00      	nop
 8001622:	bd80      	pop	{r7, pc}
 8001624:	200004b0 	.word	0x200004b0
 8001628:	40005400 	.word	0x40005400
 800162c:	00061a80 	.word	0x00061a80

08001630 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001634:	4b12      	ldr	r3, [pc, #72]	; (8001680 <MX_I2C2_Init+0x50>)
 8001636:	4a13      	ldr	r2, [pc, #76]	; (8001684 <MX_I2C2_Init+0x54>)
 8001638:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800163a:	4b11      	ldr	r3, [pc, #68]	; (8001680 <MX_I2C2_Init+0x50>)
 800163c:	4a12      	ldr	r2, [pc, #72]	; (8001688 <MX_I2C2_Init+0x58>)
 800163e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001640:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <MX_I2C2_Init+0x50>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001646:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <MX_I2C2_Init+0x50>)
 8001648:	2200      	movs	r2, #0
 800164a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800164c:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <MX_I2C2_Init+0x50>)
 800164e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001652:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001654:	4b0a      	ldr	r3, [pc, #40]	; (8001680 <MX_I2C2_Init+0x50>)
 8001656:	2200      	movs	r2, #0
 8001658:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800165a:	4b09      	ldr	r3, [pc, #36]	; (8001680 <MX_I2C2_Init+0x50>)
 800165c:	2200      	movs	r2, #0
 800165e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001660:	4b07      	ldr	r3, [pc, #28]	; (8001680 <MX_I2C2_Init+0x50>)
 8001662:	2200      	movs	r2, #0
 8001664:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001666:	4b06      	ldr	r3, [pc, #24]	; (8001680 <MX_I2C2_Init+0x50>)
 8001668:	2200      	movs	r2, #0
 800166a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800166c:	4804      	ldr	r0, [pc, #16]	; (8001680 <MX_I2C2_Init+0x50>)
 800166e:	f004 f9dd 	bl	8005a2c <HAL_I2C_Init>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001678:	f000 f996 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20000504 	.word	0x20000504
 8001684:	40005800 	.word	0x40005800
 8001688:	00061a80 	.word	0x00061a80

0800168c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08c      	sub	sp, #48	; 0x30
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001694:	f107 031c 	add.w	r3, r7, #28
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a32      	ldr	r2, [pc, #200]	; (8001770 <HAL_I2C_MspInit+0xe4>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d133      	bne.n	8001714 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ac:	4b31      	ldr	r3, [pc, #196]	; (8001774 <HAL_I2C_MspInit+0xe8>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	4a30      	ldr	r2, [pc, #192]	; (8001774 <HAL_I2C_MspInit+0xe8>)
 80016b2:	f043 0308 	orr.w	r3, r3, #8
 80016b6:	6193      	str	r3, [r2, #24]
 80016b8:	4b2e      	ldr	r3, [pc, #184]	; (8001774 <HAL_I2C_MspInit+0xe8>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	f003 0308 	and.w	r3, r3, #8
 80016c0:	61bb      	str	r3, [r7, #24]
 80016c2:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016ca:	2312      	movs	r3, #18
 80016cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016ce:	2303      	movs	r3, #3
 80016d0:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d2:	f107 031c 	add.w	r3, r7, #28
 80016d6:	4619      	mov	r1, r3
 80016d8:	4827      	ldr	r0, [pc, #156]	; (8001778 <HAL_I2C_MspInit+0xec>)
 80016da:	f004 f80b 	bl	80056f4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80016de:	4b27      	ldr	r3, [pc, #156]	; (800177c <HAL_I2C_MspInit+0xf0>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016e6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80016ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ee:	f043 0302 	orr.w	r3, r3, #2
 80016f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016f4:	4a21      	ldr	r2, [pc, #132]	; (800177c <HAL_I2C_MspInit+0xf0>)
 80016f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f8:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016fa:	4b1e      	ldr	r3, [pc, #120]	; (8001774 <HAL_I2C_MspInit+0xe8>)
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	4a1d      	ldr	r2, [pc, #116]	; (8001774 <HAL_I2C_MspInit+0xe8>)
 8001700:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001704:	61d3      	str	r3, [r2, #28]
 8001706:	4b1b      	ldr	r3, [pc, #108]	; (8001774 <HAL_I2C_MspInit+0xe8>)
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800170e:	617b      	str	r3, [r7, #20]
 8001710:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001712:	e029      	b.n	8001768 <HAL_I2C_MspInit+0xdc>
  else if(i2cHandle->Instance==I2C2)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a19      	ldr	r2, [pc, #100]	; (8001780 <HAL_I2C_MspInit+0xf4>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d124      	bne.n	8001768 <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800171e:	4b15      	ldr	r3, [pc, #84]	; (8001774 <HAL_I2C_MspInit+0xe8>)
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	4a14      	ldr	r2, [pc, #80]	; (8001774 <HAL_I2C_MspInit+0xe8>)
 8001724:	f043 0308 	orr.w	r3, r3, #8
 8001728:	6193      	str	r3, [r2, #24]
 800172a:	4b12      	ldr	r3, [pc, #72]	; (8001774 <HAL_I2C_MspInit+0xe8>)
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	f003 0308 	and.w	r3, r3, #8
 8001732:	613b      	str	r3, [r7, #16]
 8001734:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001736:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800173a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800173c:	2312      	movs	r3, #18
 800173e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001740:	2303      	movs	r3, #3
 8001742:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001744:	f107 031c 	add.w	r3, r7, #28
 8001748:	4619      	mov	r1, r3
 800174a:	480b      	ldr	r0, [pc, #44]	; (8001778 <HAL_I2C_MspInit+0xec>)
 800174c:	f003 ffd2 	bl	80056f4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001750:	4b08      	ldr	r3, [pc, #32]	; (8001774 <HAL_I2C_MspInit+0xe8>)
 8001752:	69db      	ldr	r3, [r3, #28]
 8001754:	4a07      	ldr	r2, [pc, #28]	; (8001774 <HAL_I2C_MspInit+0xe8>)
 8001756:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800175a:	61d3      	str	r3, [r2, #28]
 800175c:	4b05      	ldr	r3, [pc, #20]	; (8001774 <HAL_I2C_MspInit+0xe8>)
 800175e:	69db      	ldr	r3, [r3, #28]
 8001760:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	68fb      	ldr	r3, [r7, #12]
}
 8001768:	bf00      	nop
 800176a:	3730      	adds	r7, #48	; 0x30
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40005400 	.word	0x40005400
 8001774:	40021000 	.word	0x40021000
 8001778:	40010c00 	.word	0x40010c00
 800177c:	40010000 	.word	0x40010000
 8001780:	40005800 	.word	0x40005800

08001784 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001788:	f003 fd92 	bl	80052b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800178c:	f000 f838 	bl	8001800 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001790:	f7ff fec8 	bl	8001524 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001794:	f003 fac0 	bl	8004d18 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001798:	f003 fb0a 	bl	8004db0 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800179c:	f003 fce6 	bl	800516c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80017a0:	f7ff ff18 	bl	80015d4 <MX_I2C1_Init>
  MX_TIM1_Init();
 80017a4:	f003 fa60 	bl	8004c68 <MX_TIM1_Init>
  MX_TIM4_Init();
 80017a8:	f003 fb9a 	bl	8004ee0 <MX_TIM4_Init>
  MX_I2C2_Init();
 80017ac:	f7ff ff40 	bl	8001630 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80017b0:	480f      	ldr	r0, [pc, #60]	; (80017f0 <main+0x6c>)
 80017b2:	f005 fdf5 	bl	80073a0 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80017b6:	2100      	movs	r1, #0
 80017b8:	480e      	ldr	r0, [pc, #56]	; (80017f4 <main+0x70>)
 80017ba:	f005 fe9b 	bl	80074f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80017be:	2104      	movs	r1, #4
 80017c0:	480c      	ldr	r0, [pc, #48]	; (80017f4 <main+0x70>)
 80017c2:	f005 fe97 	bl	80074f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80017c6:	2108      	movs	r1, #8
 80017c8:	480a      	ldr	r0, [pc, #40]	; (80017f4 <main+0x70>)
 80017ca:	f005 fe93 	bl	80074f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80017ce:	210c      	movs	r1, #12
 80017d0:	4808      	ldr	r0, [pc, #32]	; (80017f4 <main+0x70>)
 80017d2:	f005 fe8f 	bl	80074f4 <HAL_TIM_PWM_Start>



  while(MPU6050_Init(&hi2c2) == 1);
 80017d6:	bf00      	nop
 80017d8:	4807      	ldr	r0, [pc, #28]	; (80017f8 <main+0x74>)
 80017da:	f000 f955 	bl	8001a88 <MPU6050_Init>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d0f9      	beq.n	80017d8 <main+0x54>

  Balance_init();
 80017e4:	f7ff fd12 	bl	800120c <Balance_init>


  current = CF;
 80017e8:	4b04      	ldr	r3, [pc, #16]	; (80017fc <main+0x78>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	701a      	strb	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017ee:	e7fe      	b.n	80017ee <main+0x6a>
 80017f0:	20000634 	.word	0x20000634
 80017f4:	2000067c 	.word	0x2000067c
 80017f8:	20000504 	.word	0x20000504
 80017fc:	20000558 	.word	0x20000558

08001800 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b090      	sub	sp, #64	; 0x40
 8001804:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001806:	f107 0318 	add.w	r3, r7, #24
 800180a:	2228      	movs	r2, #40	; 0x28
 800180c:	2100      	movs	r1, #0
 800180e:	4618      	mov	r0, r3
 8001810:	f008 fa41 	bl	8009c96 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001814:	1d3b      	adds	r3, r7, #4
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	605a      	str	r2, [r3, #4]
 800181c:	609a      	str	r2, [r3, #8]
 800181e:	60da      	str	r2, [r3, #12]
 8001820:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001822:	2301      	movs	r3, #1
 8001824:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001826:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800182a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800182c:	2300      	movs	r3, #0
 800182e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001830:	2301      	movs	r3, #1
 8001832:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001834:	2302      	movs	r3, #2
 8001836:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001838:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800183c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800183e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001842:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001844:	f107 0318 	add.w	r3, r7, #24
 8001848:	4618      	mov	r0, r3
 800184a:	f005 f949 	bl	8006ae0 <HAL_RCC_OscConfig>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001854:	f000 f8a8 	bl	80019a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001858:	230f      	movs	r3, #15
 800185a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800185c:	2302      	movs	r3, #2
 800185e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001860:	2300      	movs	r3, #0
 8001862:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001864:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001868:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800186a:	2300      	movs	r3, #0
 800186c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800186e:	1d3b      	adds	r3, r7, #4
 8001870:	2102      	movs	r1, #2
 8001872:	4618      	mov	r0, r3
 8001874:	f005 fbb6 	bl	8006fe4 <HAL_RCC_ClockConfig>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800187e:	f000 f893 	bl	80019a8 <Error_Handler>
  }
}
 8001882:	bf00      	nop
 8001884:	3740      	adds	r7, #64	; 0x40
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
	...

0800188c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]

	  if(htim->Instance == htim2.Instance)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	4b38      	ldr	r3, [pc, #224]	; (800197c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	429a      	cmp	r2, r3
 800189e:	d168      	bne.n	8001972 <HAL_TIM_PeriodElapsedCallback+0xe6>
	  {


		      MPU6050_Read_All(&hi2c2, &MPU);
 80018a0:	4937      	ldr	r1, [pc, #220]	; (8001980 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80018a2:	4838      	ldr	r0, [pc, #224]	; (8001984 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80018a4:	f000 f948 	bl	8001b38 <MPU6050_Read_All>

			  Balance.pitch_dot = MPU.Gy;
 80018a8:	4b35      	ldr	r3, [pc, #212]	; (8001980 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80018aa:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80018ae:	4610      	mov	r0, r2
 80018b0:	4619      	mov	r1, r3
 80018b2:	f7ff f909 	bl	8000ac8 <__aeabi_d2f>
 80018b6:	4603      	mov	r3, r0
 80018b8:	4a33      	ldr	r2, [pc, #204]	; (8001988 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80018ba:	6013      	str	r3, [r2, #0]
			  Balance.input[0] = MPU.CFAngleY *  K_pitch;
 80018bc:	4b30      	ldr	r3, [pc, #192]	; (8001980 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80018be:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80018c2:	f04f 0200 	mov.w	r2, #0
 80018c6:	4b31      	ldr	r3, [pc, #196]	; (800198c <HAL_TIM_PeriodElapsedCallback+0x100>)
 80018c8:	f7fe ff30 	bl	800072c <__aeabi_ddiv>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	4610      	mov	r0, r2
 80018d2:	4619      	mov	r1, r3
 80018d4:	f7ff f8f8 	bl	8000ac8 <__aeabi_d2f>
 80018d8:	4603      	mov	r3, r0
 80018da:	4a2b      	ldr	r2, [pc, #172]	; (8001988 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80018dc:	6093      	str	r3, [r2, #8]
			  Balance.input[1] = Balance.pitch_dot * K_pitch_dot;
 80018de:	4b2a      	ldr	r3, [pc, #168]	; (8001988 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	492b      	ldr	r1, [pc, #172]	; (8001990 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff fb01 	bl	8000eec <__aeabi_fdiv>
 80018ea:	4603      	mov	r3, r0
 80018ec:	461a      	mov	r2, r3
 80018ee:	4b26      	ldr	r3, [pc, #152]	; (8001988 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80018f0:	60da      	str	r2, [r3, #12]

			  Balance.pitch = MPU.CFAngleY;
 80018f2:	4b23      	ldr	r3, [pc, #140]	; (8001980 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80018f4:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80018f8:	4610      	mov	r0, r2
 80018fa:	4619      	mov	r1, r3
 80018fc:	f7ff f8e4 	bl	8000ac8 <__aeabi_d2f>
 8001900:	4603      	mov	r3, r0
 8001902:	4a21      	ldr	r2, [pc, #132]	; (8001988 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001904:	6053      	str	r3, [r2, #4]

			  Balance_run(Balance.input, &Balance.output);
 8001906:	4923      	ldr	r1, [pc, #140]	; (8001994 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001908:	4823      	ldr	r0, [pc, #140]	; (8001998 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800190a:	f7ff fdd9 	bl	80014c0 <Balance_run>

			  if(Balance.input[0] < -10 || Balance.input[0] > 10)
 800190e:	4b1e      	ldr	r3, [pc, #120]	; (8001988 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	4922      	ldr	r1, [pc, #136]	; (800199c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff fbd3 	bl	80010c0 <__aeabi_fcmplt>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d108      	bne.n	8001932 <HAL_TIM_PeriodElapsedCallback+0xa6>
 8001920:	4b19      	ldr	r3, [pc, #100]	; (8001988 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	491e      	ldr	r1, [pc, #120]	; (80019a0 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff fbe8 	bl	80010fc <__aeabi_fcmpgt>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d003      	beq.n	800193a <HAL_TIM_PeriodElapsedCallback+0xae>
				  	  {
					  	  Balance.output = 0;
 8001932:	4b15      	ldr	r3, [pc, #84]	; (8001988 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001934:	f04f 0200 	mov.w	r2, #0
 8001938:	611a      	str	r2, [r3, #16]
				  	  }

			  MotorSetDuty1(Balance.output * K_u);
 800193a:	4b13      	ldr	r3, [pc, #76]	; (8001988 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800193c:	691b      	ldr	r3, [r3, #16]
 800193e:	4919      	ldr	r1, [pc, #100]	; (80019a4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff fa1f 	bl	8000d84 <__aeabi_fmul>
 8001946:	4603      	mov	r3, r0
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff fbe1 	bl	8001110 <__aeabi_f2iz>
 800194e:	4603      	mov	r3, r0
 8001950:	4618      	mov	r0, r3
 8001952:	f000 f82f 	bl	80019b4 <MotorSetDuty1>
			  MotorSetDuty2(Balance.output * K_u);
 8001956:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	4912      	ldr	r1, [pc, #72]	; (80019a4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff fa11 	bl	8000d84 <__aeabi_fmul>
 8001962:	4603      	mov	r3, r0
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff fbd3 	bl	8001110 <__aeabi_f2iz>
 800196a:	4603      	mov	r3, r0
 800196c:	4618      	mov	r0, r3
 800196e:	f000 f859 	bl	8001a24 <MotorSetDuty2>

}
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20000634 	.word	0x20000634
 8001980:	20000560 	.word	0x20000560
 8001984:	20000504 	.word	0x20000504
 8001988:	200005c8 	.word	0x200005c8
 800198c:	40140000 	.word	0x40140000
 8001990:	42c80000 	.word	0x42c80000
 8001994:	200005d8 	.word	0x200005d8
 8001998:	200005d0 	.word	0x200005d0
 800199c:	c1200000 	.word	0xc1200000
 80019a0:	41200000 	.word	0x41200000
 80019a4:	453b8000 	.word	0x453b8000

080019a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019ac:	b672      	cpsid	i
}
 80019ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019b0:	e7fe      	b.n	80019b0 <Error_Handler+0x8>
	...

080019b4 <MotorSetDuty1>:
	tmotor->position = 0;
}

//duty cycle of motor
void MotorSetDuty1(int nDuty)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
	if(nDuty == 0){
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d108      	bne.n	80019d4 <MotorSetDuty1+0x20>
		htim3.Instance->CCR1 = 0;
 80019c2:	4b16      	ldr	r3, [pc, #88]	; (8001a1c <MotorSetDuty1+0x68>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2200      	movs	r2, #0
 80019c8:	635a      	str	r2, [r3, #52]	; 0x34
		htim3.Instance->CCR2 = 0;
 80019ca:	4b14      	ldr	r3, [pc, #80]	; (8001a1c <MotorSetDuty1+0x68>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2200      	movs	r2, #0
 80019d0:	639a      	str	r2, [r3, #56]	; 0x38
	else if(nDuty < 0){
		htim3.Instance->CCR2 = 0;
		htim3.Instance->CCR1 = abs(nDuty-500);
	}

}
 80019d2:	e01e      	b.n	8001a12 <MotorSetDuty1+0x5e>
	else if(nDuty > 0){
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	dd0a      	ble.n	80019f0 <MotorSetDuty1+0x3c>
		htim3.Instance->CCR2 = nDuty+500;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 80019e0:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <MotorSetDuty1+0x68>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	639a      	str	r2, [r3, #56]	; 0x38
		htim2.Instance->CCR1 = 0;
 80019e6:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <MotorSetDuty1+0x6c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2200      	movs	r2, #0
 80019ec:	635a      	str	r2, [r3, #52]	; 0x34
}
 80019ee:	e010      	b.n	8001a12 <MotorSetDuty1+0x5e>
	else if(nDuty < 0){
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	da0d      	bge.n	8001a12 <MotorSetDuty1+0x5e>
		htim3.Instance->CCR2 = 0;
 80019f6:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <MotorSetDuty1+0x68>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2200      	movs	r2, #0
 80019fc:	639a      	str	r2, [r3, #56]	; 0x38
		htim3.Instance->CCR1 = abs(nDuty-500);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8001a04:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001a08:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001a0c:	4b03      	ldr	r3, [pc, #12]	; (8001a1c <MotorSetDuty1+0x68>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr
 8001a1c:	2000067c 	.word	0x2000067c
 8001a20:	20000634 	.word	0x20000634

08001a24 <MotorSetDuty2>:

void MotorSetDuty2(int nDuty)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
	if(nDuty == 0){
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d108      	bne.n	8001a44 <MotorSetDuty2+0x20>
		htim3.Instance->CCR3 = 0;
 8001a32:	4b14      	ldr	r3, [pc, #80]	; (8001a84 <MotorSetDuty2+0x60>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2200      	movs	r2, #0
 8001a38:	63da      	str	r2, [r3, #60]	; 0x3c
		htim3.Instance->CCR4 = 0;
 8001a3a:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <MotorSetDuty2+0x60>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	641a      	str	r2, [r3, #64]	; 0x40
	else if(nDuty<0){
		htim3.Instance->CCR4 = 0;
		htim3.Instance->CCR3 = abs(nDuty);
	}

}
 8001a42:	e01a      	b.n	8001a7a <MotorSetDuty2+0x56>
	else if(nDuty>0){
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	dd08      	ble.n	8001a5c <MotorSetDuty2+0x38>
		htim3.Instance->CCR4 = nDuty;
 8001a4a:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <MotorSetDuty2+0x60>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	641a      	str	r2, [r3, #64]	; 0x40
		htim3.Instance->CCR3 = 0;
 8001a52:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <MotorSetDuty2+0x60>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2200      	movs	r2, #0
 8001a58:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001a5a:	e00e      	b.n	8001a7a <MotorSetDuty2+0x56>
	else if(nDuty<0){
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	da0b      	bge.n	8001a7a <MotorSetDuty2+0x56>
		htim3.Instance->CCR4 = 0;
 8001a62:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <MotorSetDuty2+0x60>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2200      	movs	r2, #0
 8001a68:	641a      	str	r2, [r3, #64]	; 0x40
		htim3.Instance->CCR3 = abs(nDuty);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001a70:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001a74:	4b03      	ldr	r3, [pc, #12]	; (8001a84 <MotorSetDuty2+0x60>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr
 8001a84:	2000067c 	.word	0x2000067c

08001a88 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b088      	sub	sp, #32
 8001a8c:	af04      	add	r7, sp, #16
 8001a8e:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001a90:	2364      	movs	r3, #100	; 0x64
 8001a92:	9302      	str	r3, [sp, #8]
 8001a94:	2301      	movs	r3, #1
 8001a96:	9301      	str	r3, [sp, #4]
 8001a98:	f107 030f 	add.w	r3, r7, #15
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	2275      	movs	r2, #117	; 0x75
 8001aa2:	21d0      	movs	r1, #208	; 0xd0
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f004 f9ff 	bl	8005ea8 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8001aaa:	7bfb      	ldrb	r3, [r7, #15]
 8001aac:	2b68      	cmp	r3, #104	; 0x68
 8001aae:	d13d      	bne.n	8001b2c <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001ab4:	2364      	movs	r3, #100	; 0x64
 8001ab6:	9302      	str	r3, [sp, #8]
 8001ab8:	2301      	movs	r3, #1
 8001aba:	9301      	str	r3, [sp, #4]
 8001abc:	f107 030e 	add.w	r3, r7, #14
 8001ac0:	9300      	str	r3, [sp, #0]
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	226b      	movs	r2, #107	; 0x6b
 8001ac6:	21d0      	movs	r1, #208	; 0xd0
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f004 f8f3 	bl	8005cb4 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001ace:	2307      	movs	r3, #7
 8001ad0:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001ad2:	2364      	movs	r3, #100	; 0x64
 8001ad4:	9302      	str	r3, [sp, #8]
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	9301      	str	r3, [sp, #4]
 8001ada:	f107 030e 	add.w	r3, r7, #14
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	2219      	movs	r2, #25
 8001ae4:	21d0      	movs	r1, #208	; 0xd0
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f004 f8e4 	bl	8005cb4 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001aec:	2300      	movs	r3, #0
 8001aee:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001af0:	2364      	movs	r3, #100	; 0x64
 8001af2:	9302      	str	r3, [sp, #8]
 8001af4:	2301      	movs	r3, #1
 8001af6:	9301      	str	r3, [sp, #4]
 8001af8:	f107 030e 	add.w	r3, r7, #14
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	2301      	movs	r3, #1
 8001b00:	221c      	movs	r2, #28
 8001b02:	21d0      	movs	r1, #208	; 0xd0
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f004 f8d5 	bl	8005cb4 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001b0e:	2364      	movs	r3, #100	; 0x64
 8001b10:	9302      	str	r3, [sp, #8]
 8001b12:	2301      	movs	r3, #1
 8001b14:	9301      	str	r3, [sp, #4]
 8001b16:	f107 030e 	add.w	r3, r7, #14
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	221b      	movs	r2, #27
 8001b20:	21d0      	movs	r1, #208	; 0xd0
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f004 f8c6 	bl	8005cb4 <HAL_I2C_Mem_Write>
        return 0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	e000      	b.n	8001b2e <MPU6050_Init+0xa6>
    }
    return 1;
 8001b2c:	2301      	movs	r3, #1
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
	...

08001b38 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8001b38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b3c:	b094      	sub	sp, #80	; 0x50
 8001b3e:	af04      	add	r7, sp, #16
 8001b40:	6078      	str	r0, [r7, #4]
 8001b42:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001b44:	2364      	movs	r3, #100	; 0x64
 8001b46:	9302      	str	r3, [sp, #8]
 8001b48:	230e      	movs	r3, #14
 8001b4a:	9301      	str	r3, [sp, #4]
 8001b4c:	f107 0308 	add.w	r3, r7, #8
 8001b50:	9300      	str	r3, [sp, #0]
 8001b52:	2301      	movs	r3, #1
 8001b54:	223b      	movs	r2, #59	; 0x3b
 8001b56:	21d0      	movs	r1, #208	; 0xd0
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f004 f9a5 	bl	8005ea8 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001b5e:	7a3b      	ldrb	r3, [r7, #8]
 8001b60:	021b      	lsls	r3, r3, #8
 8001b62:	b21a      	sxth	r2, r3
 8001b64:	7a7b      	ldrb	r3, [r7, #9]
 8001b66:	b21b      	sxth	r3, r3
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	b21a      	sxth	r2, r3
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001b70:	7abb      	ldrb	r3, [r7, #10]
 8001b72:	021b      	lsls	r3, r3, #8
 8001b74:	b21a      	sxth	r2, r3
 8001b76:	7afb      	ldrb	r3, [r7, #11]
 8001b78:	b21b      	sxth	r3, r3
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	b21a      	sxth	r2, r3
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001b82:	7b3b      	ldrb	r3, [r7, #12]
 8001b84:	021b      	lsls	r3, r3, #8
 8001b86:	b21a      	sxth	r2, r3
 8001b88:	7b7b      	ldrb	r3, [r7, #13]
 8001b8a:	b21b      	sxth	r3, r3
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	b21a      	sxth	r2, r3
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8001b94:	7bbb      	ldrb	r3, [r7, #14]
 8001b96:	021b      	lsls	r3, r3, #8
 8001b98:	b21a      	sxth	r2, r3
 8001b9a:	7bfb      	ldrb	r3, [r7, #15]
 8001b9c:	b21b      	sxth	r3, r3
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8001ba2:	7c3b      	ldrb	r3, [r7, #16]
 8001ba4:	021b      	lsls	r3, r3, #8
 8001ba6:	b21a      	sxth	r2, r3
 8001ba8:	7c7b      	ldrb	r3, [r7, #17]
 8001baa:	b21b      	sxth	r3, r3
 8001bac:	4313      	orrs	r3, r2
 8001bae:	b21a      	sxth	r2, r3
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8001bb4:	7cbb      	ldrb	r3, [r7, #18]
 8001bb6:	021b      	lsls	r3, r3, #8
 8001bb8:	b21a      	sxth	r2, r3
 8001bba:	7cfb      	ldrb	r3, [r7, #19]
 8001bbc:	b21b      	sxth	r3, r3
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	b21a      	sxth	r2, r3
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8001bc6:	7d3b      	ldrb	r3, [r7, #20]
 8001bc8:	021b      	lsls	r3, r3, #8
 8001bca:	b21a      	sxth	r2, r3
 8001bcc:	7d7b      	ldrb	r3, [r7, #21]
 8001bce:	b21b      	sxth	r3, r3
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	b21a      	sxth	r2, r3
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7fe fc10 	bl	8000404 <__aeabi_i2d>
 8001be4:	f04f 0200 	mov.w	r2, #0
 8001be8:	4b95      	ldr	r3, [pc, #596]	; (8001e40 <MPU6050_Read_All+0x308>)
 8001bea:	f7fe fd9f 	bl	800072c <__aeabi_ddiv>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	6839      	ldr	r1, [r7, #0]
 8001bf4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7fe fc00 	bl	8000404 <__aeabi_i2d>
 8001c04:	f04f 0200 	mov.w	r2, #0
 8001c08:	4b8d      	ldr	r3, [pc, #564]	; (8001e40 <MPU6050_Read_All+0x308>)
 8001c0a:	f7fe fd8f 	bl	800072c <__aeabi_ddiv>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	460b      	mov	r3, r1
 8001c12:	6839      	ldr	r1, [r7, #0]
 8001c14:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7fe fbf0 	bl	8000404 <__aeabi_i2d>
 8001c24:	a380      	add	r3, pc, #512	; (adr r3, 8001e28 <MPU6050_Read_All+0x2f0>)
 8001c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c2a:	f7fe fd7f 	bl	800072c <__aeabi_ddiv>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	460b      	mov	r3, r1
 8001c32:	6839      	ldr	r1, [r7, #0]
 8001c34:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8001c38:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff f84d 	bl	8000cdc <__aeabi_i2f>
 8001c42:	4603      	mov	r3, r0
 8001c44:	497f      	ldr	r1, [pc, #508]	; (8001e44 <MPU6050_Read_All+0x30c>)
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff f950 	bl	8000eec <__aeabi_fdiv>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	497e      	ldr	r1, [pc, #504]	; (8001e48 <MPU6050_Read_All+0x310>)
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7fe ff8f 	bl	8000b74 <__addsf3>
 8001c56:	4603      	mov	r3, r0
 8001c58:	461a      	mov	r2, r3
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	641a      	str	r2, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7fe fbcd 	bl	8000404 <__aeabi_i2d>
 8001c6a:	a371      	add	r3, pc, #452	; (adr r3, 8001e30 <MPU6050_Read_All+0x2f8>)
 8001c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c70:	f7fe fd5c 	bl	800072c <__aeabi_ddiv>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	6839      	ldr	r1, [r7, #0]
 8001c7a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7fe fbbd 	bl	8000404 <__aeabi_i2d>
 8001c8a:	a369      	add	r3, pc, #420	; (adr r3, 8001e30 <MPU6050_Read_All+0x2f8>)
 8001c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c90:	f7fe fd4c 	bl	800072c <__aeabi_ddiv>
 8001c94:	4602      	mov	r2, r0
 8001c96:	460b      	mov	r3, r1
 8001c98:	6839      	ldr	r1, [r7, #0]
 8001c9a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7fe fbad 	bl	8000404 <__aeabi_i2d>
 8001caa:	a361      	add	r3, pc, #388	; (adr r3, 8001e30 <MPU6050_Read_All+0x2f8>)
 8001cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb0:	f7fe fd3c 	bl	800072c <__aeabi_ddiv>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	6839      	ldr	r1, [r7, #0]
 8001cba:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8001cbe:	f003 fb4f 	bl	8005360 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	4b61      	ldr	r3, [pc, #388]	; (8001e4c <MPU6050_Read_All+0x314>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7fe fb8a 	bl	80003e4 <__aeabi_ui2d>
 8001cd0:	f04f 0200 	mov.w	r2, #0
 8001cd4:	4b5e      	ldr	r3, [pc, #376]	; (8001e50 <MPU6050_Read_All+0x318>)
 8001cd6:	f7fe fd29 	bl	800072c <__aeabi_ddiv>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	460b      	mov	r3, r1
 8001cde:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8001ce2:	f003 fb3d 	bl	8005360 <HAL_GetTick>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	4a58      	ldr	r2, [pc, #352]	; (8001e4c <MPU6050_Read_All+0x314>)
 8001cea:	6013      	str	r3, [r2, #0]

    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cfa:	fb03 f202 	mul.w	r2, r3, r2
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d04:	4619      	mov	r1, r3
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d0c:	fb01 f303 	mul.w	r3, r1, r3
 8001d10:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7fe fb76 	bl	8000404 <__aeabi_i2d>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	4610      	mov	r0, r2
 8001d1e:	4619      	mov	r1, r3
 8001d20:	f00b fbde 	bl	800d4e0 <sqrt>
 8001d24:	e9c7 0108 	strd	r0, r1, [r7, #32]
    if (roll_sqrt != 0.0)
 8001d28:	f04f 0200 	mov.w	r2, #0
 8001d2c:	f04f 0300 	mov.w	r3, #0
 8001d30:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d34:	f7fe fe38 	bl	80009a8 <__aeabi_dcmpeq>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d119      	bne.n	8001d72 <MPU6050_Read_All+0x23a>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7fe fb5d 	bl	8000404 <__aeabi_i2d>
 8001d4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d4e:	f7fe fced 	bl	800072c <__aeabi_ddiv>
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	4610      	mov	r0, r2
 8001d58:	4619      	mov	r1, r3
 8001d5a:	f00b fbe5 	bl	800d528 <atan>
 8001d5e:	a336      	add	r3, pc, #216	; (adr r3, 8001e38 <MPU6050_Read_All+0x300>)
 8001d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d64:	f7fe fbb8 	bl	80004d8 <__aeabi_dmul>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001d70:	e005      	b.n	8001d7e <MPU6050_Read_All+0x246>
    }
    else
    {
        roll = 0.0;
 8001d72:	f04f 0200 	mov.w	r2, #0
 8001d76:	f04f 0300 	mov.w	r3, #0
 8001d7a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d84:	425b      	negs	r3, r3
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7fe fb3c 	bl	8000404 <__aeabi_i2d>
 8001d8c:	4682      	mov	sl, r0
 8001d8e:	468b      	mov	fp, r1
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7fe fb34 	bl	8000404 <__aeabi_i2d>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	4650      	mov	r0, sl
 8001da2:	4659      	mov	r1, fp
 8001da4:	f00b fb9a 	bl	800d4dc <atan2>
 8001da8:	a323      	add	r3, pc, #140	; (adr r3, 8001e38 <MPU6050_Read_All+0x300>)
 8001daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dae:	f7fe fb93 	bl	80004d8 <__aeabi_dmul>
 8001db2:	4602      	mov	r2, r0
 8001db4:	460b      	mov	r3, r1
 8001db6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8001dba:	f04f 0200 	mov.w	r2, #0
 8001dbe:	4b25      	ldr	r3, [pc, #148]	; (8001e54 <MPU6050_Read_All+0x31c>)
 8001dc0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001dc4:	f7fe fdfa 	bl	80009bc <__aeabi_dcmplt>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d00a      	beq.n	8001de4 <MPU6050_Read_All+0x2ac>
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8001dd4:	f04f 0200 	mov.w	r2, #0
 8001dd8:	4b1f      	ldr	r3, [pc, #124]	; (8001e58 <MPU6050_Read_All+0x320>)
 8001dda:	f7fe fe0d 	bl	80009f8 <__aeabi_dcmpgt>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d114      	bne.n	8001e0e <MPU6050_Read_All+0x2d6>
 8001de4:	f04f 0200 	mov.w	r2, #0
 8001de8:	4b1b      	ldr	r3, [pc, #108]	; (8001e58 <MPU6050_Read_All+0x320>)
 8001dea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001dee:	f7fe fe03 	bl	80009f8 <__aeabi_dcmpgt>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d033      	beq.n	8001e60 <MPU6050_Read_All+0x328>
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8001dfe:	f04f 0200 	mov.w	r2, #0
 8001e02:	4b14      	ldr	r3, [pc, #80]	; (8001e54 <MPU6050_Read_All+0x31c>)
 8001e04:	f7fe fdda 	bl	80009bc <__aeabi_dcmplt>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d028      	beq.n	8001e60 <MPU6050_Read_All+0x328>
    {
        KalmanY.angle = pitch;
 8001e0e:	4913      	ldr	r1, [pc, #76]	; (8001e5c <MPU6050_Read_All+0x324>)
 8001e10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e14:	e9c1 2306 	strd	r2, r3, [r1, #24]
        //DataStruct->KalmanAngleY = pitch;
        DataStruct->CFAngleY = pitch;
 8001e18:	6839      	ldr	r1, [r7, #0]
 8001e1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e1e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001e22:	e05f      	b.n	8001ee4 <MPU6050_Read_All+0x3ac>
 8001e24:	f3af 8000 	nop.w
 8001e28:	00000000 	.word	0x00000000
 8001e2c:	40cc2900 	.word	0x40cc2900
 8001e30:	00000000 	.word	0x00000000
 8001e34:	40606000 	.word	0x40606000
 8001e38:	1a63c1f8 	.word	0x1a63c1f8
 8001e3c:	404ca5dc 	.word	0x404ca5dc
 8001e40:	40d00000 	.word	0x40d00000
 8001e44:	43aa0000 	.word	0x43aa0000
 8001e48:	42121eb8 	.word	0x42121eb8
 8001e4c:	200005dc 	.word	0x200005dc
 8001e50:	408f4000 	.word	0x408f4000
 8001e54:	c0568000 	.word	0xc0568000
 8001e58:	40568000 	.word	0x40568000
 8001e5c:	20000000 	.word	0x20000000
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001e66:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001e6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001e6e:	e9cd 2300 	strd	r2, r3, [sp]
 8001e72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e76:	4846      	ldr	r0, [pc, #280]	; (8001f90 <MPU6050_Read_All+0x458>)
 8001e78:	f000 f88e 	bl	8001f98 <Kalman_getAngle>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	6839      	ldr	r1, [r7, #0]
 8001e82:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
        DataStruct->CFAngleY = 0.98 * ( DataStruct->CFAngleY + DataStruct->Gy * dt ) +0.02 * pitch;
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	e9d3 ab14 	ldrd	sl, fp, [r3, #80]	; 0x50
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001e92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e96:	f7fe fb1f 	bl	80004d8 <__aeabi_dmul>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	4650      	mov	r0, sl
 8001ea0:	4659      	mov	r1, fp
 8001ea2:	f7fe f963 	bl	800016c <__adddf3>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	4610      	mov	r0, r2
 8001eac:	4619      	mov	r1, r3
 8001eae:	a334      	add	r3, pc, #208	; (adr r3, 8001f80 <MPU6050_Read_All+0x448>)
 8001eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb4:	f7fe fb10 	bl	80004d8 <__aeabi_dmul>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	4692      	mov	sl, r2
 8001ebe:	469b      	mov	fp, r3
 8001ec0:	a331      	add	r3, pc, #196	; (adr r3, 8001f88 <MPU6050_Read_All+0x450>)
 8001ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001eca:	f7fe fb05 	bl	80004d8 <__aeabi_dmul>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	4650      	mov	r0, sl
 8001ed4:	4659      	mov	r1, fp
 8001ed6:	f7fe f949 	bl	800016c <__adddf3>
 8001eda:	4602      	mov	r2, r0
 8001edc:	460b      	mov	r3, r1
 8001ede:	6839      	ldr	r1, [r7, #0]
 8001ee0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001eea:	4690      	mov	r8, r2
 8001eec:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001ef0:	f04f 0200 	mov.w	r2, #0
 8001ef4:	4b27      	ldr	r3, [pc, #156]	; (8001f94 <MPU6050_Read_All+0x45c>)
 8001ef6:	4640      	mov	r0, r8
 8001ef8:	4649      	mov	r1, r9
 8001efa:	f7fe fd7d 	bl	80009f8 <__aeabi_dcmpgt>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d008      	beq.n	8001f16 <MPU6050_Read_All+0x3de>
    {
        DataStruct->Gx = -DataStruct->Gx;
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001f0a:	4614      	mov	r4, r2
 8001f0c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    }
    	//DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
    	DataStruct->CFAngleX = 0.98 * ( DataStruct->CFAngleX + DataStruct->Gx * dt ) +0.02 * roll;
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001f22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f26:	f7fe fad7 	bl	80004d8 <__aeabi_dmul>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	4620      	mov	r0, r4
 8001f30:	4629      	mov	r1, r5
 8001f32:	f7fe f91b 	bl	800016c <__adddf3>
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	4610      	mov	r0, r2
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	a310      	add	r3, pc, #64	; (adr r3, 8001f80 <MPU6050_Read_All+0x448>)
 8001f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f44:	f7fe fac8 	bl	80004d8 <__aeabi_dmul>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	4614      	mov	r4, r2
 8001f4e:	461d      	mov	r5, r3
 8001f50:	a30d      	add	r3, pc, #52	; (adr r3, 8001f88 <MPU6050_Read_All+0x450>)
 8001f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f56:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001f5a:	f7fe fabd 	bl	80004d8 <__aeabi_dmul>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	460b      	mov	r3, r1
 8001f62:	4620      	mov	r0, r4
 8001f64:	4629      	mov	r1, r5
 8001f66:	f7fe f901 	bl	800016c <__adddf3>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	6839      	ldr	r1, [r7, #0]
 8001f70:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

}
 8001f74:	bf00      	nop
 8001f76:	3740      	adds	r7, #64	; 0x40
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f7e:	bf00      	nop
 8001f80:	f5c28f5c 	.word	0xf5c28f5c
 8001f84:	3fef5c28 	.word	0x3fef5c28
 8001f88:	47ae147b 	.word	0x47ae147b
 8001f8c:	3f947ae1 	.word	0x3f947ae1
 8001f90:	20000000 	.word	0x20000000
 8001f94:	40568000 	.word	0x40568000

08001f98 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8001f98:	b5b0      	push	{r4, r5, r7, lr}
 8001f9a:	b092      	sub	sp, #72	; 0x48
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001faa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001fae:	f7fe f8db 	bl	8000168 <__aeabi_dsub>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += dt * rate;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001fc0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001fc4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001fc8:	f7fe fa86 	bl	80004d8 <__aeabi_dmul>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	4620      	mov	r0, r4
 8001fd2:	4629      	mov	r1, r5
 8001fd4:	f7fe f8ca 	bl	800016c <__adddf3>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	68f9      	ldr	r1, [r7, #12]
 8001fde:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001fee:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001ff2:	f7fe fa71 	bl	80004d8 <__aeabi_dmul>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	4610      	mov	r0, r2
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002004:	f7fe f8b0 	bl	8000168 <__aeabi_dsub>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	4610      	mov	r0, r2
 800200e:	4619      	mov	r1, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002016:	f7fe f8a7 	bl	8000168 <__aeabi_dsub>
 800201a:	4602      	mov	r2, r0
 800201c:	460b      	mov	r3, r1
 800201e:	4610      	mov	r0, r2
 8002020:	4619      	mov	r1, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002028:	f7fe f8a0 	bl	800016c <__adddf3>
 800202c:	4602      	mov	r2, r0
 800202e:	460b      	mov	r3, r1
 8002030:	4610      	mov	r0, r2
 8002032:	4619      	mov	r1, r3
 8002034:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002038:	f7fe fa4e 	bl	80004d8 <__aeabi_dmul>
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	4620      	mov	r0, r4
 8002042:	4629      	mov	r1, r5
 8002044:	f7fe f892 	bl	800016c <__adddf3>
 8002048:	4602      	mov	r2, r0
 800204a:	460b      	mov	r3, r1
 800204c:	68f9      	ldr	r1, [r7, #12]
 800204e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800205e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002062:	f7fe fa39 	bl	80004d8 <__aeabi_dmul>
 8002066:	4602      	mov	r2, r0
 8002068:	460b      	mov	r3, r1
 800206a:	4620      	mov	r0, r4
 800206c:	4629      	mov	r1, r5
 800206e:	f7fe f87b 	bl	8000168 <__aeabi_dsub>
 8002072:	4602      	mov	r2, r0
 8002074:	460b      	mov	r3, r1
 8002076:	68f9      	ldr	r1, [r7, #12]
 8002078:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002088:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800208c:	f7fe fa24 	bl	80004d8 <__aeabi_dmul>
 8002090:	4602      	mov	r2, r0
 8002092:	460b      	mov	r3, r1
 8002094:	4620      	mov	r0, r4
 8002096:	4629      	mov	r1, r5
 8002098:	f7fe f866 	bl	8000168 <__aeabi_dsub>
 800209c:	4602      	mov	r2, r0
 800209e:	460b      	mov	r3, r1
 80020a0:	68f9      	ldr	r1, [r7, #12]
 80020a2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80020b2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80020b6:	f7fe fa0f 	bl	80004d8 <__aeabi_dmul>
 80020ba:	4602      	mov	r2, r0
 80020bc:	460b      	mov	r3, r1
 80020be:	4620      	mov	r0, r4
 80020c0:	4629      	mov	r1, r5
 80020c2:	f7fe f853 	bl	800016c <__adddf3>
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	68f9      	ldr	r1, [r7, #12]
 80020cc:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80020dc:	f7fe f846 	bl	800016c <__adddf3>
 80020e0:	4602      	mov	r2, r0
 80020e2:	460b      	mov	r3, r1
 80020e4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80020ee:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80020f2:	f7fe fb1b 	bl	800072c <__aeabi_ddiv>
 80020f6:	4602      	mov	r2, r0
 80020f8:	460b      	mov	r3, r1
 80020fa:	e9c7 2304 	strd	r2, r3, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002104:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002108:	f7fe fb10 	bl	800072c <__aeabi_ddiv>
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double y = newAngle - Kalman->angle;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800211a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800211e:	f7fe f823 	bl	8000168 <__aeabi_dsub>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    Kalman->angle += K[0] * y;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002130:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002134:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002138:	f7fe f9ce 	bl	80004d8 <__aeabi_dmul>
 800213c:	4602      	mov	r2, r0
 800213e:	460b      	mov	r3, r1
 8002140:	4620      	mov	r0, r4
 8002142:	4629      	mov	r1, r5
 8002144:	f7fe f812 	bl	800016c <__adddf3>
 8002148:	4602      	mov	r2, r0
 800214a:	460b      	mov	r3, r1
 800214c:	68f9      	ldr	r1, [r7, #12]
 800214e:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002158:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800215c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002160:	f7fe f9ba 	bl	80004d8 <__aeabi_dmul>
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	4620      	mov	r0, r4
 800216a:	4629      	mov	r1, r5
 800216c:	f7fd fffe 	bl	800016c <__adddf3>
 8002170:	4602      	mov	r2, r0
 8002172:	460b      	mov	r3, r1
 8002174:	68f9      	ldr	r1, [r7, #12]
 8002176:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002180:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double P01_temp = Kalman->P[0][1];
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800218a:	e9c7 2308 	strd	r2, r3, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002194:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002198:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800219c:	f7fe f99c 	bl	80004d8 <__aeabi_dmul>
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	4620      	mov	r0, r4
 80021a6:	4629      	mov	r1, r5
 80021a8:	f7fd ffde 	bl	8000168 <__aeabi_dsub>
 80021ac:	4602      	mov	r2, r0
 80021ae:	460b      	mov	r3, r1
 80021b0:	68f9      	ldr	r1, [r7, #12]
 80021b2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80021bc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80021c0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80021c4:	f7fe f988 	bl	80004d8 <__aeabi_dmul>
 80021c8:	4602      	mov	r2, r0
 80021ca:	460b      	mov	r3, r1
 80021cc:	4620      	mov	r0, r4
 80021ce:	4629      	mov	r1, r5
 80021d0:	f7fd ffca 	bl	8000168 <__aeabi_dsub>
 80021d4:	4602      	mov	r2, r0
 80021d6:	460b      	mov	r3, r1
 80021d8:	68f9      	ldr	r1, [r7, #12]
 80021da:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80021e4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80021e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80021ec:	f7fe f974 	bl	80004d8 <__aeabi_dmul>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	4620      	mov	r0, r4
 80021f6:	4629      	mov	r1, r5
 80021f8:	f7fd ffb6 	bl	8000168 <__aeabi_dsub>
 80021fc:	4602      	mov	r2, r0
 80021fe:	460b      	mov	r3, r1
 8002200:	68f9      	ldr	r1, [r7, #12]
 8002202:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 800220c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002210:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002214:	f7fe f960 	bl	80004d8 <__aeabi_dmul>
 8002218:	4602      	mov	r2, r0
 800221a:	460b      	mov	r3, r1
 800221c:	4620      	mov	r0, r4
 800221e:	4629      	mov	r1, r5
 8002220:	f7fd ffa2 	bl	8000168 <__aeabi_dsub>
 8002224:	4602      	mov	r2, r0
 8002226:	460b      	mov	r3, r1
 8002228:	68f9      	ldr	r1, [r7, #12]
 800222a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 8002234:	4610      	mov	r0, r2
 8002236:	4619      	mov	r1, r3
 8002238:	3748      	adds	r7, #72	; 0x48
 800223a:	46bd      	mov	sp, r7
 800223c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002240 <_qFFMath_GetAbnormal>:
(void)memcpy( &dst, &src, sizeof(dst_type) )                                \

static float qFFMath_CalcCbrt( float x , bool r );
/*============================================================================*/
float _qFFMath_GetAbnormal( const int i )
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
    static const uint32_t u_ab[ 2 ] = { 0x7F800000u, 0x7FBFFFFFu };
    static float f_ab[ 2 ] = { 0.0f, 0.0f };
    static bool init = true;
    
    if ( init ) {
 8002248:	4b0a      	ldr	r3, [pc, #40]	; (8002274 <_qFFMath_GetAbnormal+0x34>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d008      	beq.n	8002262 <_qFFMath_GetAbnormal+0x22>
        /*cppcheck-suppress misra-c2012-21.15 */
        (void)memcpy( f_ab, u_ab, sizeof(f_ab) );
 8002250:	4b09      	ldr	r3, [pc, #36]	; (8002278 <_qFFMath_GetAbnormal+0x38>)
 8002252:	4a0a      	ldr	r2, [pc, #40]	; (800227c <_qFFMath_GetAbnormal+0x3c>)
 8002254:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002258:	e883 0003 	stmia.w	r3, {r0, r1}
        init = false;
 800225c:	4b05      	ldr	r3, [pc, #20]	; (8002274 <_qFFMath_GetAbnormal+0x34>)
 800225e:	2200      	movs	r2, #0
 8002260:	701a      	strb	r2, [r3, #0]
    }
    
    return f_ab[ i ]; 
 8002262:	4a05      	ldr	r2, [pc, #20]	; (8002278 <_qFFMath_GetAbnormal+0x38>)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800226a:	4618      	mov	r0, r3
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr
 8002274:	20000048 	.word	0x20000048
 8002278:	200005e0 	.word	0x200005e0
 800227c:	0800ddf0 	.word	0x0800ddf0

08002280 <qFFMath_FPClassify>:
/*============================================================================*/
int qFFMath_FPClassify( const float f ) 
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
    uint32_t u = 0u;
 8002288:	2300      	movs	r3, #0
 800228a:	60bb      	str	r3, [r7, #8]
 800228c:	687b      	ldr	r3, [r7, #4]
    int retVal;

    /*cppcheck-suppress misra-c2012-21.15 */
    cast_reinterpret( u, f, uint32_t );
 800228e:	60bb      	str	r3, [r7, #8]
    u &= 0x7FFFFFFFu;
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002296:	60bb      	str	r3, [r7, #8]

    if ( 0u == u ) {
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d102      	bne.n	80022a4 <qFFMath_FPClassify+0x24>
        retVal = QFFM_FP_ZERO;
 800229e:	2300      	movs	r3, #0
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	e016      	b.n	80022d2 <qFFMath_FPClassify+0x52>
    }
    else if ( u < 0x00800000u ) {
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80022aa:	d202      	bcs.n	80022b2 <qFFMath_FPClassify+0x32>
        retVal = QFFM_FP_SUBNORMAL;
 80022ac:	2301      	movs	r3, #1
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	e00f      	b.n	80022d2 <qFFMath_FPClassify+0x52>
    }
    else if ( u < 0x7F800000u ) {
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80022b8:	d202      	bcs.n	80022c0 <qFFMath_FPClassify+0x40>
        retVal = QFFM_FP_NORMAL;
 80022ba:	2302      	movs	r3, #2
 80022bc:	60fb      	str	r3, [r7, #12]
 80022be:	e008      	b.n	80022d2 <qFFMath_FPClassify+0x52>
    }
    else if ( 0x7F800000U == u ) {
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80022c6:	d102      	bne.n	80022ce <qFFMath_FPClassify+0x4e>
        retVal = QFFM_FP_INFINITE;
 80022c8:	2303      	movs	r3, #3
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	e001      	b.n	80022d2 <qFFMath_FPClassify+0x52>
    }
    else {
        retVal = QFFM_FP_NAN;
 80022ce:	2304      	movs	r3, #4
 80022d0:	60fb      	str	r3, [r7, #12]
    }

    return retVal;
 80022d2:	68fb      	ldr	r3, [r7, #12]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3714      	adds	r7, #20
 80022d8:	46bd      	mov	sp, r7
 80022da:	bc80      	pop	{r7}
 80022dc:	4770      	bx	lr

080022de <qFFMath_IsNaN>:
/*============================================================================*/
bool qFFMath_IsNaN( const float x )
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b082      	sub	sp, #8
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
    return ( QFFM_FP_NAN == qFFMath_FPClassify( x ) );
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7ff ffca 	bl	8002280 <qFFMath_FPClassify>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	bf0c      	ite	eq
 80022f2:	2301      	moveq	r3, #1
 80022f4:	2300      	movne	r3, #0
 80022f6:	b2db      	uxtb	r3, r3
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <qFFMath_Abs>:
{
    return ( qFFMath_FPClassify( x ) == QFFM_FP_NORMAL );
}
/*============================================================================*/
float qFFMath_Abs( float x )
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
    return ( x < 0.0f ) ? -x : x;
 8002308:	f04f 0100 	mov.w	r1, #0
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f7fe fed7 	bl	80010c0 <__aeabi_fcmplt>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d003      	beq.n	8002320 <qFFMath_Abs+0x20>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800231e:	e000      	b.n	8002322 <qFFMath_Abs+0x22>
 8002320:	687b      	ldr	r3, [r7, #4]
}
 8002322:	4618      	mov	r0, r3
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <qFFMath_Sqrt>:
    
    return z*( 2.0f - ( x*z ) );
}
/*============================================================================*/
float qFFMath_Sqrt( float x )
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b086      	sub	sp, #24
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
    float retVal;

    if ( x < 0.0f ) {
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f04f 0100 	mov.w	r1, #0
 8002338:	4618      	mov	r0, r3
 800233a:	f7fe fec1 	bl	80010c0 <__aeabi_fcmplt>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d004      	beq.n	800234e <qFFMath_Sqrt+0x24>
        retVal = QFFM_NAN;
 8002344:	2001      	movs	r0, #1
 8002346:	f7ff ff7b 	bl	8002240 <_qFFMath_GetAbnormal>
 800234a:	6178      	str	r0, [r7, #20]
 800234c:	e02f      	b.n	80023ae <qFFMath_Sqrt+0x84>
    }
    else if ( QFFM_FP_ZERO == qFFMath_FPClassify( x ) ) {
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff ff95 	bl	8002280 <qFFMath_FPClassify>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d103      	bne.n	8002364 <qFFMath_Sqrt+0x3a>
        retVal = 0.0f;
 800235c:	f04f 0300 	mov.w	r3, #0
 8002360:	617b      	str	r3, [r7, #20]
 8002362:	e024      	b.n	80023ae <qFFMath_Sqrt+0x84>
    }
    else {
        uint32_t y = 0u;
 8002364:	2300      	movs	r3, #0
 8002366:	613b      	str	r3, [r7, #16]
        float z = 0.0f;
 8002368:	f04f 0300 	mov.w	r3, #0
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	687b      	ldr	r3, [r7, #4]
        /*cppcheck-suppress misra-c2012-21.15 */
        cast_reinterpret( y, x, uint32_t );
 8002370:	613b      	str	r3, [r7, #16]
        y = ( ( y - 0x00800000u ) >> 1u ) + 0x20000000u;
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8002378:	085b      	lsrs	r3, r3, #1
 800237a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800237e:	613b      	str	r3, [r7, #16]
 8002380:	693b      	ldr	r3, [r7, #16]
        /*cppcheck-suppress misra-c2012-21.15 */
        cast_reinterpret( z, y, float );
 8002382:	60fb      	str	r3, [r7, #12]
        retVal = ( ( x/z ) + z ) * 0.5f;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	4611      	mov	r1, r2
 800238a:	4618      	mov	r0, r3
 800238c:	f7fe fdae 	bl	8000eec <__aeabi_fdiv>
 8002390:	4603      	mov	r3, r0
 8002392:	461a      	mov	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	4619      	mov	r1, r3
 8002398:	4610      	mov	r0, r2
 800239a:	f7fe fbeb 	bl	8000b74 <__addsf3>
 800239e:	4603      	mov	r3, r0
 80023a0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7fe fced 	bl	8000d84 <__aeabi_fmul>
 80023aa:	4603      	mov	r3, r0
 80023ac:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 80023ae:	697b      	ldr	r3, [r7, #20]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3718      	adds	r7, #24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <qFFMath_Sin>:
    return ( QFFM_FP_ZERO == qFFMath_FPClassify( x )) ? QFFM_NAN
                                                      : ( x - ( y*qFFMath_Trunc( x/y ) ) );
}
/*============================================================================*/
float qFFMath_Sin( float x )
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
    float y;

    x *= -QFFM_1_PI;
 80023c0:	491e      	ldr	r1, [pc, #120]	; (800243c <qFFMath_Sin+0x84>)
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7fe fcde 	bl	8000d84 <__aeabi_fmul>
 80023c8:	4603      	mov	r3, r0
 80023ca:	607b      	str	r3, [r7, #4]
    y = x + 25165824.0f;
 80023cc:	491c      	ldr	r1, [pc, #112]	; (8002440 <qFFMath_Sin+0x88>)
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f7fe fbd0 	bl	8000b74 <__addsf3>
 80023d4:	4603      	mov	r3, r0
 80023d6:	60fb      	str	r3, [r7, #12]
    x -= y - 25165824.0f;
 80023d8:	4919      	ldr	r1, [pc, #100]	; (8002440 <qFFMath_Sin+0x88>)
 80023da:	68f8      	ldr	r0, [r7, #12]
 80023dc:	f7fe fbc8 	bl	8000b70 <__aeabi_fsub>
 80023e0:	4603      	mov	r3, r0
 80023e2:	4619      	mov	r1, r3
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f7fe fbc3 	bl	8000b70 <__aeabi_fsub>
 80023ea:	4603      	mov	r3, r0
 80023ec:	607b      	str	r3, [r7, #4]
    x *= qFFMath_Abs( x ) - 1.0f;
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7ff ff86 	bl	8002300 <qFFMath_Abs>
 80023f4:	4603      	mov	r3, r0
 80023f6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7fe fbb8 	bl	8000b70 <__aeabi_fsub>
 8002400:	4603      	mov	r3, r0
 8002402:	4619      	mov	r1, r3
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f7fe fcbd 	bl	8000d84 <__aeabi_fmul>
 800240a:	4603      	mov	r3, r0
 800240c:	607b      	str	r3, [r7, #4]

    return x*( ( 3.5841304553896f*qFFMath_Abs( x ) ) + 3.1039673861526f );
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7ff ff76 	bl	8002300 <qFFMath_Abs>
 8002414:	4603      	mov	r3, r0
 8002416:	490b      	ldr	r1, [pc, #44]	; (8002444 <qFFMath_Sin+0x8c>)
 8002418:	4618      	mov	r0, r3
 800241a:	f7fe fcb3 	bl	8000d84 <__aeabi_fmul>
 800241e:	4603      	mov	r3, r0
 8002420:	4909      	ldr	r1, [pc, #36]	; (8002448 <qFFMath_Sin+0x90>)
 8002422:	4618      	mov	r0, r3
 8002424:	f7fe fba6 	bl	8000b74 <__addsf3>
 8002428:	4603      	mov	r3, r0
 800242a:	6879      	ldr	r1, [r7, #4]
 800242c:	4618      	mov	r0, r3
 800242e:	f7fe fca9 	bl	8000d84 <__aeabi_fmul>
 8002432:	4603      	mov	r3, r0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	bea2f983 	.word	0xbea2f983
 8002440:	4bc00000 	.word	0x4bc00000
 8002444:	40656265 	.word	0x40656265
 8002448:	4046a767 	.word	0x4046a767

0800244c <qFFMath_Cos>:
/*============================================================================*/
float qFFMath_Cos( float x )
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
    return qFFMath_Sin( x + QFFM_PI_2 );
 8002454:	4906      	ldr	r1, [pc, #24]	; (8002470 <qFFMath_Cos+0x24>)
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7fe fb8c 	bl	8000b74 <__addsf3>
 800245c:	4603      	mov	r3, r0
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff ffaa 	bl	80023b8 <qFFMath_Sin>
 8002464:	4603      	mov	r3, r0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	3fc90fdb 	.word	0x3fc90fdb

08002474 <qFFMath_Exp2>:

    return y + ( f*( ( 0.5f*t ) - y ) );
}
/*============================================================================*/
float qFFMath_Exp2( float x )
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
    float retVal;

    if ( x <= -126.0f ) {
 800247c:	492e      	ldr	r1, [pc, #184]	; (8002538 <qFFMath_Exp2+0xc4>)
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7fe fe28 	bl	80010d4 <__aeabi_fcmple>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <qFFMath_Exp2+0x1e>
        retVal = 0.0f;
 800248a:	f04f 0300 	mov.w	r3, #0
 800248e:	617b      	str	r3, [r7, #20]
 8002490:	e04c      	b.n	800252c <qFFMath_Exp2+0xb8>
    }
    else if ( x > 128.0f ) {
 8002492:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7fe fe30 	bl	80010fc <__aeabi_fcmpgt>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d004      	beq.n	80024ac <qFFMath_Exp2+0x38>
        retVal = QFFM_INFINITY;
 80024a2:	2000      	movs	r0, #0
 80024a4:	f7ff fecc 	bl	8002240 <_qFFMath_GetAbnormal>
 80024a8:	6178      	str	r0, [r7, #20]
 80024aa:	e03f      	b.n	800252c <qFFMath_Exp2+0xb8>
    }
    else {
        float y = 0.0f;
 80024ac:	f04f 0300 	mov.w	r3, #0
 80024b0:	613b      	str	r3, [r7, #16]
        uint32_t exponent;
        /*cstat -CERT-FLP34-C -MISRAC2012-Rule-10.8*/
        exponent = (uint32_t)( x + 127.0f );
 80024b2:	4922      	ldr	r1, [pc, #136]	; (800253c <qFFMath_Exp2+0xc8>)
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f7fe fb5d 	bl	8000b74 <__addsf3>
 80024ba:	4603      	mov	r3, r0
 80024bc:	4618      	mov	r0, r3
 80024be:	f7fe fe4d 	bl	800115c <__aeabi_f2uiz>
 80024c2:	4603      	mov	r3, r0
 80024c4:	60fb      	str	r3, [r7, #12]
        /*cstat +CERT-FLP34-C +MISRAC2012-Rule-10.8 -CERT-FLP36-C*/
        x += 127.0f - (float)exponent;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7fe fc03 	bl	8000cd4 <__aeabi_ui2f>
 80024ce:	4603      	mov	r3, r0
 80024d0:	4619      	mov	r1, r3
 80024d2:	481a      	ldr	r0, [pc, #104]	; (800253c <qFFMath_Exp2+0xc8>)
 80024d4:	f7fe fb4c 	bl	8000b70 <__aeabi_fsub>
 80024d8:	4603      	mov	r3, r0
 80024da:	4619      	mov	r1, r3
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f7fe fb49 	bl	8000b74 <__addsf3>
 80024e2:	4603      	mov	r3, r0
 80024e4:	607b      	str	r3, [r7, #4]
        /*cstat +CERT-FLP36-C*/
        exponent <<= 23u;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	05db      	lsls	r3, r3, #23
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	68fb      	ldr	r3, [r7, #12]
        /*cppcheck-suppress misra-c2012-21.15 */
        cast_reinterpret( y, exponent, float );
 80024ee:	613b      	str	r3, [r7, #16]
        x *= ( x*0.339766027f ) + 0.660233972f;
 80024f0:	4913      	ldr	r1, [pc, #76]	; (8002540 <qFFMath_Exp2+0xcc>)
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f7fe fc46 	bl	8000d84 <__aeabi_fmul>
 80024f8:	4603      	mov	r3, r0
 80024fa:	4912      	ldr	r1, [pc, #72]	; (8002544 <qFFMath_Exp2+0xd0>)
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7fe fb39 	bl	8000b74 <__addsf3>
 8002502:	4603      	mov	r3, r0
 8002504:	4619      	mov	r1, r3
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7fe fc3c 	bl	8000d84 <__aeabi_fmul>
 800250c:	4603      	mov	r3, r0
 800250e:	607b      	str	r3, [r7, #4]
        retVal = y*( x + 1.0f );
 8002510:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f7fe fb2d 	bl	8000b74 <__addsf3>
 800251a:	4603      	mov	r3, r0
 800251c:	461a      	mov	r2, r3
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	4619      	mov	r1, r3
 8002522:	4610      	mov	r0, r2
 8002524:	f7fe fc2e 	bl	8000d84 <__aeabi_fmul>
 8002528:	4603      	mov	r3, r0
 800252a:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 800252c:	697b      	ldr	r3, [r7, #20]
}
 800252e:	4618      	mov	r0, r3
 8002530:	3718      	adds	r7, #24
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	c2fc0000 	.word	0xc2fc0000
 800253c:	42fe0000 	.word	0x42fe0000
 8002540:	3eadf5d0 	.word	0x3eadf5d0
 8002544:	3f290518 	.word	0x3f290518

08002548 <qFFMath_Log2>:
/*============================================================================*/
float qFFMath_Log2( float x )
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
    float retVal;

    if ( x < 0.0f ) {
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f04f 0100 	mov.w	r1, #0
 8002556:	4618      	mov	r0, r3
 8002558:	f7fe fdb2 	bl	80010c0 <__aeabi_fcmplt>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d004      	beq.n	800256c <qFFMath_Log2+0x24>
        retVal = QFFM_NAN;
 8002562:	2001      	movs	r0, #1
 8002564:	f7ff fe6c 	bl	8002240 <_qFFMath_GetAbnormal>
 8002568:	6178      	str	r0, [r7, #20]
 800256a:	e049      	b.n	8002600 <qFFMath_Log2+0xb8>
    }
    else if ( QFFM_FP_ZERO == qFFMath_FPClassify( x ) ) {
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff fe86 	bl	8002280 <qFFMath_FPClassify>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d107      	bne.n	800258a <qFFMath_Log2+0x42>
        retVal = -QFFM_INFINITY;
 800257a:	2000      	movs	r0, #0
 800257c:	f7ff fe60 	bl	8002240 <_qFFMath_GetAbnormal>
 8002580:	4603      	mov	r3, r0
 8002582:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002586:	617b      	str	r3, [r7, #20]
 8002588:	e03a      	b.n	8002600 <qFFMath_Log2+0xb8>
    }
    else {
        uint32_t y = 0u, y2;
 800258a:	2300      	movs	r3, #0
 800258c:	60fb      	str	r3, [r7, #12]
 800258e:	687b      	ldr	r3, [r7, #4]
        /*cppcheck-suppress misra-c2012-21.15 */
        cast_reinterpret( y, x, uint32_t );
 8002590:	60fb      	str	r3, [r7, #12]
        y2 = y;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	613b      	str	r3, [r7, #16]
        y >>= 23u;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	0ddb      	lsrs	r3, r3, #23
 800259a:	60fb      	str	r3, [r7, #12]
        /*cstat -CERT-FLP36-C*/
        retVal = (float)y;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7fe fb98 	bl	8000cd4 <__aeabi_ui2f>
 80025a4:	4603      	mov	r3, r0
 80025a6:	617b      	str	r3, [r7, #20]
        /*cstat +CERT-FLP36-C*/
        y = ( y2 & 0x007FFFFFu ) | 0x3F800000u;
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80025ae:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	68fb      	ldr	r3, [r7, #12]
        /*cppcheck-suppress misra-c2012-21.15 */
        cast_reinterpret( x, y, float );
 80025b6:	607b      	str	r3, [r7, #4]
        retVal += -128.0f + ( x*( ( -0.333333333f*x ) + 2.0f ) ) - 0.666666666f;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4914      	ldr	r1, [pc, #80]	; (800260c <qFFMath_Log2+0xc4>)
 80025bc:	4618      	mov	r0, r3
 80025be:	f7fe fbe1 	bl	8000d84 <__aeabi_fmul>
 80025c2:	4603      	mov	r3, r0
 80025c4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7fe fad3 	bl	8000b74 <__addsf3>
 80025ce:	4603      	mov	r3, r0
 80025d0:	461a      	mov	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4619      	mov	r1, r3
 80025d6:	4610      	mov	r0, r2
 80025d8:	f7fe fbd4 	bl	8000d84 <__aeabi_fmul>
 80025dc:	4603      	mov	r3, r0
 80025de:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7fe fac4 	bl	8000b70 <__aeabi_fsub>
 80025e8:	4603      	mov	r3, r0
 80025ea:	4909      	ldr	r1, [pc, #36]	; (8002610 <qFFMath_Log2+0xc8>)
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7fe fabf 	bl	8000b70 <__aeabi_fsub>
 80025f2:	4603      	mov	r3, r0
 80025f4:	4619      	mov	r1, r3
 80025f6:	6978      	ldr	r0, [r7, #20]
 80025f8:	f7fe fabc 	bl	8000b74 <__addsf3>
 80025fc:	4603      	mov	r3, r0
 80025fe:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 8002600:	697b      	ldr	r3, [r7, #20]
}
 8002602:	4618      	mov	r0, r3
 8002604:	3718      	adds	r7, #24
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	beaaaaab 	.word	0xbeaaaaab
 8002610:	3f2aaaab 	.word	0x3f2aaaab

08002614 <qFFMath_Exp>:
/*============================================================================*/
float qFFMath_Exp( float x )
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
    return qFFMath_Exp2( QFFM_LOG2E*x );
 800261c:	4906      	ldr	r1, [pc, #24]	; (8002638 <qFFMath_Exp+0x24>)
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f7fe fbb0 	bl	8000d84 <__aeabi_fmul>
 8002624:	4603      	mov	r3, r0
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff ff24 	bl	8002474 <qFFMath_Exp2>
 800262c:	4603      	mov	r3, r0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	3fb8aa3b 	.word	0x3fb8aa3b

0800263c <qFFMath_Log>:
{
    return qFFMath_Exp2( 3.32192809f*x );
}
/*============================================================================*/
float qFFMath_Log( float x )
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
    return QFFM_LN2*qFFMath_Log2(x);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f7ff ff7f 	bl	8002548 <qFFMath_Log2>
 800264a:	4603      	mov	r3, r0
 800264c:	4904      	ldr	r1, [pc, #16]	; (8002660 <qFFMath_Log+0x24>)
 800264e:	4618      	mov	r0, r3
 8002650:	f7fe fb98 	bl	8000d84 <__aeabi_fmul>
 8002654:	4603      	mov	r3, r0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	3f317218 	.word	0x3f317218

08002664 <qFFMath_Pow>:
    return 0.301029996f*qFFMath_Log2(x);
}
/*============================================================================*/
float qFFMath_Pow( float b,
                   float e )
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
    return qFFMath_Exp2( e*qFFMath_Log2( b ) );
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7ff ff6a 	bl	8002548 <qFFMath_Log2>
 8002674:	4603      	mov	r3, r0
 8002676:	6839      	ldr	r1, [r7, #0]
 8002678:	4618      	mov	r0, r3
 800267a:	f7fe fb83 	bl	8000d84 <__aeabi_fmul>
 800267e:	4603      	mov	r3, r0
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff fef7 	bl	8002474 <qFFMath_Exp2>
 8002686:	4603      	mov	r3, r0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <qFIS_SetParameter>:

/*============================================================================*/
int qFIS_SetParameter( qFIS_t * const f,
                       const qFIS_Parameter_t p,
                       const qFIS_ParamValue_t x )
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	460b      	mov	r3, r1
 800269a:	70fb      	strb	r3, [r7, #3]
 800269c:	4613      	mov	r3, r2
 800269e:	70bb      	strb	r3, [r7, #2]
    int retVal = 0;
 80026a0:	2300      	movs	r3, #0
 80026a2:	60fb      	str	r3, [r7, #12]
    typedef float (*methods_fcn)( const float a, const float b );
    static const methods_fcn method[ 5 ] = { &qFIS_Min, &qFIS_Prod, &qFIS_Max,
                                             &qFIS_ProbOR, &qFIS_Sum
                                           };

    if ( NULL != f ) {
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d05a      	beq.n	8002760 <qFIS_SetParameter+0xd0>
        switch ( p ) {
 80026aa:	78fb      	ldrb	r3, [r7, #3]
 80026ac:	2b04      	cmp	r3, #4
 80026ae:	d84c      	bhi.n	800274a <qFIS_SetParameter+0xba>
 80026b0:	a201      	add	r2, pc, #4	; (adr r2, 80026b8 <qFIS_SetParameter+0x28>)
 80026b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026b6:	bf00      	nop
 80026b8:	080026cd 	.word	0x080026cd
 80026bc:	080026e5 	.word	0x080026e5
 80026c0:	08002703 	.word	0x08002703
 80026c4:	0800271b 	.word	0x0800271b
 80026c8:	08002739 	.word	0x08002739
            case qFIS_Implication:
                if ( x <= qFIS_PROD ) {
 80026cc:	78bb      	ldrb	r3, [r7, #2]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d83d      	bhi.n	800274e <qFIS_SetParameter+0xbe>
                    /*cppcheck-suppress misra-c2012-11.1 */
                    f->implicate = method[ x ];
 80026d2:	78bb      	ldrb	r3, [r7, #2]
 80026d4:	4a25      	ldr	r2, [pc, #148]	; (800276c <qFIS_SetParameter+0xdc>)
 80026d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	619a      	str	r2, [r3, #24]
                    retVal = 1;
 80026de:	2301      	movs	r3, #1
 80026e0:	60fb      	str	r3, [r7, #12]
                }
                break;
 80026e2:	e034      	b.n	800274e <qFIS_SetParameter+0xbe>
            case qFIS_Aggregation:
                if ( ( x >= qFIS_MAX ) && ( x <= qFIS_SUM ) ) {
 80026e4:	78bb      	ldrb	r3, [r7, #2]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d933      	bls.n	8002752 <qFIS_SetParameter+0xc2>
 80026ea:	78bb      	ldrb	r3, [r7, #2]
 80026ec:	2b04      	cmp	r3, #4
 80026ee:	d830      	bhi.n	8002752 <qFIS_SetParameter+0xc2>
                    /*cppcheck-suppress misra-c2012-11.1 */
                    f->aggregate = method[ x ];
 80026f0:	78bb      	ldrb	r3, [r7, #2]
 80026f2:	4a1e      	ldr	r2, [pc, #120]	; (800276c <qFIS_SetParameter+0xdc>)
 80026f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	61da      	str	r2, [r3, #28]
                    retVal = 1;
 80026fc:	2301      	movs	r3, #1
 80026fe:	60fb      	str	r3, [r7, #12]
                }
                break;
 8002700:	e027      	b.n	8002752 <qFIS_SetParameter+0xc2>
            case qFIS_AND:
                if ( x <= qFIS_PROD ) {
 8002702:	78bb      	ldrb	r3, [r7, #2]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d826      	bhi.n	8002756 <qFIS_SetParameter+0xc6>
                    /*cppcheck-suppress misra-c2012-11.1 */
                    f->andOp = method[ x ];
 8002708:	78bb      	ldrb	r3, [r7, #2]
 800270a:	4a18      	ldr	r2, [pc, #96]	; (800276c <qFIS_SetParameter+0xdc>)
 800270c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	611a      	str	r2, [r3, #16]
                    retVal = 1;
 8002714:	2301      	movs	r3, #1
 8002716:	60fb      	str	r3, [r7, #12]
                }
                break;
 8002718:	e01d      	b.n	8002756 <qFIS_SetParameter+0xc6>
            case qFIS_OR:
                if ( ( x >= qFIS_MAX ) && ( x <= qFIS_PROBOR ) ) {
 800271a:	78bb      	ldrb	r3, [r7, #2]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d91c      	bls.n	800275a <qFIS_SetParameter+0xca>
 8002720:	78bb      	ldrb	r3, [r7, #2]
 8002722:	2b03      	cmp	r3, #3
 8002724:	d819      	bhi.n	800275a <qFIS_SetParameter+0xca>
                    /*cppcheck-suppress misra-c2012-11.1 */
                    f->orOp = method[ x ];
 8002726:	78bb      	ldrb	r3, [r7, #2]
 8002728:	4a10      	ldr	r2, [pc, #64]	; (800276c <qFIS_SetParameter+0xdc>)
 800272a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	615a      	str	r2, [r3, #20]
                    retVal = 1;
 8002732:	2301      	movs	r3, #1
 8002734:	60fb      	str	r3, [r7, #12]
                }
                break;
 8002736:	e010      	b.n	800275a <qFIS_SetParameter+0xca>
            case qFIS_EvalPoints:
                if ( (int)x >= 20 ) {
 8002738:	78bb      	ldrb	r3, [r7, #2]
 800273a:	2b13      	cmp	r3, #19
 800273c:	d90f      	bls.n	800275e <qFIS_SetParameter+0xce>
                    f->nPoints = (size_t)x;
 800273e:	78ba      	ldrb	r2, [r7, #2]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	64da      	str	r2, [r3, #76]	; 0x4c
                    retVal = 1;
 8002744:	2301      	movs	r3, #1
 8002746:	60fb      	str	r3, [r7, #12]
                }
                break;
 8002748:	e009      	b.n	800275e <qFIS_SetParameter+0xce>
            default:
                break;
 800274a:	bf00      	nop
 800274c:	e008      	b.n	8002760 <qFIS_SetParameter+0xd0>
                break;
 800274e:	bf00      	nop
 8002750:	e006      	b.n	8002760 <qFIS_SetParameter+0xd0>
                break;
 8002752:	bf00      	nop
 8002754:	e004      	b.n	8002760 <qFIS_SetParameter+0xd0>
                break;
 8002756:	bf00      	nop
 8002758:	e002      	b.n	8002760 <qFIS_SetParameter+0xd0>
                break;
 800275a:	bf00      	nop
 800275c:	e000      	b.n	8002760 <qFIS_SetParameter+0xd0>
                break;
 800275e:	bf00      	nop
        }
    }

    return retVal;
 8002760:	68fb      	ldr	r3, [r7, #12]
}
 8002762:	4618      	mov	r0, r3
 8002764:	3714      	adds	r7, #20
 8002766:	46bd      	mov	sp, r7
 8002768:	bc80      	pop	{r7}
 800276a:	4770      	bx	lr
 800276c:	0800ddf8 	.word	0x0800ddf8

08002770 <qFIS_SetDeFuzzMethod>:
/*============================================================================*/
int qFIS_SetDeFuzzMethod( qFIS_t * const f,
                          qFIS_DeFuzz_Method_t m )
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	460b      	mov	r3, r1
 800277a:	70fb      	strb	r3, [r7, #3]
    int retVal = 0;
 800277c:	2300      	movs	r3, #0
 800277e:	60fb      	str	r3, [r7, #12]
                                                            &qFIS_DeFuzz_SOM,
                                                            &qFIS_DeFuzz_WtAverage,
                                                            &qFIS_DeFuzz_WtSum
                                                          };

    if ( ( NULL != f ) || ( m < _NUM_DFUZZ ) ) {
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d102      	bne.n	800278c <qFIS_SetDeFuzzMethod+0x1c>
 8002786:	78fb      	ldrb	r3, [r7, #3]
 8002788:	2b06      	cmp	r3, #6
 800278a:	d822      	bhi.n	80027d2 <qFIS_SetDeFuzzMethod+0x62>
        if ( ( ( Mamdani == f->type ) && ( m <= som ) ) ||
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8002792:	2b00      	cmp	r3, #0
 8002794:	d102      	bne.n	800279c <qFIS_SetDeFuzzMethod+0x2c>
 8002796:	78fb      	ldrb	r3, [r7, #3]
 8002798:	2b04      	cmp	r3, #4
 800279a:	d912      	bls.n	80027c2 <qFIS_SetDeFuzzMethod+0x52>
             ( ( Sugeno == f->type ) && ( m >= wtaver ) && ( m <= wtsum ) ) ||
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
        if ( ( ( Mamdani == f->type ) && ( m <= som ) ) ||
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d105      	bne.n	80027b2 <qFIS_SetDeFuzzMethod+0x42>
             ( ( Sugeno == f->type ) && ( m >= wtaver ) && ( m <= wtsum ) ) ||
 80027a6:	78fb      	ldrb	r3, [r7, #3]
 80027a8:	2b04      	cmp	r3, #4
 80027aa:	d902      	bls.n	80027b2 <qFIS_SetDeFuzzMethod+0x42>
 80027ac:	78fb      	ldrb	r3, [r7, #3]
 80027ae:	2b06      	cmp	r3, #6
 80027b0:	d907      	bls.n	80027c2 <qFIS_SetDeFuzzMethod+0x52>
             ( ( Tsukamoto == f->type ) && ( wtaver == m ) )) {
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
             ( ( Sugeno == f->type ) && ( m >= wtaver ) && ( m <= wtsum ) ) ||
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d10a      	bne.n	80027d2 <qFIS_SetDeFuzzMethod+0x62>
             ( ( Tsukamoto == f->type ) && ( wtaver == m ) )) {
 80027bc:	78fb      	ldrb	r3, [r7, #3]
 80027be:	2b05      	cmp	r3, #5
 80027c0:	d107      	bne.n	80027d2 <qFIS_SetDeFuzzMethod+0x62>
            /*cppcheck-suppress misra-c2012-11.1 */
            f->deFuzz = method[ m ];
 80027c2:	78fb      	ldrb	r3, [r7, #3]
 80027c4:	4a06      	ldr	r2, [pc, #24]	; (80027e0 <qFIS_SetDeFuzzMethod+0x70>)
 80027c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	629a      	str	r2, [r3, #40]	; 0x28
            retVal = 1;
 80027ce:	2301      	movs	r3, #1
 80027d0:	60fb      	str	r3, [r7, #12]
        }
    }
    return retVal;
 80027d2:	68fb      	ldr	r3, [r7, #12]
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3714      	adds	r7, #20
 80027d8:	46bd      	mov	sp, r7
 80027da:	bc80      	pop	{r7}
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	0800de0c 	.word	0x0800de0c

080027e4 <qFIS_Setup>:
                qFIS_MF_t *const mf_outputs,
                const size_t nmo,
                const qFIS_Rules_t * const r,
                float *wi,
                const size_t n )
{
 80027e4:	b5b0      	push	{r4, r5, r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	607a      	str	r2, [r7, #4]
 80027ee:	603b      	str	r3, [r7, #0]
 80027f0:	460b      	mov	r3, r1
 80027f2:	72fb      	strb	r3, [r7, #11]
    int retVal = 0;
 80027f4:	2300      	movs	r3, #0
 80027f6:	617b      	str	r3, [r7, #20]

    if ( ( NULL != f ) && ( t <= Tsukamoto ) && ( NULL != r ) && ( NULL != wi ) ) {
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f000 80bb 	beq.w	8002976 <qFIS_Setup+0x192>
 8002800:	7afb      	ldrb	r3, [r7, #11]
 8002802:	2b02      	cmp	r3, #2
 8002804:	f200 80b7 	bhi.w	8002976 <qFIS_Setup+0x192>
 8002808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 80b3 	beq.w	8002976 <qFIS_Setup+0x192>
 8002810:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002812:	2b00      	cmp	r3, #0
 8002814:	f000 80af 	beq.w	8002976 <qFIS_Setup+0x192>
        size_t i;

        f->nInputs = ni/sizeof(qFIS_Input_t);
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	4a59      	ldr	r2, [pc, #356]	; (8002980 <qFIS_Setup+0x19c>)
 800281c:	fba2 2303 	umull	r2, r3, r2, r3
 8002820:	08da      	lsrs	r2, r3, #3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	63da      	str	r2, [r3, #60]	; 0x3c
        f->nOutputs = no/sizeof(qFIS_Output_t);
 8002826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002828:	4a56      	ldr	r2, [pc, #344]	; (8002984 <qFIS_Setup+0x1a0>)
 800282a:	fba2 2303 	umull	r2, r3, r2, r3
 800282e:	091a      	lsrs	r2, r3, #4
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	641a      	str	r2, [r3, #64]	; 0x40
        f->nMFInputs = nmi/sizeof(qFIS_MF_t);
 8002834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002836:	4a54      	ldr	r2, [pc, #336]	; (8002988 <qFIS_Setup+0x1a4>)
 8002838:	fba2 2303 	umull	r2, r3, r2, r3
 800283c:	091a      	lsrs	r2, r3, #4
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	645a      	str	r2, [r3, #68]	; 0x44
        f->nMFOutputs = nmo/sizeof(qFIS_MF_t);
 8002842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002844:	4a50      	ldr	r2, [pc, #320]	; (8002988 <qFIS_Setup+0x1a4>)
 8002846:	fba2 2303 	umull	r2, r3, r2, r3
 800284a:	091a      	lsrs	r2, r3, #4
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	649a      	str	r2, [r3, #72]	; 0x48
        f->input = inputs;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	601a      	str	r2, [r3, #0]
        f->output = outputs;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800285a:	605a      	str	r2, [r3, #4]
        f->inMF = mf_inputs;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002860:	609a      	str	r2, [r3, #8]
        f->outMF = mf_outputs;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002866:	60da      	str	r2, [r3, #12]
        f->wi = wi;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800286c:	631a      	str	r2, [r3, #48]	; 0x30
        f->rules = r;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002872:	635a      	str	r2, [r3, #52]	; 0x34
        f->nRules = n;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002878:	651a      	str	r2, [r3, #80]	; 0x50
        f->type = t;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	7afa      	ldrb	r2, [r7, #11]
 800287e:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
        retVal += qFIS_SetParameter( f, qFIS_EvalPoints, (qFIS_ParamValue_t)100 );
 8002882:	2264      	movs	r2, #100	; 0x64
 8002884:	2104      	movs	r1, #4
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f7ff ff02 	bl	8002690 <qFIS_SetParameter>
 800288c:	4602      	mov	r2, r0
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	4413      	add	r3, r2
 8002892:	617b      	str	r3, [r7, #20]
        retVal += qFIS_SetParameter( f, qFIS_AND, qFIS_MIN );
 8002894:	2200      	movs	r2, #0
 8002896:	2102      	movs	r1, #2
 8002898:	68f8      	ldr	r0, [r7, #12]
 800289a:	f7ff fef9 	bl	8002690 <qFIS_SetParameter>
 800289e:	4602      	mov	r2, r0
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	4413      	add	r3, r2
 80028a4:	617b      	str	r3, [r7, #20]
        retVal += qFIS_SetParameter( f, qFIS_OR, qFIS_MAX );
 80028a6:	2202      	movs	r2, #2
 80028a8:	2103      	movs	r1, #3
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f7ff fef0 	bl	8002690 <qFIS_SetParameter>
 80028b0:	4602      	mov	r2, r0
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	4413      	add	r3, r2
 80028b6:	617b      	str	r3, [r7, #20]
        retVal += qFIS_SetParameter( f, qFIS_Implication, qFIS_MIN );
 80028b8:	2200      	movs	r2, #0
 80028ba:	2100      	movs	r1, #0
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f7ff fee7 	bl	8002690 <qFIS_SetParameter>
 80028c2:	4602      	mov	r2, r0
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	4413      	add	r3, r2
 80028c8:	617b      	str	r3, [r7, #20]
        retVal += qFIS_SetParameter( f, qFIS_Aggregation, qFIS_MAX );
 80028ca:	2202      	movs	r2, #2
 80028cc:	2101      	movs	r1, #1
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f7ff fede 	bl	8002690 <qFIS_SetParameter>
 80028d4:	4602      	mov	r2, r0
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	4413      	add	r3, r2
 80028da:	617b      	str	r3, [r7, #20]
        /*cppcheck-suppress misra-c2012-10.6 */
        retVal = ( 5 == retVal ) ? 1 : 0;
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	2b05      	cmp	r3, #5
 80028e0:	bf0c      	ite	eq
 80028e2:	2301      	moveq	r3, #1
 80028e4:	2300      	movne	r3, #0
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	617b      	str	r3, [r7, #20]
        f->deFuzz = ( Mamdani == t ) ? &qFIS_DeFuzz_Centroid
                                     : &qFIS_DeFuzz_WtAverage;
 80028ea:	7afb      	ldrb	r3, [r7, #11]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <qFIS_Setup+0x110>
 80028f0:	4a26      	ldr	r2, [pc, #152]	; (800298c <qFIS_Setup+0x1a8>)
 80028f2:	e000      	b.n	80028f6 <qFIS_Setup+0x112>
 80028f4:	4a26      	ldr	r2, [pc, #152]	; (8002990 <qFIS_Setup+0x1ac>)
        f->deFuzz = ( Mamdani == t ) ? &qFIS_DeFuzz_Centroid
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	629a      	str	r2, [r3, #40]	; 0x28
        f->ruleWeight = NULL;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	62da      	str	r2, [r3, #44]	; 0x2c
        for ( i = 0u ; i < f->nOutputs ; ++i ) {
 8002900:	2300      	movs	r3, #0
 8002902:	613b      	str	r3, [r7, #16]
 8002904:	e032      	b.n	800296c <qFIS_Setup+0x188>
            /*cstat -CERT-FLP36-C*/
            f->output[ i ].res = ( f->output[ i ].b.max - f->output[ i ].b.min )/(float)f->nPoints;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	2134      	movs	r1, #52	; 0x34
 800290e:	fb01 f303 	mul.w	r3, r1, r3
 8002912:	4413      	add	r3, r2
 8002914:	6858      	ldr	r0, [r3, #4]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	685a      	ldr	r2, [r3, #4]
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	2134      	movs	r1, #52	; 0x34
 800291e:	fb01 f303 	mul.w	r3, r1, r3
 8002922:	4413      	add	r3, r2
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4619      	mov	r1, r3
 8002928:	f7fe f922 	bl	8000b70 <__aeabi_fsub>
 800292c:	4603      	mov	r3, r0
 800292e:	461d      	mov	r5, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002934:	4618      	mov	r0, r3
 8002936:	f7fe f9cd 	bl	8000cd4 <__aeabi_ui2f>
 800293a:	4601      	mov	r1, r0
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	2034      	movs	r0, #52	; 0x34
 8002944:	fb00 f303 	mul.w	r3, r0, r3
 8002948:	18d4      	adds	r4, r2, r3
 800294a:	4628      	mov	r0, r5
 800294c:	f7fe face 	bl	8000eec <__aeabi_fdiv>
 8002950:	4603      	mov	r3, r0
 8002952:	61a3      	str	r3, [r4, #24]
            /*cstat +CERT-FLP36-C*/
            f->output[ i ].owner = f;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	685a      	ldr	r2, [r3, #4]
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	2134      	movs	r1, #52	; 0x34
 800295c:	fb01 f303 	mul.w	r3, r1, r3
 8002960:	4413      	add	r3, r2
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	60da      	str	r2, [r3, #12]
        for ( i = 0u ; i < f->nOutputs ; ++i ) {
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	3301      	adds	r3, #1
 800296a:	613b      	str	r3, [r7, #16]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	429a      	cmp	r2, r3
 8002974:	d3c7      	bcc.n	8002906 <qFIS_Setup+0x122>
        }
    }

    return retVal;
 8002976:	697b      	ldr	r3, [r7, #20]
}
 8002978:	4618      	mov	r0, r3
 800297a:	3718      	adds	r7, #24
 800297c:	46bd      	mov	sp, r7
 800297e:	bdb0      	pop	{r4, r5, r7, pc}
 8002980:	aaaaaaab 	.word	0xaaaaaaab
 8002984:	4ec4ec4f 	.word	0x4ec4ec4f
 8002988:	cccccccd 	.word	0xcccccccd
 800298c:	0800320d 	.word	0x0800320d
 8002990:	08003581 	.word	0x08003581

08002994 <qFIS_InputSetup>:
/*============================================================================*/
int qFIS_InputSetup( qFIS_Input_t * const v,
                     const qFIS_Tag_t t,
                     const float min,
                     const float max )
{
 8002994:	b480      	push	{r7}
 8002996:	b087      	sub	sp, #28
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
 80029a0:	603b      	str	r3, [r7, #0]
    int retVal = 0;
 80029a2:	2300      	movs	r3, #0
 80029a4:	617b      	str	r3, [r7, #20]

    if ( ( NULL != v ) && ( t >= 0 ) ) {
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d018      	beq.n	80029de <qFIS_InputSetup+0x4a>
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	db15      	blt.n	80029de <qFIS_InputSetup+0x4a>
        v[ t ].b.min = min;
 80029b2:	68ba      	ldr	r2, [r7, #8]
 80029b4:	4613      	mov	r3, r2
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	4413      	add	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	461a      	mov	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	4413      	add	r3, r2
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	601a      	str	r2, [r3, #0]
        v[ t ].b.max = max;
 80029c6:	68ba      	ldr	r2, [r7, #8]
 80029c8:	4613      	mov	r3, r2
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	4413      	add	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	461a      	mov	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	4413      	add	r3, r2
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	605a      	str	r2, [r3, #4]
        retVal = 1;
 80029da:	2301      	movs	r3, #1
 80029dc:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 80029de:	697b      	ldr	r3, [r7, #20]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	371c      	adds	r7, #28
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bc80      	pop	{r7}
 80029e8:	4770      	bx	lr

080029ea <qFIS_OutputSetup>:
/*============================================================================*/
int qFIS_OutputSetup( qFIS_Output_t * const v,
                      const qFIS_Tag_t t,
                      const float min,
                      const float max )
{
 80029ea:	b480      	push	{r7}
 80029ec:	b087      	sub	sp, #28
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	60f8      	str	r0, [r7, #12]
 80029f2:	60b9      	str	r1, [r7, #8]
 80029f4:	607a      	str	r2, [r7, #4]
 80029f6:	603b      	str	r3, [r7, #0]
    int retVal = 0;
 80029f8:	2300      	movs	r3, #0
 80029fa:	617b      	str	r3, [r7, #20]

    if ( ( NULL != v ) && ( t >= 0 ) ) {
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d05a      	beq.n	8002ab8 <qFIS_OutputSetup+0xce>
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	db57      	blt.n	8002ab8 <qFIS_OutputSetup+0xce>
        v[ t ].data[ 0 ] = 0.0f;
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	2234      	movs	r2, #52	; 0x34
 8002a0c:	fb02 f303 	mul.w	r3, r2, r3
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	4413      	add	r3, r2
 8002a14:	f04f 0200 	mov.w	r2, #0
 8002a18:	625a      	str	r2, [r3, #36]	; 0x24
        v[ t ].data[ 1 ] = 0.0f;
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	2234      	movs	r2, #52	; 0x34
 8002a1e:	fb02 f303 	mul.w	r3, r2, r3
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	4413      	add	r3, r2
 8002a26:	f04f 0200 	mov.w	r2, #0
 8002a2a:	629a      	str	r2, [r3, #40]	; 0x28
        v[ t ].data[ 2 ] = 0.0f;
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	2234      	movs	r2, #52	; 0x34
 8002a30:	fb02 f303 	mul.w	r3, r2, r3
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	4413      	add	r3, r2
 8002a38:	f04f 0200 	mov.w	r2, #0
 8002a3c:	62da      	str	r2, [r3, #44]	; 0x2c
        v[ t ].data[ 3 ] = 0.0f;
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	2234      	movs	r2, #52	; 0x34
 8002a42:	fb02 f303 	mul.w	r3, r2, r3
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	4413      	add	r3, r2
 8002a4a:	f04f 0200 	mov.w	r2, #0
 8002a4e:	631a      	str	r2, [r3, #48]	; 0x30
        v[ t ].x = 0.0f;
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	2234      	movs	r2, #52	; 0x34
 8002a54:	fb02 f303 	mul.w	r3, r2, r3
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	f04f 0200 	mov.w	r2, #0
 8002a60:	61da      	str	r2, [r3, #28]
        v[ t ].y = 0.0f;
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	2234      	movs	r2, #52	; 0x34
 8002a66:	fb02 f303 	mul.w	r3, r2, r3
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	f04f 0200 	mov.w	r2, #0
 8002a72:	621a      	str	r2, [r3, #32]
        v[ t ].b.min = min;
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	2234      	movs	r2, #52	; 0x34
 8002a78:	fb02 f303 	mul.w	r3, r2, r3
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	4413      	add	r3, r2
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	601a      	str	r2, [r3, #0]
        v[ t ].b.max = max;
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	2234      	movs	r2, #52	; 0x34
 8002a88:	fb02 f303 	mul.w	r3, r2, r3
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	4413      	add	r3, r2
 8002a90:	683a      	ldr	r2, [r7, #0]
 8002a92:	605a      	str	r2, [r3, #4]
        v[ t ].xag = NULL;
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2234      	movs	r2, #52	; 0x34
 8002a98:	fb02 f303 	mul.w	r3, r2, r3
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	611a      	str	r2, [r3, #16]
        v[ t ].yag = NULL;
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	2234      	movs	r2, #52	; 0x34
 8002aa8:	fb02 f303 	mul.w	r3, r2, r3
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	4413      	add	r3, r2
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	615a      	str	r2, [r3, #20]
        retVal = 1;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 8002ab8:	697b      	ldr	r3, [r7, #20]
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	371c      	adds	r7, #28
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr

08002ac4 <qFIS_SetInput>:
/*============================================================================*/
int qFIS_SetInput( qFIS_Input_t * const v,
                   const qFIS_Tag_t t,
                   const float value )
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b087      	sub	sp, #28
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
    int retVal = 0;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	617b      	str	r3, [r7, #20]

    if ( ( NULL != v ) && ( t >= 0 ) ) {
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00e      	beq.n	8002af8 <qFIS_SetInput+0x34>
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	db0b      	blt.n	8002af8 <qFIS_SetInput+0x34>
        v[ t ].b.value = value;
 8002ae0:	68ba      	ldr	r2, [r7, #8]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	4413      	add	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	461a      	mov	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	4413      	add	r3, r2
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	609a      	str	r2, [r3, #8]
        retVal = 1;
 8002af4:	2301      	movs	r3, #1
 8002af6:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 8002af8:	697b      	ldr	r3, [r7, #20]
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	371c      	adds	r7, #28
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bc80      	pop	{r7}
 8002b02:	4770      	bx	lr

08002b04 <qFIS_GetOutput>:
/*============================================================================*/
float qFIS_GetOutput( const qFIS_Output_t * const v,
                      const qFIS_Tag_t t )
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
    float retVal = 0.0f;
 8002b0e:	f04f 0300 	mov.w	r3, #0
 8002b12:	60fb      	str	r3, [r7, #12]

    if ( ( NULL != v ) && ( t >= 0 ) ) {
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00a      	beq.n	8002b30 <qFIS_GetOutput+0x2c>
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	db07      	blt.n	8002b30 <qFIS_GetOutput+0x2c>
        retVal = v[ t ].b.value;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	2234      	movs	r2, #52	; 0x34
 8002b24:	fb02 f303 	mul.w	r3, r2, r3
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	60fb      	str	r3, [r7, #12]
    }

    return retVal;
 8002b30:	68fb      	ldr	r3, [r7, #12]
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3714      	adds	r7, #20
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bc80      	pop	{r7}
 8002b3a:	4770      	bx	lr

08002b3c <qFIS_SetMF>:
                const qFIS_Tag_t mf,
                const qFIS_MF_Name_t s,
                qFIS_MF_Fcn_t custom_mf,
                const float *cp,
                float h )
{
 8002b3c:	b590      	push	{r4, r7, lr}
 8002b3e:	b087      	sub	sp, #28
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
 8002b48:	70fb      	strb	r3, [r7, #3]
    int retVal = 0;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	617b      	str	r3, [r7, #20]
    /* Only for Tsukamoto consequents*/
    &qFIS_TLinSMF, &qFIS_TLinZMF, &qFIS_TConcaveMF,&qFIS_TSigMF, &qFIS_TSMF,
    &qFIS_TZMF
    };

    if ( ( NULL != m ) && ( io >= 0 ) && ( mf >= 0 ) && ( s < _NUM_MFS ) ) {
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d055      	beq.n	8002c00 <qFIS_SetMF+0xc4>
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	db52      	blt.n	8002c00 <qFIS_SetMF+0xc4>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	db4f      	blt.n	8002c00 <qFIS_SetMF+0xc4>
 8002b60:	78fb      	ldrb	r3, [r7, #3]
 8002b62:	2b1a      	cmp	r3, #26
 8002b64:	d84c      	bhi.n	8002c00 <qFIS_SetMF+0xc4>
        if ( NULL != custom_mf ) {
 8002b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d00a      	beq.n	8002b82 <qFIS_SetMF+0x46>
            m[ mf ].shape = custom_mf; /*user-defined membership function*/
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	461a      	mov	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	e00c      	b.n	8002b9c <qFIS_SetMF+0x60>
        }
        else {
            /*cppcheck-suppress misra-c2012-11.1 */
            m[ mf ].shape = fShape[ s ];
 8002b82:	78f9      	ldrb	r1, [r7, #3]
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	4613      	mov	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	461a      	mov	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	4413      	add	r3, r2
 8002b94:	4a1d      	ldr	r2, [pc, #116]	; (8002c0c <qFIS_SetMF+0xd0>)
 8002b96:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8002b9a:	601a      	str	r2, [r3, #0]
        }
        m[ mf ].index = (size_t)io;
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4413      	add	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	4413      	add	r3, r2
 8002bac:	68ba      	ldr	r2, [r7, #8]
 8002bae:	611a      	str	r2, [r3, #16]
        m[ mf ].points = cp;
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	461a      	mov	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bc2:	605a      	str	r2, [r3, #4]
        m[ mf ].fx = 0.0f;
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4413      	add	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	461a      	mov	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	f04f 0200 	mov.w	r2, #0
 8002bd8:	609a      	str	r2, [r3, #8]
        m[ mf ].h = qFIS_Bound( h, 0.0f, 1.0f );
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	4413      	add	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	461a      	mov	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	189c      	adds	r4, r3, r2
 8002bea:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002bee:	f04f 0100 	mov.w	r1, #0
 8002bf2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bf4:	f001 fe89 	bl	800490a <qFIS_Bound>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	60e3      	str	r3, [r4, #12]
        retVal = 1;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 8002c00:	697b      	ldr	r3, [r7, #20]
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	371c      	adds	r7, #28
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd90      	pop	{r4, r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	0800de28 	.word	0x0800de28

08002c10 <qFIS_EvalInputMFs>:

    return retVal;
}
/*============================================================================*/
static void qFIS_EvalInputMFs( qFIS_t * const f )
{
 8002c10:	b5b0      	push	{r4, r5, r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
    size_t i;
    qFIS_MF_t *mf;

    for ( i = 0 ; i < f->nMFInputs ; ++i ) {
 8002c18:	2300      	movs	r3, #0
 8002c1a:	60fb      	str	r3, [r7, #12]
 8002c1c:	e026      	b.n	8002c6c <qFIS_EvalInputMFs+0x5c>
        mf = &f->inMF[ i ];
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6899      	ldr	r1, [r3, #8]
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	4613      	mov	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	60bb      	str	r3, [r7, #8]
        /*cstat -MISRAC2012-Rule-11.3 -CERT-EXP39-C_d*/
        /*cppcheck-suppress misra-c2012-11.3 */
        mf->fx = mf->h*mf->shape( (qFIS_IO_Base_t*)&f->input[ mf->index ],
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	68dd      	ldr	r5, [r3, #12]
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	681c      	ldr	r4, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6819      	ldr	r1, [r3, #0]
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	691a      	ldr	r2, [r3, #16]
 8002c40:	4613      	mov	r3, r2
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	4413      	add	r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	18c8      	adds	r0, r1, r3
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	4619      	mov	r1, r3
 8002c52:	47a0      	blx	r4
 8002c54:	4603      	mov	r3, r0
 8002c56:	4619      	mov	r1, r3
 8002c58:	4628      	mov	r0, r5
 8002c5a:	f7fe f893 	bl	8000d84 <__aeabi_fmul>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	461a      	mov	r2, r3
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	609a      	str	r2, [r3, #8]
    for ( i = 0 ; i < f->nMFInputs ; ++i ) {
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d3d3      	bcc.n	8002c1e <qFIS_EvalInputMFs+0xe>
                                  mf->points,
                                  1u );
        /*cstat +MISRAC2012-Rule-11.3 +CERT-EXP39-C_d*/
    }
}
 8002c76:	bf00      	nop
 8002c78:	bf00      	nop
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bdb0      	pop	{r4, r5, r7, pc}

08002c80 <qFIS_TruncateInputs>:
/*============================================================================*/
static void qFIS_TruncateInputs( qFIS_t * const f )
{
 8002c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
    size_t i;

    for ( i = 0 ; i < f->nInputs ; ++i ) {
 8002c88:	2300      	movs	r3, #0
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	e02b      	b.n	8002ce6 <qFIS_TruncateInputs+0x66>
        f->input[ i ].b.value = qFIS_Bound( f->input[ i ].b.value,
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6819      	ldr	r1, [r3, #0]
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	4613      	mov	r3, r2
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	4413      	add	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	6898      	ldr	r0, [r3, #8]
                                            f->input[ i ].b.min,
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6819      	ldr	r1, [r3, #0]
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	4413      	add	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	440b      	add	r3, r1
        f->input[ i ].b.value = qFIS_Bound( f->input[ i ].b.value,
 8002cb0:	681d      	ldr	r5, [r3, #0]
                                            f->input[ i ].b.max );
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6819      	ldr	r1, [r3, #0]
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	4413      	add	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	440b      	add	r3, r1
        f->input[ i ].b.value = qFIS_Bound( f->input[ i ].b.value,
 8002cc2:	685e      	ldr	r6, [r3, #4]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6819      	ldr	r1, [r3, #0]
 8002cc8:	68fa      	ldr	r2, [r7, #12]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	4413      	add	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	18cc      	adds	r4, r1, r3
 8002cd4:	4632      	mov	r2, r6
 8002cd6:	4629      	mov	r1, r5
 8002cd8:	f001 fe17 	bl	800490a <qFIS_Bound>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	60a3      	str	r3, [r4, #8]
    for ( i = 0 ; i < f->nInputs ; ++i ) {
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d3ce      	bcc.n	8002c8e <qFIS_TruncateInputs+0xe>
    }
}
 8002cf0:	bf00      	nop
 8002cf2:	bf00      	nop
 8002cf4:	3714      	adds	r7, #20
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002cfa <qFIS_Fuzzify>:
/*============================================================================*/
int qFIS_Fuzzify( qFIS_t * const f )
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b084      	sub	sp, #16
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
    int retVal = 0;
 8002d02:	2300      	movs	r3, #0
 8002d04:	60fb      	str	r3, [r7, #12]

    if ( NULL != f ) {
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d007      	beq.n	8002d1c <qFIS_Fuzzify+0x22>
        qFIS_TruncateInputs( f );
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f7ff ffb7 	bl	8002c80 <qFIS_TruncateInputs>
        qFIS_EvalInputMFs( f );
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f7ff ff7c 	bl	8002c10 <qFIS_EvalInputMFs>
        retVal = 1;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	60fb      	str	r3, [r7, #12]
    }

    return retVal;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <qFIS_ParseFuzzValue>:
/*============================================================================*/
static float qFIS_ParseFuzzValue( qFIS_MF_t * const mfIO,
                                  qFIS_Rules_t index )
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b084      	sub	sp, #16
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
 8002d2e:	460b      	mov	r3, r1
 8002d30:	807b      	strh	r3, [r7, #2]
    uint8_t neg = ( index < 0 ) ? 1u : 0u ;
 8002d32:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002d36:	13db      	asrs	r3, r3, #15
 8002d38:	b21b      	sxth	r3, r3
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	73fb      	strb	r3, [r7, #15]
    float y;

    if ( 0u != neg ) {
 8002d42:	7bfb      	ldrb	r3, [r7, #15]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d003      	beq.n	8002d50 <qFIS_ParseFuzzValue+0x2a>
        index = -index;
 8002d48:	887b      	ldrh	r3, [r7, #2]
 8002d4a:	425b      	negs	r3, r3
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	807b      	strh	r3, [r7, #2]
    }
    /*cstat -CERT-INT32-C_a*/
    y = qFIS_Bound( mfIO[ index - 1 ].fx, 0.0f, 1.0f );
 8002d50:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002d54:	4613      	mov	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	4413      	add	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	3b14      	subs	r3, #20
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	4413      	add	r3, r2
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002d68:	f04f 0100 	mov.w	r1, #0
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f001 fdcc 	bl	800490a <qFIS_Bound>
 8002d72:	60b8      	str	r0, [r7, #8]
    /*cstat +CERT-INT32-C_a*/
    /*cppcheck-suppress misra-c2012-12.1 */
    y = ( 0u != neg ) ? ( 1.0f - y ) : y ;
 8002d74:	7bfb      	ldrb	r3, [r7, #15]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d006      	beq.n	8002d88 <qFIS_ParseFuzzValue+0x62>
 8002d7a:	68b9      	ldr	r1, [r7, #8]
 8002d7c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002d80:	f7fd fef6 	bl	8000b70 <__aeabi_fsub>
 8002d84:	4603      	mov	r3, r0
 8002d86:	e000      	b.n	8002d8a <qFIS_ParseFuzzValue+0x64>
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	60bb      	str	r3, [r7, #8]

    return y;
 8002d8c:	68bb      	ldr	r3, [r7, #8]
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
	...

08002d98 <qFIS_GetFuzzOperator>:
/*============================================================================*/
static qFIS_FuzzyOperator_t qFIS_GetFuzzOperator( const qFIS_t * const f )
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
    qFIS_FuzzyOperator_t oper;

    switch ( f->lastConnector ) {
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 8002da6:	4a0c      	ldr	r2, [pc, #48]	; (8002dd8 <qFIS_GetFuzzOperator+0x40>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d003      	beq.n	8002db4 <qFIS_GetFuzzOperator+0x1c>
 8002dac:	4a0b      	ldr	r2, [pc, #44]	; (8002ddc <qFIS_GetFuzzOperator+0x44>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d004      	beq.n	8002dbc <qFIS_GetFuzzOperator+0x24>
 8002db2:	e007      	b.n	8002dc4 <qFIS_GetFuzzOperator+0x2c>
        case _QFIS_AND:
            oper = f->andOp;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	60fb      	str	r3, [r7, #12]
            break;
 8002dba:	e006      	b.n	8002dca <qFIS_GetFuzzOperator+0x32>
        case _QFIS_OR:
            oper = f->orOp;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	695b      	ldr	r3, [r3, #20]
 8002dc0:	60fb      	str	r3, [r7, #12]
            break;
 8002dc2:	e002      	b.n	8002dca <qFIS_GetFuzzOperator+0x32>
        default: 
            oper = &qFIS_Sum;
 8002dc4:	4b06      	ldr	r3, [pc, #24]	; (8002de0 <qFIS_GetFuzzOperator+0x48>)
 8002dc6:	60fb      	str	r3, [r7, #12]
            break;
 8002dc8:	bf00      	nop
    }

    return oper;
 8002dca:	68fb      	ldr	r3, [r7, #12]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bc80      	pop	{r7}
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	ffff8002 	.word	0xffff8002
 8002ddc:	ffff8003 	.word	0xffff8003
 8002de0:	080048df 	.word	0x080048df

08002de4 <qFIS_InferenceAntecedent>:
/*============================================================================*/
static size_t qFIS_InferenceAntecedent( struct _qFIS_s * const f,
                                        size_t i )
{
 8002de4:	b590      	push	{r4, r7, lr}
 8002de6:	b087      	sub	sp, #28
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
    int16_t inIndex, MFInIndex, connector;
    qFIS_FuzzyOperator_t op;
    /*cstat -CERT-INT30-C_a*/
    inIndex = f->rules[ i ];
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	4413      	add	r3, r2
 8002df8:	881b      	ldrh	r3, [r3, #0]
 8002dfa:	82fb      	strh	r3, [r7, #22]
    MFInIndex = f->rules[ i + 1u ];
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	3301      	adds	r3, #1
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	4413      	add	r3, r2
 8002e08:	881b      	ldrh	r3, [r3, #0]
 8002e0a:	82bb      	strh	r3, [r7, #20]
    connector = f->rules[ i + 2u ];
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	3302      	adds	r3, #2
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	4413      	add	r3, r2
 8002e18:	881b      	ldrh	r3, [r3, #0]
 8002e1a:	827b      	strh	r3, [r7, #18]
    /*cstat -CERT-INT30-C_a*/
    op = qFIS_GetFuzzOperator( f );
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f7ff ffbb 	bl	8002d98 <qFIS_GetFuzzOperator>
 8002e22:	60f8      	str	r0, [r7, #12]
    f->rStrength = op( f->rStrength, qFIS_ParseFuzzValue( f->inMF, MFInIndex ) );
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002e30:	4611      	mov	r1, r2
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff ff77 	bl	8002d26 <qFIS_ParseFuzzValue>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	4611      	mov	r1, r2
 8002e3e:	4620      	mov	r0, r4
 8002e40:	4798      	blx	r3
 8002e42:	4602      	mov	r2, r0
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	659a      	str	r2, [r3, #88]	; 0x58

    if ( ( inIndex < 0 ) || ( (size_t)inIndex > f->nInputs ) ) {
 8002e48:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	db05      	blt.n	8002e5c <qFIS_InferenceAntecedent+0x78>
 8002e50:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d902      	bls.n	8002e62 <qFIS_InferenceAntecedent+0x7e>
        i = QFIS_INFERENCE_ERROR;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	603b      	str	r3, [r7, #0]
 8002e60:	e022      	b.n	8002ea8 <qFIS_InferenceAntecedent+0xc4>
    }
    else {
        if ( ( _QFIS_AND == connector ) || ( _QFIS_OR == connector ) ) {
 8002e62:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002e66:	4a13      	ldr	r2, [pc, #76]	; (8002eb4 <qFIS_InferenceAntecedent+0xd0>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d004      	beq.n	8002e76 <qFIS_InferenceAntecedent+0x92>
 8002e6c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002e70:	4a11      	ldr	r2, [pc, #68]	; (8002eb8 <qFIS_InferenceAntecedent+0xd4>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d10a      	bne.n	8002e8c <qFIS_InferenceAntecedent+0xa8>
            f->lastConnector = connector;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	8a7a      	ldrh	r2, [r7, #18]
 8002e7a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
            f->inferenceState = &qFIS_InferenceAntecedent;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a0e      	ldr	r2, [pc, #56]	; (8002ebc <qFIS_InferenceAntecedent+0xd8>)
 8002e82:	621a      	str	r2, [r3, #32]
            i += 2u;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	3302      	adds	r3, #2
 8002e88:	603b      	str	r3, [r7, #0]
 8002e8a:	e00d      	b.n	8002ea8 <qFIS_InferenceAntecedent+0xc4>
        }
        else if ( _QFIS_THEN == connector ) {
 8002e8c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002e90:	4a0b      	ldr	r2, [pc, #44]	; (8002ec0 <qFIS_InferenceAntecedent+0xdc>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d106      	bne.n	8002ea4 <qFIS_InferenceAntecedent+0xc0>
            f->inferenceState = &qFIS_InferenceReachEnd;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a0a      	ldr	r2, [pc, #40]	; (8002ec4 <qFIS_InferenceAntecedent+0xe0>)
 8002e9a:	621a      	str	r2, [r3, #32]
            i += 2u;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	3302      	adds	r3, #2
 8002ea0:	603b      	str	r3, [r7, #0]
 8002ea2:	e001      	b.n	8002ea8 <qFIS_InferenceAntecedent+0xc4>
        }
        else {
            i = QFIS_INFERENCE_ERROR;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	603b      	str	r3, [r7, #0]
        }
    }

    return i;
 8002ea8:	683b      	ldr	r3, [r7, #0]
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	371c      	adds	r7, #28
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd90      	pop	{r4, r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	ffff8002 	.word	0xffff8002
 8002eb8:	ffff8003 	.word	0xffff8003
 8002ebc:	08002de5 	.word	0x08002de5
 8002ec0:	ffff8004 	.word	0xffff8004
 8002ec4:	08002ec9 	.word	0x08002ec9

08002ec8 <qFIS_InferenceReachEnd>:
/*============================================================================*/
static size_t qFIS_InferenceReachEnd( struct _qFIS_s * const f,
                                      size_t i )
{
 8002ec8:	b590      	push	{r4, r7, lr}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
    int16_t  connector;

    connector = ( f->nOutputs > 1u )? f->rules[ i + 2u ] : -1;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d908      	bls.n	8002eec <qFIS_InferenceReachEnd+0x24>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	3302      	adds	r3, #2
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	4413      	add	r3, r2
 8002ee6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002eea:	e001      	b.n	8002ef0 <qFIS_InferenceReachEnd+0x28>
 8002eec:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef0:	81fb      	strh	r3, [r7, #14]
    i += 2u;
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	3302      	adds	r3, #2
 8002ef6:	603b      	str	r3, [r7, #0]
    if ( _QFIS_AND != connector ) {
 8002ef8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002efc:	4a23      	ldr	r2, [pc, #140]	; (8002f8c <qFIS_InferenceReachEnd+0xc4>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d03f      	beq.n	8002f82 <qFIS_InferenceReachEnd+0xba>
        f->inferenceState = &qFIS_InferenceAntecedent;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a22      	ldr	r2, [pc, #136]	; (8002f90 <qFIS_InferenceReachEnd+0xc8>)
 8002f06:	621a      	str	r2, [r3, #32]
        f->lastConnector = -1;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f0e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
        f->wi[ f->ruleCount ] = f->rStrength;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4413      	add	r3, r2
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002f22:	601a      	str	r2, [r3, #0]
        if ( NULL != f->ruleWeight ) {
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d01e      	beq.n	8002f6a <qFIS_InferenceReachEnd+0xa2>
            f->wi[ f->ruleCount ] *= qFIS_Bound( f->ruleWeight[ f->ruleCount ], 0.0f, 1.0f );
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4413      	add	r3, r2
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002f3e:	f04f 0100 	mov.w	r1, #0
 8002f42:	4618      	mov	r0, r3
 8002f44:	f001 fce1 	bl	800490a <qFIS_Bound>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	4413      	add	r3, r2
 8002f54:	6819      	ldr	r1, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	18d4      	adds	r4, r2, r3
 8002f62:	f7fd ff0f 	bl	8000d84 <__aeabi_fmul>
 8002f66:	4603      	mov	r3, r0
 8002f68:	6023      	str	r3, [r4, #0]
        }
        f->rStrength = 0.0f;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f04f 0200 	mov.w	r2, #0
 8002f70:	659a      	str	r2, [r3, #88]	; 0x58
        ++f->ruleCount;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f76:	1c5a      	adds	r2, r3, #1
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	655a      	str	r2, [r3, #84]	; 0x54
        --i;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	603b      	str	r3, [r7, #0]
    }

    return i;
 8002f82:	683b      	ldr	r3, [r7, #0]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3714      	adds	r7, #20
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd90      	pop	{r4, r7, pc}
 8002f8c:	ffff8002 	.word	0xffff8002
 8002f90:	08002de5 	.word	0x08002de5

08002f94 <qFIS_AggregationFindConsequent>:
/*============================================================================*/
static size_t qFIS_AggregationFindConsequent( struct _qFIS_s * const f,
                                              size_t i )
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
    while ( _QFIS_THEN != f->rules[ i++ ] ) {}
 8002f9e:	bf00      	nop
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	1c59      	adds	r1, r3, #1
 8002fa8:	6039      	str	r1, [r7, #0]
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	4413      	add	r3, r2
 8002fae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fb2:	4a07      	ldr	r2, [pc, #28]	; (8002fd0 <qFIS_AggregationFindConsequent+0x3c>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d1f3      	bne.n	8002fa0 <qFIS_AggregationFindConsequent+0xc>
    f->aggregationState = &qFIS_InferenceConsequent;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a06      	ldr	r2, [pc, #24]	; (8002fd4 <qFIS_AggregationFindConsequent+0x40>)
 8002fbc:	625a      	str	r2, [r3, #36]	; 0x24

    return --i;
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	603b      	str	r3, [r7, #0]
 8002fc4:	683b      	ldr	r3, [r7, #0]
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bc80      	pop	{r7}
 8002fce:	4770      	bx	lr
 8002fd0:	ffff8004 	.word	0xffff8004
 8002fd4:	08002fd9 	.word	0x08002fd9

08002fd8 <qFIS_InferenceConsequent>:
/*============================================================================*/
static size_t qFIS_InferenceConsequent( struct _qFIS_s * const f,
                                        size_t i )
{
 8002fd8:	b5b0      	push	{r4, r5, r7, lr}
 8002fda:	b088      	sub	sp, #32
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
    int16_t outIndex, MFOutIndex, connector;
    uint8_t neg = 0u;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	777b      	strb	r3, [r7, #29]

    outIndex = f->rules[ i ];
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	4413      	add	r3, r2
 8002ff0:	881b      	ldrh	r3, [r3, #0]
 8002ff2:	837b      	strh	r3, [r7, #26]
    MFOutIndex = f->rules[ i + 1u ];
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	4413      	add	r3, r2
 8003000:	881b      	ldrh	r3, [r3, #0]
 8003002:	83fb      	strh	r3, [r7, #30]
    connector = ( f->nOutputs > 1u )? f->rules[ i + 2u ] : -1;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003008:	2b01      	cmp	r3, #1
 800300a:	d908      	bls.n	800301e <qFIS_InferenceConsequent+0x46>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	3302      	adds	r3, #2
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	4413      	add	r3, r2
 8003018:	f9b3 3000 	ldrsh.w	r3, [r3]
 800301c:	e001      	b.n	8003022 <qFIS_InferenceConsequent+0x4a>
 800301e:	f04f 33ff 	mov.w	r3, #4294967295
 8003022:	833b      	strh	r3, [r7, #24]
    if ( MFOutIndex < 0 ) {
 8003024:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003028:	2b00      	cmp	r3, #0
 800302a:	da05      	bge.n	8003038 <qFIS_InferenceConsequent+0x60>
        MFOutIndex = -MFOutIndex;
 800302c:	8bfb      	ldrh	r3, [r7, #30]
 800302e:	425b      	negs	r3, r3
 8003030:	b29b      	uxth	r3, r3
 8003032:	83fb      	strh	r3, [r7, #30]
        neg = 1u;
 8003034:	2301      	movs	r3, #1
 8003036:	777b      	strb	r3, [r7, #29]
    }
    MFOutIndex -= 1;
 8003038:	8bfb      	ldrh	r3, [r7, #30]
 800303a:	3b01      	subs	r3, #1
 800303c:	b29b      	uxth	r3, r3
 800303e:	83fb      	strh	r3, [r7, #30]

    if ( f->wi[ f->ruleCount ] > 0.0f ) {
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4413      	add	r3, r2
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f04f 0100 	mov.w	r1, #0
 8003052:	4618      	mov	r0, r3
 8003054:	f7fe f852 	bl	80010fc <__aeabi_fcmpgt>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d07b      	beq.n	8003156 <qFIS_InferenceConsequent+0x17e>
        qFIS_Output_t *o = &f->output[ outIndex ];
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003066:	2134      	movs	r1, #52	; 0x34
 8003068:	fb01 f303 	mul.w	r3, r1, r3
 800306c:	4413      	add	r3, r2
 800306e:	617b      	str	r3, [r7, #20]
        qFIS_MF_t *m = &f->outMF[ MFOutIndex ];
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68d9      	ldr	r1, [r3, #12]
 8003074:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8003078:	4613      	mov	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4413      	add	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	440b      	add	r3, r1
 8003082:	613b      	str	r3, [r7, #16]

        if ( Mamdani == f->type ) {
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800308a:	2b00      	cmp	r3, #0
 800308c:	d133      	bne.n	80030f6 <qFIS_InferenceConsequent+0x11e>
            float v;
            /*cstat -MISRAC2012-Rule-11.3 -CERT-EXP39-C_d*/
            /*cppcheck-suppress misra-c2012-11.3 */
            v = m->h*m->shape( (qFIS_IO_Base_t*)o, m->points, 1u );
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	68dc      	ldr	r4, [r3, #12]
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	6851      	ldr	r1, [r2, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	6978      	ldr	r0, [r7, #20]
 800309e:	4798      	blx	r3
 80030a0:	4603      	mov	r3, r0
 80030a2:	4619      	mov	r1, r3
 80030a4:	4620      	mov	r0, r4
 80030a6:	f7fd fe6d 	bl	8000d84 <__aeabi_fmul>
 80030aa:	4603      	mov	r3, r0
 80030ac:	60bb      	str	r3, [r7, #8]
            /*cstat +MISRAC2012-Rule-11.3 +CERT-EXP39-C_d*/
            /*cppcheck-suppress misra-c2012-12.1 */
            v = ( 1u == neg )? ( 1.0f - v ) : v;
 80030ae:	7f7b      	ldrb	r3, [r7, #29]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d106      	bne.n	80030c2 <qFIS_InferenceConsequent+0xea>
 80030b4:	68b9      	ldr	r1, [r7, #8]
 80030b6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80030ba:	f7fd fd59 	bl	8000b70 <__aeabi_fsub>
 80030be:	4603      	mov	r3, r0
 80030c0:	e000      	b.n	80030c4 <qFIS_InferenceConsequent+0xec>
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	60bb      	str	r3, [r7, #8]
            o->y = f->aggregate( o->y, f->implicate( f->wi[ f->ruleCount ], v ) );
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69dc      	ldr	r4, [r3, #28]
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	6a1d      	ldr	r5, [r3, #32]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80030da:	0092      	lsls	r2, r2, #2
 80030dc:	440a      	add	r2, r1
 80030de:	6812      	ldr	r2, [r2, #0]
 80030e0:	68b9      	ldr	r1, [r7, #8]
 80030e2:	4610      	mov	r0, r2
 80030e4:	4798      	blx	r3
 80030e6:	4603      	mov	r3, r0
 80030e8:	4619      	mov	r1, r3
 80030ea:	4628      	mov	r0, r5
 80030ec:	47a0      	blx	r4
 80030ee:	4602      	mov	r2, r0
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	621a      	str	r2, [r3, #32]
 80030f4:	e02f      	b.n	8003156 <qFIS_InferenceConsequent+0x17e>
        }
        else { /* Sugeno and Tsukamoto*/
            float zi;
            /*cstat -MISRAC2012-Rule-11.3 -CERT-EXP39-C_d*/
            /*cppcheck-suppress misra-c2012-11.3 */
            zi = m->shape( (qFIS_IO_Base_t*)f->input, m->points, f->nInputs );
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	6810      	ldr	r0, [r2, #0]
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	6851      	ldr	r1, [r2, #4]
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003106:	4798      	blx	r3
 8003108:	60f8      	str	r0, [r7, #12]
            /*cstat +MISRAC2012-Rule-11.3 +CERT-EXP39-C_d*/
            o->data[ 0 ] += zi*f->wi[ f->ruleCount ];
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	4413      	add	r3, r2
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68f9      	ldr	r1, [r7, #12]
 800311e:	4618      	mov	r0, r3
 8003120:	f7fd fe30 	bl	8000d84 <__aeabi_fmul>
 8003124:	4603      	mov	r3, r0
 8003126:	4619      	mov	r1, r3
 8003128:	4620      	mov	r0, r4
 800312a:	f7fd fd23 	bl	8000b74 <__addsf3>
 800312e:	4603      	mov	r3, r0
 8003130:	461a      	mov	r2, r3
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	625a      	str	r2, [r3, #36]	; 0x24
            o->data[ 1 ] += f->wi[ f->ruleCount ];
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	4413      	add	r3, r2
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4619      	mov	r1, r3
 800314a:	f7fd fd13 	bl	8000b74 <__addsf3>
 800314e:	4603      	mov	r3, r0
 8003150:	461a      	mov	r2, r3
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	629a      	str	r2, [r3, #40]	; 0x28
        }
    }

    i += 2u;
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	3302      	adds	r3, #2
 800315a:	603b      	str	r3, [r7, #0]
    if ( _QFIS_AND != connector ) {
 800315c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003160:	4a09      	ldr	r2, [pc, #36]	; (8003188 <qFIS_InferenceConsequent+0x1b0>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d00a      	beq.n	800317c <qFIS_InferenceConsequent+0x1a4>
        f->aggregationState = &qFIS_AggregationFindConsequent;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a08      	ldr	r2, [pc, #32]	; (800318c <qFIS_InferenceConsequent+0x1b4>)
 800316a:	625a      	str	r2, [r3, #36]	; 0x24
        ++f->ruleCount;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003170:	1c5a      	adds	r2, r3, #1
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	655a      	str	r2, [r3, #84]	; 0x54
        --i;
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	3b01      	subs	r3, #1
 800317a:	603b      	str	r3, [r7, #0]
    }

    return i;
 800317c:	683b      	ldr	r3, [r7, #0]
}
 800317e:	4618      	mov	r0, r3
 8003180:	3720      	adds	r7, #32
 8003182:	46bd      	mov	sp, r7
 8003184:	bdb0      	pop	{r4, r5, r7, pc}
 8003186:	bf00      	nop
 8003188:	ffff8002 	.word	0xffff8002
 800318c:	08002f95 	.word	0x08002f95

08003190 <qFIS_Aggregate>:
/*============================================================================*/
static void qFIS_Aggregate( qFIS_t * const f )
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
    if ( NULL != f ) {
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d02d      	beq.n	80031fa <qFIS_Aggregate+0x6a>
        if ( QFIS_RULES_BEGIN == f->rules[ 0 ] ) {
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031a6:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80031aa:	d126      	bne.n	80031fa <qFIS_Aggregate+0x6a>
            size_t i = 1u;
 80031ac:	2301      	movs	r3, #1
 80031ae:	60fb      	str	r3, [r7, #12]

            f->aggregationState = &qFIS_AggregationFindConsequent;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a14      	ldr	r2, [pc, #80]	; (8003204 <qFIS_Aggregate+0x74>)
 80031b4:	625a      	str	r2, [r3, #36]	; 0x24
            f->ruleCount = 0u;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	655a      	str	r2, [r3, #84]	; 0x54
            while ( ( _QFIS_RULES_END != f->rules[ i ] ) && ( f->ruleCount < f->nRules ) ) {
 80031bc:	e00b      	b.n	80031d6 <qFIS_Aggregate+0x46>
                i = f->aggregationState( f, i );
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c2:	68f9      	ldr	r1, [r7, #12]
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	4798      	blx	r3
 80031c8:	60f8      	str	r0, [r7, #12]
                if ( QFIS_INFERENCE_ERROR == i ) {
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d013      	beq.n	80031f8 <qFIS_Aggregate+0x68>
                    break;
                }
                ++i;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	3301      	adds	r3, #1
 80031d4:	60fb      	str	r3, [r7, #12]
            while ( ( _QFIS_RULES_END != f->rules[ i ] ) && ( f->ruleCount < f->nRules ) ) {
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	4413      	add	r3, r2
 80031e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031e4:	4a08      	ldr	r2, [pc, #32]	; (8003208 <qFIS_Aggregate+0x78>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d007      	beq.n	80031fa <qFIS_Aggregate+0x6a>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d3e3      	bcc.n	80031be <qFIS_Aggregate+0x2e>
            }
        }
    }
}
 80031f6:	e000      	b.n	80031fa <qFIS_Aggregate+0x6a>
                    break;
 80031f8:	bf00      	nop
}
 80031fa:	bf00      	nop
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	08002f95 	.word	0x08002f95
 8003208:	ffff8001 	.word	0xffff8001

0800320c <qFIS_DeFuzz_Centroid>:
/*============================================================================*/
static float qFIS_DeFuzz_Centroid( qFIS_Output_t * const o,
                                   const qFIS_DeFuzzState_t stage )
{
 800320c:	b590      	push	{r4, r7, lr}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	460b      	mov	r3, r1
 8003216:	70fb      	strb	r3, [r7, #3]
    float d = 0.0f;
 8003218:	f04f 0300 	mov.w	r3, #0
 800321c:	60fb      	str	r3, [r7, #12]

    switch ( stage ) {
 800321e:	78fb      	ldrb	r3, [r7, #3]
 8003220:	2b02      	cmp	r3, #2
 8003222:	d02e      	beq.n	8003282 <qFIS_DeFuzz_Centroid+0x76>
 8003224:	2b02      	cmp	r3, #2
 8003226:	dc37      	bgt.n	8003298 <qFIS_DeFuzz_Centroid+0x8c>
 8003228:	2b00      	cmp	r3, #0
 800322a:	d021      	beq.n	8003270 <qFIS_DeFuzz_Centroid+0x64>
 800322c:	2b01      	cmp	r3, #1
 800322e:	d133      	bne.n	8003298 <qFIS_DeFuzz_Centroid+0x8c>
        case DeFuzz_Compute:
            o->data[ 0 ] += o->x*o->y;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	69da      	ldr	r2, [r3, #28]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	4619      	mov	r1, r3
 800323e:	4610      	mov	r0, r2
 8003240:	f7fd fda0 	bl	8000d84 <__aeabi_fmul>
 8003244:	4603      	mov	r3, r0
 8003246:	4619      	mov	r1, r3
 8003248:	4620      	mov	r0, r4
 800324a:	f7fd fc93 	bl	8000b74 <__addsf3>
 800324e:	4603      	mov	r3, r0
 8003250:	461a      	mov	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	625a      	str	r2, [r3, #36]	; 0x24
            o->data[ 1 ] += o->y;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	4619      	mov	r1, r3
 8003260:	4610      	mov	r0, r2
 8003262:	f7fd fc87 	bl	8000b74 <__addsf3>
 8003266:	4603      	mov	r3, r0
 8003268:	461a      	mov	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	629a      	str	r2, [r3, #40]	; 0x28
            break;
 800326e:	e014      	b.n	800329a <qFIS_DeFuzz_Centroid+0x8e>
        case DeFuzz_Init:
            o->data[ 0 ] = 0.0f; /*store sum(y)*/
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f04f 0200 	mov.w	r2, #0
 8003276:	625a      	str	r2, [r3, #36]	; 0x24
            o->data[ 1 ] = 0.0f; /*store sum(x*y)*/
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f04f 0200 	mov.w	r2, #0
 800327e:	629a      	str	r2, [r3, #40]	; 0x28
            break;
 8003280:	e00b      	b.n	800329a <qFIS_DeFuzz_Centroid+0x8e>
        case DeFuzz_End:
            d = o->data[ 0 ]/o->data[ 1 ]; /*sum(x*y)/sum(y)*/
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328a:	4619      	mov	r1, r3
 800328c:	4610      	mov	r0, r2
 800328e:	f7fd fe2d 	bl	8000eec <__aeabi_fdiv>
 8003292:	4603      	mov	r3, r0
 8003294:	60fb      	str	r3, [r7, #12]
            break;
 8003296:	e000      	b.n	800329a <qFIS_DeFuzz_Centroid+0x8e>
        default:
            break;
 8003298:	bf00      	nop
    }

    return d;
 800329a:	68fb      	ldr	r3, [r7, #12]
}
 800329c:	4618      	mov	r0, r3
 800329e:	3714      	adds	r7, #20
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd90      	pop	{r4, r7, pc}

080032a4 <qFIS_DeFuzz_Bisector>:
/*============================================================================*/
static float qFIS_DeFuzz_Bisector( qFIS_Output_t * const o,
                                   const qFIS_DeFuzzState_t stage )
{
 80032a4:	b590      	push	{r4, r7, lr}
 80032a6:	b087      	sub	sp, #28
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	460b      	mov	r3, r1
 80032ae:	70fb      	strb	r3, [r7, #3]
    size_t k;
    float d = 0.0f;
 80032b0:	f04f 0300 	mov.w	r3, #0
 80032b4:	613b      	str	r3, [r7, #16]
    qFIS_t *f;

    switch ( stage ) {
 80032b6:	78fb      	ldrb	r3, [r7, #3]
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d017      	beq.n	80032ec <qFIS_DeFuzz_Bisector+0x48>
 80032bc:	2b02      	cmp	r3, #2
 80032be:	dc60      	bgt.n	8003382 <qFIS_DeFuzz_Bisector+0xde>
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00e      	beq.n	80032e2 <qFIS_DeFuzz_Bisector+0x3e>
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d15c      	bne.n	8003382 <qFIS_DeFuzz_Bisector+0xde>
        case DeFuzz_Compute:
            o->data[ 0 ] += o->y;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a1b      	ldr	r3, [r3, #32]
 80032d0:	4619      	mov	r1, r3
 80032d2:	4610      	mov	r0, r2
 80032d4:	f7fd fc4e 	bl	8000b74 <__addsf3>
 80032d8:	4603      	mov	r3, r0
 80032da:	461a      	mov	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	625a      	str	r2, [r3, #36]	; 0x24
            break;
 80032e0:	e050      	b.n	8003384 <qFIS_DeFuzz_Bisector+0xe0>
        case DeFuzz_Init:
            o->data[ 0 ] = 0.0f; /*store sum(y)*/
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f04f 0200 	mov.w	r2, #0
 80032e8:	625a      	str	r2, [r3, #36]	; 0x24
            break;
 80032ea:	e04b      	b.n	8003384 <qFIS_DeFuzz_Bisector+0xe0>
        case DeFuzz_End:
            o->data[ 1 ] = 0.0f;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f04f 0200 	mov.w	r2, #0
 80032f2:	629a      	str	r2, [r3, #40]	; 0x28
            /*cstat -MISRAC2012-Rule-11.5 -CERT-EXP36-C_b*/
            /*cppcheck-suppress misra-c2012-11.5 */
            f = (qFIS_t *)o->owner;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	60fb      	str	r3, [r7, #12]
            /*cstat +MISRAC2012-Rule-11.5 +CERT-EXP36-C_b*/
            for ( k = 0u ; k < f->nPoints ; ++k ) {
 80032fa:	2300      	movs	r3, #0
 80032fc:	617b      	str	r3, [r7, #20]
 80032fe:	e035      	b.n	800336c <qFIS_DeFuzz_Bisector+0xc8>
                o->y = 0.0f;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f04f 0200 	mov.w	r2, #0
 8003306:	621a      	str	r2, [r3, #32]
                o->x = qFIS_GetNextX( o->b.min, o->res, k );
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6818      	ldr	r0, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	4619      	mov	r1, r3
 8003314:	f000 fb04 	bl	8003920 <qFIS_GetNextX>
 8003318:	4602      	mov	r2, r0
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	61da      	str	r2, [r3, #28]
                o->b.value = o->x;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	69da      	ldr	r2, [r3, #28]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	609a      	str	r2, [r3, #8]
                qFIS_Aggregate( f );
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	f7ff ff32 	bl	8003190 <qFIS_Aggregate>
                o->data[ 1 ] += o->y;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	4619      	mov	r1, r3
 8003336:	4610      	mov	r0, r2
 8003338:	f7fd fc1c 	bl	8000b74 <__addsf3>
 800333c:	4603      	mov	r3, r0
 800333e:	461a      	mov	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	629a      	str	r2, [r3, #40]	; 0x28
                if ( o->data[ 1 ] >= ( 0.5f*o->data[ 0 ] ) ) {
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003350:	4618      	mov	r0, r3
 8003352:	f7fd fd17 	bl	8000d84 <__aeabi_fmul>
 8003356:	4603      	mov	r3, r0
 8003358:	4619      	mov	r1, r3
 800335a:	4620      	mov	r0, r4
 800335c:	f7fd fec4 	bl	80010e8 <__aeabi_fcmpge>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d108      	bne.n	8003378 <qFIS_DeFuzz_Bisector+0xd4>
            for ( k = 0u ; k < f->nPoints ; ++k ) {
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	3301      	adds	r3, #1
 800336a:	617b      	str	r3, [r7, #20]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	429a      	cmp	r2, r3
 8003374:	d3c4      	bcc.n	8003300 <qFIS_DeFuzz_Bisector+0x5c>
 8003376:	e000      	b.n	800337a <qFIS_DeFuzz_Bisector+0xd6>
                    break;
 8003378:	bf00      	nop
                }
            }
            d = o->x;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	613b      	str	r3, [r7, #16]
            break;
 8003380:	e000      	b.n	8003384 <qFIS_DeFuzz_Bisector+0xe0>
        default:
            break;
 8003382:	bf00      	nop
    }

    return d;
 8003384:	693b      	ldr	r3, [r7, #16]
}
 8003386:	4618      	mov	r0, r3
 8003388:	371c      	adds	r7, #28
 800338a:	46bd      	mov	sp, r7
 800338c:	bd90      	pop	{r4, r7, pc}
	...

08003390 <qFIS_DeFuzz_LOM>:
/*============================================================================*/
static float qFIS_DeFuzz_LOM( qFIS_Output_t * const o,
                              const qFIS_DeFuzzState_t stage )
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	460b      	mov	r3, r1
 800339a:	70fb      	strb	r3, [r7, #3]
    float d = 0.0f;
 800339c:	f04f 0300 	mov.w	r3, #0
 80033a0:	60fb      	str	r3, [r7, #12]

    switch ( stage ) {
 80033a2:	78fb      	ldrb	r3, [r7, #3]
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d022      	beq.n	80033ee <qFIS_DeFuzz_LOM+0x5e>
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	dc24      	bgt.n	80033f6 <qFIS_DeFuzz_LOM+0x66>
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d016      	beq.n	80033de <qFIS_DeFuzz_LOM+0x4e>
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d120      	bne.n	80033f6 <qFIS_DeFuzz_LOM+0x66>
        case DeFuzz_Compute:
            if ( o->y >= o->data[ 0 ] ) {
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a1a      	ldr	r2, [r3, #32]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033bc:	4619      	mov	r1, r3
 80033be:	4610      	mov	r0, r2
 80033c0:	f7fd fe92 	bl	80010e8 <__aeabi_fcmpge>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d100      	bne.n	80033cc <qFIS_DeFuzz_LOM+0x3c>
                o->data[ 0 ] = o->y;
                o->data[ 1 ] = o->x;
            }
            break;
 80033ca:	e015      	b.n	80033f8 <qFIS_DeFuzz_LOM+0x68>
                o->data[ 0 ] = o->y;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a1a      	ldr	r2, [r3, #32]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	625a      	str	r2, [r3, #36]	; 0x24
                o->data[ 1 ] = o->x;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	69da      	ldr	r2, [r3, #28]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	629a      	str	r2, [r3, #40]	; 0x28
            break;
 80033dc:	e00c      	b.n	80033f8 <qFIS_DeFuzz_LOM+0x68>
        case DeFuzz_Init:
            o->data[ 0 ] = -1.0f; /*yMax*/
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a08      	ldr	r2, [pc, #32]	; (8003404 <qFIS_DeFuzz_LOM+0x74>)
 80033e2:	625a      	str	r2, [r3, #36]	; 0x24
            o->data[ 1 ] = o->b.max; /*xLargest*/
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	629a      	str	r2, [r3, #40]	; 0x28
            break;
 80033ec:	e004      	b.n	80033f8 <qFIS_DeFuzz_LOM+0x68>
        case DeFuzz_End:
            d = o->data[ 1 ];
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f2:	60fb      	str	r3, [r7, #12]
            break;
 80033f4:	e000      	b.n	80033f8 <qFIS_DeFuzz_LOM+0x68>
        default:
            break;
 80033f6:	bf00      	nop
    }

    return d;
 80033f8:	68fb      	ldr	r3, [r7, #12]
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	bf800000 	.word	0xbf800000

08003408 <qFIS_DeFuzz_SOM>:
/*============================================================================*/
static float qFIS_DeFuzz_SOM( qFIS_Output_t * const o,
                              const qFIS_DeFuzzState_t stage )
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	460b      	mov	r3, r1
 8003412:	70fb      	strb	r3, [r7, #3]
    float d = 0.0f;
 8003414:	f04f 0300 	mov.w	r3, #0
 8003418:	60fb      	str	r3, [r7, #12]

    switch ( stage ) {
 800341a:	78fb      	ldrb	r3, [r7, #3]
 800341c:	2b02      	cmp	r3, #2
 800341e:	d022      	beq.n	8003466 <qFIS_DeFuzz_SOM+0x5e>
 8003420:	2b02      	cmp	r3, #2
 8003422:	dc24      	bgt.n	800346e <qFIS_DeFuzz_SOM+0x66>
 8003424:	2b00      	cmp	r3, #0
 8003426:	d016      	beq.n	8003456 <qFIS_DeFuzz_SOM+0x4e>
 8003428:	2b01      	cmp	r3, #1
 800342a:	d120      	bne.n	800346e <qFIS_DeFuzz_SOM+0x66>
        case DeFuzz_Compute:
            if ( o->y > o->data[ 0 ] ) {
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a1a      	ldr	r2, [r3, #32]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003434:	4619      	mov	r1, r3
 8003436:	4610      	mov	r0, r2
 8003438:	f7fd fe60 	bl	80010fc <__aeabi_fcmpgt>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d100      	bne.n	8003444 <qFIS_DeFuzz_SOM+0x3c>
                o->data[ 0 ] = o->y;
                o->data[ 1 ] = o->x;
            }
            break;
 8003442:	e015      	b.n	8003470 <qFIS_DeFuzz_SOM+0x68>
                o->data[ 0 ] = o->y;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a1a      	ldr	r2, [r3, #32]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	625a      	str	r2, [r3, #36]	; 0x24
                o->data[ 1 ] = o->x;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	69da      	ldr	r2, [r3, #28]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	629a      	str	r2, [r3, #40]	; 0x28
            break;
 8003454:	e00c      	b.n	8003470 <qFIS_DeFuzz_SOM+0x68>
        case DeFuzz_Init:
            o->data[ 0 ] = -1.0f; /*yMax*/
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a08      	ldr	r2, [pc, #32]	; (800347c <qFIS_DeFuzz_SOM+0x74>)
 800345a:	625a      	str	r2, [r3, #36]	; 0x24
            o->data[ 1 ] = o->b.min; /*xSmallest*/
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	629a      	str	r2, [r3, #40]	; 0x28
            break;
 8003464:	e004      	b.n	8003470 <qFIS_DeFuzz_SOM+0x68>
        case DeFuzz_End:
            d = o->data[ 1 ];
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346a:	60fb      	str	r3, [r7, #12]
            break;
 800346c:	e000      	b.n	8003470 <qFIS_DeFuzz_SOM+0x68>
        default:
            break;
 800346e:	bf00      	nop
    }

    return d;
 8003470:	68fb      	ldr	r3, [r7, #12]
}
 8003472:	4618      	mov	r0, r3
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	bf800000 	.word	0xbf800000

08003480 <qFIS_DeFuzz_MOM>:
/*============================================================================*/
static float qFIS_DeFuzz_MOM( qFIS_Output_t * const o,
                              const qFIS_DeFuzzState_t stage )
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	460b      	mov	r3, r1
 800348a:	70fb      	strb	r3, [r7, #3]
    float d = 0.0f;
 800348c:	f04f 0300 	mov.w	r3, #0
 8003490:	60fb      	str	r3, [r7, #12]

    switch ( stage ) {
 8003492:	78fb      	ldrb	r3, [r7, #3]
 8003494:	2b02      	cmp	r3, #2
 8003496:	d05a      	beq.n	800354e <qFIS_DeFuzz_MOM+0xce>
 8003498:	2b02      	cmp	r3, #2
 800349a:	dc69      	bgt.n	8003570 <qFIS_DeFuzz_MOM+0xf0>
 800349c:	2b00      	cmp	r3, #0
 800349e:	d047      	beq.n	8003530 <qFIS_DeFuzz_MOM+0xb0>
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d165      	bne.n	8003570 <qFIS_DeFuzz_MOM+0xf0>
        case DeFuzz_Compute:
            if ( o->y > o->data[ 0 ] ) {
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a1a      	ldr	r2, [r3, #32]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ac:	4619      	mov	r1, r3
 80034ae:	4610      	mov	r0, r2
 80034b0:	f7fd fe24 	bl	80010fc <__aeabi_fcmpgt>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d010      	beq.n	80034dc <qFIS_DeFuzz_MOM+0x5c>
                o->data[ 0 ] = o->y;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a1a      	ldr	r2, [r3, #32]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	625a      	str	r2, [r3, #36]	; 0x24
                o->data[ 1 ] = o->x;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	69da      	ldr	r2, [r3, #28]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	629a      	str	r2, [r3, #40]	; 0x28
                o->data[ 2 ] = o->x;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	69da      	ldr	r2, [r3, #28]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	62da      	str	r2, [r3, #44]	; 0x2c
                o->data[ 3 ] = 1.0f;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80034d8:	631a      	str	r2, [r3, #48]	; 0x30
                o->data[ 3 ] = -1.0f;
            }
            else {
                /*nothing to do*/
            }
            break;
 80034da:	e04a      	b.n	8003572 <qFIS_DeFuzz_MOM+0xf2>
            else if ( qFMathEx_Equal( o->y , o->data[ 0 ] ) && ( o->data[ 3 ] > 0.0f ) ) {
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a1a      	ldr	r2, [r3, #32]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e4:	4619      	mov	r1, r3
 80034e6:	4610      	mov	r0, r2
 80034e8:	f001 fa79 	bl	80049de <qFMathEx_Equal>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00e      	beq.n	8003510 <qFIS_DeFuzz_MOM+0x90>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f6:	f04f 0100 	mov.w	r1, #0
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7fd fdfe 	bl	80010fc <__aeabi_fcmpgt>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d004      	beq.n	8003510 <qFIS_DeFuzz_MOM+0x90>
                o->data[ 2 ] = o->x;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	69da      	ldr	r2, [r3, #28]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	62da      	str	r2, [r3, #44]	; 0x2c
            break;
 800350e:	e030      	b.n	8003572 <qFIS_DeFuzz_MOM+0xf2>
            else if ( o->y < o->data[ 0 ] ) {
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a1a      	ldr	r2, [r3, #32]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003518:	4619      	mov	r1, r3
 800351a:	4610      	mov	r0, r2
 800351c:	f7fd fdd0 	bl	80010c0 <__aeabi_fcmplt>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d100      	bne.n	8003528 <qFIS_DeFuzz_MOM+0xa8>
            break;
 8003526:	e024      	b.n	8003572 <qFIS_DeFuzz_MOM+0xf2>
                o->data[ 3 ] = -1.0f;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a14      	ldr	r2, [pc, #80]	; (800357c <qFIS_DeFuzz_MOM+0xfc>)
 800352c:	631a      	str	r2, [r3, #48]	; 0x30
            break;
 800352e:	e020      	b.n	8003572 <qFIS_DeFuzz_MOM+0xf2>
        case DeFuzz_Init:
            o->data[ 0 ] = -1.0f; /* yMax */
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a12      	ldr	r2, [pc, #72]	; (800357c <qFIS_DeFuzz_MOM+0xfc>)
 8003534:	625a      	str	r2, [r3, #36]	; 0x24
            o->data[ 1 ] = o->b.min; /*xSmallest*/
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	629a      	str	r2, [r3, #40]	; 0x28
            o->data[ 2 ] = o->b.max; /*xLargest*/
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	62da      	str	r2, [r3, #44]	; 0x2c
            o->data[ 3 ] = -1.0f; /*sp*/
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a0c      	ldr	r2, [pc, #48]	; (800357c <qFIS_DeFuzz_MOM+0xfc>)
 800354a:	631a      	str	r2, [r3, #48]	; 0x30
            break;
 800354c:	e011      	b.n	8003572 <qFIS_DeFuzz_MOM+0xf2>
        case DeFuzz_End:
            d = 0.5f*( o->data[ 1 ] + o->data[ 2 ] );
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003556:	4619      	mov	r1, r3
 8003558:	4610      	mov	r0, r2
 800355a:	f7fd fb0b 	bl	8000b74 <__addsf3>
 800355e:	4603      	mov	r3, r0
 8003560:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003564:	4618      	mov	r0, r3
 8003566:	f7fd fc0d 	bl	8000d84 <__aeabi_fmul>
 800356a:	4603      	mov	r3, r0
 800356c:	60fb      	str	r3, [r7, #12]
            break;
 800356e:	e000      	b.n	8003572 <qFIS_DeFuzz_MOM+0xf2>
        default:
            break;
 8003570:	bf00      	nop
    }

    return d;
 8003572:	68fb      	ldr	r3, [r7, #12]
}
 8003574:	4618      	mov	r0, r3
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	bf800000 	.word	0xbf800000

08003580 <qFIS_DeFuzz_WtAverage>:
/*============================================================================*/
static float qFIS_DeFuzz_WtAverage( qFIS_Output_t * const o,
                                    const qFIS_DeFuzzState_t stage )
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	460b      	mov	r3, r1
 800358a:	70fb      	strb	r3, [r7, #3]
    float d = 0.0f;
 800358c:	f04f 0300 	mov.w	r3, #0
 8003590:	60fb      	str	r3, [r7, #12]

    if ( DeFuzz_End == stage ) {
 8003592:	78fb      	ldrb	r3, [r7, #3]
 8003594:	2b02      	cmp	r3, #2
 8003596:	d109      	bne.n	80035ac <qFIS_DeFuzz_WtAverage+0x2c>
        d = o->data[ 0 ]/o->data[ 1 ];
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a0:	4619      	mov	r1, r3
 80035a2:	4610      	mov	r0, r2
 80035a4:	f7fd fca2 	bl	8000eec <__aeabi_fdiv>
 80035a8:	4603      	mov	r3, r0
 80035aa:	60fb      	str	r3, [r7, #12]
    }

    return d;
 80035ac:	68fb      	ldr	r3, [r7, #12]
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <qFIS_DeFuzz_WtSum>:
/*============================================================================*/
static float qFIS_DeFuzz_WtSum( qFIS_Output_t * const o,
                                const qFIS_DeFuzzState_t stage )
{
 80035b6:	b480      	push	{r7}
 80035b8:	b085      	sub	sp, #20
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
 80035be:	460b      	mov	r3, r1
 80035c0:	70fb      	strb	r3, [r7, #3]
    float d = 0.0f;
 80035c2:	f04f 0300 	mov.w	r3, #0
 80035c6:	60fb      	str	r3, [r7, #12]

    if ( DeFuzz_End == stage ) {
 80035c8:	78fb      	ldrb	r3, [r7, #3]
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d102      	bne.n	80035d4 <qFIS_DeFuzz_WtSum+0x1e>
        d = o->data[ 0 ];
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d2:	60fb      	str	r3, [r7, #12]
    }

    return d;
 80035d4:	68fb      	ldr	r3, [r7, #12]
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3714      	adds	r7, #20
 80035da:	46bd      	mov	sp, r7
 80035dc:	bc80      	pop	{r7}
 80035de:	4770      	bx	lr

080035e0 <qFIS_DeFuzzify>:
/*============================================================================*/
int qFIS_DeFuzzify( qFIS_t * const f )
{
 80035e0:	b5b0      	push	{r4, r5, r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
    int retVal = 0;
 80035e8:	2300      	movs	r3, #0
 80035ea:	60fb      	str	r3, [r7, #12]

    if ( NULL != f ) {
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f000 8133 	beq.w	800385a <qFIS_DeFuzzify+0x27a>
        size_t i;

        for ( i = 0; i < f->nOutputs ; ++i ) {
 80035f4:	2300      	movs	r3, #0
 80035f6:	617b      	str	r3, [r7, #20]
 80035f8:	e00e      	b.n	8003618 <qFIS_DeFuzzify+0x38>
            f->deFuzz( &f->output[ i ] , DeFuzz_Init );
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	6851      	ldr	r1, [r2, #4]
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	2034      	movs	r0, #52	; 0x34
 8003606:	fb00 f202 	mul.w	r2, r0, r2
 800360a:	440a      	add	r2, r1
 800360c:	2100      	movs	r1, #0
 800360e:	4610      	mov	r0, r2
 8003610:	4798      	blx	r3
        for ( i = 0; i < f->nOutputs ; ++i ) {
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	3301      	adds	r3, #1
 8003616:	617b      	str	r3, [r7, #20]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	429a      	cmp	r2, r3
 8003620:	d3eb      	bcc.n	80035fa <qFIS_DeFuzzify+0x1a>
        }

        if ( Mamdani == f->type  ) {
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8003628:	2b00      	cmp	r3, #0
 800362a:	f040 809a 	bne.w	8003762 <qFIS_DeFuzzify+0x182>
            size_t k;

            for ( k = 0u ; k < f->nPoints ; ++k ) {
 800362e:	2300      	movs	r3, #0
 8003630:	613b      	str	r3, [r7, #16]
 8003632:	e08f      	b.n	8003754 <qFIS_DeFuzzify+0x174>
                for ( i = 0; i < f->nOutputs ; ++i ) { /* initialize*/
 8003634:	2300      	movs	r3, #0
 8003636:	617b      	str	r3, [r7, #20]
 8003638:	e038      	b.n	80036ac <qFIS_DeFuzzify+0xcc>
                    f->output[ i ].y = 0.0f;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685a      	ldr	r2, [r3, #4]
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	2134      	movs	r1, #52	; 0x34
 8003642:	fb01 f303 	mul.w	r3, r1, r3
 8003646:	4413      	add	r3, r2
 8003648:	f04f 0200 	mov.w	r2, #0
 800364c:	621a      	str	r2, [r3, #32]
                    f->output[ i ].x = qFIS_GetNextX( f->output[ i ].b.min,
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685a      	ldr	r2, [r3, #4]
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	2134      	movs	r1, #52	; 0x34
 8003656:	fb01 f303 	mul.w	r3, r1, r3
 800365a:	4413      	add	r3, r2
 800365c:	6818      	ldr	r0, [r3, #0]
                                                      f->output[ i ].res,
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	2134      	movs	r1, #52	; 0x34
 8003666:	fb01 f303 	mul.w	r3, r1, r3
 800366a:	4413      	add	r3, r2
                    f->output[ i ].x = qFIS_GetNextX( f->output[ i ].b.min,
 800366c:	6999      	ldr	r1, [r3, #24]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685a      	ldr	r2, [r3, #4]
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	2434      	movs	r4, #52	; 0x34
 8003676:	fb04 f303 	mul.w	r3, r4, r3
 800367a:	18d4      	adds	r4, r2, r3
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	f000 f94f 	bl	8003920 <qFIS_GetNextX>
 8003682:	4603      	mov	r3, r0
 8003684:	61e3      	str	r3, [r4, #28]
                                                      k );
                    f->output[ i ].b.value = f->output[ i ].x;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685a      	ldr	r2, [r3, #4]
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	2134      	movs	r1, #52	; 0x34
 800368e:	fb01 f303 	mul.w	r3, r1, r3
 8003692:	441a      	add	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6859      	ldr	r1, [r3, #4]
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	2034      	movs	r0, #52	; 0x34
 800369c:	fb00 f303 	mul.w	r3, r0, r3
 80036a0:	440b      	add	r3, r1
 80036a2:	69d2      	ldr	r2, [r2, #28]
 80036a4:	609a      	str	r2, [r3, #8]
                for ( i = 0; i < f->nOutputs ; ++i ) { /* initialize*/
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	3301      	adds	r3, #1
 80036aa:	617b      	str	r3, [r7, #20]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d3c1      	bcc.n	800363a <qFIS_DeFuzzify+0x5a>
                }
                qFIS_Aggregate( f );
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7ff fd6a 	bl	8003190 <qFIS_Aggregate>
                for ( i = 0; i < f->nOutputs ; ++i ) {
 80036bc:	2300      	movs	r3, #0
 80036be:	617b      	str	r3, [r7, #20]
 80036c0:	e040      	b.n	8003744 <qFIS_DeFuzzify+0x164>
                    f->deFuzz( &f->output[ i ] , DeFuzz_Compute );
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	6851      	ldr	r1, [r2, #4]
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	2034      	movs	r0, #52	; 0x34
 80036ce:	fb00 f202 	mul.w	r2, r0, r2
 80036d2:	440a      	add	r2, r1
 80036d4:	2101      	movs	r1, #1
 80036d6:	4610      	mov	r0, r2
 80036d8:	4798      	blx	r3
                    if ( NULL != f->output[ i ].xag ) { /*store aggregated*/
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	2134      	movs	r1, #52	; 0x34
 80036e2:	fb01 f303 	mul.w	r3, r1, r3
 80036e6:	4413      	add	r3, r2
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d027      	beq.n	800373e <qFIS_DeFuzzify+0x15e>
                        f->output[ i ].xag[ k ] = f->output[ i ].x;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	2134      	movs	r1, #52	; 0x34
 80036f6:	fb01 f303 	mul.w	r3, r1, r3
 80036fa:	441a      	add	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6859      	ldr	r1, [r3, #4]
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	2034      	movs	r0, #52	; 0x34
 8003704:	fb00 f303 	mul.w	r3, r0, r3
 8003708:	440b      	add	r3, r1
 800370a:	6919      	ldr	r1, [r3, #16]
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	440b      	add	r3, r1
 8003712:	69d2      	ldr	r2, [r2, #28]
 8003714:	601a      	str	r2, [r3, #0]
                        f->output[ i ].yag[ k ] = f->output[ i ].y;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685a      	ldr	r2, [r3, #4]
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	2134      	movs	r1, #52	; 0x34
 800371e:	fb01 f303 	mul.w	r3, r1, r3
 8003722:	441a      	add	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6859      	ldr	r1, [r3, #4]
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	2034      	movs	r0, #52	; 0x34
 800372c:	fb00 f303 	mul.w	r3, r0, r3
 8003730:	440b      	add	r3, r1
 8003732:	6959      	ldr	r1, [r3, #20]
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	440b      	add	r3, r1
 800373a:	6a12      	ldr	r2, [r2, #32]
 800373c:	601a      	str	r2, [r3, #0]
                for ( i = 0; i < f->nOutputs ; ++i ) {
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	3301      	adds	r3, #1
 8003742:	617b      	str	r3, [r7, #20]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	429a      	cmp	r2, r3
 800374c:	d3b9      	bcc.n	80036c2 <qFIS_DeFuzzify+0xe2>
            for ( k = 0u ; k < f->nPoints ; ++k ) {
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	3301      	adds	r3, #1
 8003752:	613b      	str	r3, [r7, #16]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	429a      	cmp	r2, r3
 800375c:	f4ff af6a 	bcc.w	8003634 <qFIS_DeFuzzify+0x54>
 8003760:	e038      	b.n	80037d4 <qFIS_DeFuzzify+0x1f4>
                    }
                }
            }
        }
        else { /*Sugeno and Tsukamoto systems*/
            for ( i = 0; i < f->nOutputs ; ++i ) { /* initialize*/
 8003762:	2300      	movs	r3, #0
 8003764:	617b      	str	r3, [r7, #20]
 8003766:	e016      	b.n	8003796 <qFIS_DeFuzzify+0x1b6>
                f->output[ i ].data[ 0 ] = 0.0f; /*store sum wi*/
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	2134      	movs	r1, #52	; 0x34
 8003770:	fb01 f303 	mul.w	r3, r1, r3
 8003774:	4413      	add	r3, r2
 8003776:	f04f 0200 	mov.w	r2, #0
 800377a:	625a      	str	r2, [r3, #36]	; 0x24
                f->output[ i ].data[ 1 ] = 0.0f; /*store sum zi*wi*/
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685a      	ldr	r2, [r3, #4]
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	2134      	movs	r1, #52	; 0x34
 8003784:	fb01 f303 	mul.w	r3, r1, r3
 8003788:	4413      	add	r3, r2
 800378a:	f04f 0200 	mov.w	r2, #0
 800378e:	629a      	str	r2, [r3, #40]	; 0x28
            for ( i = 0; i < f->nOutputs ; ++i ) { /* initialize*/
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	3301      	adds	r3, #1
 8003794:	617b      	str	r3, [r7, #20]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	697a      	ldr	r2, [r7, #20]
 800379c:	429a      	cmp	r2, r3
 800379e:	d3e3      	bcc.n	8003768 <qFIS_DeFuzzify+0x188>
            }
            qFIS_Aggregate( f );
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f7ff fcf5 	bl	8003190 <qFIS_Aggregate>
            for ( i = 0; i < f->nOutputs ; ++i ) { /* initialize*/
 80037a6:	2300      	movs	r3, #0
 80037a8:	617b      	str	r3, [r7, #20]
 80037aa:	e00e      	b.n	80037ca <qFIS_DeFuzzify+0x1ea>
                f->deFuzz( &f->output[ i ] , DeFuzz_Compute );
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	6851      	ldr	r1, [r2, #4]
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	2034      	movs	r0, #52	; 0x34
 80037b8:	fb00 f202 	mul.w	r2, r0, r2
 80037bc:	440a      	add	r2, r1
 80037be:	2101      	movs	r1, #1
 80037c0:	4610      	mov	r0, r2
 80037c2:	4798      	blx	r3
            for ( i = 0; i < f->nOutputs ; ++i ) { /* initialize*/
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	3301      	adds	r3, #1
 80037c8:	617b      	str	r3, [r7, #20]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d3eb      	bcc.n	80037ac <qFIS_DeFuzzify+0x1cc>
            }
        }

        for ( i = 0; i < f->nOutputs ; ++i ) {
 80037d4:	2300      	movs	r3, #0
 80037d6:	617b      	str	r3, [r7, #20]
 80037d8:	e03a      	b.n	8003850 <qFIS_DeFuzzify+0x270>
            f->output[ i ].b.value = f->deFuzz( &f->output[ i ] , DeFuzz_End );
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	6851      	ldr	r1, [r2, #4]
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	2034      	movs	r0, #52	; 0x34
 80037e6:	fb00 f202 	mul.w	r2, r0, r2
 80037ea:	1888      	adds	r0, r1, r2
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	6851      	ldr	r1, [r2, #4]
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	2434      	movs	r4, #52	; 0x34
 80037f4:	fb04 f202 	mul.w	r2, r4, r2
 80037f8:	188c      	adds	r4, r1, r2
 80037fa:	2102      	movs	r1, #2
 80037fc:	4798      	blx	r3
 80037fe:	4603      	mov	r3, r0
 8003800:	60a3      	str	r3, [r4, #8]
            f->output[ i ].b.value = qFIS_Bound( f->output[ i ].b.value,
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685a      	ldr	r2, [r3, #4]
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	2134      	movs	r1, #52	; 0x34
 800380a:	fb01 f303 	mul.w	r3, r1, r3
 800380e:	4413      	add	r3, r2
 8003810:	6898      	ldr	r0, [r3, #8]
                                                 f->output[ i ].b.min,
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685a      	ldr	r2, [r3, #4]
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	2134      	movs	r1, #52	; 0x34
 800381a:	fb01 f303 	mul.w	r3, r1, r3
 800381e:	4413      	add	r3, r2
            f->output[ i ].b.value = qFIS_Bound( f->output[ i ].b.value,
 8003820:	6819      	ldr	r1, [r3, #0]
                                                 f->output[ i ].b.max );
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	2434      	movs	r4, #52	; 0x34
 800382a:	fb04 f303 	mul.w	r3, r4, r3
 800382e:	4413      	add	r3, r2
            f->output[ i ].b.value = qFIS_Bound( f->output[ i ].b.value,
 8003830:	685d      	ldr	r5, [r3, #4]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685a      	ldr	r2, [r3, #4]
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	2434      	movs	r4, #52	; 0x34
 800383a:	fb04 f303 	mul.w	r3, r4, r3
 800383e:	18d4      	adds	r4, r2, r3
 8003840:	462a      	mov	r2, r5
 8003842:	f001 f862 	bl	800490a <qFIS_Bound>
 8003846:	4603      	mov	r3, r0
 8003848:	60a3      	str	r3, [r4, #8]
        for ( i = 0; i < f->nOutputs ; ++i ) {
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	3301      	adds	r3, #1
 800384e:	617b      	str	r3, [r7, #20]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003854:	697a      	ldr	r2, [r7, #20]
 8003856:	429a      	cmp	r2, r3
 8003858:	d3bf      	bcc.n	80037da <qFIS_DeFuzzify+0x1fa>
        }
    }

    return retVal;
 800385a:	68fb      	ldr	r3, [r7, #12]
}
 800385c:	4618      	mov	r0, r3
 800385e:	3718      	adds	r7, #24
 8003860:	46bd      	mov	sp, r7
 8003862:	bdb0      	pop	{r4, r5, r7, pc}

08003864 <qFIS_Inference>:

    return retVal;
}
/*============================================================================*/
int qFIS_Inference( qFIS_t * const f )
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
    int retVal = 0;
 800386c:	2300      	movs	r3, #0
 800386e:	60fb      	str	r3, [r7, #12]

    if ( NULL != f  ) {
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d04a      	beq.n	800390c <qFIS_Inference+0xa8>
        size_t i = 0u;
 8003876:	2300      	movs	r3, #0
 8003878:	60bb      	str	r3, [r7, #8]

        if ( QFIS_RULES_BEGIN == f->rules[ 0 ] ) {
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800387e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003882:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8003886:	d12f      	bne.n	80038e8 <qFIS_Inference+0x84>
            f->inferenceState = &qFIS_InferenceAntecedent;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a23      	ldr	r2, [pc, #140]	; (8003918 <qFIS_Inference+0xb4>)
 800388c:	621a      	str	r2, [r3, #32]
            f->rStrength = 0.0f;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f04f 0200 	mov.w	r2, #0
 8003894:	659a      	str	r2, [r3, #88]	; 0x58
            f->lastConnector = -1;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800389c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
            f->ruleCount = 0u;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	655a      	str	r2, [r3, #84]	; 0x54
            i = 1u;
 80038a6:	2301      	movs	r3, #1
 80038a8:	60bb      	str	r3, [r7, #8]
            while ( ( _QFIS_RULES_END != f->rules[ i ] ) && ( f->ruleCount < f->nRules ) ) {
 80038aa:	e00b      	b.n	80038c4 <qFIS_Inference+0x60>
                i = f->inferenceState( f, i );
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	68b9      	ldr	r1, [r7, #8]
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	4798      	blx	r3
 80038b6:	60b8      	str	r0, [r7, #8]
                if ( QFIS_INFERENCE_ERROR == i ) {
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d013      	beq.n	80038e6 <qFIS_Inference+0x82>
                    break;
                }
                ++i;
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	3301      	adds	r3, #1
 80038c2:	60bb      	str	r3, [r7, #8]
            while ( ( _QFIS_RULES_END != f->rules[ i ] ) && ( f->ruleCount < f->nRules ) ) {
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	005b      	lsls	r3, r3, #1
 80038cc:	4413      	add	r3, r2
 80038ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038d2:	4a12      	ldr	r2, [pc, #72]	; (800391c <qFIS_Inference+0xb8>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d007      	beq.n	80038e8 <qFIS_Inference+0x84>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d3e3      	bcc.n	80038ac <qFIS_Inference+0x48>
 80038e4:	e000      	b.n	80038e8 <qFIS_Inference+0x84>
                    break;
 80038e6:	bf00      	nop
            }
        }
        if ( ( _QFIS_RULES_END == f->rules[ i ] ) && ( f->ruleCount == f->nRules) ) {
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	005b      	lsls	r3, r3, #1
 80038f0:	4413      	add	r3, r2
 80038f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038f6:	4a09      	ldr	r2, [pc, #36]	; (800391c <qFIS_Inference+0xb8>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d107      	bne.n	800390c <qFIS_Inference+0xa8>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003904:	429a      	cmp	r2, r3
 8003906:	d101      	bne.n	800390c <qFIS_Inference+0xa8>
            retVal = 1;
 8003908:	2301      	movs	r3, #1
 800390a:	60fb      	str	r3, [r7, #12]
        }
    }

    return retVal;
 800390c:	68fb      	ldr	r3, [r7, #12]
}
 800390e:	4618      	mov	r0, r3
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	08002de5 	.word	0x08002de5
 800391c:	ffff8001 	.word	0xffff8001

08003920 <qFIS_GetNextX>:
/*============================================================================*/
static float qFIS_GetNextX( const float init,
                            const float res,
                            const size_t i )
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
    /*cstat -CERT-FLP36-C*/
    return init + ( ( (float)i + 0.5f )*res );
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f7fd f9d1 	bl	8000cd4 <__aeabi_ui2f>
 8003932:	4603      	mov	r3, r0
 8003934:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003938:	4618      	mov	r0, r3
 800393a:	f7fd f91b 	bl	8000b74 <__addsf3>
 800393e:	4603      	mov	r3, r0
 8003940:	68b9      	ldr	r1, [r7, #8]
 8003942:	4618      	mov	r0, r3
 8003944:	f7fd fa1e 	bl	8000d84 <__aeabi_fmul>
 8003948:	4603      	mov	r3, r0
 800394a:	68f9      	ldr	r1, [r7, #12]
 800394c:	4618      	mov	r0, r3
 800394e:	f7fd f911 	bl	8000b74 <__addsf3>
 8003952:	4603      	mov	r3, r0
    /*cstat +CERT-FLP36-C*/
}
 8003954:	4618      	mov	r0, r3
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <qFIS_TriMF>:
/*============================================================================*/
static float qFIS_TriMF( const qFIS_IO_Base_t * const in,
                         const float *p,
                         const size_t n )
{
 800395c:	b5b0      	push	{r4, r5, r7, lr}
 800395e:	b08a      	sub	sp, #40	; 0x28
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
    float a, b, c, tmp;
    float x = in[ 0 ].value;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)n;

    a = p[ 0 ];
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	623b      	str	r3, [r7, #32]
    b = p[ 1 ];
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	3304      	adds	r3, #4
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	61fb      	str	r3, [r7, #28]
    c = p[ 2 ];
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	3308      	adds	r3, #8
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	61bb      	str	r3, [r7, #24]
    tmp = qFIS_Min( ( x - a )/( b - a ) , ( c - x )/( c - b ) );
 8003984:	6a39      	ldr	r1, [r7, #32]
 8003986:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003988:	f7fd f8f2 	bl	8000b70 <__aeabi_fsub>
 800398c:	4603      	mov	r3, r0
 800398e:	461c      	mov	r4, r3
 8003990:	6a39      	ldr	r1, [r7, #32]
 8003992:	69f8      	ldr	r0, [r7, #28]
 8003994:	f7fd f8ec 	bl	8000b70 <__aeabi_fsub>
 8003998:	4603      	mov	r3, r0
 800399a:	4619      	mov	r1, r3
 800399c:	4620      	mov	r0, r4
 800399e:	f7fd faa5 	bl	8000eec <__aeabi_fdiv>
 80039a2:	4603      	mov	r3, r0
 80039a4:	461c      	mov	r4, r3
 80039a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039a8:	69b8      	ldr	r0, [r7, #24]
 80039aa:	f7fd f8e1 	bl	8000b70 <__aeabi_fsub>
 80039ae:	4603      	mov	r3, r0
 80039b0:	461d      	mov	r5, r3
 80039b2:	69f9      	ldr	r1, [r7, #28]
 80039b4:	69b8      	ldr	r0, [r7, #24]
 80039b6:	f7fd f8db 	bl	8000b70 <__aeabi_fsub>
 80039ba:	4603      	mov	r3, r0
 80039bc:	4619      	mov	r1, r3
 80039be:	4628      	mov	r0, r5
 80039c0:	f7fd fa94 	bl	8000eec <__aeabi_fdiv>
 80039c4:	4603      	mov	r3, r0
 80039c6:	4619      	mov	r1, r3
 80039c8:	4620      	mov	r0, r4
 80039ca:	f000 ff1b 	bl	8004804 <qFIS_Min>
 80039ce:	6178      	str	r0, [r7, #20]

    return qFIS_Max( tmp , 0.0f );
 80039d0:	f04f 0100 	mov.w	r1, #0
 80039d4:	6978      	ldr	r0, [r7, #20]
 80039d6:	f000 ff30 	bl	800483a <qFIS_Max>
 80039da:	4603      	mov	r3, r0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3728      	adds	r7, #40	; 0x28
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bdb0      	pop	{r4, r5, r7, pc}

080039e4 <qFIS_TrapMF>:
/*============================================================================*/
static float qFIS_TrapMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 80039e4:	b590      	push	{r4, r7, lr}
 80039e6:	b08b      	sub	sp, #44	; 0x2c
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
    float a, b, c, d, tmp;
    float x = in[ 0 ].value;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	627b      	str	r3, [r7, #36]	; 0x24
    (void)n;

    a = p[ 0 ];
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	623b      	str	r3, [r7, #32]
    b = p[ 1 ];
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	3304      	adds	r3, #4
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	61fb      	str	r3, [r7, #28]
    c = p[ 2 ];
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	3308      	adds	r3, #8
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	61bb      	str	r3, [r7, #24]
    d = p[ 3 ];
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	330c      	adds	r3, #12
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	617b      	str	r3, [r7, #20]
    tmp = qFIS_Min( ( x - a )/( b - a ) , 1.0f );
 8003a14:	6a39      	ldr	r1, [r7, #32]
 8003a16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a18:	f7fd f8aa 	bl	8000b70 <__aeabi_fsub>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	461c      	mov	r4, r3
 8003a20:	6a39      	ldr	r1, [r7, #32]
 8003a22:	69f8      	ldr	r0, [r7, #28]
 8003a24:	f7fd f8a4 	bl	8000b70 <__aeabi_fsub>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	4620      	mov	r0, r4
 8003a2e:	f7fd fa5d 	bl	8000eec <__aeabi_fdiv>
 8003a32:	4603      	mov	r3, r0
 8003a34:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f000 fee3 	bl	8004804 <qFIS_Min>
 8003a3e:	6138      	str	r0, [r7, #16]
    tmp = qFIS_Min( tmp, ( d - x )/( d - c ) ) ;
 8003a40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a42:	6978      	ldr	r0, [r7, #20]
 8003a44:	f7fd f894 	bl	8000b70 <__aeabi_fsub>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	461c      	mov	r4, r3
 8003a4c:	69b9      	ldr	r1, [r7, #24]
 8003a4e:	6978      	ldr	r0, [r7, #20]
 8003a50:	f7fd f88e 	bl	8000b70 <__aeabi_fsub>
 8003a54:	4603      	mov	r3, r0
 8003a56:	4619      	mov	r1, r3
 8003a58:	4620      	mov	r0, r4
 8003a5a:	f7fd fa47 	bl	8000eec <__aeabi_fdiv>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	4619      	mov	r1, r3
 8003a62:	6938      	ldr	r0, [r7, #16]
 8003a64:	f000 fece 	bl	8004804 <qFIS_Min>
 8003a68:	6138      	str	r0, [r7, #16]

    return qFIS_Max( tmp , 0.0f );
 8003a6a:	f04f 0100 	mov.w	r1, #0
 8003a6e:	6938      	ldr	r0, [r7, #16]
 8003a70:	f000 fee3 	bl	800483a <qFIS_Max>
 8003a74:	4603      	mov	r3, r0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	372c      	adds	r7, #44	; 0x2c
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd90      	pop	{r4, r7, pc}

08003a7e <qFIS_GBellMF>:
/*============================================================================*/
static float qFIS_GBellMF( const qFIS_IO_Base_t * const in,
                           const float *p,
                           const size_t n )
{
 8003a7e:	b590      	push	{r4, r7, lr}
 8003a80:	b089      	sub	sp, #36	; 0x24
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	60f8      	str	r0, [r7, #12]
 8003a86:	60b9      	str	r1, [r7, #8]
 8003a88:	607a      	str	r2, [r7, #4]
    float a, b, c;
    float x = in[ 0 ].value;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	61fb      	str	r3, [r7, #28]
    (void)n;

    a = p[ 0 ];
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	61bb      	str	r3, [r7, #24]
    b = p[ 1 ];
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	3304      	adds	r3, #4
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	617b      	str	r3, [r7, #20]
    c = p[ 2 ];
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	3308      	adds	r3, #8
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	613b      	str	r3, [r7, #16]
    
    return ( 1.0f/( 1.0f + QLIB_POW( QLIB_ABS( ( x - c )/a ) , 2.0f*b ) ) );
 8003aa6:	6939      	ldr	r1, [r7, #16]
 8003aa8:	69f8      	ldr	r0, [r7, #28]
 8003aaa:	f7fd f861 	bl	8000b70 <__aeabi_fsub>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	69b9      	ldr	r1, [r7, #24]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7fd fa1a 	bl	8000eec <__aeabi_fdiv>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7fe fc20 	bl	8002300 <qFFMath_Abs>
 8003ac0:	4604      	mov	r4, r0
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7fd f854 	bl	8000b74 <__addsf3>
 8003acc:	4603      	mov	r3, r0
 8003ace:	4619      	mov	r1, r3
 8003ad0:	4620      	mov	r0, r4
 8003ad2:	f7fe fdc7 	bl	8002664 <qFFMath_Pow>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7fd f849 	bl	8000b74 <__addsf3>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003aea:	f7fd f9ff 	bl	8000eec <__aeabi_fdiv>
 8003aee:	4603      	mov	r3, r0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3724      	adds	r7, #36	; 0x24
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd90      	pop	{r4, r7, pc}

08003af8 <qFIS_GaussMF>:
/*============================================================================*/
static float qFIS_GaussMF( const qFIS_IO_Base_t * const in,
                           const float *p,
                           const size_t n )
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b088      	sub	sp, #32
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
    float a, c, tmp;
    float x = in[ 0 ].value;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	61fb      	str	r3, [r7, #28]
    (void)n;

    a = p[ 0 ];
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	61bb      	str	r3, [r7, #24]
    c = p[ 1 ];
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	3304      	adds	r3, #4
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	617b      	str	r3, [r7, #20]
    tmp = ( x - c )/a;
 8003b18:	6979      	ldr	r1, [r7, #20]
 8003b1a:	69f8      	ldr	r0, [r7, #28]
 8003b1c:	f7fd f828 	bl	8000b70 <__aeabi_fsub>
 8003b20:	4603      	mov	r3, r0
 8003b22:	69b9      	ldr	r1, [r7, #24]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7fd f9e1 	bl	8000eec <__aeabi_fdiv>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	613b      	str	r3, [r7, #16]

    return QLIB_EXP( -0.5f*tmp*tmp );
 8003b2e:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
 8003b32:	6938      	ldr	r0, [r7, #16]
 8003b34:	f7fd f926 	bl	8000d84 <__aeabi_fmul>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	6939      	ldr	r1, [r7, #16]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7fd f921 	bl	8000d84 <__aeabi_fmul>
 8003b42:	4603      	mov	r3, r0
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7fe fd65 	bl	8002614 <qFFMath_Exp>
 8003b4a:	4603      	mov	r3, r0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3720      	adds	r7, #32
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <qFIS_Gauss2MF>:
/*============================================================================*/
static float qFIS_Gauss2MF( const qFIS_IO_Base_t * const in,
                            const float *p,
                            const size_t n )
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b08a      	sub	sp, #40	; 0x28
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]
    float c1, c2, f1, f2;
    float x = in[ 0 ].value;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	627b      	str	r3, [r7, #36]	; 0x24

    c1 = p[ 1 ];
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	3304      	adds	r3, #4
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	623b      	str	r3, [r7, #32]
    c2 = p[ 3 ];
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	330c      	adds	r3, #12
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	61fb      	str	r3, [r7, #28]
    f1 = ( x <= c1 ) ? qFIS_GaussMF( in , p, n ) : 1.0f;
 8003b76:	6a39      	ldr	r1, [r7, #32]
 8003b78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b7a:	f7fd faab 	bl	80010d4 <__aeabi_fcmple>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d006      	beq.n	8003b92 <qFIS_Gauss2MF+0x3e>
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	68b9      	ldr	r1, [r7, #8]
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	f7ff ffb5 	bl	8003af8 <qFIS_GaussMF>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	e001      	b.n	8003b96 <qFIS_Gauss2MF+0x42>
 8003b92:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003b96:	61bb      	str	r3, [r7, #24]
    f2 = ( x <= c2 ) ? qFIS_GaussMF( in , &p[ 2 ], n ) : 1.0f;
 8003b98:	69f9      	ldr	r1, [r7, #28]
 8003b9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b9c:	f7fd fa9a 	bl	80010d4 <__aeabi_fcmple>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d008      	beq.n	8003bb8 <qFIS_Gauss2MF+0x64>
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	3308      	adds	r3, #8
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	4619      	mov	r1, r3
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f7ff ffa2 	bl	8003af8 <qFIS_GaussMF>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	e001      	b.n	8003bbc <qFIS_Gauss2MF+0x68>
 8003bb8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003bbc:	617b      	str	r3, [r7, #20]

    return f1*f2;
 8003bbe:	6979      	ldr	r1, [r7, #20]
 8003bc0:	69b8      	ldr	r0, [r7, #24]
 8003bc2:	f7fd f8df 	bl	8000d84 <__aeabi_fmul>
 8003bc6:	4603      	mov	r3, r0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3728      	adds	r7, #40	; 0x28
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <qFIS_SigMF>:
/*============================================================================*/
static float qFIS_SigMF( const qFIS_IO_Base_t * const in,
                         const float *p,
                         const size_t n )
{
 8003bd0:	b590      	push	{r4, r7, lr}
 8003bd2:	b089      	sub	sp, #36	; 0x24
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
    float a, b;
    float x = in[ 0 ].value;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	61fb      	str	r3, [r7, #28]
    (void)n;

    a = p[ 0 ];
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	61bb      	str	r3, [r7, #24]
    b = p[ 1 ];
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	3304      	adds	r3, #4
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	617b      	str	r3, [r7, #20]

    return 1.0f/( 1.0f + QLIB_EXP( -a*( x - b ) ) );
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8003bf6:	6979      	ldr	r1, [r7, #20]
 8003bf8:	69f8      	ldr	r0, [r7, #28]
 8003bfa:	f7fc ffb9 	bl	8000b70 <__aeabi_fsub>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	4619      	mov	r1, r3
 8003c02:	4620      	mov	r0, r4
 8003c04:	f7fd f8be 	bl	8000d84 <__aeabi_fmul>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7fe fd02 	bl	8002614 <qFFMath_Exp>
 8003c10:	4603      	mov	r3, r0
 8003c12:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7fc ffac 	bl	8000b74 <__addsf3>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	4619      	mov	r1, r3
 8003c20:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003c24:	f7fd f962 	bl	8000eec <__aeabi_fdiv>
 8003c28:	4603      	mov	r3, r0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3724      	adds	r7, #36	; 0x24
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd90      	pop	{r4, r7, pc}

08003c32 <qFIS_TSigMF>:
/*============================================================================*/
static float qFIS_TSigMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b08a      	sub	sp, #40	; 0x28
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	60f8      	str	r0, [r7, #12]
 8003c3a:	60b9      	str	r1, [r7, #8]
 8003c3c:	607a      	str	r2, [r7, #4]
    float a, b, y;
    float x = in[ 0 ].value;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	623b      	str	r3, [r7, #32]
    float min = in[ 0 ].min;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	61fb      	str	r3, [r7, #28]
    float max = in[ 0 ].max;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	61bb      	str	r3, [r7, #24]
    (void)n;

    a = p[ 0 ]; /*slope*/
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	617b      	str	r3, [r7, #20]
    b = p[ 1 ]; /*inflection*/
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	3304      	adds	r3, #4
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	613b      	str	r3, [r7, #16]
    if ( qFMathEx_Equal( x, 1.0f ) ) {
 8003c5e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003c62:	6a38      	ldr	r0, [r7, #32]
 8003c64:	f000 febb 	bl	80049de <qFMathEx_Equal>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00d      	beq.n	8003c8a <qFIS_TSigMF+0x58>
        if ( a >= 0.0f ) {
 8003c6e:	f04f 0100 	mov.w	r1, #0
 8003c72:	6978      	ldr	r0, [r7, #20]
 8003c74:	f7fd fa38 	bl	80010e8 <__aeabi_fcmpge>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d002      	beq.n	8003c84 <qFIS_TSigMF+0x52>
            y = max;
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	627b      	str	r3, [r7, #36]	; 0x24
 8003c82:	e033      	b.n	8003cec <qFIS_TSigMF+0xba>
        }
        else {
            y = min;
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	627b      	str	r3, [r7, #36]	; 0x24
 8003c88:	e030      	b.n	8003cec <qFIS_TSigMF+0xba>
        }
    }
    else if ( qFMathEx_Equal( x, 0.0f ) ) {
 8003c8a:	f04f 0100 	mov.w	r1, #0
 8003c8e:	6a38      	ldr	r0, [r7, #32]
 8003c90:	f000 fea5 	bl	80049de <qFMathEx_Equal>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00d      	beq.n	8003cb6 <qFIS_TSigMF+0x84>
        if ( a >= 0.0f ) {
 8003c9a:	f04f 0100 	mov.w	r1, #0
 8003c9e:	6978      	ldr	r0, [r7, #20]
 8003ca0:	f7fd fa22 	bl	80010e8 <__aeabi_fcmpge>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d002      	beq.n	8003cb0 <qFIS_TSigMF+0x7e>
            y = min;
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	627b      	str	r3, [r7, #36]	; 0x24
 8003cae:	e01d      	b.n	8003cec <qFIS_TSigMF+0xba>
        }
        else {
            y = max;
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	627b      	str	r3, [r7, #36]	; 0x24
 8003cb4:	e01a      	b.n	8003cec <qFIS_TSigMF+0xba>
        }
    }
    else {
        /*cstat -MISRAC2012-Dir-4.11_a*/
        y = b - ( QLIB_LOG( ( 1.0f/x ) - 1.0f )/a );
 8003cb6:	6a39      	ldr	r1, [r7, #32]
 8003cb8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003cbc:	f7fd f916 	bl	8000eec <__aeabi_fdiv>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7fc ff52 	bl	8000b70 <__aeabi_fsub>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7fe fcb4 	bl	800263c <qFFMath_Log>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	6979      	ldr	r1, [r7, #20]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7fd f907 	bl	8000eec <__aeabi_fdiv>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	6938      	ldr	r0, [r7, #16]
 8003ce4:	f7fc ff44 	bl	8000b70 <__aeabi_fsub>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	627b      	str	r3, [r7, #36]	; 0x24
        /*cstat +MISRAC2012-Dir-4.11_a*/
    }

    return y;
 8003cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3728      	adds	r7, #40	; 0x28
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <qFIS_DSigMF>:
/*============================================================================*/
static float qFIS_DSigMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 8003cf6:	b590      	push	{r4, r7, lr}
 8003cf8:	b085      	sub	sp, #20
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	60f8      	str	r0, [r7, #12]
 8003cfe:	60b9      	str	r1, [r7, #8]
 8003d00:	607a      	str	r2, [r7, #4]
    return QLIB_ABS( qFIS_SigMF( in , p, n ) - qFIS_SigMF( in , &p[ 2 ], n ) );
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	68b9      	ldr	r1, [r7, #8]
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	f7ff ff62 	bl	8003bd0 <qFIS_SigMF>
 8003d0c:	4604      	mov	r4, r0
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	3308      	adds	r3, #8
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	4619      	mov	r1, r3
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f7ff ff5a 	bl	8003bd0 <qFIS_SigMF>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	4619      	mov	r1, r3
 8003d20:	4620      	mov	r0, r4
 8003d22:	f7fc ff25 	bl	8000b70 <__aeabi_fsub>
 8003d26:	4603      	mov	r3, r0
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7fe fae9 	bl	8002300 <qFFMath_Abs>
 8003d2e:	4603      	mov	r3, r0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3714      	adds	r7, #20
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd90      	pop	{r4, r7, pc}

08003d38 <qFIS_PSigMF>:
/*============================================================================*/
static float qFIS_PSigMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 8003d38:	b590      	push	{r4, r7, lr}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
    return QLIB_ABS( qFIS_SigMF( in , p, n )*qFIS_SigMF( in , &p[ 2 ], n ) );
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	68b9      	ldr	r1, [r7, #8]
 8003d48:	68f8      	ldr	r0, [r7, #12]
 8003d4a:	f7ff ff41 	bl	8003bd0 <qFIS_SigMF>
 8003d4e:	4604      	mov	r4, r0
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	3308      	adds	r3, #8
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	4619      	mov	r1, r3
 8003d58:	68f8      	ldr	r0, [r7, #12]
 8003d5a:	f7ff ff39 	bl	8003bd0 <qFIS_SigMF>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	4619      	mov	r1, r3
 8003d62:	4620      	mov	r0, r4
 8003d64:	f7fd f80e 	bl	8000d84 <__aeabi_fmul>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7fe fac8 	bl	8002300 <qFFMath_Abs>
 8003d70:	4603      	mov	r3, r0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3714      	adds	r7, #20
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd90      	pop	{r4, r7, pc}

08003d7a <qFIS_SMF>:
/*============================================================================*/
static float qFIS_SMF( const qFIS_IO_Base_t * const in,
                       const float *p,
                       const size_t n )
{
 8003d7a:	b590      	push	{r4, r7, lr}
 8003d7c:	b08b      	sub	sp, #44	; 0x2c
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	60f8      	str	r0, [r7, #12]
 8003d82:	60b9      	str	r1, [r7, #8]
 8003d84:	607a      	str	r2, [r7, #4]
    float a, b, tmp, y;
    float x = in[ 0 ].value;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	623b      	str	r3, [r7, #32]
    (void)n;

    a = p[ 0 ];
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	61fb      	str	r3, [r7, #28]
    b = p[ 1 ];
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	3304      	adds	r3, #4
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	61bb      	str	r3, [r7, #24]
    if ( x <= a ) {
 8003d9a:	69f9      	ldr	r1, [r7, #28]
 8003d9c:	6a38      	ldr	r0, [r7, #32]
 8003d9e:	f7fd f999 	bl	80010d4 <__aeabi_fcmple>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d003      	beq.n	8003db0 <qFIS_SMF+0x36>
        y =  0.0f;
 8003da8:	f04f 0300 	mov.w	r3, #0
 8003dac:	627b      	str	r3, [r7, #36]	; 0x24
 8003dae:	e081      	b.n	8003eb4 <qFIS_SMF+0x13a>
    }
    else if ( x >= b ) {
 8003db0:	69b9      	ldr	r1, [r7, #24]
 8003db2:	6a38      	ldr	r0, [r7, #32]
 8003db4:	f7fd f998 	bl	80010e8 <__aeabi_fcmpge>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d003      	beq.n	8003dc6 <qFIS_SMF+0x4c>
        y = 1.0f;
 8003dbe:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8003dc4:	e076      	b.n	8003eb4 <qFIS_SMF+0x13a>
    }
    else if ( ( x >= a ) && ( x <= ( ( a + b )*0.5f ) ) ) {
 8003dc6:	69f9      	ldr	r1, [r7, #28]
 8003dc8:	6a38      	ldr	r0, [r7, #32]
 8003dca:	f7fd f98d 	bl	80010e8 <__aeabi_fcmpge>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d02f      	beq.n	8003e34 <qFIS_SMF+0xba>
 8003dd4:	69b9      	ldr	r1, [r7, #24]
 8003dd6:	69f8      	ldr	r0, [r7, #28]
 8003dd8:	f7fc fecc 	bl	8000b74 <__addsf3>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7fc ffce 	bl	8000d84 <__aeabi_fmul>
 8003de8:	4603      	mov	r3, r0
 8003dea:	4619      	mov	r1, r3
 8003dec:	6a38      	ldr	r0, [r7, #32]
 8003dee:	f7fd f971 	bl	80010d4 <__aeabi_fcmple>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d01d      	beq.n	8003e34 <qFIS_SMF+0xba>
        tmp = ( x - a )/( b - a );
 8003df8:	69f9      	ldr	r1, [r7, #28]
 8003dfa:	6a38      	ldr	r0, [r7, #32]
 8003dfc:	f7fc feb8 	bl	8000b70 <__aeabi_fsub>
 8003e00:	4603      	mov	r3, r0
 8003e02:	461c      	mov	r4, r3
 8003e04:	69f9      	ldr	r1, [r7, #28]
 8003e06:	69b8      	ldr	r0, [r7, #24]
 8003e08:	f7fc feb2 	bl	8000b70 <__aeabi_fsub>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	4619      	mov	r1, r3
 8003e10:	4620      	mov	r0, r4
 8003e12:	f7fd f86b 	bl	8000eec <__aeabi_fdiv>
 8003e16:	4603      	mov	r3, r0
 8003e18:	617b      	str	r3, [r7, #20]
        y = 2.0f*tmp*tmp;
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7fc fea8 	bl	8000b74 <__addsf3>
 8003e24:	4603      	mov	r3, r0
 8003e26:	4619      	mov	r1, r3
 8003e28:	6978      	ldr	r0, [r7, #20]
 8003e2a:	f7fc ffab 	bl	8000d84 <__aeabi_fmul>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	627b      	str	r3, [r7, #36]	; 0x24
 8003e32:	e03f      	b.n	8003eb4 <qFIS_SMF+0x13a>
    }
    else if ( ( x <= b ) && ( x >= ( ( a + b )*0.5f ) ) ) {
 8003e34:	69b9      	ldr	r1, [r7, #24]
 8003e36:	6a38      	ldr	r0, [r7, #32]
 8003e38:	f7fd f94c 	bl	80010d4 <__aeabi_fcmple>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d035      	beq.n	8003eae <qFIS_SMF+0x134>
 8003e42:	69b9      	ldr	r1, [r7, #24]
 8003e44:	69f8      	ldr	r0, [r7, #28]
 8003e46:	f7fc fe95 	bl	8000b74 <__addsf3>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7fc ff97 	bl	8000d84 <__aeabi_fmul>
 8003e56:	4603      	mov	r3, r0
 8003e58:	4619      	mov	r1, r3
 8003e5a:	6a38      	ldr	r0, [r7, #32]
 8003e5c:	f7fd f944 	bl	80010e8 <__aeabi_fcmpge>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d023      	beq.n	8003eae <qFIS_SMF+0x134>
        tmp = ( x - b )/( b - a );
 8003e66:	69b9      	ldr	r1, [r7, #24]
 8003e68:	6a38      	ldr	r0, [r7, #32]
 8003e6a:	f7fc fe81 	bl	8000b70 <__aeabi_fsub>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	461c      	mov	r4, r3
 8003e72:	69f9      	ldr	r1, [r7, #28]
 8003e74:	69b8      	ldr	r0, [r7, #24]
 8003e76:	f7fc fe7b 	bl	8000b70 <__aeabi_fsub>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	4620      	mov	r0, r4
 8003e80:	f7fd f834 	bl	8000eec <__aeabi_fdiv>
 8003e84:	4603      	mov	r3, r0
 8003e86:	617b      	str	r3, [r7, #20]
        y = ( 1.0f - ( 2.0f*tmp*tmp ) );
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7fc fe71 	bl	8000b74 <__addsf3>
 8003e92:	4603      	mov	r3, r0
 8003e94:	6979      	ldr	r1, [r7, #20]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7fc ff74 	bl	8000d84 <__aeabi_fmul>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003ea4:	f7fc fe64 	bl	8000b70 <__aeabi_fsub>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	627b      	str	r3, [r7, #36]	; 0x24
 8003eac:	e002      	b.n	8003eb4 <qFIS_SMF+0x13a>
    }
    else {
        y = 0.0f;
 8003eae:	f04f 0300 	mov.w	r3, #0
 8003eb2:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return y;
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	372c      	adds	r7, #44	; 0x2c
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd90      	pop	{r4, r7, pc}

08003ebe <qFIS_TSMF>:
/*============================================================================*/
static float qFIS_TSMF( const qFIS_IO_Base_t * const in,
                        const float *p,
                        const size_t n )
{
 8003ebe:	b590      	push	{r4, r7, lr}
 8003ec0:	b091      	sub	sp, #68	; 0x44
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	60f8      	str	r0, [r7, #12]
 8003ec6:	60b9      	str	r1, [r7, #8]
 8003ec8:	607a      	str	r2, [r7, #4]
    float diff, a, b, ta, tb, ma, mb;
    float x = in[ 0 ].value;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	63fb      	str	r3, [r7, #60]	; 0x3c
    (void)n;
    qFIS_IO_Base_t tmp = { 0.0f, 0.0f, 0.0f };
 8003ed0:	f04f 0300 	mov.w	r3, #0
 8003ed4:	617b      	str	r3, [r7, #20]
 8003ed6:	f04f 0300 	mov.w	r3, #0
 8003eda:	61bb      	str	r3, [r7, #24]
 8003edc:	f04f 0300 	mov.w	r3, #0
 8003ee0:	61fb      	str	r3, [r7, #28]

    a = p[ 0 ]; /*start*/
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	63bb      	str	r3, [r7, #56]	; 0x38
    b = p[ 1 ]; /*end*/
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	3304      	adds	r3, #4
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	637b      	str	r3, [r7, #52]	; 0x34
    diff = b - a;
 8003ef0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ef2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003ef4:	f7fc fe3c 	bl	8000b70 <__aeabi_fsub>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	633b      	str	r3, [r7, #48]	; 0x30
    diff = 0.5f*diff*diff;
 8003efc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003f00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f02:	f7fc ff3f 	bl	8000d84 <__aeabi_fmul>
 8003f06:	4603      	mov	r3, r0
 8003f08:	4619      	mov	r1, r3
 8003f0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f0c:	f7fc ff3a 	bl	8000d84 <__aeabi_fmul>
 8003f10:	4603      	mov	r3, r0
 8003f12:	633b      	str	r3, [r7, #48]	; 0x30
    /*cstat -MISRAC2012-Dir-4.11_a -MISRAC2012-Dir-4.11_b*/
    ta = a + QLIB_SQRT( x*diff );
 8003f14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f16:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003f18:	f7fc ff34 	bl	8000d84 <__aeabi_fmul>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7fe fa03 	bl	800232a <qFFMath_Sqrt>
 8003f24:	4603      	mov	r3, r0
 8003f26:	4619      	mov	r1, r3
 8003f28:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003f2a:	f7fc fe23 	bl	8000b74 <__addsf3>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	62fb      	str	r3, [r7, #44]	; 0x2c
    tmp.value = ta;
 8003f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f34:	61fb      	str	r3, [r7, #28]
    ma = qFIS_SMF( &tmp, p, n );
 8003f36:	f107 0314 	add.w	r3, r7, #20
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	68b9      	ldr	r1, [r7, #8]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7ff ff1b 	bl	8003d7a <qFIS_SMF>
 8003f44:	62b8      	str	r0, [r7, #40]	; 0x28
    tb = b + QLIB_SQRT( -( x - 1.0f )*diff );
 8003f46:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003f4a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003f4c:	f7fc fe10 	bl	8000b70 <__aeabi_fsub>
 8003f50:	4603      	mov	r3, r0
 8003f52:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003f56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7fc ff13 	bl	8000d84 <__aeabi_fmul>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7fe f9e2 	bl	800232a <qFFMath_Sqrt>
 8003f66:	4603      	mov	r3, r0
 8003f68:	4619      	mov	r1, r3
 8003f6a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003f6c:	f7fc fe02 	bl	8000b74 <__addsf3>
 8003f70:	4603      	mov	r3, r0
 8003f72:	627b      	str	r3, [r7, #36]	; 0x24
    tmp.value = tb;
 8003f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f76:	61fb      	str	r3, [r7, #28]
    mb = qFIS_SMF( &tmp, p, n );
 8003f78:	f107 0314 	add.w	r3, r7, #20
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	68b9      	ldr	r1, [r7, #8]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7ff fefa 	bl	8003d7a <qFIS_SMF>
 8003f86:	6238      	str	r0, [r7, #32]
    /*cstat +MISRAC2012-Dir-4.11_a +MISRAC2012-Dir-4.11_b*/
    return  ( QLIB_ABS( x - ma ) < QLIB_ABS( x - mb ) ) ? ta : tb;
 8003f88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f8a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003f8c:	f7fc fdf0 	bl	8000b70 <__aeabi_fsub>
 8003f90:	4603      	mov	r3, r0
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7fe f9b4 	bl	8002300 <qFFMath_Abs>
 8003f98:	4604      	mov	r4, r0
 8003f9a:	6a39      	ldr	r1, [r7, #32]
 8003f9c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003f9e:	f7fc fde7 	bl	8000b70 <__aeabi_fsub>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7fe f9ab 	bl	8002300 <qFFMath_Abs>
 8003faa:	4603      	mov	r3, r0
 8003fac:	4619      	mov	r1, r3
 8003fae:	4620      	mov	r0, r4
 8003fb0:	f7fd f886 	bl	80010c0 <__aeabi_fcmplt>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <qFIS_TSMF+0x100>
 8003fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fbc:	e000      	b.n	8003fc0 <qFIS_TSMF+0x102>
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3744      	adds	r7, #68	; 0x44
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd90      	pop	{r4, r7, pc}

08003fc8 <qFIS_ZMF>:
/*============================================================================*/
static float qFIS_ZMF( const qFIS_IO_Base_t * const in,
                       const float *p,
                       const size_t n )
{
 8003fc8:	b590      	push	{r4, r7, lr}
 8003fca:	b08b      	sub	sp, #44	; 0x2c
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	607a      	str	r2, [r7, #4]
    float a, b, tmp, y;
    float x = in[ 0 ].value;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	623b      	str	r3, [r7, #32]
    (void)n;

    a = p[ 0 ];
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	61fb      	str	r3, [r7, #28]
    b = p[ 1 ];
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	3304      	adds	r3, #4
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	61bb      	str	r3, [r7, #24]
    if ( x <= a ) {
 8003fe8:	69f9      	ldr	r1, [r7, #28]
 8003fea:	6a38      	ldr	r0, [r7, #32]
 8003fec:	f7fd f872 	bl	80010d4 <__aeabi_fcmple>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <qFIS_ZMF+0x36>
        y = 1.0f;
 8003ff6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003ffa:	627b      	str	r3, [r7, #36]	; 0x24
 8003ffc:	e081      	b.n	8004102 <qFIS_ZMF+0x13a>
    }
    else if ( x >= b ) {
 8003ffe:	69b9      	ldr	r1, [r7, #24]
 8004000:	6a38      	ldr	r0, [r7, #32]
 8004002:	f7fd f871 	bl	80010e8 <__aeabi_fcmpge>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d003      	beq.n	8004014 <qFIS_ZMF+0x4c>
        y = 0.0f;
 800400c:	f04f 0300 	mov.w	r3, #0
 8004010:	627b      	str	r3, [r7, #36]	; 0x24
 8004012:	e076      	b.n	8004102 <qFIS_ZMF+0x13a>
    }
    else if ( ( x >= a ) && ( x <= ( ( a + b )*0.5f ) ) ) {
 8004014:	69f9      	ldr	r1, [r7, #28]
 8004016:	6a38      	ldr	r0, [r7, #32]
 8004018:	f7fd f866 	bl	80010e8 <__aeabi_fcmpge>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d035      	beq.n	800408e <qFIS_ZMF+0xc6>
 8004022:	69b9      	ldr	r1, [r7, #24]
 8004024:	69f8      	ldr	r0, [r7, #28]
 8004026:	f7fc fda5 	bl	8000b74 <__addsf3>
 800402a:	4603      	mov	r3, r0
 800402c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004030:	4618      	mov	r0, r3
 8004032:	f7fc fea7 	bl	8000d84 <__aeabi_fmul>
 8004036:	4603      	mov	r3, r0
 8004038:	4619      	mov	r1, r3
 800403a:	6a38      	ldr	r0, [r7, #32]
 800403c:	f7fd f84a 	bl	80010d4 <__aeabi_fcmple>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d023      	beq.n	800408e <qFIS_ZMF+0xc6>
        tmp = ( x - a )/( b - a );
 8004046:	69f9      	ldr	r1, [r7, #28]
 8004048:	6a38      	ldr	r0, [r7, #32]
 800404a:	f7fc fd91 	bl	8000b70 <__aeabi_fsub>
 800404e:	4603      	mov	r3, r0
 8004050:	461c      	mov	r4, r3
 8004052:	69f9      	ldr	r1, [r7, #28]
 8004054:	69b8      	ldr	r0, [r7, #24]
 8004056:	f7fc fd8b 	bl	8000b70 <__aeabi_fsub>
 800405a:	4603      	mov	r3, r0
 800405c:	4619      	mov	r1, r3
 800405e:	4620      	mov	r0, r4
 8004060:	f7fc ff44 	bl	8000eec <__aeabi_fdiv>
 8004064:	4603      	mov	r3, r0
 8004066:	617b      	str	r3, [r7, #20]
        y = 1.0f - ( 2.0f*tmp*tmp );
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	4619      	mov	r1, r3
 800406c:	4618      	mov	r0, r3
 800406e:	f7fc fd81 	bl	8000b74 <__addsf3>
 8004072:	4603      	mov	r3, r0
 8004074:	6979      	ldr	r1, [r7, #20]
 8004076:	4618      	mov	r0, r3
 8004078:	f7fc fe84 	bl	8000d84 <__aeabi_fmul>
 800407c:	4603      	mov	r3, r0
 800407e:	4619      	mov	r1, r3
 8004080:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004084:	f7fc fd74 	bl	8000b70 <__aeabi_fsub>
 8004088:	4603      	mov	r3, r0
 800408a:	627b      	str	r3, [r7, #36]	; 0x24
 800408c:	e039      	b.n	8004102 <qFIS_ZMF+0x13a>
    }
    else if ( ( x <= b ) && ( x >= ( ( a + b )*0.5f ) ) ) {
 800408e:	69b9      	ldr	r1, [r7, #24]
 8004090:	6a38      	ldr	r0, [r7, #32]
 8004092:	f7fd f81f 	bl	80010d4 <__aeabi_fcmple>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d02f      	beq.n	80040fc <qFIS_ZMF+0x134>
 800409c:	69b9      	ldr	r1, [r7, #24]
 800409e:	69f8      	ldr	r0, [r7, #28]
 80040a0:	f7fc fd68 	bl	8000b74 <__addsf3>
 80040a4:	4603      	mov	r3, r0
 80040a6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7fc fe6a 	bl	8000d84 <__aeabi_fmul>
 80040b0:	4603      	mov	r3, r0
 80040b2:	4619      	mov	r1, r3
 80040b4:	6a38      	ldr	r0, [r7, #32]
 80040b6:	f7fd f817 	bl	80010e8 <__aeabi_fcmpge>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d01d      	beq.n	80040fc <qFIS_ZMF+0x134>
        tmp = ( x - b )/( b - a );
 80040c0:	69b9      	ldr	r1, [r7, #24]
 80040c2:	6a38      	ldr	r0, [r7, #32]
 80040c4:	f7fc fd54 	bl	8000b70 <__aeabi_fsub>
 80040c8:	4603      	mov	r3, r0
 80040ca:	461c      	mov	r4, r3
 80040cc:	69f9      	ldr	r1, [r7, #28]
 80040ce:	69b8      	ldr	r0, [r7, #24]
 80040d0:	f7fc fd4e 	bl	8000b70 <__aeabi_fsub>
 80040d4:	4603      	mov	r3, r0
 80040d6:	4619      	mov	r1, r3
 80040d8:	4620      	mov	r0, r4
 80040da:	f7fc ff07 	bl	8000eec <__aeabi_fdiv>
 80040de:	4603      	mov	r3, r0
 80040e0:	617b      	str	r3, [r7, #20]
        y = 2.0f*tmp*tmp;
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	4619      	mov	r1, r3
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7fc fd44 	bl	8000b74 <__addsf3>
 80040ec:	4603      	mov	r3, r0
 80040ee:	4619      	mov	r1, r3
 80040f0:	6978      	ldr	r0, [r7, #20]
 80040f2:	f7fc fe47 	bl	8000d84 <__aeabi_fmul>
 80040f6:	4603      	mov	r3, r0
 80040f8:	627b      	str	r3, [r7, #36]	; 0x24
 80040fa:	e002      	b.n	8004102 <qFIS_ZMF+0x13a>
    }
    else {
        y = 0.0f;
 80040fc:	f04f 0300 	mov.w	r3, #0
 8004100:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return y;
 8004102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004104:	4618      	mov	r0, r3
 8004106:	372c      	adds	r7, #44	; 0x2c
 8004108:	46bd      	mov	sp, r7
 800410a:	bd90      	pop	{r4, r7, pc}

0800410c <qFIS_LinSMF>:
/*============================================================================*/
static float qFIS_LinSMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 800410c:	b590      	push	{r4, r7, lr}
 800410e:	b089      	sub	sp, #36	; 0x24
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
    float a, b, y;
    float x = in[ 0 ].value;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	61bb      	str	r3, [r7, #24]
    (void)n;

    a = p[ 0 ];
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	617b      	str	r3, [r7, #20]
    b = p[ 1 ];
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	3304      	adds	r3, #4
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	613b      	str	r3, [r7, #16]
    if ( a < b ) {
 800412c:	6939      	ldr	r1, [r7, #16]
 800412e:	6978      	ldr	r0, [r7, #20]
 8004130:	f7fc ffc6 	bl	80010c0 <__aeabi_fcmplt>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d027      	beq.n	800418a <qFIS_LinSMF+0x7e>
        if ( x < a ) {
 800413a:	6979      	ldr	r1, [r7, #20]
 800413c:	69b8      	ldr	r0, [r7, #24]
 800413e:	f7fc ffbf 	bl	80010c0 <__aeabi_fcmplt>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d003      	beq.n	8004150 <qFIS_LinSMF+0x44>
            y = 0.0f;
 8004148:	f04f 0300 	mov.w	r3, #0
 800414c:	61fb      	str	r3, [r7, #28]
 800414e:	e034      	b.n	80041ba <qFIS_LinSMF+0xae>
        }
        else if ( x > b ) {
 8004150:	6939      	ldr	r1, [r7, #16]
 8004152:	69b8      	ldr	r0, [r7, #24]
 8004154:	f7fc ffd2 	bl	80010fc <__aeabi_fcmpgt>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d003      	beq.n	8004166 <qFIS_LinSMF+0x5a>
            y = 1.0f;
 800415e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004162:	61fb      	str	r3, [r7, #28]
 8004164:	e029      	b.n	80041ba <qFIS_LinSMF+0xae>
        }
        else {
            y = ( x - a )/( b - a );
 8004166:	6979      	ldr	r1, [r7, #20]
 8004168:	69b8      	ldr	r0, [r7, #24]
 800416a:	f7fc fd01 	bl	8000b70 <__aeabi_fsub>
 800416e:	4603      	mov	r3, r0
 8004170:	461c      	mov	r4, r3
 8004172:	6979      	ldr	r1, [r7, #20]
 8004174:	6938      	ldr	r0, [r7, #16]
 8004176:	f7fc fcfb 	bl	8000b70 <__aeabi_fsub>
 800417a:	4603      	mov	r3, r0
 800417c:	4619      	mov	r1, r3
 800417e:	4620      	mov	r0, r4
 8004180:	f7fc feb4 	bl	8000eec <__aeabi_fdiv>
 8004184:	4603      	mov	r3, r0
 8004186:	61fb      	str	r3, [r7, #28]
 8004188:	e017      	b.n	80041ba <qFIS_LinSMF+0xae>
        }
    }
    else if ( qFMathEx_Equal( a, b ) ) {
 800418a:	6939      	ldr	r1, [r7, #16]
 800418c:	6978      	ldr	r0, [r7, #20]
 800418e:	f000 fc26 	bl	80049de <qFMathEx_Equal>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00d      	beq.n	80041b4 <qFIS_LinSMF+0xa8>
        y = ( x < a ) ? 0.0f : 1.0f;
 8004198:	6979      	ldr	r1, [r7, #20]
 800419a:	69b8      	ldr	r0, [r7, #24]
 800419c:	f7fc ff90 	bl	80010c0 <__aeabi_fcmplt>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d002      	beq.n	80041ac <qFIS_LinSMF+0xa0>
 80041a6:	f04f 0300 	mov.w	r3, #0
 80041aa:	e001      	b.n	80041b0 <qFIS_LinSMF+0xa4>
 80041ac:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80041b0:	61fb      	str	r3, [r7, #28]
 80041b2:	e002      	b.n	80041ba <qFIS_LinSMF+0xae>
    }
    else {
        y = 0.0f;
 80041b4:	f04f 0300 	mov.w	r3, #0
 80041b8:	61fb      	str	r3, [r7, #28]
    }

    return y;
 80041ba:	69fb      	ldr	r3, [r7, #28]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3724      	adds	r7, #36	; 0x24
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd90      	pop	{r4, r7, pc}

080041c4 <qFIS_LinZMF>:
/*============================================================================*/
static float qFIS_LinZMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 80041c4:	b590      	push	{r4, r7, lr}
 80041c6:	b089      	sub	sp, #36	; 0x24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
    float a, b, y;
    float x = in[ 0 ].value;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	61bb      	str	r3, [r7, #24]
    (void)n;

    a = p[ 0 ];
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	617b      	str	r3, [r7, #20]
    b = p[ 1 ];
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	3304      	adds	r3, #4
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	613b      	str	r3, [r7, #16]
    if ( a < b ) {
 80041e4:	6939      	ldr	r1, [r7, #16]
 80041e6:	6978      	ldr	r0, [r7, #20]
 80041e8:	f7fc ff6a 	bl	80010c0 <__aeabi_fcmplt>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d027      	beq.n	8004242 <qFIS_LinZMF+0x7e>
        if ( x < a ) {
 80041f2:	6979      	ldr	r1, [r7, #20]
 80041f4:	69b8      	ldr	r0, [r7, #24]
 80041f6:	f7fc ff63 	bl	80010c0 <__aeabi_fcmplt>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d003      	beq.n	8004208 <qFIS_LinZMF+0x44>
            y = 1.0f;
 8004200:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004204:	61fb      	str	r3, [r7, #28]
 8004206:	e034      	b.n	8004272 <qFIS_LinZMF+0xae>
        }
        else if ( x > b ) {
 8004208:	6939      	ldr	r1, [r7, #16]
 800420a:	69b8      	ldr	r0, [r7, #24]
 800420c:	f7fc ff76 	bl	80010fc <__aeabi_fcmpgt>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d003      	beq.n	800421e <qFIS_LinZMF+0x5a>
            y = 0.0f;
 8004216:	f04f 0300 	mov.w	r3, #0
 800421a:	61fb      	str	r3, [r7, #28]
 800421c:	e029      	b.n	8004272 <qFIS_LinZMF+0xae>
        }
        else {
            y = ( a - x )/( a - b );
 800421e:	69b9      	ldr	r1, [r7, #24]
 8004220:	6978      	ldr	r0, [r7, #20]
 8004222:	f7fc fca5 	bl	8000b70 <__aeabi_fsub>
 8004226:	4603      	mov	r3, r0
 8004228:	461c      	mov	r4, r3
 800422a:	6939      	ldr	r1, [r7, #16]
 800422c:	6978      	ldr	r0, [r7, #20]
 800422e:	f7fc fc9f 	bl	8000b70 <__aeabi_fsub>
 8004232:	4603      	mov	r3, r0
 8004234:	4619      	mov	r1, r3
 8004236:	4620      	mov	r0, r4
 8004238:	f7fc fe58 	bl	8000eec <__aeabi_fdiv>
 800423c:	4603      	mov	r3, r0
 800423e:	61fb      	str	r3, [r7, #28]
 8004240:	e017      	b.n	8004272 <qFIS_LinZMF+0xae>
        }
    }
    else if ( qFMathEx_Equal( a, b ) ) {
 8004242:	6939      	ldr	r1, [r7, #16]
 8004244:	6978      	ldr	r0, [r7, #20]
 8004246:	f000 fbca 	bl	80049de <qFMathEx_Equal>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00d      	beq.n	800426c <qFIS_LinZMF+0xa8>
        y = ( x < a ) ? 1.0f : 0.0f;
 8004250:	6979      	ldr	r1, [r7, #20]
 8004252:	69b8      	ldr	r0, [r7, #24]
 8004254:	f7fc ff34 	bl	80010c0 <__aeabi_fcmplt>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d002      	beq.n	8004264 <qFIS_LinZMF+0xa0>
 800425e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004262:	e001      	b.n	8004268 <qFIS_LinZMF+0xa4>
 8004264:	f04f 0300 	mov.w	r3, #0
 8004268:	61fb      	str	r3, [r7, #28]
 800426a:	e002      	b.n	8004272 <qFIS_LinZMF+0xae>
    }
    else {
        y = 0.0f;
 800426c:	f04f 0300 	mov.w	r3, #0
 8004270:	61fb      	str	r3, [r7, #28]
    }

    return y;
 8004272:	69fb      	ldr	r3, [r7, #28]
}
 8004274:	4618      	mov	r0, r3
 8004276:	3724      	adds	r7, #36	; 0x24
 8004278:	46bd      	mov	sp, r7
 800427a:	bd90      	pop	{r4, r7, pc}

0800427c <qFIS_TZMF>:
/*============================================================================*/
static float qFIS_TZMF( const qFIS_IO_Base_t * const in,
                        const float *p,
                        const size_t n )
{
 800427c:	b590      	push	{r4, r7, lr}
 800427e:	b091      	sub	sp, #68	; 0x44
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
    float diff, a, b, ta, tb, ma, mb;
    float x = in[ 0 ].value;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	63fb      	str	r3, [r7, #60]	; 0x3c
    (void)n;
    qFIS_IO_Base_t tmp = { 0.0f, 0.0f, 0.0f };
 800428e:	f04f 0300 	mov.w	r3, #0
 8004292:	617b      	str	r3, [r7, #20]
 8004294:	f04f 0300 	mov.w	r3, #0
 8004298:	61bb      	str	r3, [r7, #24]
 800429a:	f04f 0300 	mov.w	r3, #0
 800429e:	61fb      	str	r3, [r7, #28]

    a = p[ 0 ]; /*start*/
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	63bb      	str	r3, [r7, #56]	; 0x38
    b = p[ 1 ]; /*end*/
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	3304      	adds	r3, #4
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	637b      	str	r3, [r7, #52]	; 0x34
    diff = b - a;
 80042ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80042b0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80042b2:	f7fc fc5d 	bl	8000b70 <__aeabi_fsub>
 80042b6:	4603      	mov	r3, r0
 80042b8:	633b      	str	r3, [r7, #48]	; 0x30
    diff = 0.5f*diff*diff;
 80042ba:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80042be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042c0:	f7fc fd60 	bl	8000d84 <__aeabi_fmul>
 80042c4:	4603      	mov	r3, r0
 80042c6:	4619      	mov	r1, r3
 80042c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042ca:	f7fc fd5b 	bl	8000d84 <__aeabi_fmul>
 80042ce:	4603      	mov	r3, r0
 80042d0:	633b      	str	r3, [r7, #48]	; 0x30
    /*cstat -MISRAC2012-Dir-4.11_a -MISRAC2012-Dir-4.11_b*/
    ta = a + QLIB_SQRT( -( x - 1.0f )*diff );
 80042d2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80042d6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80042d8:	f7fc fc4a 	bl	8000b70 <__aeabi_fsub>
 80042dc:	4603      	mov	r3, r0
 80042de:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80042e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7fc fd4d 	bl	8000d84 <__aeabi_fmul>
 80042ea:	4603      	mov	r3, r0
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7fe f81c 	bl	800232a <qFFMath_Sqrt>
 80042f2:	4603      	mov	r3, r0
 80042f4:	4619      	mov	r1, r3
 80042f6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80042f8:	f7fc fc3c 	bl	8000b74 <__addsf3>
 80042fc:	4603      	mov	r3, r0
 80042fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    tmp.value = ta;
 8004300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004302:	61fb      	str	r3, [r7, #28]
    ma = qFIS_SMF( &tmp, p, n );
 8004304:	f107 0314 	add.w	r3, r7, #20
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	68b9      	ldr	r1, [r7, #8]
 800430c:	4618      	mov	r0, r3
 800430e:	f7ff fd34 	bl	8003d7a <qFIS_SMF>
 8004312:	62b8      	str	r0, [r7, #40]	; 0x28
    tb = b + QLIB_SQRT( x*diff );
 8004314:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004316:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004318:	f7fc fd34 	bl	8000d84 <__aeabi_fmul>
 800431c:	4603      	mov	r3, r0
 800431e:	4618      	mov	r0, r3
 8004320:	f7fe f803 	bl	800232a <qFFMath_Sqrt>
 8004324:	4603      	mov	r3, r0
 8004326:	4619      	mov	r1, r3
 8004328:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800432a:	f7fc fc23 	bl	8000b74 <__addsf3>
 800432e:	4603      	mov	r3, r0
 8004330:	627b      	str	r3, [r7, #36]	; 0x24
    tmp.value = tb;
 8004332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004334:	61fb      	str	r3, [r7, #28]
    mb = qFIS_SMF( &tmp, p, n );
 8004336:	f107 0314 	add.w	r3, r7, #20
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	68b9      	ldr	r1, [r7, #8]
 800433e:	4618      	mov	r0, r3
 8004340:	f7ff fd1b 	bl	8003d7a <qFIS_SMF>
 8004344:	6238      	str	r0, [r7, #32]
    /*cstat +MISRAC2012-Dir-4.11_a +MISRAC2012-Dir-4.11_b*/
    return  ( QLIB_ABS( x - ma ) < QLIB_ABS( x - mb ) ) ? ta : tb;
 8004346:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004348:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800434a:	f7fc fc11 	bl	8000b70 <__aeabi_fsub>
 800434e:	4603      	mov	r3, r0
 8004350:	4618      	mov	r0, r3
 8004352:	f7fd ffd5 	bl	8002300 <qFFMath_Abs>
 8004356:	4604      	mov	r4, r0
 8004358:	6a39      	ldr	r1, [r7, #32]
 800435a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800435c:	f7fc fc08 	bl	8000b70 <__aeabi_fsub>
 8004360:	4603      	mov	r3, r0
 8004362:	4618      	mov	r0, r3
 8004364:	f7fd ffcc 	bl	8002300 <qFFMath_Abs>
 8004368:	4603      	mov	r3, r0
 800436a:	4619      	mov	r1, r3
 800436c:	4620      	mov	r0, r4
 800436e:	f7fc fea7 	bl	80010c0 <__aeabi_fcmplt>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d001      	beq.n	800437c <qFIS_TZMF+0x100>
 8004378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800437a:	e000      	b.n	800437e <qFIS_TZMF+0x102>
 800437c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800437e:	4618      	mov	r0, r3
 8004380:	3744      	adds	r7, #68	; 0x44
 8004382:	46bd      	mov	sp, r7
 8004384:	bd90      	pop	{r4, r7, pc}

08004386 <qFIS_PiMF>:
/*============================================================================*/
static float qFIS_PiMF( const qFIS_IO_Base_t * const in,
                        const float *p,
                        const size_t n )
{
 8004386:	b590      	push	{r4, r7, lr}
 8004388:	b085      	sub	sp, #20
 800438a:	af00      	add	r7, sp, #0
 800438c:	60f8      	str	r0, [r7, #12]
 800438e:	60b9      	str	r1, [r7, #8]
 8004390:	607a      	str	r2, [r7, #4]
    return QLIB_ABS( qFIS_SMF( in , p, n )*qFIS_ZMF( in , &p[ 2 ], n ) );
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	68b9      	ldr	r1, [r7, #8]
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f7ff fcef 	bl	8003d7a <qFIS_SMF>
 800439c:	4604      	mov	r4, r0
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	3308      	adds	r3, #8
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	4619      	mov	r1, r3
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f7ff fe0e 	bl	8003fc8 <qFIS_ZMF>
 80043ac:	4603      	mov	r3, r0
 80043ae:	4619      	mov	r1, r3
 80043b0:	4620      	mov	r0, r4
 80043b2:	f7fc fce7 	bl	8000d84 <__aeabi_fmul>
 80043b6:	4603      	mov	r3, r0
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7fd ffa1 	bl	8002300 <qFFMath_Abs>
 80043be:	4603      	mov	r3, r0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3714      	adds	r7, #20
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd90      	pop	{r4, r7, pc}

080043c8 <qFIS_SingletonMF>:
/*============================================================================*/
static float qFIS_SingletonMF( const qFIS_IO_Base_t * const in,
                               const float *p,
                               const size_t n )
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	617b      	str	r3, [r7, #20]
    (void)n;

    return ( qFMathEx_Equal( x, p[ 0 ] ) ) ? 1.0f : 0.0f;
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4619      	mov	r1, r3
 80043e0:	6978      	ldr	r0, [r7, #20]
 80043e2:	f000 fafc 	bl	80049de <qFMathEx_Equal>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d002      	beq.n	80043f2 <qFIS_SingletonMF+0x2a>
 80043ec:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80043f0:	e001      	b.n	80043f6 <qFIS_SingletonMF+0x2e>
 80043f2:	f04f 0300 	mov.w	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3718      	adds	r7, #24
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <qFIS_ConcaveMF>:
/*============================================================================*/
static float qFIS_ConcaveMF( const qFIS_IO_Base_t * const in,
                             const float *p,
                             const size_t n )
{
 80043fe:	b590      	push	{r4, r7, lr}
 8004400:	b089      	sub	sp, #36	; 0x24
 8004402:	af00      	add	r7, sp, #0
 8004404:	60f8      	str	r0, [r7, #12]
 8004406:	60b9      	str	r1, [r7, #8]
 8004408:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	61bb      	str	r3, [r7, #24]
    float i, e, y;
    (void)n;

    i = p[ 0 ];
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	617b      	str	r3, [r7, #20]
    e = p[ 1 ];
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	3304      	adds	r3, #4
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	613b      	str	r3, [r7, #16]
    if ( ( i <= e ) && ( x < e ) ) {
 800441e:	6939      	ldr	r1, [r7, #16]
 8004420:	6978      	ldr	r0, [r7, #20]
 8004422:	f7fc fe57 	bl	80010d4 <__aeabi_fcmple>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d023      	beq.n	8004474 <qFIS_ConcaveMF+0x76>
 800442c:	6939      	ldr	r1, [r7, #16]
 800442e:	69b8      	ldr	r0, [r7, #24]
 8004430:	f7fc fe46 	bl	80010c0 <__aeabi_fcmplt>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d01c      	beq.n	8004474 <qFIS_ConcaveMF+0x76>
        y = ( e - i )/( ( 2.0f*e ) - i -x );
 800443a:	6979      	ldr	r1, [r7, #20]
 800443c:	6938      	ldr	r0, [r7, #16]
 800443e:	f7fc fb97 	bl	8000b70 <__aeabi_fsub>
 8004442:	4603      	mov	r3, r0
 8004444:	461c      	mov	r4, r3
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	4619      	mov	r1, r3
 800444a:	4618      	mov	r0, r3
 800444c:	f7fc fb92 	bl	8000b74 <__addsf3>
 8004450:	4603      	mov	r3, r0
 8004452:	6979      	ldr	r1, [r7, #20]
 8004454:	4618      	mov	r0, r3
 8004456:	f7fc fb8b 	bl	8000b70 <__aeabi_fsub>
 800445a:	4603      	mov	r3, r0
 800445c:	69b9      	ldr	r1, [r7, #24]
 800445e:	4618      	mov	r0, r3
 8004460:	f7fc fb86 	bl	8000b70 <__aeabi_fsub>
 8004464:	4603      	mov	r3, r0
 8004466:	4619      	mov	r1, r3
 8004468:	4620      	mov	r0, r4
 800446a:	f7fc fd3f 	bl	8000eec <__aeabi_fdiv>
 800446e:	4603      	mov	r3, r0
 8004470:	61fb      	str	r3, [r7, #28]
 8004472:	e02d      	b.n	80044d0 <qFIS_ConcaveMF+0xd2>
    }
    else if ( ( i > e ) && ( x > e ) ) {
 8004474:	6939      	ldr	r1, [r7, #16]
 8004476:	6978      	ldr	r0, [r7, #20]
 8004478:	f7fc fe40 	bl	80010fc <__aeabi_fcmpgt>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d023      	beq.n	80044ca <qFIS_ConcaveMF+0xcc>
 8004482:	6939      	ldr	r1, [r7, #16]
 8004484:	69b8      	ldr	r0, [r7, #24]
 8004486:	f7fc fe39 	bl	80010fc <__aeabi_fcmpgt>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d01c      	beq.n	80044ca <qFIS_ConcaveMF+0xcc>
        y = ( i - e )/( -( 2.0f*e ) + i +x );
 8004490:	6939      	ldr	r1, [r7, #16]
 8004492:	6978      	ldr	r0, [r7, #20]
 8004494:	f7fc fb6c 	bl	8000b70 <__aeabi_fsub>
 8004498:	4603      	mov	r3, r0
 800449a:	461c      	mov	r4, r3
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	4619      	mov	r1, r3
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7fc fb67 	bl	8000b74 <__addsf3>
 80044a6:	4603      	mov	r3, r0
 80044a8:	4619      	mov	r1, r3
 80044aa:	6978      	ldr	r0, [r7, #20]
 80044ac:	f7fc fb60 	bl	8000b70 <__aeabi_fsub>
 80044b0:	4603      	mov	r3, r0
 80044b2:	69b9      	ldr	r1, [r7, #24]
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7fc fb5d 	bl	8000b74 <__addsf3>
 80044ba:	4603      	mov	r3, r0
 80044bc:	4619      	mov	r1, r3
 80044be:	4620      	mov	r0, r4
 80044c0:	f7fc fd14 	bl	8000eec <__aeabi_fdiv>
 80044c4:	4603      	mov	r3, r0
 80044c6:	61fb      	str	r3, [r7, #28]
 80044c8:	e002      	b.n	80044d0 <qFIS_ConcaveMF+0xd2>
    }
    else {
        y = 1.0f;
 80044ca:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80044ce:	61fb      	str	r3, [r7, #28]
    }

    return y;
 80044d0:	69fb      	ldr	r3, [r7, #28]
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3724      	adds	r7, #36	; 0x24
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd90      	pop	{r4, r7, pc}

080044da <qFIS_TConcaveMF>:
/*============================================================================*/
static float qFIS_TConcaveMF( const qFIS_IO_Base_t * const in,
                              const float *p,
                              const size_t n )
{
 80044da:	b590      	push	{r4, r7, lr}
 80044dc:	b087      	sub	sp, #28
 80044de:	af00      	add	r7, sp, #0
 80044e0:	60f8      	str	r0, [r7, #12]
 80044e2:	60b9      	str	r1, [r7, #8]
 80044e4:	607a      	str	r2, [r7, #4]
    float i, e;

    i = p[ 0 ];
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	617b      	str	r3, [r7, #20]
    e = p[ 1 ];
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	3304      	adds	r3, #4
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	613b      	str	r3, [r7, #16]

    return ( ( i - e )/qFIS_ConcaveMF( in, p, n ) ) + ( 2.0f*e ) - i;
 80044f4:	6939      	ldr	r1, [r7, #16]
 80044f6:	6978      	ldr	r0, [r7, #20]
 80044f8:	f7fc fb3a 	bl	8000b70 <__aeabi_fsub>
 80044fc:	4603      	mov	r3, r0
 80044fe:	461c      	mov	r4, r3
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	68b9      	ldr	r1, [r7, #8]
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	f7ff ff7a 	bl	80043fe <qFIS_ConcaveMF>
 800450a:	4603      	mov	r3, r0
 800450c:	4619      	mov	r1, r3
 800450e:	4620      	mov	r0, r4
 8004510:	f7fc fcec 	bl	8000eec <__aeabi_fdiv>
 8004514:	4603      	mov	r3, r0
 8004516:	461c      	mov	r4, r3
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	4619      	mov	r1, r3
 800451c:	4618      	mov	r0, r3
 800451e:	f7fc fb29 	bl	8000b74 <__addsf3>
 8004522:	4603      	mov	r3, r0
 8004524:	4619      	mov	r1, r3
 8004526:	4620      	mov	r0, r4
 8004528:	f7fc fb24 	bl	8000b74 <__addsf3>
 800452c:	4603      	mov	r3, r0
 800452e:	6979      	ldr	r1, [r7, #20]
 8004530:	4618      	mov	r0, r3
 8004532:	f7fc fb1d 	bl	8000b70 <__aeabi_fsub>
 8004536:	4603      	mov	r3, r0
}
 8004538:	4618      	mov	r0, r3
 800453a:	371c      	adds	r7, #28
 800453c:	46bd      	mov	sp, r7
 800453e:	bd90      	pop	{r4, r7, pc}

08004540 <qFIS_SpikeMF>:
/*============================================================================*/
static float qFIS_SpikeMF( const qFIS_IO_Base_t * const in,
                           const float *p,
                           const size_t n )
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b088      	sub	sp, #32
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	61fb      	str	r3, [r7, #28]
    float w, c;
    (void)n;

    w = p[ 0 ];
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	61bb      	str	r3, [r7, #24]
    c = p[ 1 ];
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	3304      	adds	r3, #4
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	617b      	str	r3, [r7, #20]

    return QLIB_EXP( -QLIB_ABS( 10.0f*( x - c )/w ) );
 8004560:	6979      	ldr	r1, [r7, #20]
 8004562:	69f8      	ldr	r0, [r7, #28]
 8004564:	f7fc fb04 	bl	8000b70 <__aeabi_fsub>
 8004568:	4603      	mov	r3, r0
 800456a:	490c      	ldr	r1, [pc, #48]	; (800459c <qFIS_SpikeMF+0x5c>)
 800456c:	4618      	mov	r0, r3
 800456e:	f7fc fc09 	bl	8000d84 <__aeabi_fmul>
 8004572:	4603      	mov	r3, r0
 8004574:	69b9      	ldr	r1, [r7, #24]
 8004576:	4618      	mov	r0, r3
 8004578:	f7fc fcb8 	bl	8000eec <__aeabi_fdiv>
 800457c:	4603      	mov	r3, r0
 800457e:	4618      	mov	r0, r3
 8004580:	f7fd febe 	bl	8002300 <qFFMath_Abs>
 8004584:	4603      	mov	r3, r0
 8004586:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800458a:	4618      	mov	r0, r3
 800458c:	f7fe f842 	bl	8002614 <qFFMath_Exp>
 8004590:	4603      	mov	r3, r0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3720      	adds	r7, #32
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	41200000 	.word	0x41200000

080045a0 <qFIS_TLinSMF>:
/*============================================================================*/
static float qFIS_TLinSMF( const qFIS_IO_Base_t * const in,
                           const float *p,
                           const size_t n )
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b088      	sub	sp, #32
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	61fb      	str	r3, [r7, #28]
    float a, b;
    (void)n;

    a = p[ 0 ];
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	61bb      	str	r3, [r7, #24]
    b = p[ 1 ];
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	3304      	adds	r3, #4
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	617b      	str	r3, [r7, #20]

    return ( ( b - a )*x ) + a;
 80045c0:	69b9      	ldr	r1, [r7, #24]
 80045c2:	6978      	ldr	r0, [r7, #20]
 80045c4:	f7fc fad4 	bl	8000b70 <__aeabi_fsub>
 80045c8:	4603      	mov	r3, r0
 80045ca:	69f9      	ldr	r1, [r7, #28]
 80045cc:	4618      	mov	r0, r3
 80045ce:	f7fc fbd9 	bl	8000d84 <__aeabi_fmul>
 80045d2:	4603      	mov	r3, r0
 80045d4:	69b9      	ldr	r1, [r7, #24]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7fc facc 	bl	8000b74 <__addsf3>
 80045dc:	4603      	mov	r3, r0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3720      	adds	r7, #32
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <qFIS_TLinZMF>:
/*============================================================================*/
static float qFIS_TLinZMF( const qFIS_IO_Base_t * const in,
                           const float *p,
                           const size_t n )
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b088      	sub	sp, #32
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	60f8      	str	r0, [r7, #12]
 80045ee:	60b9      	str	r1, [r7, #8]
 80045f0:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	61fb      	str	r3, [r7, #28]
    float a, b;
    (void)n;

    a = p[ 0 ];
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	61bb      	str	r3, [r7, #24]
    b = p[ 1 ];
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	3304      	adds	r3, #4
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	617b      	str	r3, [r7, #20]

    return + a - ( ( a - b )*x );
 8004606:	6979      	ldr	r1, [r7, #20]
 8004608:	69b8      	ldr	r0, [r7, #24]
 800460a:	f7fc fab1 	bl	8000b70 <__aeabi_fsub>
 800460e:	4603      	mov	r3, r0
 8004610:	69f9      	ldr	r1, [r7, #28]
 8004612:	4618      	mov	r0, r3
 8004614:	f7fc fbb6 	bl	8000d84 <__aeabi_fmul>
 8004618:	4603      	mov	r3, r0
 800461a:	4619      	mov	r1, r3
 800461c:	69b8      	ldr	r0, [r7, #24]
 800461e:	f7fc faa7 	bl	8000b70 <__aeabi_fsub>
 8004622:	4603      	mov	r3, r0
}
 8004624:	4618      	mov	r0, r3
 8004626:	3720      	adds	r7, #32
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <qFIS_RectangleMF>:
/*============================================================================*/
static float qFIS_RectangleMF( const qFIS_IO_Base_t * const in,
                               const float *p,
                               const size_t n )
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b088      	sub	sp, #32
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	61fb      	str	r3, [r7, #28]
    float s, e;
    (void)n;

    s = p[ 0 ];
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	61bb      	str	r3, [r7, #24]
    e = p[ 1 ];
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	3304      	adds	r3, #4
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	617b      	str	r3, [r7, #20]

    return ( ( x >= s ) && ( x <= e ) ) ? 1.0f : 0.0f;
 800464c:	69b9      	ldr	r1, [r7, #24]
 800464e:	69f8      	ldr	r0, [r7, #28]
 8004650:	f7fc fd4a 	bl	80010e8 <__aeabi_fcmpge>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d009      	beq.n	800466e <qFIS_RectangleMF+0x42>
 800465a:	6979      	ldr	r1, [r7, #20]
 800465c:	69f8      	ldr	r0, [r7, #28]
 800465e:	f7fc fd39 	bl	80010d4 <__aeabi_fcmple>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d002      	beq.n	800466e <qFIS_RectangleMF+0x42>
 8004668:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800466c:	e001      	b.n	8004672 <qFIS_RectangleMF+0x46>
 800466e:	f04f 0300 	mov.w	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3720      	adds	r7, #32
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
	...

0800467c <qFIS_CosineMF>:
/*============================================================================*/
static float qFIS_CosineMF( const qFIS_IO_Base_t * const in,
                            const float *p,
                            const size_t n )
{
 800467c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004680:	b08a      	sub	sp, #40	; 0x28
 8004682:	af00      	add	r7, sp, #0
 8004684:	60f8      	str	r0, [r7, #12]
 8004686:	60b9      	str	r1, [r7, #8]
 8004688:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	623b      	str	r3, [r7, #32]
    float c, w, y;
    const float pi = 3.14159265358979323846f;
 8004690:	4b36      	ldr	r3, [pc, #216]	; (800476c <qFIS_CosineMF+0xf0>)
 8004692:	61fb      	str	r3, [r7, #28]
    (void)n;

    c = p[ 0 ];
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	61bb      	str	r3, [r7, #24]
    w = p[ 1 ];
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	3304      	adds	r3, #4
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	617b      	str	r3, [r7, #20]
    if ( ( x < ( c - ( 0.5*w ) ) ) || ( x > ( c + ( 0.5f*w ) ) ) ) {
 80046a2:	6a38      	ldr	r0, [r7, #32]
 80046a4:	f7fb fec0 	bl	8000428 <__aeabi_f2d>
 80046a8:	4604      	mov	r4, r0
 80046aa:	460d      	mov	r5, r1
 80046ac:	69b8      	ldr	r0, [r7, #24]
 80046ae:	f7fb febb 	bl	8000428 <__aeabi_f2d>
 80046b2:	4680      	mov	r8, r0
 80046b4:	4689      	mov	r9, r1
 80046b6:	6978      	ldr	r0, [r7, #20]
 80046b8:	f7fb feb6 	bl	8000428 <__aeabi_f2d>
 80046bc:	f04f 0200 	mov.w	r2, #0
 80046c0:	4b2b      	ldr	r3, [pc, #172]	; (8004770 <qFIS_CosineMF+0xf4>)
 80046c2:	f7fb ff09 	bl	80004d8 <__aeabi_dmul>
 80046c6:	4602      	mov	r2, r0
 80046c8:	460b      	mov	r3, r1
 80046ca:	4640      	mov	r0, r8
 80046cc:	4649      	mov	r1, r9
 80046ce:	f7fb fd4b 	bl	8000168 <__aeabi_dsub>
 80046d2:	4602      	mov	r2, r0
 80046d4:	460b      	mov	r3, r1
 80046d6:	4620      	mov	r0, r4
 80046d8:	4629      	mov	r1, r5
 80046da:	f7fc f96f 	bl	80009bc <__aeabi_dcmplt>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d111      	bne.n	8004708 <qFIS_CosineMF+0x8c>
 80046e4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80046e8:	6978      	ldr	r0, [r7, #20]
 80046ea:	f7fc fb4b 	bl	8000d84 <__aeabi_fmul>
 80046ee:	4603      	mov	r3, r0
 80046f0:	69b9      	ldr	r1, [r7, #24]
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7fc fa3e 	bl	8000b74 <__addsf3>
 80046f8:	4603      	mov	r3, r0
 80046fa:	4619      	mov	r1, r3
 80046fc:	6a38      	ldr	r0, [r7, #32]
 80046fe:	f7fc fcfd 	bl	80010fc <__aeabi_fcmpgt>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d003      	beq.n	8004710 <qFIS_CosineMF+0x94>
        y = 0.0f;
 8004708:	f04f 0300 	mov.w	r3, #0
 800470c:	627b      	str	r3, [r7, #36]	; 0x24
 800470e:	e026      	b.n	800475e <qFIS_CosineMF+0xe2>
    }
    else {
        y = 0.5f*( 1.0f + QLIB_COS( 2.0f/w*pi*( x - c) ) );
 8004710:	6979      	ldr	r1, [r7, #20]
 8004712:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004716:	f7fc fbe9 	bl	8000eec <__aeabi_fdiv>
 800471a:	4603      	mov	r3, r0
 800471c:	69f9      	ldr	r1, [r7, #28]
 800471e:	4618      	mov	r0, r3
 8004720:	f7fc fb30 	bl	8000d84 <__aeabi_fmul>
 8004724:	4603      	mov	r3, r0
 8004726:	461c      	mov	r4, r3
 8004728:	69b9      	ldr	r1, [r7, #24]
 800472a:	6a38      	ldr	r0, [r7, #32]
 800472c:	f7fc fa20 	bl	8000b70 <__aeabi_fsub>
 8004730:	4603      	mov	r3, r0
 8004732:	4619      	mov	r1, r3
 8004734:	4620      	mov	r0, r4
 8004736:	f7fc fb25 	bl	8000d84 <__aeabi_fmul>
 800473a:	4603      	mov	r3, r0
 800473c:	4618      	mov	r0, r3
 800473e:	f7fd fe85 	bl	800244c <qFFMath_Cos>
 8004742:	4603      	mov	r3, r0
 8004744:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004748:	4618      	mov	r0, r3
 800474a:	f7fc fa13 	bl	8000b74 <__addsf3>
 800474e:	4603      	mov	r3, r0
 8004750:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004754:	4618      	mov	r0, r3
 8004756:	f7fc fb15 	bl	8000d84 <__aeabi_fmul>
 800475a:	4603      	mov	r3, r0
 800475c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return y;
 800475e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004760:	4618      	mov	r0, r3
 8004762:	3728      	adds	r7, #40	; 0x28
 8004764:	46bd      	mov	sp, r7
 8004766:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800476a:	bf00      	nop
 800476c:	40490fdb 	.word	0x40490fdb
 8004770:	3fe00000 	.word	0x3fe00000

08004774 <qFIS_ConstantMF>:
/*============================================================================*/
static float qFIS_ConstantMF( const qFIS_IO_Base_t * const in,
                              const float *p,
                              const size_t n )
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]
    (void)in;
    (void)n;
    return p[ 0 ];
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	681b      	ldr	r3, [r3, #0]
}
 8004784:	4618      	mov	r0, r3
 8004786:	3714      	adds	r7, #20
 8004788:	46bd      	mov	sp, r7
 800478a:	bc80      	pop	{r7}
 800478c:	4770      	bx	lr

0800478e <qFIS_LinearMF>:
/*============================================================================*/
static float qFIS_LinearMF( const qFIS_IO_Base_t * const in,
                            const float *p,
                            const size_t n )
{
 800478e:	b580      	push	{r7, lr}
 8004790:	b086      	sub	sp, #24
 8004792:	af00      	add	r7, sp, #0
 8004794:	60f8      	str	r0, [r7, #12]
 8004796:	60b9      	str	r1, [r7, #8]
 8004798:	607a      	str	r2, [r7, #4]
    float px = 0.0f;
 800479a:	f04f 0300 	mov.w	r3, #0
 800479e:	617b      	str	r3, [r7, #20]
    size_t i;

    for ( i = 0u ; i < n ; ++i ) {
 80047a0:	2300      	movs	r3, #0
 80047a2:	613b      	str	r3, [r7, #16]
 80047a4:	e01a      	b.n	80047dc <qFIS_LinearMF+0x4e>
        px += in[ i ].value*p[ i ];
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	4613      	mov	r3, r2
 80047aa:	005b      	lsls	r3, r3, #1
 80047ac:	4413      	add	r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	461a      	mov	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	4413      	add	r3, r2
 80047b6:	6898      	ldr	r0, [r3, #8]
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	4413      	add	r3, r2
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4619      	mov	r1, r3
 80047c4:	f7fc fade 	bl	8000d84 <__aeabi_fmul>
 80047c8:	4603      	mov	r3, r0
 80047ca:	4619      	mov	r1, r3
 80047cc:	6978      	ldr	r0, [r7, #20]
 80047ce:	f7fc f9d1 	bl	8000b74 <__addsf3>
 80047d2:	4603      	mov	r3, r0
 80047d4:	617b      	str	r3, [r7, #20]
    for ( i = 0u ; i < n ; ++i ) {
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	3301      	adds	r3, #1
 80047da:	613b      	str	r3, [r7, #16]
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d3e0      	bcc.n	80047a6 <qFIS_LinearMF+0x18>
    }
    px += p[ i ];
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	68ba      	ldr	r2, [r7, #8]
 80047ea:	4413      	add	r3, r2
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4619      	mov	r1, r3
 80047f0:	6978      	ldr	r0, [r7, #20]
 80047f2:	f7fc f9bf 	bl	8000b74 <__addsf3>
 80047f6:	4603      	mov	r3, r0
 80047f8:	617b      	str	r3, [r7, #20]

    return px;
 80047fa:	697b      	ldr	r3, [r7, #20]
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3718      	adds	r7, #24
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <qFIS_Min>:
/*============================================================================*/
static float qFIS_Min( const float a,
                       const float b )
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
    return qFIS_Bound( ( a < b ) ? a : b, 0.0f, 1.0f );
 800480e:	6839      	ldr	r1, [r7, #0]
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f7fc fc55 	bl	80010c0 <__aeabi_fcmplt>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d001      	beq.n	8004820 <qFIS_Min+0x1c>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	e000      	b.n	8004822 <qFIS_Min+0x1e>
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004826:	f04f 0100 	mov.w	r1, #0
 800482a:	4618      	mov	r0, r3
 800482c:	f000 f86d 	bl	800490a <qFIS_Bound>
 8004830:	4603      	mov	r3, r0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3708      	adds	r7, #8
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <qFIS_Max>:
/*============================================================================*/
static float qFIS_Max( const float a,
                       const float b )
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b082      	sub	sp, #8
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
 8004842:	6039      	str	r1, [r7, #0]
    return qFIS_Bound( ( a > b ) ? a : b, 0.0f, 1.0f );
 8004844:	6839      	ldr	r1, [r7, #0]
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f7fc fc58 	bl	80010fc <__aeabi_fcmpgt>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <qFIS_Max+0x1c>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	e000      	b.n	8004858 <qFIS_Max+0x1e>
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800485c:	f04f 0100 	mov.w	r1, #0
 8004860:	4618      	mov	r0, r3
 8004862:	f000 f852 	bl	800490a <qFIS_Bound>
 8004866:	4603      	mov	r3, r0
}
 8004868:	4618      	mov	r0, r3
 800486a:	3708      	adds	r7, #8
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <qFIS_Prod>:
/*============================================================================*/
static float qFIS_Prod( const float a,
                        const float b )
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
    return qFIS_Bound( a*b, 0.0f, 1.0f );
 800487a:	6839      	ldr	r1, [r7, #0]
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f7fc fa81 	bl	8000d84 <__aeabi_fmul>
 8004882:	4603      	mov	r3, r0
 8004884:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004888:	f04f 0100 	mov.w	r1, #0
 800488c:	4618      	mov	r0, r3
 800488e:	f000 f83c 	bl	800490a <qFIS_Bound>
 8004892:	4603      	mov	r3, r0
}
 8004894:	4618      	mov	r0, r3
 8004896:	3708      	adds	r7, #8
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <qFIS_ProbOR>:
/*============================================================================*/
static float qFIS_ProbOR( const float a,
                          const float b )
{
 800489c:	b590      	push	{r4, r7, lr}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
    return qFIS_Bound( a + b - ( a*b ), 0.0f, 1.0f );
 80048a6:	6839      	ldr	r1, [r7, #0]
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f7fc f963 	bl	8000b74 <__addsf3>
 80048ae:	4603      	mov	r3, r0
 80048b0:	461c      	mov	r4, r3
 80048b2:	6839      	ldr	r1, [r7, #0]
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f7fc fa65 	bl	8000d84 <__aeabi_fmul>
 80048ba:	4603      	mov	r3, r0
 80048bc:	4619      	mov	r1, r3
 80048be:	4620      	mov	r0, r4
 80048c0:	f7fc f956 	bl	8000b70 <__aeabi_fsub>
 80048c4:	4603      	mov	r3, r0
 80048c6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80048ca:	f04f 0100 	mov.w	r1, #0
 80048ce:	4618      	mov	r0, r3
 80048d0:	f000 f81b 	bl	800490a <qFIS_Bound>
 80048d4:	4603      	mov	r3, r0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd90      	pop	{r4, r7, pc}

080048de <qFIS_Sum>:
/*============================================================================*/
static float qFIS_Sum( const float a,
                       const float b )
{
 80048de:	b580      	push	{r7, lr}
 80048e0:	b082      	sub	sp, #8
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
 80048e6:	6039      	str	r1, [r7, #0]
    return qFIS_Bound( a + b, 0.0f, 1.0f );
 80048e8:	6839      	ldr	r1, [r7, #0]
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f7fc f942 	bl	8000b74 <__addsf3>
 80048f0:	4603      	mov	r3, r0
 80048f2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80048f6:	f04f 0100 	mov.w	r1, #0
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 f805 	bl	800490a <qFIS_Bound>
 8004900:	4603      	mov	r3, r0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3708      	adds	r7, #8
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <qFIS_Bound>:
/*============================================================================*/
static float qFIS_Bound( float y,
                         const float yMin,
                         const float yMax )
{
 800490a:	b580      	push	{r7, lr}
 800490c:	b084      	sub	sp, #16
 800490e:	af00      	add	r7, sp, #0
 8004910:	60f8      	str	r0, [r7, #12]
 8004912:	60b9      	str	r1, [r7, #8]
 8004914:	607a      	str	r2, [r7, #4]
    (void)qFMathEx_InRangeCoerce( &y, yMin, yMax );
 8004916:	f107 030c 	add.w	r3, r7, #12
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	68b9      	ldr	r1, [r7, #8]
 800491e:	4618      	mov	r0, r3
 8004920:	f000 f805 	bl	800492e <qFMathEx_InRangeCoerce>

    return y;
 8004924:	68fb      	ldr	r3, [r7, #12]
}
 8004926:	4618      	mov	r0, r3
 8004928:	3710      	adds	r7, #16
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <qFMathEx_InRangeCoerce>:
}
/*============================================================================*/
bool qFMathEx_InRangeCoerce( float * const x,
                             const float lowerL,
                             const float upperL )
{
 800492e:	b580      	push	{r7, lr}
 8004930:	b086      	sub	sp, #24
 8004932:	af00      	add	r7, sp, #0
 8004934:	60f8      	str	r0, [r7, #12]
 8004936:	60b9      	str	r1, [r7, #8]
 8004938:	607a      	str	r2, [r7, #4]
    bool retVal = false;
 800493a:	2300      	movs	r3, #0
 800493c:	75fb      	strb	r3, [r7, #23]

    if ( 1 == (int)QLIB_ISNAN( x[ 0 ] ) ) {
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4618      	mov	r0, r3
 8004944:	f7fd fccb 	bl	80022de <qFFMath_IsNaN>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d003      	beq.n	8004956 <qFMathEx_InRangeCoerce+0x28>
        x[ 0 ] = lowerL;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	68ba      	ldr	r2, [r7, #8]
 8004952:	601a      	str	r2, [r3, #0]
 8004954:	e01b      	b.n	800498e <qFMathEx_InRangeCoerce+0x60>
    }
    else {
        if ( x[ 0 ] < lowerL ) {
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4619      	mov	r1, r3
 800495c:	68b8      	ldr	r0, [r7, #8]
 800495e:	f7fc fbcd 	bl	80010fc <__aeabi_fcmpgt>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d003      	beq.n	8004970 <qFMathEx_InRangeCoerce+0x42>
            x[ 0 ] = lowerL;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	68ba      	ldr	r2, [r7, #8]
 800496c:	601a      	str	r2, [r3, #0]
 800496e:	e00e      	b.n	800498e <qFMathEx_InRangeCoerce+0x60>
        }
        else if ( x[ 0 ] > upperL ) {
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4619      	mov	r1, r3
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f7fc fba2 	bl	80010c0 <__aeabi_fcmplt>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d003      	beq.n	800498a <qFMathEx_InRangeCoerce+0x5c>
            x[ 0 ] = upperL;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	601a      	str	r2, [r3, #0]
 8004988:	e001      	b.n	800498e <qFMathEx_InRangeCoerce+0x60>
        }
        else {
            retVal = true;
 800498a:	2301      	movs	r3, #1
 800498c:	75fb      	strb	r3, [r7, #23]
        }
    }

    return retVal;
 800498e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004990:	4618      	mov	r0, r3
 8004992:	3718      	adds	r7, #24
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <qFMathEx_AlmostEqual>:
/*============================================================================*/
bool qFMathEx_AlmostEqual( const float a,
                           const float b,
                           const float tol )
{
 8004998:	b5b0      	push	{r4, r5, r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
    return ( QLIB_ABS( a - b ) <= QLIB_ABS( tol ) );
 80049a4:	68b9      	ldr	r1, [r7, #8]
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f7fc f8e2 	bl	8000b70 <__aeabi_fsub>
 80049ac:	4603      	mov	r3, r0
 80049ae:	4618      	mov	r0, r3
 80049b0:	f7fd fca6 	bl	8002300 <qFFMath_Abs>
 80049b4:	4604      	mov	r4, r0
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f7fd fca2 	bl	8002300 <qFFMath_Abs>
 80049bc:	4603      	mov	r3, r0
 80049be:	2201      	movs	r2, #1
 80049c0:	4615      	mov	r5, r2
 80049c2:	4619      	mov	r1, r3
 80049c4:	4620      	mov	r0, r4
 80049c6:	f7fc fb85 	bl	80010d4 <__aeabi_fcmple>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d101      	bne.n	80049d4 <qFMathEx_AlmostEqual+0x3c>
 80049d0:	2300      	movs	r3, #0
 80049d2:	461d      	mov	r5, r3
 80049d4:	b2eb      	uxtb	r3, r5
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bdb0      	pop	{r4, r5, r7, pc}

080049de <qFMathEx_Equal>:
/*============================================================================*/
bool qFMathEx_Equal( const float a,
                     const float b )
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b082      	sub	sp, #8
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
 80049e6:	6039      	str	r1, [r7, #0]
    return qFMathEx_AlmostEqual( a, b, FLT_MIN );
 80049e8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80049ec:	6839      	ldr	r1, [r7, #0]
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f7ff ffd2 	bl	8004998 <qFMathEx_AlmostEqual>
 80049f4:	4603      	mov	r3, r0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3708      	adds	r7, #8
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
	...

08004a00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004a06:	4b15      	ldr	r3, [pc, #84]	; (8004a5c <HAL_MspInit+0x5c>)
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	4a14      	ldr	r2, [pc, #80]	; (8004a5c <HAL_MspInit+0x5c>)
 8004a0c:	f043 0301 	orr.w	r3, r3, #1
 8004a10:	6193      	str	r3, [r2, #24]
 8004a12:	4b12      	ldr	r3, [pc, #72]	; (8004a5c <HAL_MspInit+0x5c>)
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	60bb      	str	r3, [r7, #8]
 8004a1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a1e:	4b0f      	ldr	r3, [pc, #60]	; (8004a5c <HAL_MspInit+0x5c>)
 8004a20:	69db      	ldr	r3, [r3, #28]
 8004a22:	4a0e      	ldr	r2, [pc, #56]	; (8004a5c <HAL_MspInit+0x5c>)
 8004a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a28:	61d3      	str	r3, [r2, #28]
 8004a2a:	4b0c      	ldr	r3, [pc, #48]	; (8004a5c <HAL_MspInit+0x5c>)
 8004a2c:	69db      	ldr	r3, [r3, #28]
 8004a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a32:	607b      	str	r3, [r7, #4]
 8004a34:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004a36:	4b0a      	ldr	r3, [pc, #40]	; (8004a60 <HAL_MspInit+0x60>)
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	60fb      	str	r3, [r7, #12]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004a42:	60fb      	str	r3, [r7, #12]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004a4a:	60fb      	str	r3, [r7, #12]
 8004a4c:	4a04      	ldr	r2, [pc, #16]	; (8004a60 <HAL_MspInit+0x60>)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a52:	bf00      	nop
 8004a54:	3714      	adds	r7, #20
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bc80      	pop	{r7}
 8004a5a:	4770      	bx	lr
 8004a5c:	40021000 	.word	0x40021000
 8004a60:	40010000 	.word	0x40010000

08004a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a64:	b480      	push	{r7}
 8004a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004a68:	e7fe      	b.n	8004a68 <NMI_Handler+0x4>

08004a6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a6e:	e7fe      	b.n	8004a6e <HardFault_Handler+0x4>

08004a70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a70:	b480      	push	{r7}
 8004a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a74:	e7fe      	b.n	8004a74 <MemManage_Handler+0x4>

08004a76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a76:	b480      	push	{r7}
 8004a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a7a:	e7fe      	b.n	8004a7a <BusFault_Handler+0x4>

08004a7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a80:	e7fe      	b.n	8004a80 <UsageFault_Handler+0x4>

08004a82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a82:	b480      	push	{r7}
 8004a84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a86:	bf00      	nop
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bc80      	pop	{r7}
 8004a8c:	4770      	bx	lr

08004a8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a92:	bf00      	nop
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bc80      	pop	{r7}
 8004a98:	4770      	bx	lr

08004a9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a9e:	bf00      	nop
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bc80      	pop	{r7}
 8004aa4:	4770      	bx	lr

08004aa6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004aaa:	f000 fc47 	bl	800533c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004aae:	bf00      	nop
 8004ab0:	bd80      	pop	{r7, pc}
	...

08004ab4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004ab8:	4802      	ldr	r0, [pc, #8]	; (8004ac4 <TIM2_IRQHandler+0x10>)
 8004aba:	f002 fe5f 	bl	800777c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004abe:	bf00      	nop
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	20000634 	.word	0x20000634

08004ac8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004acc:	4802      	ldr	r0, [pc, #8]	; (8004ad8 <USART2_IRQHandler+0x10>)
 8004ace:	f003 fc6f 	bl	80083b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004ad2:	bf00      	nop
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	2000070c 	.word	0x2000070c

08004adc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004adc:	b480      	push	{r7}
 8004ade:	af00      	add	r7, sp, #0
  return 1;
 8004ae0:	2301      	movs	r3, #1
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bc80      	pop	{r7}
 8004ae8:	4770      	bx	lr

08004aea <_kill>:

int _kill(int pid, int sig)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b082      	sub	sp, #8
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
 8004af2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004af4:	f005 f922 	bl	8009d3c <__errno>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2216      	movs	r2, #22
 8004afc:	601a      	str	r2, [r3, #0]
  return -1;
 8004afe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3708      	adds	r7, #8
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}

08004b0a <_exit>:

void _exit (int status)
{
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	b082      	sub	sp, #8
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004b12:	f04f 31ff 	mov.w	r1, #4294967295
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f7ff ffe7 	bl	8004aea <_kill>
  while (1) {}    /* Make sure we hang here */
 8004b1c:	e7fe      	b.n	8004b1c <_exit+0x12>

08004b1e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b086      	sub	sp, #24
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	60f8      	str	r0, [r7, #12]
 8004b26:	60b9      	str	r1, [r7, #8]
 8004b28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	617b      	str	r3, [r7, #20]
 8004b2e:	e00a      	b.n	8004b46 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004b30:	f3af 8000 	nop.w
 8004b34:	4601      	mov	r1, r0
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	1c5a      	adds	r2, r3, #1
 8004b3a:	60ba      	str	r2, [r7, #8]
 8004b3c:	b2ca      	uxtb	r2, r1
 8004b3e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	3301      	adds	r3, #1
 8004b44:	617b      	str	r3, [r7, #20]
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	dbf0      	blt.n	8004b30 <_read+0x12>
  }

  return len;
 8004b4e:	687b      	ldr	r3, [r7, #4]
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3718      	adds	r7, #24
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b086      	sub	sp, #24
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b64:	2300      	movs	r3, #0
 8004b66:	617b      	str	r3, [r7, #20]
 8004b68:	e009      	b.n	8004b7e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	1c5a      	adds	r2, r3, #1
 8004b6e:	60ba      	str	r2, [r7, #8]
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	4618      	mov	r0, r3
 8004b74:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	617b      	str	r3, [r7, #20]
 8004b7e:	697a      	ldr	r2, [r7, #20]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	dbf1      	blt.n	8004b6a <_write+0x12>
  }
  return len;
 8004b86:	687b      	ldr	r3, [r7, #4]
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3718      	adds	r7, #24
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <_close>:

int _close(int file)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004b98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bc80      	pop	{r7}
 8004ba4:	4770      	bx	lr

08004ba6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	b083      	sub	sp, #12
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
 8004bae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004bb6:	605a      	str	r2, [r3, #4]
  return 0;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	370c      	adds	r7, #12
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bc80      	pop	{r7}
 8004bc2:	4770      	bx	lr

08004bc4 <_isatty>:

int _isatty(int file)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004bcc:	2301      	movs	r3, #1
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	370c      	adds	r7, #12
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bc80      	pop	{r7}
 8004bd6:	4770      	bx	lr

08004bd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3714      	adds	r7, #20
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bc80      	pop	{r7}
 8004bee:	4770      	bx	lr

08004bf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b086      	sub	sp, #24
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004bf8:	4a14      	ldr	r2, [pc, #80]	; (8004c4c <_sbrk+0x5c>)
 8004bfa:	4b15      	ldr	r3, [pc, #84]	; (8004c50 <_sbrk+0x60>)
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004c04:	4b13      	ldr	r3, [pc, #76]	; (8004c54 <_sbrk+0x64>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d102      	bne.n	8004c12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004c0c:	4b11      	ldr	r3, [pc, #68]	; (8004c54 <_sbrk+0x64>)
 8004c0e:	4a12      	ldr	r2, [pc, #72]	; (8004c58 <_sbrk+0x68>)
 8004c10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004c12:	4b10      	ldr	r3, [pc, #64]	; (8004c54 <_sbrk+0x64>)
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4413      	add	r3, r2
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d207      	bcs.n	8004c30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004c20:	f005 f88c 	bl	8009d3c <__errno>
 8004c24:	4603      	mov	r3, r0
 8004c26:	220c      	movs	r2, #12
 8004c28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c2e:	e009      	b.n	8004c44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004c30:	4b08      	ldr	r3, [pc, #32]	; (8004c54 <_sbrk+0x64>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004c36:	4b07      	ldr	r3, [pc, #28]	; (8004c54 <_sbrk+0x64>)
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	4a05      	ldr	r2, [pc, #20]	; (8004c54 <_sbrk+0x64>)
 8004c40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004c42:	68fb      	ldr	r3, [r7, #12]
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3718      	adds	r7, #24
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	20005000 	.word	0x20005000
 8004c50:	00000400 	.word	0x00000400
 8004c54:	200005e8 	.word	0x200005e8
 8004c58:	200008a8 	.word	0x200008a8

08004c5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004c60:	bf00      	nop
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bc80      	pop	{r7}
 8004c66:	4770      	bx	lr

08004c68 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b08c      	sub	sp, #48	; 0x30
 8004c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004c6e:	f107 030c 	add.w	r3, r7, #12
 8004c72:	2224      	movs	r2, #36	; 0x24
 8004c74:	2100      	movs	r1, #0
 8004c76:	4618      	mov	r0, r3
 8004c78:	f005 f80d 	bl	8009c96 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c7c:	1d3b      	adds	r3, r7, #4
 8004c7e:	2200      	movs	r2, #0
 8004c80:	601a      	str	r2, [r3, #0]
 8004c82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004c84:	4b22      	ldr	r3, [pc, #136]	; (8004d10 <MX_TIM1_Init+0xa8>)
 8004c86:	4a23      	ldr	r2, [pc, #140]	; (8004d14 <MX_TIM1_Init+0xac>)
 8004c88:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004c8a:	4b21      	ldr	r3, [pc, #132]	; (8004d10 <MX_TIM1_Init+0xa8>)
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c90:	4b1f      	ldr	r3, [pc, #124]	; (8004d10 <MX_TIM1_Init+0xa8>)
 8004c92:	2200      	movs	r2, #0
 8004c94:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004c96:	4b1e      	ldr	r3, [pc, #120]	; (8004d10 <MX_TIM1_Init+0xa8>)
 8004c98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c9c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c9e:	4b1c      	ldr	r3, [pc, #112]	; (8004d10 <MX_TIM1_Init+0xa8>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004ca4:	4b1a      	ldr	r3, [pc, #104]	; (8004d10 <MX_TIM1_Init+0xa8>)
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004caa:	4b19      	ldr	r3, [pc, #100]	; (8004d10 <MX_TIM1_Init+0xa8>)
 8004cac:	2200      	movs	r2, #0
 8004cae:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8004cd4:	f107 030c 	add.w	r3, r7, #12
 8004cd8:	4619      	mov	r1, r3
 8004cda:	480d      	ldr	r0, [pc, #52]	; (8004d10 <MX_TIM1_Init+0xa8>)
 8004cdc:	f002 fcac 	bl	8007638 <HAL_TIM_Encoder_Init>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d001      	beq.n	8004cea <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8004ce6:	f7fc fe5f 	bl	80019a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004cea:	2300      	movs	r3, #0
 8004cec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004cf2:	1d3b      	adds	r3, r7, #4
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	4806      	ldr	r0, [pc, #24]	; (8004d10 <MX_TIM1_Init+0xa8>)
 8004cf8:	f003 fa9a 	bl	8008230 <HAL_TIMEx_MasterConfigSynchronization>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d001      	beq.n	8004d06 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8004d02:	f7fc fe51 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004d06:	bf00      	nop
 8004d08:	3730      	adds	r7, #48	; 0x30
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	200005ec 	.word	0x200005ec
 8004d14:	40012c00 	.word	0x40012c00

08004d18 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b086      	sub	sp, #24
 8004d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004d1e:	f107 0308 	add.w	r3, r7, #8
 8004d22:	2200      	movs	r2, #0
 8004d24:	601a      	str	r2, [r3, #0]
 8004d26:	605a      	str	r2, [r3, #4]
 8004d28:	609a      	str	r2, [r3, #8]
 8004d2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d2c:	463b      	mov	r3, r7
 8004d2e:	2200      	movs	r2, #0
 8004d30:	601a      	str	r2, [r3, #0]
 8004d32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004d34:	4b1d      	ldr	r3, [pc, #116]	; (8004dac <MX_TIM2_Init+0x94>)
 8004d36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004d3a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8004d3c:	4b1b      	ldr	r3, [pc, #108]	; (8004dac <MX_TIM2_Init+0x94>)
 8004d3e:	2263      	movs	r2, #99	; 0x63
 8004d40:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d42:	4b1a      	ldr	r3, [pc, #104]	; (8004dac <MX_TIM2_Init+0x94>)
 8004d44:	2200      	movs	r2, #0
 8004d46:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7199;
 8004d48:	4b18      	ldr	r3, [pc, #96]	; (8004dac <MX_TIM2_Init+0x94>)
 8004d4a:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8004d4e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d50:	4b16      	ldr	r3, [pc, #88]	; (8004dac <MX_TIM2_Init+0x94>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d56:	4b15      	ldr	r3, [pc, #84]	; (8004dac <MX_TIM2_Init+0x94>)
 8004d58:	2200      	movs	r2, #0
 8004d5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004d5c:	4813      	ldr	r0, [pc, #76]	; (8004dac <MX_TIM2_Init+0x94>)
 8004d5e:	f002 facf 	bl	8007300 <HAL_TIM_Base_Init>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d001      	beq.n	8004d6c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8004d68:	f7fc fe1e 	bl	80019a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d70:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004d72:	f107 0308 	add.w	r3, r7, #8
 8004d76:	4619      	mov	r1, r3
 8004d78:	480c      	ldr	r0, [pc, #48]	; (8004dac <MX_TIM2_Init+0x94>)
 8004d7a:	f002 fec9 	bl	8007b10 <HAL_TIM_ConfigClockSource>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d001      	beq.n	8004d88 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8004d84:	f7fc fe10 	bl	80019a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004d90:	463b      	mov	r3, r7
 8004d92:	4619      	mov	r1, r3
 8004d94:	4805      	ldr	r0, [pc, #20]	; (8004dac <MX_TIM2_Init+0x94>)
 8004d96:	f003 fa4b 	bl	8008230 <HAL_TIMEx_MasterConfigSynchronization>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d001      	beq.n	8004da4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8004da0:	f7fc fe02 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004da4:	bf00      	nop
 8004da6:	3718      	adds	r7, #24
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	20000634 	.word	0x20000634

08004db0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b08e      	sub	sp, #56	; 0x38
 8004db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004db6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004dba:	2200      	movs	r2, #0
 8004dbc:	601a      	str	r2, [r3, #0]
 8004dbe:	605a      	str	r2, [r3, #4]
 8004dc0:	609a      	str	r2, [r3, #8]
 8004dc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004dc4:	f107 0320 	add.w	r3, r7, #32
 8004dc8:	2200      	movs	r2, #0
 8004dca:	601a      	str	r2, [r3, #0]
 8004dcc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004dce:	1d3b      	adds	r3, r7, #4
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	601a      	str	r2, [r3, #0]
 8004dd4:	605a      	str	r2, [r3, #4]
 8004dd6:	609a      	str	r2, [r3, #8]
 8004dd8:	60da      	str	r2, [r3, #12]
 8004dda:	611a      	str	r2, [r3, #16]
 8004ddc:	615a      	str	r2, [r3, #20]
 8004dde:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004de0:	4b3d      	ldr	r3, [pc, #244]	; (8004ed8 <MX_TIM3_Init+0x128>)
 8004de2:	4a3e      	ldr	r2, [pc, #248]	; (8004edc <MX_TIM3_Init+0x12c>)
 8004de4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 8004de6:	4b3c      	ldr	r3, [pc, #240]	; (8004ed8 <MX_TIM3_Init+0x128>)
 8004de8:	2209      	movs	r2, #9
 8004dea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004dec:	4b3a      	ldr	r3, [pc, #232]	; (8004ed8 <MX_TIM3_Init+0x128>)
 8004dee:	2200      	movs	r2, #0
 8004df0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3599;
 8004df2:	4b39      	ldr	r3, [pc, #228]	; (8004ed8 <MX_TIM3_Init+0x128>)
 8004df4:	f640 620f 	movw	r2, #3599	; 0xe0f
 8004df8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004dfa:	4b37      	ldr	r3, [pc, #220]	; (8004ed8 <MX_TIM3_Init+0x128>)
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e00:	4b35      	ldr	r3, [pc, #212]	; (8004ed8 <MX_TIM3_Init+0x128>)
 8004e02:	2200      	movs	r2, #0
 8004e04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004e06:	4834      	ldr	r0, [pc, #208]	; (8004ed8 <MX_TIM3_Init+0x128>)
 8004e08:	f002 fa7a 	bl	8007300 <HAL_TIM_Base_Init>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d001      	beq.n	8004e16 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8004e12:	f7fc fdc9 	bl	80019a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004e16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e1a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004e1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e20:	4619      	mov	r1, r3
 8004e22:	482d      	ldr	r0, [pc, #180]	; (8004ed8 <MX_TIM3_Init+0x128>)
 8004e24:	f002 fe74 	bl	8007b10 <HAL_TIM_ConfigClockSource>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d001      	beq.n	8004e32 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8004e2e:	f7fc fdbb 	bl	80019a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004e32:	4829      	ldr	r0, [pc, #164]	; (8004ed8 <MX_TIM3_Init+0x128>)
 8004e34:	f002 fb06 	bl	8007444 <HAL_TIM_PWM_Init>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d001      	beq.n	8004e42 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8004e3e:	f7fc fdb3 	bl	80019a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e42:	2300      	movs	r3, #0
 8004e44:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e46:	2300      	movs	r3, #0
 8004e48:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004e4a:	f107 0320 	add.w	r3, r7, #32
 8004e4e:	4619      	mov	r1, r3
 8004e50:	4821      	ldr	r0, [pc, #132]	; (8004ed8 <MX_TIM3_Init+0x128>)
 8004e52:	f003 f9ed 	bl	8008230 <HAL_TIMEx_MasterConfigSynchronization>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d001      	beq.n	8004e60 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8004e5c:	f7fc fda4 	bl	80019a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004e60:	2360      	movs	r3, #96	; 0x60
 8004e62:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004e64:	2300      	movs	r3, #0
 8004e66:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004e70:	1d3b      	adds	r3, r7, #4
 8004e72:	2200      	movs	r2, #0
 8004e74:	4619      	mov	r1, r3
 8004e76:	4818      	ldr	r0, [pc, #96]	; (8004ed8 <MX_TIM3_Init+0x128>)
 8004e78:	f002 fd88 	bl	800798c <HAL_TIM_PWM_ConfigChannel>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d001      	beq.n	8004e86 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8004e82:	f7fc fd91 	bl	80019a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004e86:	1d3b      	adds	r3, r7, #4
 8004e88:	2204      	movs	r2, #4
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	4812      	ldr	r0, [pc, #72]	; (8004ed8 <MX_TIM3_Init+0x128>)
 8004e8e:	f002 fd7d 	bl	800798c <HAL_TIM_PWM_ConfigChannel>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d001      	beq.n	8004e9c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8004e98:	f7fc fd86 	bl	80019a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004e9c:	1d3b      	adds	r3, r7, #4
 8004e9e:	2208      	movs	r2, #8
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	480d      	ldr	r0, [pc, #52]	; (8004ed8 <MX_TIM3_Init+0x128>)
 8004ea4:	f002 fd72 	bl	800798c <HAL_TIM_PWM_ConfigChannel>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d001      	beq.n	8004eb2 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8004eae:	f7fc fd7b 	bl	80019a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004eb2:	1d3b      	adds	r3, r7, #4
 8004eb4:	220c      	movs	r2, #12
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	4807      	ldr	r0, [pc, #28]	; (8004ed8 <MX_TIM3_Init+0x128>)
 8004eba:	f002 fd67 	bl	800798c <HAL_TIM_PWM_ConfigChannel>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d001      	beq.n	8004ec8 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8004ec4:	f7fc fd70 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004ec8:	4803      	ldr	r0, [pc, #12]	; (8004ed8 <MX_TIM3_Init+0x128>)
 8004eca:	f000 f903 	bl	80050d4 <HAL_TIM_MspPostInit>

}
 8004ece:	bf00      	nop
 8004ed0:	3738      	adds	r7, #56	; 0x38
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	2000067c 	.word	0x2000067c
 8004edc:	40000400 	.word	0x40000400

08004ee0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b08c      	sub	sp, #48	; 0x30
 8004ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004ee6:	f107 030c 	add.w	r3, r7, #12
 8004eea:	2224      	movs	r2, #36	; 0x24
 8004eec:	2100      	movs	r1, #0
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f004 fed1 	bl	8009c96 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ef4:	1d3b      	adds	r3, r7, #4
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	601a      	str	r2, [r3, #0]
 8004efa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004efc:	4b20      	ldr	r3, [pc, #128]	; (8004f80 <MX_TIM4_Init+0xa0>)
 8004efe:	4a21      	ldr	r2, [pc, #132]	; (8004f84 <MX_TIM4_Init+0xa4>)
 8004f00:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004f02:	4b1f      	ldr	r3, [pc, #124]	; (8004f80 <MX_TIM4_Init+0xa0>)
 8004f04:	2200      	movs	r2, #0
 8004f06:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f08:	4b1d      	ldr	r3, [pc, #116]	; (8004f80 <MX_TIM4_Init+0xa0>)
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8004f0e:	4b1c      	ldr	r3, [pc, #112]	; (8004f80 <MX_TIM4_Init+0xa0>)
 8004f10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f14:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f16:	4b1a      	ldr	r3, [pc, #104]	; (8004f80 <MX_TIM4_Init+0xa0>)
 8004f18:	2200      	movs	r2, #0
 8004f1a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f1c:	4b18      	ldr	r3, [pc, #96]	; (8004f80 <MX_TIM4_Init+0xa0>)
 8004f1e:	2200      	movs	r2, #0
 8004f20:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004f22:	2301      	movs	r3, #1
 8004f24:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004f26:	2300      	movs	r3, #0
 8004f28:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004f32:	2300      	movs	r3, #0
 8004f34:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004f36:	2300      	movs	r3, #0
 8004f38:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004f42:	2300      	movs	r3, #0
 8004f44:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8004f46:	f107 030c 	add.w	r3, r7, #12
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	480c      	ldr	r0, [pc, #48]	; (8004f80 <MX_TIM4_Init+0xa0>)
 8004f4e:	f002 fb73 	bl	8007638 <HAL_TIM_Encoder_Init>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d001      	beq.n	8004f5c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8004f58:	f7fc fd26 	bl	80019a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f60:	2300      	movs	r3, #0
 8004f62:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004f64:	1d3b      	adds	r3, r7, #4
 8004f66:	4619      	mov	r1, r3
 8004f68:	4805      	ldr	r0, [pc, #20]	; (8004f80 <MX_TIM4_Init+0xa0>)
 8004f6a:	f003 f961 	bl	8008230 <HAL_TIMEx_MasterConfigSynchronization>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d001      	beq.n	8004f78 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8004f74:	f7fc fd18 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004f78:	bf00      	nop
 8004f7a:	3730      	adds	r7, #48	; 0x30
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	200006c4 	.word	0x200006c4
 8004f84:	40000800 	.word	0x40000800

08004f88 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b08a      	sub	sp, #40	; 0x28
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f90:	f107 0318 	add.w	r3, r7, #24
 8004f94:	2200      	movs	r2, #0
 8004f96:	601a      	str	r2, [r3, #0]
 8004f98:	605a      	str	r2, [r3, #4]
 8004f9a:	609a      	str	r2, [r3, #8]
 8004f9c:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM1)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a2b      	ldr	r2, [pc, #172]	; (8005050 <HAL_TIM_Encoder_MspInit+0xc8>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d125      	bne.n	8004ff4 <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004fa8:	4b2a      	ldr	r3, [pc, #168]	; (8005054 <HAL_TIM_Encoder_MspInit+0xcc>)
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	4a29      	ldr	r2, [pc, #164]	; (8005054 <HAL_TIM_Encoder_MspInit+0xcc>)
 8004fae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004fb2:	6193      	str	r3, [r2, #24]
 8004fb4:	4b27      	ldr	r3, [pc, #156]	; (8005054 <HAL_TIM_Encoder_MspInit+0xcc>)
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fbc:	617b      	str	r3, [r7, #20]
 8004fbe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fc0:	4b24      	ldr	r3, [pc, #144]	; (8005054 <HAL_TIM_Encoder_MspInit+0xcc>)
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	4a23      	ldr	r2, [pc, #140]	; (8005054 <HAL_TIM_Encoder_MspInit+0xcc>)
 8004fc6:	f043 0304 	orr.w	r3, r3, #4
 8004fca:	6193      	str	r3, [r2, #24]
 8004fcc:	4b21      	ldr	r3, [pc, #132]	; (8005054 <HAL_TIM_Encoder_MspInit+0xcc>)
 8004fce:	699b      	ldr	r3, [r3, #24]
 8004fd0:	f003 0304 	and.w	r3, r3, #4
 8004fd4:	613b      	str	r3, [r7, #16]
 8004fd6:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004fd8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fe6:	f107 0318 	add.w	r3, r7, #24
 8004fea:	4619      	mov	r1, r3
 8004fec:	481a      	ldr	r0, [pc, #104]	; (8005058 <HAL_TIM_Encoder_MspInit+0xd0>)
 8004fee:	f000 fb81 	bl	80056f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8004ff2:	e028      	b.n	8005046 <HAL_TIM_Encoder_MspInit+0xbe>
  else if(tim_encoderHandle->Instance==TIM4)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a18      	ldr	r2, [pc, #96]	; (800505c <HAL_TIM_Encoder_MspInit+0xd4>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d123      	bne.n	8005046 <HAL_TIM_Encoder_MspInit+0xbe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004ffe:	4b15      	ldr	r3, [pc, #84]	; (8005054 <HAL_TIM_Encoder_MspInit+0xcc>)
 8005000:	69db      	ldr	r3, [r3, #28]
 8005002:	4a14      	ldr	r2, [pc, #80]	; (8005054 <HAL_TIM_Encoder_MspInit+0xcc>)
 8005004:	f043 0304 	orr.w	r3, r3, #4
 8005008:	61d3      	str	r3, [r2, #28]
 800500a:	4b12      	ldr	r3, [pc, #72]	; (8005054 <HAL_TIM_Encoder_MspInit+0xcc>)
 800500c:	69db      	ldr	r3, [r3, #28]
 800500e:	f003 0304 	and.w	r3, r3, #4
 8005012:	60fb      	str	r3, [r7, #12]
 8005014:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005016:	4b0f      	ldr	r3, [pc, #60]	; (8005054 <HAL_TIM_Encoder_MspInit+0xcc>)
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	4a0e      	ldr	r2, [pc, #56]	; (8005054 <HAL_TIM_Encoder_MspInit+0xcc>)
 800501c:	f043 0308 	orr.w	r3, r3, #8
 8005020:	6193      	str	r3, [r2, #24]
 8005022:	4b0c      	ldr	r3, [pc, #48]	; (8005054 <HAL_TIM_Encoder_MspInit+0xcc>)
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	f003 0308 	and.w	r3, r3, #8
 800502a:	60bb      	str	r3, [r7, #8]
 800502c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800502e:	23c0      	movs	r3, #192	; 0xc0
 8005030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005032:	2300      	movs	r3, #0
 8005034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005036:	2300      	movs	r3, #0
 8005038:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800503a:	f107 0318 	add.w	r3, r7, #24
 800503e:	4619      	mov	r1, r3
 8005040:	4807      	ldr	r0, [pc, #28]	; (8005060 <HAL_TIM_Encoder_MspInit+0xd8>)
 8005042:	f000 fb57 	bl	80056f4 <HAL_GPIO_Init>
}
 8005046:	bf00      	nop
 8005048:	3728      	adds	r7, #40	; 0x28
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	40012c00 	.word	0x40012c00
 8005054:	40021000 	.word	0x40021000
 8005058:	40010800 	.word	0x40010800
 800505c:	40000800 	.word	0x40000800
 8005060:	40010c00 	.word	0x40010c00

08005064 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005074:	d114      	bne.n	80050a0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005076:	4b15      	ldr	r3, [pc, #84]	; (80050cc <HAL_TIM_Base_MspInit+0x68>)
 8005078:	69db      	ldr	r3, [r3, #28]
 800507a:	4a14      	ldr	r2, [pc, #80]	; (80050cc <HAL_TIM_Base_MspInit+0x68>)
 800507c:	f043 0301 	orr.w	r3, r3, #1
 8005080:	61d3      	str	r3, [r2, #28]
 8005082:	4b12      	ldr	r3, [pc, #72]	; (80050cc <HAL_TIM_Base_MspInit+0x68>)
 8005084:	69db      	ldr	r3, [r3, #28]
 8005086:	f003 0301 	and.w	r3, r3, #1
 800508a:	60fb      	str	r3, [r7, #12]
 800508c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800508e:	2200      	movs	r2, #0
 8005090:	2101      	movs	r1, #1
 8005092:	201c      	movs	r0, #28
 8005094:	f000 fa45 	bl	8005522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005098:	201c      	movs	r0, #28
 800509a:	f000 fa5e 	bl	800555a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800509e:	e010      	b.n	80050c2 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a0a      	ldr	r2, [pc, #40]	; (80050d0 <HAL_TIM_Base_MspInit+0x6c>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d10b      	bne.n	80050c2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80050aa:	4b08      	ldr	r3, [pc, #32]	; (80050cc <HAL_TIM_Base_MspInit+0x68>)
 80050ac:	69db      	ldr	r3, [r3, #28]
 80050ae:	4a07      	ldr	r2, [pc, #28]	; (80050cc <HAL_TIM_Base_MspInit+0x68>)
 80050b0:	f043 0302 	orr.w	r3, r3, #2
 80050b4:	61d3      	str	r3, [r2, #28]
 80050b6:	4b05      	ldr	r3, [pc, #20]	; (80050cc <HAL_TIM_Base_MspInit+0x68>)
 80050b8:	69db      	ldr	r3, [r3, #28]
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	60bb      	str	r3, [r7, #8]
 80050c0:	68bb      	ldr	r3, [r7, #8]
}
 80050c2:	bf00      	nop
 80050c4:	3710      	adds	r7, #16
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	40021000 	.word	0x40021000
 80050d0:	40000400 	.word	0x40000400

080050d4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b088      	sub	sp, #32
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050dc:	f107 0310 	add.w	r3, r7, #16
 80050e0:	2200      	movs	r2, #0
 80050e2:	601a      	str	r2, [r3, #0]
 80050e4:	605a      	str	r2, [r3, #4]
 80050e6:	609a      	str	r2, [r3, #8]
 80050e8:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a1b      	ldr	r2, [pc, #108]	; (800515c <HAL_TIM_MspPostInit+0x88>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d12f      	bne.n	8005154 <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050f4:	4b1a      	ldr	r3, [pc, #104]	; (8005160 <HAL_TIM_MspPostInit+0x8c>)
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	4a19      	ldr	r2, [pc, #100]	; (8005160 <HAL_TIM_MspPostInit+0x8c>)
 80050fa:	f043 0304 	orr.w	r3, r3, #4
 80050fe:	6193      	str	r3, [r2, #24]
 8005100:	4b17      	ldr	r3, [pc, #92]	; (8005160 <HAL_TIM_MspPostInit+0x8c>)
 8005102:	699b      	ldr	r3, [r3, #24]
 8005104:	f003 0304 	and.w	r3, r3, #4
 8005108:	60fb      	str	r3, [r7, #12]
 800510a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800510c:	4b14      	ldr	r3, [pc, #80]	; (8005160 <HAL_TIM_MspPostInit+0x8c>)
 800510e:	699b      	ldr	r3, [r3, #24]
 8005110:	4a13      	ldr	r2, [pc, #76]	; (8005160 <HAL_TIM_MspPostInit+0x8c>)
 8005112:	f043 0308 	orr.w	r3, r3, #8
 8005116:	6193      	str	r3, [r2, #24]
 8005118:	4b11      	ldr	r3, [pc, #68]	; (8005160 <HAL_TIM_MspPostInit+0x8c>)
 800511a:	699b      	ldr	r3, [r3, #24]
 800511c:	f003 0308 	and.w	r3, r3, #8
 8005120:	60bb      	str	r3, [r7, #8]
 8005122:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005124:	23c0      	movs	r3, #192	; 0xc0
 8005126:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005128:	2302      	movs	r3, #2
 800512a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800512c:	2302      	movs	r3, #2
 800512e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005130:	f107 0310 	add.w	r3, r7, #16
 8005134:	4619      	mov	r1, r3
 8005136:	480b      	ldr	r0, [pc, #44]	; (8005164 <HAL_TIM_MspPostInit+0x90>)
 8005138:	f000 fadc 	bl	80056f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800513c:	2303      	movs	r3, #3
 800513e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005140:	2302      	movs	r3, #2
 8005142:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005144:	2302      	movs	r3, #2
 8005146:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005148:	f107 0310 	add.w	r3, r7, #16
 800514c:	4619      	mov	r1, r3
 800514e:	4806      	ldr	r0, [pc, #24]	; (8005168 <HAL_TIM_MspPostInit+0x94>)
 8005150:	f000 fad0 	bl	80056f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005154:	bf00      	nop
 8005156:	3720      	adds	r7, #32
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	40000400 	.word	0x40000400
 8005160:	40021000 	.word	0x40021000
 8005164:	40010800 	.word	0x40010800
 8005168:	40010c00 	.word	0x40010c00

0800516c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005170:	4b11      	ldr	r3, [pc, #68]	; (80051b8 <MX_USART2_UART_Init+0x4c>)
 8005172:	4a12      	ldr	r2, [pc, #72]	; (80051bc <MX_USART2_UART_Init+0x50>)
 8005174:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8005176:	4b10      	ldr	r3, [pc, #64]	; (80051b8 <MX_USART2_UART_Init+0x4c>)
 8005178:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800517c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800517e:	4b0e      	ldr	r3, [pc, #56]	; (80051b8 <MX_USART2_UART_Init+0x4c>)
 8005180:	2200      	movs	r2, #0
 8005182:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005184:	4b0c      	ldr	r3, [pc, #48]	; (80051b8 <MX_USART2_UART_Init+0x4c>)
 8005186:	2200      	movs	r2, #0
 8005188:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800518a:	4b0b      	ldr	r3, [pc, #44]	; (80051b8 <MX_USART2_UART_Init+0x4c>)
 800518c:	2200      	movs	r2, #0
 800518e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005190:	4b09      	ldr	r3, [pc, #36]	; (80051b8 <MX_USART2_UART_Init+0x4c>)
 8005192:	220c      	movs	r2, #12
 8005194:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005196:	4b08      	ldr	r3, [pc, #32]	; (80051b8 <MX_USART2_UART_Init+0x4c>)
 8005198:	2200      	movs	r2, #0
 800519a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800519c:	4b06      	ldr	r3, [pc, #24]	; (80051b8 <MX_USART2_UART_Init+0x4c>)
 800519e:	2200      	movs	r2, #0
 80051a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80051a2:	4805      	ldr	r0, [pc, #20]	; (80051b8 <MX_USART2_UART_Init+0x4c>)
 80051a4:	f003 f8b4 	bl	8008310 <HAL_UART_Init>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d001      	beq.n	80051b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80051ae:	f7fc fbfb 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80051b2:	bf00      	nop
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	2000070c 	.word	0x2000070c
 80051bc:	40004400 	.word	0x40004400

080051c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b088      	sub	sp, #32
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051c8:	f107 0310 	add.w	r3, r7, #16
 80051cc:	2200      	movs	r2, #0
 80051ce:	601a      	str	r2, [r3, #0]
 80051d0:	605a      	str	r2, [r3, #4]
 80051d2:	609a      	str	r2, [r3, #8]
 80051d4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a1f      	ldr	r2, [pc, #124]	; (8005258 <HAL_UART_MspInit+0x98>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d137      	bne.n	8005250 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80051e0:	4b1e      	ldr	r3, [pc, #120]	; (800525c <HAL_UART_MspInit+0x9c>)
 80051e2:	69db      	ldr	r3, [r3, #28]
 80051e4:	4a1d      	ldr	r2, [pc, #116]	; (800525c <HAL_UART_MspInit+0x9c>)
 80051e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051ea:	61d3      	str	r3, [r2, #28]
 80051ec:	4b1b      	ldr	r3, [pc, #108]	; (800525c <HAL_UART_MspInit+0x9c>)
 80051ee:	69db      	ldr	r3, [r3, #28]
 80051f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f4:	60fb      	str	r3, [r7, #12]
 80051f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051f8:	4b18      	ldr	r3, [pc, #96]	; (800525c <HAL_UART_MspInit+0x9c>)
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	4a17      	ldr	r2, [pc, #92]	; (800525c <HAL_UART_MspInit+0x9c>)
 80051fe:	f043 0304 	orr.w	r3, r3, #4
 8005202:	6193      	str	r3, [r2, #24]
 8005204:	4b15      	ldr	r3, [pc, #84]	; (800525c <HAL_UART_MspInit+0x9c>)
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	f003 0304 	and.w	r3, r3, #4
 800520c:	60bb      	str	r3, [r7, #8]
 800520e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005210:	2304      	movs	r3, #4
 8005212:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005214:	2302      	movs	r3, #2
 8005216:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005218:	2303      	movs	r3, #3
 800521a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800521c:	f107 0310 	add.w	r3, r7, #16
 8005220:	4619      	mov	r1, r3
 8005222:	480f      	ldr	r0, [pc, #60]	; (8005260 <HAL_UART_MspInit+0xa0>)
 8005224:	f000 fa66 	bl	80056f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005228:	2308      	movs	r3, #8
 800522a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800522c:	2300      	movs	r3, #0
 800522e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005230:	2300      	movs	r3, #0
 8005232:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005234:	f107 0310 	add.w	r3, r7, #16
 8005238:	4619      	mov	r1, r3
 800523a:	4809      	ldr	r0, [pc, #36]	; (8005260 <HAL_UART_MspInit+0xa0>)
 800523c:	f000 fa5a 	bl	80056f4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8005240:	2200      	movs	r2, #0
 8005242:	2102      	movs	r1, #2
 8005244:	2026      	movs	r0, #38	; 0x26
 8005246:	f000 f96c 	bl	8005522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800524a:	2026      	movs	r0, #38	; 0x26
 800524c:	f000 f985 	bl	800555a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005250:	bf00      	nop
 8005252:	3720      	adds	r7, #32
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	40004400 	.word	0x40004400
 800525c:	40021000 	.word	0x40021000
 8005260:	40010800 	.word	0x40010800

08005264 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005264:	480c      	ldr	r0, [pc, #48]	; (8005298 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005266:	490d      	ldr	r1, [pc, #52]	; (800529c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005268:	4a0d      	ldr	r2, [pc, #52]	; (80052a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800526a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800526c:	e002      	b.n	8005274 <LoopCopyDataInit>

0800526e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800526e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005272:	3304      	adds	r3, #4

08005274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005278:	d3f9      	bcc.n	800526e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800527a:	4a0a      	ldr	r2, [pc, #40]	; (80052a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800527c:	4c0a      	ldr	r4, [pc, #40]	; (80052a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800527e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005280:	e001      	b.n	8005286 <LoopFillZerobss>

08005282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005284:	3204      	adds	r2, #4

08005286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005288:	d3fb      	bcc.n	8005282 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800528a:	f7ff fce7 	bl	8004c5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800528e:	f004 fd5b 	bl	8009d48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005292:	f7fc fa77 	bl	8001784 <main>
  bx lr
 8005296:	4770      	bx	lr
  ldr r0, =_sdata
 8005298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800529c:	20000230 	.word	0x20000230
  ldr r2, =_sidata
 80052a0:	0800e360 	.word	0x0800e360
  ldr r2, =_sbss
 80052a4:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 80052a8:	200008a4 	.word	0x200008a4

080052ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80052ac:	e7fe      	b.n	80052ac <ADC1_2_IRQHandler>
	...

080052b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80052b4:	4b08      	ldr	r3, [pc, #32]	; (80052d8 <HAL_Init+0x28>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a07      	ldr	r2, [pc, #28]	; (80052d8 <HAL_Init+0x28>)
 80052ba:	f043 0310 	orr.w	r3, r3, #16
 80052be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80052c0:	2003      	movs	r0, #3
 80052c2:	f000 f923 	bl	800550c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80052c6:	200f      	movs	r0, #15
 80052c8:	f000 f808 	bl	80052dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80052cc:	f7ff fb98 	bl	8004a00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	40022000 	.word	0x40022000

080052dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80052e4:	4b12      	ldr	r3, [pc, #72]	; (8005330 <HAL_InitTick+0x54>)
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	4b12      	ldr	r3, [pc, #72]	; (8005334 <HAL_InitTick+0x58>)
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	4619      	mov	r1, r3
 80052ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80052f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80052f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80052fa:	4618      	mov	r0, r3
 80052fc:	f000 f93b 	bl	8005576 <HAL_SYSTICK_Config>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d001      	beq.n	800530a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e00e      	b.n	8005328 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2b0f      	cmp	r3, #15
 800530e:	d80a      	bhi.n	8005326 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005310:	2200      	movs	r2, #0
 8005312:	6879      	ldr	r1, [r7, #4]
 8005314:	f04f 30ff 	mov.w	r0, #4294967295
 8005318:	f000 f903 	bl	8005522 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800531c:	4a06      	ldr	r2, [pc, #24]	; (8005338 <HAL_InitTick+0x5c>)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005322:	2300      	movs	r3, #0
 8005324:	e000      	b.n	8005328 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
}
 8005328:	4618      	mov	r0, r3
 800532a:	3708      	adds	r7, #8
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	2000004c 	.word	0x2000004c
 8005334:	20000054 	.word	0x20000054
 8005338:	20000050 	.word	0x20000050

0800533c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800533c:	b480      	push	{r7}
 800533e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005340:	4b05      	ldr	r3, [pc, #20]	; (8005358 <HAL_IncTick+0x1c>)
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	461a      	mov	r2, r3
 8005346:	4b05      	ldr	r3, [pc, #20]	; (800535c <HAL_IncTick+0x20>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4413      	add	r3, r2
 800534c:	4a03      	ldr	r2, [pc, #12]	; (800535c <HAL_IncTick+0x20>)
 800534e:	6013      	str	r3, [r2, #0]
}
 8005350:	bf00      	nop
 8005352:	46bd      	mov	sp, r7
 8005354:	bc80      	pop	{r7}
 8005356:	4770      	bx	lr
 8005358:	20000054 	.word	0x20000054
 800535c:	20000754 	.word	0x20000754

08005360 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005360:	b480      	push	{r7}
 8005362:	af00      	add	r7, sp, #0
  return uwTick;
 8005364:	4b02      	ldr	r3, [pc, #8]	; (8005370 <HAL_GetTick+0x10>)
 8005366:	681b      	ldr	r3, [r3, #0]
}
 8005368:	4618      	mov	r0, r3
 800536a:	46bd      	mov	sp, r7
 800536c:	bc80      	pop	{r7}
 800536e:	4770      	bx	lr
 8005370:	20000754 	.word	0x20000754

08005374 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005374:	b480      	push	{r7}
 8005376:	b085      	sub	sp, #20
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f003 0307 	and.w	r3, r3, #7
 8005382:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005384:	4b0c      	ldr	r3, [pc, #48]	; (80053b8 <__NVIC_SetPriorityGrouping+0x44>)
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005390:	4013      	ands	r3, r2
 8005392:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800539c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80053a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80053a6:	4a04      	ldr	r2, [pc, #16]	; (80053b8 <__NVIC_SetPriorityGrouping+0x44>)
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	60d3      	str	r3, [r2, #12]
}
 80053ac:	bf00      	nop
 80053ae:	3714      	adds	r7, #20
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bc80      	pop	{r7}
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	e000ed00 	.word	0xe000ed00

080053bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80053bc:	b480      	push	{r7}
 80053be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053c0:	4b04      	ldr	r3, [pc, #16]	; (80053d4 <__NVIC_GetPriorityGrouping+0x18>)
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	0a1b      	lsrs	r3, r3, #8
 80053c6:	f003 0307 	and.w	r3, r3, #7
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bc80      	pop	{r7}
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	e000ed00 	.word	0xe000ed00

080053d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	4603      	mov	r3, r0
 80053e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	db0b      	blt.n	8005402 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053ea:	79fb      	ldrb	r3, [r7, #7]
 80053ec:	f003 021f 	and.w	r2, r3, #31
 80053f0:	4906      	ldr	r1, [pc, #24]	; (800540c <__NVIC_EnableIRQ+0x34>)
 80053f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053f6:	095b      	lsrs	r3, r3, #5
 80053f8:	2001      	movs	r0, #1
 80053fa:	fa00 f202 	lsl.w	r2, r0, r2
 80053fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005402:	bf00      	nop
 8005404:	370c      	adds	r7, #12
 8005406:	46bd      	mov	sp, r7
 8005408:	bc80      	pop	{r7}
 800540a:	4770      	bx	lr
 800540c:	e000e100 	.word	0xe000e100

08005410 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	4603      	mov	r3, r0
 8005418:	6039      	str	r1, [r7, #0]
 800541a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800541c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005420:	2b00      	cmp	r3, #0
 8005422:	db0a      	blt.n	800543a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	b2da      	uxtb	r2, r3
 8005428:	490c      	ldr	r1, [pc, #48]	; (800545c <__NVIC_SetPriority+0x4c>)
 800542a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800542e:	0112      	lsls	r2, r2, #4
 8005430:	b2d2      	uxtb	r2, r2
 8005432:	440b      	add	r3, r1
 8005434:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005438:	e00a      	b.n	8005450 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	b2da      	uxtb	r2, r3
 800543e:	4908      	ldr	r1, [pc, #32]	; (8005460 <__NVIC_SetPriority+0x50>)
 8005440:	79fb      	ldrb	r3, [r7, #7]
 8005442:	f003 030f 	and.w	r3, r3, #15
 8005446:	3b04      	subs	r3, #4
 8005448:	0112      	lsls	r2, r2, #4
 800544a:	b2d2      	uxtb	r2, r2
 800544c:	440b      	add	r3, r1
 800544e:	761a      	strb	r2, [r3, #24]
}
 8005450:	bf00      	nop
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	bc80      	pop	{r7}
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	e000e100 	.word	0xe000e100
 8005460:	e000ed00 	.word	0xe000ed00

08005464 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005464:	b480      	push	{r7}
 8005466:	b089      	sub	sp, #36	; 0x24
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f003 0307 	and.w	r3, r3, #7
 8005476:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	f1c3 0307 	rsb	r3, r3, #7
 800547e:	2b04      	cmp	r3, #4
 8005480:	bf28      	it	cs
 8005482:	2304      	movcs	r3, #4
 8005484:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	3304      	adds	r3, #4
 800548a:	2b06      	cmp	r3, #6
 800548c:	d902      	bls.n	8005494 <NVIC_EncodePriority+0x30>
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	3b03      	subs	r3, #3
 8005492:	e000      	b.n	8005496 <NVIC_EncodePriority+0x32>
 8005494:	2300      	movs	r3, #0
 8005496:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005498:	f04f 32ff 	mov.w	r2, #4294967295
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	fa02 f303 	lsl.w	r3, r2, r3
 80054a2:	43da      	mvns	r2, r3
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	401a      	ands	r2, r3
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054ac:	f04f 31ff 	mov.w	r1, #4294967295
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	fa01 f303 	lsl.w	r3, r1, r3
 80054b6:	43d9      	mvns	r1, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054bc:	4313      	orrs	r3, r2
         );
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3724      	adds	r7, #36	; 0x24
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bc80      	pop	{r7}
 80054c6:	4770      	bx	lr

080054c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	3b01      	subs	r3, #1
 80054d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80054d8:	d301      	bcc.n	80054de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80054da:	2301      	movs	r3, #1
 80054dc:	e00f      	b.n	80054fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80054de:	4a0a      	ldr	r2, [pc, #40]	; (8005508 <SysTick_Config+0x40>)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	3b01      	subs	r3, #1
 80054e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80054e6:	210f      	movs	r1, #15
 80054e8:	f04f 30ff 	mov.w	r0, #4294967295
 80054ec:	f7ff ff90 	bl	8005410 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80054f0:	4b05      	ldr	r3, [pc, #20]	; (8005508 <SysTick_Config+0x40>)
 80054f2:	2200      	movs	r2, #0
 80054f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80054f6:	4b04      	ldr	r3, [pc, #16]	; (8005508 <SysTick_Config+0x40>)
 80054f8:	2207      	movs	r2, #7
 80054fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3708      	adds	r7, #8
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	e000e010 	.word	0xe000e010

0800550c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f7ff ff2d 	bl	8005374 <__NVIC_SetPriorityGrouping>
}
 800551a:	bf00      	nop
 800551c:	3708      	adds	r7, #8
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}

08005522 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005522:	b580      	push	{r7, lr}
 8005524:	b086      	sub	sp, #24
 8005526:	af00      	add	r7, sp, #0
 8005528:	4603      	mov	r3, r0
 800552a:	60b9      	str	r1, [r7, #8]
 800552c:	607a      	str	r2, [r7, #4]
 800552e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005530:	2300      	movs	r3, #0
 8005532:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005534:	f7ff ff42 	bl	80053bc <__NVIC_GetPriorityGrouping>
 8005538:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	68b9      	ldr	r1, [r7, #8]
 800553e:	6978      	ldr	r0, [r7, #20]
 8005540:	f7ff ff90 	bl	8005464 <NVIC_EncodePriority>
 8005544:	4602      	mov	r2, r0
 8005546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800554a:	4611      	mov	r1, r2
 800554c:	4618      	mov	r0, r3
 800554e:	f7ff ff5f 	bl	8005410 <__NVIC_SetPriority>
}
 8005552:	bf00      	nop
 8005554:	3718      	adds	r7, #24
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800555a:	b580      	push	{r7, lr}
 800555c:	b082      	sub	sp, #8
 800555e:	af00      	add	r7, sp, #0
 8005560:	4603      	mov	r3, r0
 8005562:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005568:	4618      	mov	r0, r3
 800556a:	f7ff ff35 	bl	80053d8 <__NVIC_EnableIRQ>
}
 800556e:	bf00      	nop
 8005570:	3708      	adds	r7, #8
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}

08005576 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005576:	b580      	push	{r7, lr}
 8005578:	b082      	sub	sp, #8
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f7ff ffa2 	bl	80054c8 <SysTick_Config>
 8005584:	4603      	mov	r3, r0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3708      	adds	r7, #8
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}

0800558e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800558e:	b480      	push	{r7}
 8005590:	b085      	sub	sp, #20
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005596:	2300      	movs	r3, #0
 8005598:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d008      	beq.n	80055b8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2204      	movs	r2, #4
 80055aa:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e020      	b.n	80055fa <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f022 020e 	bic.w	r2, r2, #14
 80055c6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f022 0201 	bic.w	r2, r2, #1
 80055d6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055e0:	2101      	movs	r1, #1
 80055e2:	fa01 f202 	lsl.w	r2, r1, r2
 80055e6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80055f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3714      	adds	r7, #20
 80055fe:	46bd      	mov	sp, r7
 8005600:	bc80      	pop	{r7}
 8005602:	4770      	bx	lr

08005604 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800560c:	2300      	movs	r3, #0
 800560e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005616:	b2db      	uxtb	r3, r3
 8005618:	2b02      	cmp	r3, #2
 800561a:	d005      	beq.n	8005628 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2204      	movs	r2, #4
 8005620:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	73fb      	strb	r3, [r7, #15]
 8005626:	e051      	b.n	80056cc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f022 020e 	bic.w	r2, r2, #14
 8005636:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f022 0201 	bic.w	r2, r2, #1
 8005646:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a22      	ldr	r2, [pc, #136]	; (80056d8 <HAL_DMA_Abort_IT+0xd4>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d029      	beq.n	80056a6 <HAL_DMA_Abort_IT+0xa2>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a21      	ldr	r2, [pc, #132]	; (80056dc <HAL_DMA_Abort_IT+0xd8>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d022      	beq.n	80056a2 <HAL_DMA_Abort_IT+0x9e>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a1f      	ldr	r2, [pc, #124]	; (80056e0 <HAL_DMA_Abort_IT+0xdc>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d01a      	beq.n	800569c <HAL_DMA_Abort_IT+0x98>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a1e      	ldr	r2, [pc, #120]	; (80056e4 <HAL_DMA_Abort_IT+0xe0>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d012      	beq.n	8005696 <HAL_DMA_Abort_IT+0x92>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a1c      	ldr	r2, [pc, #112]	; (80056e8 <HAL_DMA_Abort_IT+0xe4>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d00a      	beq.n	8005690 <HAL_DMA_Abort_IT+0x8c>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a1b      	ldr	r2, [pc, #108]	; (80056ec <HAL_DMA_Abort_IT+0xe8>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d102      	bne.n	800568a <HAL_DMA_Abort_IT+0x86>
 8005684:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005688:	e00e      	b.n	80056a8 <HAL_DMA_Abort_IT+0xa4>
 800568a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800568e:	e00b      	b.n	80056a8 <HAL_DMA_Abort_IT+0xa4>
 8005690:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005694:	e008      	b.n	80056a8 <HAL_DMA_Abort_IT+0xa4>
 8005696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800569a:	e005      	b.n	80056a8 <HAL_DMA_Abort_IT+0xa4>
 800569c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80056a0:	e002      	b.n	80056a8 <HAL_DMA_Abort_IT+0xa4>
 80056a2:	2310      	movs	r3, #16
 80056a4:	e000      	b.n	80056a8 <HAL_DMA_Abort_IT+0xa4>
 80056a6:	2301      	movs	r3, #1
 80056a8:	4a11      	ldr	r2, [pc, #68]	; (80056f0 <HAL_DMA_Abort_IT+0xec>)
 80056aa:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d003      	beq.n	80056cc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	4798      	blx	r3
    } 
  }
  return status;
 80056cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3710      	adds	r7, #16
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	40020008 	.word	0x40020008
 80056dc:	4002001c 	.word	0x4002001c
 80056e0:	40020030 	.word	0x40020030
 80056e4:	40020044 	.word	0x40020044
 80056e8:	40020058 	.word	0x40020058
 80056ec:	4002006c 	.word	0x4002006c
 80056f0:	40020000 	.word	0x40020000

080056f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b08b      	sub	sp, #44	; 0x2c
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80056fe:	2300      	movs	r3, #0
 8005700:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005702:	2300      	movs	r3, #0
 8005704:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005706:	e169      	b.n	80059dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005708:	2201      	movs	r2, #1
 800570a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570c:	fa02 f303 	lsl.w	r3, r2, r3
 8005710:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	69fa      	ldr	r2, [r7, #28]
 8005718:	4013      	ands	r3, r2
 800571a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800571c:	69ba      	ldr	r2, [r7, #24]
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	429a      	cmp	r2, r3
 8005722:	f040 8158 	bne.w	80059d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	4a9a      	ldr	r2, [pc, #616]	; (8005994 <HAL_GPIO_Init+0x2a0>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d05e      	beq.n	80057ee <HAL_GPIO_Init+0xfa>
 8005730:	4a98      	ldr	r2, [pc, #608]	; (8005994 <HAL_GPIO_Init+0x2a0>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d875      	bhi.n	8005822 <HAL_GPIO_Init+0x12e>
 8005736:	4a98      	ldr	r2, [pc, #608]	; (8005998 <HAL_GPIO_Init+0x2a4>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d058      	beq.n	80057ee <HAL_GPIO_Init+0xfa>
 800573c:	4a96      	ldr	r2, [pc, #600]	; (8005998 <HAL_GPIO_Init+0x2a4>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d86f      	bhi.n	8005822 <HAL_GPIO_Init+0x12e>
 8005742:	4a96      	ldr	r2, [pc, #600]	; (800599c <HAL_GPIO_Init+0x2a8>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d052      	beq.n	80057ee <HAL_GPIO_Init+0xfa>
 8005748:	4a94      	ldr	r2, [pc, #592]	; (800599c <HAL_GPIO_Init+0x2a8>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d869      	bhi.n	8005822 <HAL_GPIO_Init+0x12e>
 800574e:	4a94      	ldr	r2, [pc, #592]	; (80059a0 <HAL_GPIO_Init+0x2ac>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d04c      	beq.n	80057ee <HAL_GPIO_Init+0xfa>
 8005754:	4a92      	ldr	r2, [pc, #584]	; (80059a0 <HAL_GPIO_Init+0x2ac>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d863      	bhi.n	8005822 <HAL_GPIO_Init+0x12e>
 800575a:	4a92      	ldr	r2, [pc, #584]	; (80059a4 <HAL_GPIO_Init+0x2b0>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d046      	beq.n	80057ee <HAL_GPIO_Init+0xfa>
 8005760:	4a90      	ldr	r2, [pc, #576]	; (80059a4 <HAL_GPIO_Init+0x2b0>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d85d      	bhi.n	8005822 <HAL_GPIO_Init+0x12e>
 8005766:	2b12      	cmp	r3, #18
 8005768:	d82a      	bhi.n	80057c0 <HAL_GPIO_Init+0xcc>
 800576a:	2b12      	cmp	r3, #18
 800576c:	d859      	bhi.n	8005822 <HAL_GPIO_Init+0x12e>
 800576e:	a201      	add	r2, pc, #4	; (adr r2, 8005774 <HAL_GPIO_Init+0x80>)
 8005770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005774:	080057ef 	.word	0x080057ef
 8005778:	080057c9 	.word	0x080057c9
 800577c:	080057db 	.word	0x080057db
 8005780:	0800581d 	.word	0x0800581d
 8005784:	08005823 	.word	0x08005823
 8005788:	08005823 	.word	0x08005823
 800578c:	08005823 	.word	0x08005823
 8005790:	08005823 	.word	0x08005823
 8005794:	08005823 	.word	0x08005823
 8005798:	08005823 	.word	0x08005823
 800579c:	08005823 	.word	0x08005823
 80057a0:	08005823 	.word	0x08005823
 80057a4:	08005823 	.word	0x08005823
 80057a8:	08005823 	.word	0x08005823
 80057ac:	08005823 	.word	0x08005823
 80057b0:	08005823 	.word	0x08005823
 80057b4:	08005823 	.word	0x08005823
 80057b8:	080057d1 	.word	0x080057d1
 80057bc:	080057e5 	.word	0x080057e5
 80057c0:	4a79      	ldr	r2, [pc, #484]	; (80059a8 <HAL_GPIO_Init+0x2b4>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d013      	beq.n	80057ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80057c6:	e02c      	b.n	8005822 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	623b      	str	r3, [r7, #32]
          break;
 80057ce:	e029      	b.n	8005824 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	3304      	adds	r3, #4
 80057d6:	623b      	str	r3, [r7, #32]
          break;
 80057d8:	e024      	b.n	8005824 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	3308      	adds	r3, #8
 80057e0:	623b      	str	r3, [r7, #32]
          break;
 80057e2:	e01f      	b.n	8005824 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	330c      	adds	r3, #12
 80057ea:	623b      	str	r3, [r7, #32]
          break;
 80057ec:	e01a      	b.n	8005824 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d102      	bne.n	80057fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80057f6:	2304      	movs	r3, #4
 80057f8:	623b      	str	r3, [r7, #32]
          break;
 80057fa:	e013      	b.n	8005824 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d105      	bne.n	8005810 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005804:	2308      	movs	r3, #8
 8005806:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	69fa      	ldr	r2, [r7, #28]
 800580c:	611a      	str	r2, [r3, #16]
          break;
 800580e:	e009      	b.n	8005824 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005810:	2308      	movs	r3, #8
 8005812:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	69fa      	ldr	r2, [r7, #28]
 8005818:	615a      	str	r2, [r3, #20]
          break;
 800581a:	e003      	b.n	8005824 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800581c:	2300      	movs	r3, #0
 800581e:	623b      	str	r3, [r7, #32]
          break;
 8005820:	e000      	b.n	8005824 <HAL_GPIO_Init+0x130>
          break;
 8005822:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	2bff      	cmp	r3, #255	; 0xff
 8005828:	d801      	bhi.n	800582e <HAL_GPIO_Init+0x13a>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	e001      	b.n	8005832 <HAL_GPIO_Init+0x13e>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	3304      	adds	r3, #4
 8005832:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	2bff      	cmp	r3, #255	; 0xff
 8005838:	d802      	bhi.n	8005840 <HAL_GPIO_Init+0x14c>
 800583a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	e002      	b.n	8005846 <HAL_GPIO_Init+0x152>
 8005840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005842:	3b08      	subs	r3, #8
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	210f      	movs	r1, #15
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	fa01 f303 	lsl.w	r3, r1, r3
 8005854:	43db      	mvns	r3, r3
 8005856:	401a      	ands	r2, r3
 8005858:	6a39      	ldr	r1, [r7, #32]
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	fa01 f303 	lsl.w	r3, r1, r3
 8005860:	431a      	orrs	r2, r3
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800586e:	2b00      	cmp	r3, #0
 8005870:	f000 80b1 	beq.w	80059d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005874:	4b4d      	ldr	r3, [pc, #308]	; (80059ac <HAL_GPIO_Init+0x2b8>)
 8005876:	699b      	ldr	r3, [r3, #24]
 8005878:	4a4c      	ldr	r2, [pc, #304]	; (80059ac <HAL_GPIO_Init+0x2b8>)
 800587a:	f043 0301 	orr.w	r3, r3, #1
 800587e:	6193      	str	r3, [r2, #24]
 8005880:	4b4a      	ldr	r3, [pc, #296]	; (80059ac <HAL_GPIO_Init+0x2b8>)
 8005882:	699b      	ldr	r3, [r3, #24]
 8005884:	f003 0301 	and.w	r3, r3, #1
 8005888:	60bb      	str	r3, [r7, #8]
 800588a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800588c:	4a48      	ldr	r2, [pc, #288]	; (80059b0 <HAL_GPIO_Init+0x2bc>)
 800588e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005890:	089b      	lsrs	r3, r3, #2
 8005892:	3302      	adds	r3, #2
 8005894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005898:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800589a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589c:	f003 0303 	and.w	r3, r3, #3
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	220f      	movs	r2, #15
 80058a4:	fa02 f303 	lsl.w	r3, r2, r3
 80058a8:	43db      	mvns	r3, r3
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	4013      	ands	r3, r2
 80058ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a40      	ldr	r2, [pc, #256]	; (80059b4 <HAL_GPIO_Init+0x2c0>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d013      	beq.n	80058e0 <HAL_GPIO_Init+0x1ec>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a3f      	ldr	r2, [pc, #252]	; (80059b8 <HAL_GPIO_Init+0x2c4>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d00d      	beq.n	80058dc <HAL_GPIO_Init+0x1e8>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a3e      	ldr	r2, [pc, #248]	; (80059bc <HAL_GPIO_Init+0x2c8>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d007      	beq.n	80058d8 <HAL_GPIO_Init+0x1e4>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a3d      	ldr	r2, [pc, #244]	; (80059c0 <HAL_GPIO_Init+0x2cc>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d101      	bne.n	80058d4 <HAL_GPIO_Init+0x1e0>
 80058d0:	2303      	movs	r3, #3
 80058d2:	e006      	b.n	80058e2 <HAL_GPIO_Init+0x1ee>
 80058d4:	2304      	movs	r3, #4
 80058d6:	e004      	b.n	80058e2 <HAL_GPIO_Init+0x1ee>
 80058d8:	2302      	movs	r3, #2
 80058da:	e002      	b.n	80058e2 <HAL_GPIO_Init+0x1ee>
 80058dc:	2301      	movs	r3, #1
 80058de:	e000      	b.n	80058e2 <HAL_GPIO_Init+0x1ee>
 80058e0:	2300      	movs	r3, #0
 80058e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058e4:	f002 0203 	and.w	r2, r2, #3
 80058e8:	0092      	lsls	r2, r2, #2
 80058ea:	4093      	lsls	r3, r2
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80058f2:	492f      	ldr	r1, [pc, #188]	; (80059b0 <HAL_GPIO_Init+0x2bc>)
 80058f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f6:	089b      	lsrs	r3, r3, #2
 80058f8:	3302      	adds	r3, #2
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005908:	2b00      	cmp	r3, #0
 800590a:	d006      	beq.n	800591a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800590c:	4b2d      	ldr	r3, [pc, #180]	; (80059c4 <HAL_GPIO_Init+0x2d0>)
 800590e:	689a      	ldr	r2, [r3, #8]
 8005910:	492c      	ldr	r1, [pc, #176]	; (80059c4 <HAL_GPIO_Init+0x2d0>)
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	4313      	orrs	r3, r2
 8005916:	608b      	str	r3, [r1, #8]
 8005918:	e006      	b.n	8005928 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800591a:	4b2a      	ldr	r3, [pc, #168]	; (80059c4 <HAL_GPIO_Init+0x2d0>)
 800591c:	689a      	ldr	r2, [r3, #8]
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	43db      	mvns	r3, r3
 8005922:	4928      	ldr	r1, [pc, #160]	; (80059c4 <HAL_GPIO_Init+0x2d0>)
 8005924:	4013      	ands	r3, r2
 8005926:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d006      	beq.n	8005942 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005934:	4b23      	ldr	r3, [pc, #140]	; (80059c4 <HAL_GPIO_Init+0x2d0>)
 8005936:	68da      	ldr	r2, [r3, #12]
 8005938:	4922      	ldr	r1, [pc, #136]	; (80059c4 <HAL_GPIO_Init+0x2d0>)
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	4313      	orrs	r3, r2
 800593e:	60cb      	str	r3, [r1, #12]
 8005940:	e006      	b.n	8005950 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005942:	4b20      	ldr	r3, [pc, #128]	; (80059c4 <HAL_GPIO_Init+0x2d0>)
 8005944:	68da      	ldr	r2, [r3, #12]
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	43db      	mvns	r3, r3
 800594a:	491e      	ldr	r1, [pc, #120]	; (80059c4 <HAL_GPIO_Init+0x2d0>)
 800594c:	4013      	ands	r3, r2
 800594e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005958:	2b00      	cmp	r3, #0
 800595a:	d006      	beq.n	800596a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800595c:	4b19      	ldr	r3, [pc, #100]	; (80059c4 <HAL_GPIO_Init+0x2d0>)
 800595e:	685a      	ldr	r2, [r3, #4]
 8005960:	4918      	ldr	r1, [pc, #96]	; (80059c4 <HAL_GPIO_Init+0x2d0>)
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	4313      	orrs	r3, r2
 8005966:	604b      	str	r3, [r1, #4]
 8005968:	e006      	b.n	8005978 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800596a:	4b16      	ldr	r3, [pc, #88]	; (80059c4 <HAL_GPIO_Init+0x2d0>)
 800596c:	685a      	ldr	r2, [r3, #4]
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	43db      	mvns	r3, r3
 8005972:	4914      	ldr	r1, [pc, #80]	; (80059c4 <HAL_GPIO_Init+0x2d0>)
 8005974:	4013      	ands	r3, r2
 8005976:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005980:	2b00      	cmp	r3, #0
 8005982:	d021      	beq.n	80059c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005984:	4b0f      	ldr	r3, [pc, #60]	; (80059c4 <HAL_GPIO_Init+0x2d0>)
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	490e      	ldr	r1, [pc, #56]	; (80059c4 <HAL_GPIO_Init+0x2d0>)
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	4313      	orrs	r3, r2
 800598e:	600b      	str	r3, [r1, #0]
 8005990:	e021      	b.n	80059d6 <HAL_GPIO_Init+0x2e2>
 8005992:	bf00      	nop
 8005994:	10320000 	.word	0x10320000
 8005998:	10310000 	.word	0x10310000
 800599c:	10220000 	.word	0x10220000
 80059a0:	10210000 	.word	0x10210000
 80059a4:	10120000 	.word	0x10120000
 80059a8:	10110000 	.word	0x10110000
 80059ac:	40021000 	.word	0x40021000
 80059b0:	40010000 	.word	0x40010000
 80059b4:	40010800 	.word	0x40010800
 80059b8:	40010c00 	.word	0x40010c00
 80059bc:	40011000 	.word	0x40011000
 80059c0:	40011400 	.word	0x40011400
 80059c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80059c8:	4b0b      	ldr	r3, [pc, #44]	; (80059f8 <HAL_GPIO_Init+0x304>)
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	43db      	mvns	r3, r3
 80059d0:	4909      	ldr	r1, [pc, #36]	; (80059f8 <HAL_GPIO_Init+0x304>)
 80059d2:	4013      	ands	r3, r2
 80059d4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80059d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d8:	3301      	adds	r3, #1
 80059da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e2:	fa22 f303 	lsr.w	r3, r2, r3
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	f47f ae8e 	bne.w	8005708 <HAL_GPIO_Init+0x14>
  }
}
 80059ec:	bf00      	nop
 80059ee:	bf00      	nop
 80059f0:	372c      	adds	r7, #44	; 0x2c
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bc80      	pop	{r7}
 80059f6:	4770      	bx	lr
 80059f8:	40010400 	.word	0x40010400

080059fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	460b      	mov	r3, r1
 8005a06:	807b      	strh	r3, [r7, #2]
 8005a08:	4613      	mov	r3, r2
 8005a0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005a0c:	787b      	ldrb	r3, [r7, #1]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d003      	beq.n	8005a1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a12:	887a      	ldrh	r2, [r7, #2]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005a18:	e003      	b.n	8005a22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005a1a:	887b      	ldrh	r3, [r7, #2]
 8005a1c:	041a      	lsls	r2, r3, #16
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	611a      	str	r2, [r3, #16]
}
 8005a22:	bf00      	nop
 8005a24:	370c      	adds	r7, #12
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bc80      	pop	{r7}
 8005a2a:	4770      	bx	lr

08005a2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d101      	bne.n	8005a3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e12b      	b.n	8005c96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d106      	bne.n	8005a58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f7fb fe1a 	bl	800168c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2224      	movs	r2, #36	; 0x24
 8005a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f022 0201 	bic.w	r2, r2, #1
 8005a6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005a90:	f001 fbf0 	bl	8007274 <HAL_RCC_GetPCLK1Freq>
 8005a94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	4a81      	ldr	r2, [pc, #516]	; (8005ca0 <HAL_I2C_Init+0x274>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d807      	bhi.n	8005ab0 <HAL_I2C_Init+0x84>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	4a80      	ldr	r2, [pc, #512]	; (8005ca4 <HAL_I2C_Init+0x278>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	bf94      	ite	ls
 8005aa8:	2301      	movls	r3, #1
 8005aaa:	2300      	movhi	r3, #0
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	e006      	b.n	8005abe <HAL_I2C_Init+0x92>
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	4a7d      	ldr	r2, [pc, #500]	; (8005ca8 <HAL_I2C_Init+0x27c>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	bf94      	ite	ls
 8005ab8:	2301      	movls	r3, #1
 8005aba:	2300      	movhi	r3, #0
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d001      	beq.n	8005ac6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e0e7      	b.n	8005c96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	4a78      	ldr	r2, [pc, #480]	; (8005cac <HAL_I2C_Init+0x280>)
 8005aca:	fba2 2303 	umull	r2, r3, r2, r3
 8005ace:	0c9b      	lsrs	r3, r3, #18
 8005ad0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68ba      	ldr	r2, [r7, #8]
 8005ae2:	430a      	orrs	r2, r1
 8005ae4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	6a1b      	ldr	r3, [r3, #32]
 8005aec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	4a6a      	ldr	r2, [pc, #424]	; (8005ca0 <HAL_I2C_Init+0x274>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d802      	bhi.n	8005b00 <HAL_I2C_Init+0xd4>
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	3301      	adds	r3, #1
 8005afe:	e009      	b.n	8005b14 <HAL_I2C_Init+0xe8>
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005b06:	fb02 f303 	mul.w	r3, r2, r3
 8005b0a:	4a69      	ldr	r2, [pc, #420]	; (8005cb0 <HAL_I2C_Init+0x284>)
 8005b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b10:	099b      	lsrs	r3, r3, #6
 8005b12:	3301      	adds	r3, #1
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	6812      	ldr	r2, [r2, #0]
 8005b18:	430b      	orrs	r3, r1
 8005b1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	69db      	ldr	r3, [r3, #28]
 8005b22:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005b26:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	495c      	ldr	r1, [pc, #368]	; (8005ca0 <HAL_I2C_Init+0x274>)
 8005b30:	428b      	cmp	r3, r1
 8005b32:	d819      	bhi.n	8005b68 <HAL_I2C_Init+0x13c>
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	1e59      	subs	r1, r3, #1
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	005b      	lsls	r3, r3, #1
 8005b3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b42:	1c59      	adds	r1, r3, #1
 8005b44:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005b48:	400b      	ands	r3, r1
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00a      	beq.n	8005b64 <HAL_I2C_Init+0x138>
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	1e59      	subs	r1, r3, #1
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	005b      	lsls	r3, r3, #1
 8005b58:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b62:	e051      	b.n	8005c08 <HAL_I2C_Init+0x1dc>
 8005b64:	2304      	movs	r3, #4
 8005b66:	e04f      	b.n	8005c08 <HAL_I2C_Init+0x1dc>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d111      	bne.n	8005b94 <HAL_I2C_Init+0x168>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	1e58      	subs	r0, r3, #1
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6859      	ldr	r1, [r3, #4]
 8005b78:	460b      	mov	r3, r1
 8005b7a:	005b      	lsls	r3, r3, #1
 8005b7c:	440b      	add	r3, r1
 8005b7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b82:	3301      	adds	r3, #1
 8005b84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	bf0c      	ite	eq
 8005b8c:	2301      	moveq	r3, #1
 8005b8e:	2300      	movne	r3, #0
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	e012      	b.n	8005bba <HAL_I2C_Init+0x18e>
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	1e58      	subs	r0, r3, #1
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6859      	ldr	r1, [r3, #4]
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	440b      	add	r3, r1
 8005ba2:	0099      	lsls	r1, r3, #2
 8005ba4:	440b      	add	r3, r1
 8005ba6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005baa:	3301      	adds	r3, #1
 8005bac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	bf0c      	ite	eq
 8005bb4:	2301      	moveq	r3, #1
 8005bb6:	2300      	movne	r3, #0
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d001      	beq.n	8005bc2 <HAL_I2C_Init+0x196>
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e022      	b.n	8005c08 <HAL_I2C_Init+0x1dc>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d10e      	bne.n	8005be8 <HAL_I2C_Init+0x1bc>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	1e58      	subs	r0, r3, #1
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6859      	ldr	r1, [r3, #4]
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	005b      	lsls	r3, r3, #1
 8005bd6:	440b      	add	r3, r1
 8005bd8:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bdc:	3301      	adds	r3, #1
 8005bde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005be2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005be6:	e00f      	b.n	8005c08 <HAL_I2C_Init+0x1dc>
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	1e58      	subs	r0, r3, #1
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6859      	ldr	r1, [r3, #4]
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	440b      	add	r3, r1
 8005bf6:	0099      	lsls	r1, r3, #2
 8005bf8:	440b      	add	r3, r1
 8005bfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bfe:	3301      	adds	r3, #1
 8005c00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c08:	6879      	ldr	r1, [r7, #4]
 8005c0a:	6809      	ldr	r1, [r1, #0]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	69da      	ldr	r2, [r3, #28]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a1b      	ldr	r3, [r3, #32]
 8005c22:	431a      	orrs	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005c36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	6911      	ldr	r1, [r2, #16]
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	68d2      	ldr	r2, [r2, #12]
 8005c42:	4311      	orrs	r1, r2
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	6812      	ldr	r2, [r2, #0]
 8005c48:	430b      	orrs	r3, r1
 8005c4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	695a      	ldr	r2, [r3, #20]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	431a      	orrs	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	430a      	orrs	r2, r1
 8005c66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f042 0201 	orr.w	r2, r2, #1
 8005c76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2220      	movs	r2, #32
 8005c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3710      	adds	r7, #16
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	000186a0 	.word	0x000186a0
 8005ca4:	001e847f 	.word	0x001e847f
 8005ca8:	003d08ff 	.word	0x003d08ff
 8005cac:	431bde83 	.word	0x431bde83
 8005cb0:	10624dd3 	.word	0x10624dd3

08005cb4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b088      	sub	sp, #32
 8005cb8:	af02      	add	r7, sp, #8
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	4608      	mov	r0, r1
 8005cbe:	4611      	mov	r1, r2
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	817b      	strh	r3, [r7, #10]
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	813b      	strh	r3, [r7, #8]
 8005cca:	4613      	mov	r3, r2
 8005ccc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005cce:	f7ff fb47 	bl	8005360 <HAL_GetTick>
 8005cd2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	2b20      	cmp	r3, #32
 8005cde:	f040 80d9 	bne.w	8005e94 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	9300      	str	r3, [sp, #0]
 8005ce6:	2319      	movs	r3, #25
 8005ce8:	2201      	movs	r2, #1
 8005cea:	496d      	ldr	r1, [pc, #436]	; (8005ea0 <HAL_I2C_Mem_Write+0x1ec>)
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	f000 fcc1 	bl	8006674 <I2C_WaitOnFlagUntilTimeout>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d001      	beq.n	8005cfc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005cf8:	2302      	movs	r3, #2
 8005cfa:	e0cc      	b.n	8005e96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d101      	bne.n	8005d0a <HAL_I2C_Mem_Write+0x56>
 8005d06:	2302      	movs	r3, #2
 8005d08:	e0c5      	b.n	8005e96 <HAL_I2C_Mem_Write+0x1e2>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 0301 	and.w	r3, r3, #1
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d007      	beq.n	8005d30 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f042 0201 	orr.w	r2, r2, #1
 8005d2e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d3e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2221      	movs	r2, #33	; 0x21
 8005d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2240      	movs	r2, #64	; 0x40
 8005d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6a3a      	ldr	r2, [r7, #32]
 8005d5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005d60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	4a4d      	ldr	r2, [pc, #308]	; (8005ea4 <HAL_I2C_Mem_Write+0x1f0>)
 8005d70:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d72:	88f8      	ldrh	r0, [r7, #6]
 8005d74:	893a      	ldrh	r2, [r7, #8]
 8005d76:	8979      	ldrh	r1, [r7, #10]
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	9301      	str	r3, [sp, #4]
 8005d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7e:	9300      	str	r3, [sp, #0]
 8005d80:	4603      	mov	r3, r0
 8005d82:	68f8      	ldr	r0, [r7, #12]
 8005d84:	f000 faf8 	bl	8006378 <I2C_RequestMemoryWrite>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d052      	beq.n	8005e34 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e081      	b.n	8005e96 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	f000 fd86 	bl	80068a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00d      	beq.n	8005dbe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da6:	2b04      	cmp	r3, #4
 8005da8:	d107      	bne.n	8005dba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005db8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e06b      	b.n	8005e96 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc2:	781a      	ldrb	r2, [r3, #0]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dce:	1c5a      	adds	r2, r3, #1
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	b29a      	uxth	r2, r3
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	3b01      	subs	r3, #1
 8005de8:	b29a      	uxth	r2, r3
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	695b      	ldr	r3, [r3, #20]
 8005df4:	f003 0304 	and.w	r3, r3, #4
 8005df8:	2b04      	cmp	r3, #4
 8005dfa:	d11b      	bne.n	8005e34 <HAL_I2C_Mem_Write+0x180>
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d017      	beq.n	8005e34 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e08:	781a      	ldrb	r2, [r3, #0]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e14:	1c5a      	adds	r2, r3, #1
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	3b01      	subs	r3, #1
 8005e2e:	b29a      	uxth	r2, r3
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1aa      	bne.n	8005d92 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e3c:	697a      	ldr	r2, [r7, #20]
 8005e3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e40:	68f8      	ldr	r0, [r7, #12]
 8005e42:	f000 fd79 	bl	8006938 <I2C_WaitOnBTFFlagUntilTimeout>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00d      	beq.n	8005e68 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e50:	2b04      	cmp	r3, #4
 8005e52:	d107      	bne.n	8005e64 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e62:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	e016      	b.n	8005e96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2220      	movs	r2, #32
 8005e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005e90:	2300      	movs	r3, #0
 8005e92:	e000      	b.n	8005e96 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005e94:	2302      	movs	r3, #2
  }
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3718      	adds	r7, #24
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	00100002 	.word	0x00100002
 8005ea4:	ffff0000 	.word	0xffff0000

08005ea8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b08c      	sub	sp, #48	; 0x30
 8005eac:	af02      	add	r7, sp, #8
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	4608      	mov	r0, r1
 8005eb2:	4611      	mov	r1, r2
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	817b      	strh	r3, [r7, #10]
 8005eba:	460b      	mov	r3, r1
 8005ebc:	813b      	strh	r3, [r7, #8]
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005ec6:	f7ff fa4b 	bl	8005360 <HAL_GetTick>
 8005eca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	2b20      	cmp	r3, #32
 8005ed6:	f040 8244 	bne.w	8006362 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005edc:	9300      	str	r3, [sp, #0]
 8005ede:	2319      	movs	r3, #25
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	4982      	ldr	r1, [pc, #520]	; (80060ec <HAL_I2C_Mem_Read+0x244>)
 8005ee4:	68f8      	ldr	r0, [r7, #12]
 8005ee6:	f000 fbc5 	bl	8006674 <I2C_WaitOnFlagUntilTimeout>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d001      	beq.n	8005ef4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8005ef0:	2302      	movs	r3, #2
 8005ef2:	e237      	b.n	8006364 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d101      	bne.n	8005f02 <HAL_I2C_Mem_Read+0x5a>
 8005efe:	2302      	movs	r3, #2
 8005f00:	e230      	b.n	8006364 <HAL_I2C_Mem_Read+0x4bc>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2201      	movs	r2, #1
 8005f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 0301 	and.w	r3, r3, #1
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d007      	beq.n	8005f28 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f042 0201 	orr.w	r2, r2, #1
 8005f26:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f36:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2222      	movs	r2, #34	; 0x22
 8005f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2240      	movs	r2, #64	; 0x40
 8005f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005f58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	4a62      	ldr	r2, [pc, #392]	; (80060f0 <HAL_I2C_Mem_Read+0x248>)
 8005f68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f6a:	88f8      	ldrh	r0, [r7, #6]
 8005f6c:	893a      	ldrh	r2, [r7, #8]
 8005f6e:	8979      	ldrh	r1, [r7, #10]
 8005f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f72:	9301      	str	r3, [sp, #4]
 8005f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f76:	9300      	str	r3, [sp, #0]
 8005f78:	4603      	mov	r3, r0
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f000 fa92 	bl	80064a4 <I2C_RequestMemoryRead>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d001      	beq.n	8005f8a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e1ec      	b.n	8006364 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d113      	bne.n	8005fba <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f92:	2300      	movs	r3, #0
 8005f94:	61fb      	str	r3, [r7, #28]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	695b      	ldr	r3, [r3, #20]
 8005f9c:	61fb      	str	r3, [r7, #28]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	699b      	ldr	r3, [r3, #24]
 8005fa4:	61fb      	str	r3, [r7, #28]
 8005fa6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fb6:	601a      	str	r2, [r3, #0]
 8005fb8:	e1c0      	b.n	800633c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d11e      	bne.n	8006000 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fd0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005fd2:	b672      	cpsid	i
}
 8005fd4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	61bb      	str	r3, [r7, #24]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	695b      	ldr	r3, [r3, #20]
 8005fe0:	61bb      	str	r3, [r7, #24]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	699b      	ldr	r3, [r3, #24]
 8005fe8:	61bb      	str	r3, [r7, #24]
 8005fea:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ffa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005ffc:	b662      	cpsie	i
}
 8005ffe:	e035      	b.n	800606c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006004:	2b02      	cmp	r3, #2
 8006006:	d11e      	bne.n	8006046 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006016:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006018:	b672      	cpsid	i
}
 800601a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800601c:	2300      	movs	r3, #0
 800601e:	617b      	str	r3, [r7, #20]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	617b      	str	r3, [r7, #20]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	617b      	str	r3, [r7, #20]
 8006030:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006040:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006042:	b662      	cpsie	i
}
 8006044:	e012      	b.n	800606c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006054:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006056:	2300      	movs	r3, #0
 8006058:	613b      	str	r3, [r7, #16]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	695b      	ldr	r3, [r3, #20]
 8006060:	613b      	str	r3, [r7, #16]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	699b      	ldr	r3, [r3, #24]
 8006068:	613b      	str	r3, [r7, #16]
 800606a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800606c:	e166      	b.n	800633c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006072:	2b03      	cmp	r3, #3
 8006074:	f200 811f 	bhi.w	80062b6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800607c:	2b01      	cmp	r3, #1
 800607e:	d123      	bne.n	80060c8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006082:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f000 fc9f 	bl	80069c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d001      	beq.n	8006094 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	e167      	b.n	8006364 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	691a      	ldr	r2, [r3, #16]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800609e:	b2d2      	uxtb	r2, r2
 80060a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a6:	1c5a      	adds	r2, r3, #1
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060b0:	3b01      	subs	r3, #1
 80060b2:	b29a      	uxth	r2, r3
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060bc:	b29b      	uxth	r3, r3
 80060be:	3b01      	subs	r3, #1
 80060c0:	b29a      	uxth	r2, r3
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80060c6:	e139      	b.n	800633c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d152      	bne.n	8006176 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80060d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d2:	9300      	str	r3, [sp, #0]
 80060d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d6:	2200      	movs	r2, #0
 80060d8:	4906      	ldr	r1, [pc, #24]	; (80060f4 <HAL_I2C_Mem_Read+0x24c>)
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f000 faca 	bl	8006674 <I2C_WaitOnFlagUntilTimeout>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d008      	beq.n	80060f8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e13c      	b.n	8006364 <HAL_I2C_Mem_Read+0x4bc>
 80060ea:	bf00      	nop
 80060ec:	00100002 	.word	0x00100002
 80060f0:	ffff0000 	.word	0xffff0000
 80060f4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80060f8:	b672      	cpsid	i
}
 80060fa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800610a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	691a      	ldr	r2, [r3, #16]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006116:	b2d2      	uxtb	r2, r2
 8006118:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611e:	1c5a      	adds	r2, r3, #1
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006128:	3b01      	subs	r3, #1
 800612a:	b29a      	uxth	r2, r3
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006134:	b29b      	uxth	r3, r3
 8006136:	3b01      	subs	r3, #1
 8006138:	b29a      	uxth	r2, r3
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800613e:	b662      	cpsie	i
}
 8006140:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	691a      	ldr	r2, [r3, #16]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614c:	b2d2      	uxtb	r2, r2
 800614e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006154:	1c5a      	adds	r2, r3, #1
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800615e:	3b01      	subs	r3, #1
 8006160:	b29a      	uxth	r2, r3
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800616a:	b29b      	uxth	r3, r3
 800616c:	3b01      	subs	r3, #1
 800616e:	b29a      	uxth	r2, r3
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006174:	e0e2      	b.n	800633c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006178:	9300      	str	r3, [sp, #0]
 800617a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800617c:	2200      	movs	r2, #0
 800617e:	497b      	ldr	r1, [pc, #492]	; (800636c <HAL_I2C_Mem_Read+0x4c4>)
 8006180:	68f8      	ldr	r0, [r7, #12]
 8006182:	f000 fa77 	bl	8006674 <I2C_WaitOnFlagUntilTimeout>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d001      	beq.n	8006190 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e0e9      	b.n	8006364 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800619e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80061a0:	b672      	cpsid	i
}
 80061a2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	691a      	ldr	r2, [r3, #16]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ae:	b2d2      	uxtb	r2, r2
 80061b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b6:	1c5a      	adds	r2, r3, #1
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061c0:	3b01      	subs	r3, #1
 80061c2:	b29a      	uxth	r2, r3
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	3b01      	subs	r3, #1
 80061d0:	b29a      	uxth	r2, r3
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80061d6:	4b66      	ldr	r3, [pc, #408]	; (8006370 <HAL_I2C_Mem_Read+0x4c8>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	08db      	lsrs	r3, r3, #3
 80061dc:	4a65      	ldr	r2, [pc, #404]	; (8006374 <HAL_I2C_Mem_Read+0x4cc>)
 80061de:	fba2 2303 	umull	r2, r3, r2, r3
 80061e2:	0a1a      	lsrs	r2, r3, #8
 80061e4:	4613      	mov	r3, r2
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	4413      	add	r3, r2
 80061ea:	00da      	lsls	r2, r3, #3
 80061ec:	1ad3      	subs	r3, r2, r3
 80061ee:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80061f0:	6a3b      	ldr	r3, [r7, #32]
 80061f2:	3b01      	subs	r3, #1
 80061f4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80061f6:	6a3b      	ldr	r3, [r7, #32]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d118      	bne.n	800622e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2200      	movs	r2, #0
 8006200:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2220      	movs	r2, #32
 8006206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2200      	movs	r2, #0
 800620e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006216:	f043 0220 	orr.w	r2, r3, #32
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800621e:	b662      	cpsie	i
}
 8006220:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e09a      	b.n	8006364 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	695b      	ldr	r3, [r3, #20]
 8006234:	f003 0304 	and.w	r3, r3, #4
 8006238:	2b04      	cmp	r3, #4
 800623a:	d1d9      	bne.n	80061f0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800624a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	691a      	ldr	r2, [r3, #16]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006256:	b2d2      	uxtb	r2, r2
 8006258:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625e:	1c5a      	adds	r2, r3, #1
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006268:	3b01      	subs	r3, #1
 800626a:	b29a      	uxth	r2, r3
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006274:	b29b      	uxth	r3, r3
 8006276:	3b01      	subs	r3, #1
 8006278:	b29a      	uxth	r2, r3
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800627e:	b662      	cpsie	i
}
 8006280:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	691a      	ldr	r2, [r3, #16]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628c:	b2d2      	uxtb	r2, r2
 800628e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006294:	1c5a      	adds	r2, r3, #1
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800629e:	3b01      	subs	r3, #1
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	3b01      	subs	r3, #1
 80062ae:	b29a      	uxth	r2, r3
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80062b4:	e042      	b.n	800633c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80062ba:	68f8      	ldr	r0, [r7, #12]
 80062bc:	f000 fb84 	bl	80069c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d001      	beq.n	80062ca <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e04c      	b.n	8006364 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	691a      	ldr	r2, [r3, #16]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d4:	b2d2      	uxtb	r2, r2
 80062d6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062dc:	1c5a      	adds	r2, r3, #1
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062e6:	3b01      	subs	r3, #1
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	3b01      	subs	r3, #1
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	695b      	ldr	r3, [r3, #20]
 8006302:	f003 0304 	and.w	r3, r3, #4
 8006306:	2b04      	cmp	r3, #4
 8006308:	d118      	bne.n	800633c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	691a      	ldr	r2, [r3, #16]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006314:	b2d2      	uxtb	r2, r2
 8006316:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631c:	1c5a      	adds	r2, r3, #1
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006326:	3b01      	subs	r3, #1
 8006328:	b29a      	uxth	r2, r3
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006332:	b29b      	uxth	r3, r3
 8006334:	3b01      	subs	r3, #1
 8006336:	b29a      	uxth	r2, r3
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006340:	2b00      	cmp	r3, #0
 8006342:	f47f ae94 	bne.w	800606e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2220      	movs	r2, #32
 800634a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2200      	movs	r2, #0
 8006352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2200      	movs	r2, #0
 800635a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800635e:	2300      	movs	r3, #0
 8006360:	e000      	b.n	8006364 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8006362:	2302      	movs	r3, #2
  }
}
 8006364:	4618      	mov	r0, r3
 8006366:	3728      	adds	r7, #40	; 0x28
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}
 800636c:	00010004 	.word	0x00010004
 8006370:	2000004c 	.word	0x2000004c
 8006374:	14f8b589 	.word	0x14f8b589

08006378 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b088      	sub	sp, #32
 800637c:	af02      	add	r7, sp, #8
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	4608      	mov	r0, r1
 8006382:	4611      	mov	r1, r2
 8006384:	461a      	mov	r2, r3
 8006386:	4603      	mov	r3, r0
 8006388:	817b      	strh	r3, [r7, #10]
 800638a:	460b      	mov	r3, r1
 800638c:	813b      	strh	r3, [r7, #8]
 800638e:	4613      	mov	r3, r2
 8006390:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	6a3b      	ldr	r3, [r7, #32]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80063ae:	68f8      	ldr	r0, [r7, #12]
 80063b0:	f000 f960 	bl	8006674 <I2C_WaitOnFlagUntilTimeout>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d00d      	beq.n	80063d6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063c8:	d103      	bne.n	80063d2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80063d2:	2303      	movs	r3, #3
 80063d4:	e05f      	b.n	8006496 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80063d6:	897b      	ldrh	r3, [r7, #10]
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	461a      	mov	r2, r3
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80063e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80063e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e8:	6a3a      	ldr	r2, [r7, #32]
 80063ea:	492d      	ldr	r1, [pc, #180]	; (80064a0 <I2C_RequestMemoryWrite+0x128>)
 80063ec:	68f8      	ldr	r0, [r7, #12]
 80063ee:	f000 f9bb 	bl	8006768 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d001      	beq.n	80063fc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e04c      	b.n	8006496 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063fc:	2300      	movs	r3, #0
 80063fe:	617b      	str	r3, [r7, #20]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	695b      	ldr	r3, [r3, #20]
 8006406:	617b      	str	r3, [r7, #20]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	699b      	ldr	r3, [r3, #24]
 800640e:	617b      	str	r3, [r7, #20]
 8006410:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006414:	6a39      	ldr	r1, [r7, #32]
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f000 fa46 	bl	80068a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00d      	beq.n	800643e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006426:	2b04      	cmp	r3, #4
 8006428:	d107      	bne.n	800643a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006438:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	e02b      	b.n	8006496 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800643e:	88fb      	ldrh	r3, [r7, #6]
 8006440:	2b01      	cmp	r3, #1
 8006442:	d105      	bne.n	8006450 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006444:	893b      	ldrh	r3, [r7, #8]
 8006446:	b2da      	uxtb	r2, r3
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	611a      	str	r2, [r3, #16]
 800644e:	e021      	b.n	8006494 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006450:	893b      	ldrh	r3, [r7, #8]
 8006452:	0a1b      	lsrs	r3, r3, #8
 8006454:	b29b      	uxth	r3, r3
 8006456:	b2da      	uxtb	r2, r3
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800645e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006460:	6a39      	ldr	r1, [r7, #32]
 8006462:	68f8      	ldr	r0, [r7, #12]
 8006464:	f000 fa20 	bl	80068a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006468:	4603      	mov	r3, r0
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00d      	beq.n	800648a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006472:	2b04      	cmp	r3, #4
 8006474:	d107      	bne.n	8006486 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006484:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e005      	b.n	8006496 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800648a:	893b      	ldrh	r3, [r7, #8]
 800648c:	b2da      	uxtb	r2, r3
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	3718      	adds	r7, #24
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	00010002 	.word	0x00010002

080064a4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b088      	sub	sp, #32
 80064a8:	af02      	add	r7, sp, #8
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	4608      	mov	r0, r1
 80064ae:	4611      	mov	r1, r2
 80064b0:	461a      	mov	r2, r3
 80064b2:	4603      	mov	r3, r0
 80064b4:	817b      	strh	r3, [r7, #10]
 80064b6:	460b      	mov	r3, r1
 80064b8:	813b      	strh	r3, [r7, #8]
 80064ba:	4613      	mov	r3, r2
 80064bc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80064cc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80064de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e0:	9300      	str	r3, [sp, #0]
 80064e2:	6a3b      	ldr	r3, [r7, #32]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80064ea:	68f8      	ldr	r0, [r7, #12]
 80064ec:	f000 f8c2 	bl	8006674 <I2C_WaitOnFlagUntilTimeout>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00d      	beq.n	8006512 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006500:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006504:	d103      	bne.n	800650e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f44f 7200 	mov.w	r2, #512	; 0x200
 800650c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800650e:	2303      	movs	r3, #3
 8006510:	e0aa      	b.n	8006668 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006512:	897b      	ldrh	r3, [r7, #10]
 8006514:	b2db      	uxtb	r3, r3
 8006516:	461a      	mov	r2, r3
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006520:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006524:	6a3a      	ldr	r2, [r7, #32]
 8006526:	4952      	ldr	r1, [pc, #328]	; (8006670 <I2C_RequestMemoryRead+0x1cc>)
 8006528:	68f8      	ldr	r0, [r7, #12]
 800652a:	f000 f91d 	bl	8006768 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800652e:	4603      	mov	r3, r0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d001      	beq.n	8006538 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	e097      	b.n	8006668 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006538:	2300      	movs	r3, #0
 800653a:	617b      	str	r3, [r7, #20]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	695b      	ldr	r3, [r3, #20]
 8006542:	617b      	str	r3, [r7, #20]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	699b      	ldr	r3, [r3, #24]
 800654a:	617b      	str	r3, [r7, #20]
 800654c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800654e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006550:	6a39      	ldr	r1, [r7, #32]
 8006552:	68f8      	ldr	r0, [r7, #12]
 8006554:	f000 f9a8 	bl	80068a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00d      	beq.n	800657a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006562:	2b04      	cmp	r3, #4
 8006564:	d107      	bne.n	8006576 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006574:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e076      	b.n	8006668 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800657a:	88fb      	ldrh	r3, [r7, #6]
 800657c:	2b01      	cmp	r3, #1
 800657e:	d105      	bne.n	800658c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006580:	893b      	ldrh	r3, [r7, #8]
 8006582:	b2da      	uxtb	r2, r3
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	611a      	str	r2, [r3, #16]
 800658a:	e021      	b.n	80065d0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800658c:	893b      	ldrh	r3, [r7, #8]
 800658e:	0a1b      	lsrs	r3, r3, #8
 8006590:	b29b      	uxth	r3, r3
 8006592:	b2da      	uxtb	r2, r3
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800659a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800659c:	6a39      	ldr	r1, [r7, #32]
 800659e:	68f8      	ldr	r0, [r7, #12]
 80065a0:	f000 f982 	bl	80068a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d00d      	beq.n	80065c6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ae:	2b04      	cmp	r3, #4
 80065b0:	d107      	bne.n	80065c2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e050      	b.n	8006668 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80065c6:	893b      	ldrh	r3, [r7, #8]
 80065c8:	b2da      	uxtb	r2, r3
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065d2:	6a39      	ldr	r1, [r7, #32]
 80065d4:	68f8      	ldr	r0, [r7, #12]
 80065d6:	f000 f967 	bl	80068a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80065da:	4603      	mov	r3, r0
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d00d      	beq.n	80065fc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e4:	2b04      	cmp	r3, #4
 80065e6:	d107      	bne.n	80065f8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065f6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e035      	b.n	8006668 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800660a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800660c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660e:	9300      	str	r3, [sp, #0]
 8006610:	6a3b      	ldr	r3, [r7, #32]
 8006612:	2200      	movs	r2, #0
 8006614:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006618:	68f8      	ldr	r0, [r7, #12]
 800661a:	f000 f82b 	bl	8006674 <I2C_WaitOnFlagUntilTimeout>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d00d      	beq.n	8006640 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800662e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006632:	d103      	bne.n	800663c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f44f 7200 	mov.w	r2, #512	; 0x200
 800663a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800663c:	2303      	movs	r3, #3
 800663e:	e013      	b.n	8006668 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006640:	897b      	ldrh	r3, [r7, #10]
 8006642:	b2db      	uxtb	r3, r3
 8006644:	f043 0301 	orr.w	r3, r3, #1
 8006648:	b2da      	uxtb	r2, r3
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006652:	6a3a      	ldr	r2, [r7, #32]
 8006654:	4906      	ldr	r1, [pc, #24]	; (8006670 <I2C_RequestMemoryRead+0x1cc>)
 8006656:	68f8      	ldr	r0, [r7, #12]
 8006658:	f000 f886 	bl	8006768 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800665c:	4603      	mov	r3, r0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d001      	beq.n	8006666 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	e000      	b.n	8006668 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006666:	2300      	movs	r3, #0
}
 8006668:	4618      	mov	r0, r3
 800666a:	3718      	adds	r7, #24
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}
 8006670:	00010002 	.word	0x00010002

08006674 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b084      	sub	sp, #16
 8006678:	af00      	add	r7, sp, #0
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	603b      	str	r3, [r7, #0]
 8006680:	4613      	mov	r3, r2
 8006682:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006684:	e048      	b.n	8006718 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800668c:	d044      	beq.n	8006718 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800668e:	f7fe fe67 	bl	8005360 <HAL_GetTick>
 8006692:	4602      	mov	r2, r0
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	1ad3      	subs	r3, r2, r3
 8006698:	683a      	ldr	r2, [r7, #0]
 800669a:	429a      	cmp	r2, r3
 800669c:	d302      	bcc.n	80066a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d139      	bne.n	8006718 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	0c1b      	lsrs	r3, r3, #16
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d10d      	bne.n	80066ca <I2C_WaitOnFlagUntilTimeout+0x56>
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	695b      	ldr	r3, [r3, #20]
 80066b4:	43da      	mvns	r2, r3
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	4013      	ands	r3, r2
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	2b00      	cmp	r3, #0
 80066be:	bf0c      	ite	eq
 80066c0:	2301      	moveq	r3, #1
 80066c2:	2300      	movne	r3, #0
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	461a      	mov	r2, r3
 80066c8:	e00c      	b.n	80066e4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	699b      	ldr	r3, [r3, #24]
 80066d0:	43da      	mvns	r2, r3
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	4013      	ands	r3, r2
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	2b00      	cmp	r3, #0
 80066da:	bf0c      	ite	eq
 80066dc:	2301      	moveq	r3, #1
 80066de:	2300      	movne	r3, #0
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	461a      	mov	r2, r3
 80066e4:	79fb      	ldrb	r3, [r7, #7]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d116      	bne.n	8006718 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2200      	movs	r2, #0
 80066ee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2220      	movs	r2, #32
 80066f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006704:	f043 0220 	orr.w	r2, r3, #32
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	e023      	b.n	8006760 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	0c1b      	lsrs	r3, r3, #16
 800671c:	b2db      	uxtb	r3, r3
 800671e:	2b01      	cmp	r3, #1
 8006720:	d10d      	bne.n	800673e <I2C_WaitOnFlagUntilTimeout+0xca>
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	695b      	ldr	r3, [r3, #20]
 8006728:	43da      	mvns	r2, r3
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	4013      	ands	r3, r2
 800672e:	b29b      	uxth	r3, r3
 8006730:	2b00      	cmp	r3, #0
 8006732:	bf0c      	ite	eq
 8006734:	2301      	moveq	r3, #1
 8006736:	2300      	movne	r3, #0
 8006738:	b2db      	uxtb	r3, r3
 800673a:	461a      	mov	r2, r3
 800673c:	e00c      	b.n	8006758 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	699b      	ldr	r3, [r3, #24]
 8006744:	43da      	mvns	r2, r3
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	4013      	ands	r3, r2
 800674a:	b29b      	uxth	r3, r3
 800674c:	2b00      	cmp	r3, #0
 800674e:	bf0c      	ite	eq
 8006750:	2301      	moveq	r3, #1
 8006752:	2300      	movne	r3, #0
 8006754:	b2db      	uxtb	r3, r3
 8006756:	461a      	mov	r2, r3
 8006758:	79fb      	ldrb	r3, [r7, #7]
 800675a:	429a      	cmp	r2, r3
 800675c:	d093      	beq.n	8006686 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	3710      	adds	r7, #16
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	607a      	str	r2, [r7, #4]
 8006774:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006776:	e071      	b.n	800685c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006782:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006786:	d123      	bne.n	80067d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006796:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80067a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2200      	movs	r2, #0
 80067a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2220      	movs	r2, #32
 80067ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067bc:	f043 0204 	orr.w	r2, r3, #4
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e067      	b.n	80068a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d6:	d041      	beq.n	800685c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067d8:	f7fe fdc2 	bl	8005360 <HAL_GetTick>
 80067dc:	4602      	mov	r2, r0
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d302      	bcc.n	80067ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d136      	bne.n	800685c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	0c1b      	lsrs	r3, r3, #16
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d10c      	bne.n	8006812 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	695b      	ldr	r3, [r3, #20]
 80067fe:	43da      	mvns	r2, r3
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	4013      	ands	r3, r2
 8006804:	b29b      	uxth	r3, r3
 8006806:	2b00      	cmp	r3, #0
 8006808:	bf14      	ite	ne
 800680a:	2301      	movne	r3, #1
 800680c:	2300      	moveq	r3, #0
 800680e:	b2db      	uxtb	r3, r3
 8006810:	e00b      	b.n	800682a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	699b      	ldr	r3, [r3, #24]
 8006818:	43da      	mvns	r2, r3
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	4013      	ands	r3, r2
 800681e:	b29b      	uxth	r3, r3
 8006820:	2b00      	cmp	r3, #0
 8006822:	bf14      	ite	ne
 8006824:	2301      	movne	r3, #1
 8006826:	2300      	moveq	r3, #0
 8006828:	b2db      	uxtb	r3, r3
 800682a:	2b00      	cmp	r3, #0
 800682c:	d016      	beq.n	800685c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2200      	movs	r2, #0
 8006832:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2220      	movs	r2, #32
 8006838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2200      	movs	r2, #0
 8006840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006848:	f043 0220 	orr.w	r2, r3, #32
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2200      	movs	r2, #0
 8006854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	e021      	b.n	80068a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	0c1b      	lsrs	r3, r3, #16
 8006860:	b2db      	uxtb	r3, r3
 8006862:	2b01      	cmp	r3, #1
 8006864:	d10c      	bne.n	8006880 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	695b      	ldr	r3, [r3, #20]
 800686c:	43da      	mvns	r2, r3
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	4013      	ands	r3, r2
 8006872:	b29b      	uxth	r3, r3
 8006874:	2b00      	cmp	r3, #0
 8006876:	bf14      	ite	ne
 8006878:	2301      	movne	r3, #1
 800687a:	2300      	moveq	r3, #0
 800687c:	b2db      	uxtb	r3, r3
 800687e:	e00b      	b.n	8006898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	699b      	ldr	r3, [r3, #24]
 8006886:	43da      	mvns	r2, r3
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	4013      	ands	r3, r2
 800688c:	b29b      	uxth	r3, r3
 800688e:	2b00      	cmp	r3, #0
 8006890:	bf14      	ite	ne
 8006892:	2301      	movne	r3, #1
 8006894:	2300      	moveq	r3, #0
 8006896:	b2db      	uxtb	r3, r3
 8006898:	2b00      	cmp	r3, #0
 800689a:	f47f af6d 	bne.w	8006778 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3710      	adds	r7, #16
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80068b4:	e034      	b.n	8006920 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f000 f8e3 	bl	8006a82 <I2C_IsAcknowledgeFailed>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d001      	beq.n	80068c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	e034      	b.n	8006930 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068cc:	d028      	beq.n	8006920 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068ce:	f7fe fd47 	bl	8005360 <HAL_GetTick>
 80068d2:	4602      	mov	r2, r0
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	1ad3      	subs	r3, r2, r3
 80068d8:	68ba      	ldr	r2, [r7, #8]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d302      	bcc.n	80068e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d11d      	bne.n	8006920 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	695b      	ldr	r3, [r3, #20]
 80068ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ee:	2b80      	cmp	r3, #128	; 0x80
 80068f0:	d016      	beq.n	8006920 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2200      	movs	r2, #0
 80068f6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2220      	movs	r2, #32
 80068fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690c:	f043 0220 	orr.w	r2, r3, #32
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2200      	movs	r2, #0
 8006918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	e007      	b.n	8006930 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	695b      	ldr	r3, [r3, #20]
 8006926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800692a:	2b80      	cmp	r3, #128	; 0x80
 800692c:	d1c3      	bne.n	80068b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3710      	adds	r7, #16
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006944:	e034      	b.n	80069b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006946:	68f8      	ldr	r0, [r7, #12]
 8006948:	f000 f89b 	bl	8006a82 <I2C_IsAcknowledgeFailed>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	d001      	beq.n	8006956 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e034      	b.n	80069c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800695c:	d028      	beq.n	80069b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800695e:	f7fe fcff 	bl	8005360 <HAL_GetTick>
 8006962:	4602      	mov	r2, r0
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	1ad3      	subs	r3, r2, r3
 8006968:	68ba      	ldr	r2, [r7, #8]
 800696a:	429a      	cmp	r2, r3
 800696c:	d302      	bcc.n	8006974 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d11d      	bne.n	80069b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	695b      	ldr	r3, [r3, #20]
 800697a:	f003 0304 	and.w	r3, r3, #4
 800697e:	2b04      	cmp	r3, #4
 8006980:	d016      	beq.n	80069b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2200      	movs	r2, #0
 8006986:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2220      	movs	r2, #32
 800698c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699c:	f043 0220 	orr.w	r2, r3, #32
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	e007      	b.n	80069c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	695b      	ldr	r3, [r3, #20]
 80069b6:	f003 0304 	and.w	r3, r3, #4
 80069ba:	2b04      	cmp	r3, #4
 80069bc:	d1c3      	bne.n	8006946 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80069be:	2300      	movs	r3, #0
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3710      	adds	r7, #16
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80069d4:	e049      	b.n	8006a6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	695b      	ldr	r3, [r3, #20]
 80069dc:	f003 0310 	and.w	r3, r3, #16
 80069e0:	2b10      	cmp	r3, #16
 80069e2:	d119      	bne.n	8006a18 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f06f 0210 	mvn.w	r2, #16
 80069ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2200      	movs	r2, #0
 80069f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2220      	movs	r2, #32
 80069f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	e030      	b.n	8006a7a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a18:	f7fe fca2 	bl	8005360 <HAL_GetTick>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	68ba      	ldr	r2, [r7, #8]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d302      	bcc.n	8006a2e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d11d      	bne.n	8006a6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	695b      	ldr	r3, [r3, #20]
 8006a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a38:	2b40      	cmp	r3, #64	; 0x40
 8006a3a:	d016      	beq.n	8006a6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2220      	movs	r2, #32
 8006a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a56:	f043 0220 	orr.w	r2, r3, #32
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	e007      	b.n	8006a7a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	695b      	ldr	r3, [r3, #20]
 8006a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a74:	2b40      	cmp	r3, #64	; 0x40
 8006a76:	d1ae      	bne.n	80069d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3710      	adds	r7, #16
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006a82:	b480      	push	{r7}
 8006a84:	b083      	sub	sp, #12
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	695b      	ldr	r3, [r3, #20]
 8006a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a98:	d11b      	bne.n	8006ad2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006aa2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2220      	movs	r2, #32
 8006aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006abe:	f043 0204 	orr.w	r2, r3, #4
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e000      	b.n	8006ad4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	370c      	adds	r7, #12
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bc80      	pop	{r7}
 8006adc:	4770      	bx	lr
	...

08006ae0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b086      	sub	sp, #24
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d101      	bne.n	8006af2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	e272      	b.n	8006fd8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f003 0301 	and.w	r3, r3, #1
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	f000 8087 	beq.w	8006c0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006b00:	4b92      	ldr	r3, [pc, #584]	; (8006d4c <HAL_RCC_OscConfig+0x26c>)
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	f003 030c 	and.w	r3, r3, #12
 8006b08:	2b04      	cmp	r3, #4
 8006b0a:	d00c      	beq.n	8006b26 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006b0c:	4b8f      	ldr	r3, [pc, #572]	; (8006d4c <HAL_RCC_OscConfig+0x26c>)
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	f003 030c 	and.w	r3, r3, #12
 8006b14:	2b08      	cmp	r3, #8
 8006b16:	d112      	bne.n	8006b3e <HAL_RCC_OscConfig+0x5e>
 8006b18:	4b8c      	ldr	r3, [pc, #560]	; (8006d4c <HAL_RCC_OscConfig+0x26c>)
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b24:	d10b      	bne.n	8006b3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b26:	4b89      	ldr	r3, [pc, #548]	; (8006d4c <HAL_RCC_OscConfig+0x26c>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d06c      	beq.n	8006c0c <HAL_RCC_OscConfig+0x12c>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d168      	bne.n	8006c0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e24c      	b.n	8006fd8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b46:	d106      	bne.n	8006b56 <HAL_RCC_OscConfig+0x76>
 8006b48:	4b80      	ldr	r3, [pc, #512]	; (8006d4c <HAL_RCC_OscConfig+0x26c>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a7f      	ldr	r2, [pc, #508]	; (8006d4c <HAL_RCC_OscConfig+0x26c>)
 8006b4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b52:	6013      	str	r3, [r2, #0]
 8006b54:	e02e      	b.n	8006bb4 <HAL_RCC_OscConfig+0xd4>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d10c      	bne.n	8006b78 <HAL_RCC_OscConfig+0x98>
 8006b5e:	4b7b      	ldr	r3, [pc, #492]	; (8006d4c <HAL_RCC_OscConfig+0x26c>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a7a      	ldr	r2, [pc, #488]	; (8006d4c <HAL_RCC_OscConfig+0x26c>)
 8006b64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b68:	6013      	str	r3, [r2, #0]
 8006b6a:	4b78      	ldr	r3, [pc, #480]	; (8006d4c <HAL_RCC_OscConfig+0x26c>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a77      	ldr	r2, [pc, #476]	; (8006d4c <HAL_RCC_OscConfig+0x26c>)
 8006b70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b74:	6013      	str	r3, [r2, #0]
 8006b76:	e01d      	b.n	8006bb4 <HAL_RCC_OscConfig+0xd4>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b80:	d10c      	bne.n	8006b9c <HAL_RCC_OscConfig+0xbc>
 8006b82:	4b72      	ldr	r3, [pc, #456]	; (8006d4c <HAL_RCC_OscConfig+0x26c>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a71      	ldr	r2, [pc, #452]	; (8006d4c <HAL_RCC_OscConfig+0x26c>)
 8006b88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b8c:	6013      	str	r3, [r2, #0]
 8006b8e:	4b6f      	ldr	r3, [pc, #444]	; (8006d4c <HAL_RCC_OscConfig+0x26c>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a6e      	ldr	r2, [pc, #440]	; (8006d4c <HAL_RCC_OscConfig+0x26c>)
 8006b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b98:	6013      	str	r3, [r2, #0]
 8006b9a:	e00b      	b.n	8006bb4 <HAL_RCC_OscConfig+0xd4>
 8006b9c:	4b6b      	ldr	r3, [pc, #428]	; (8006d4c <HAL_RCC_OscConfig+0x26c>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a6a      	ldr	r2, [pc, #424]	; (8006d4c <HAL_RCC_OscConfig+0x26c>)
 8006ba2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ba6:	6013      	str	r3, [r2, #0]
 8006ba8:	4b68      	ldr	r3, [pc, #416]	; (8006d4c <HAL_RCC_OscConfig+0x26c>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a67      	ldr	r2, [pc, #412]	; (8006d4c <HAL_RCC_OscConfig+0x26c>)
 8006bae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006bb2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d013      	beq.n	8006be4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bbc:	f7fe fbd0 	bl	8005360 <HAL_GetTick>
 8006bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bc2:	e008      	b.n	8006bd6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006bc4:	f7fe fbcc 	bl	8005360 <HAL_GetTick>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	1ad3      	subs	r3, r2, r3
 8006bce:	2b64      	cmp	r3, #100	; 0x64
 8006bd0:	d901      	bls.n	8006bd6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	e200      	b.n	8006fd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bd6:	4b5d      	ldr	r3, [pc, #372]	; (8006d4c <HAL_RCC_OscConfig+0x26c>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d0f0      	beq.n	8006bc4 <HAL_RCC_OscConfig+0xe4>
 8006be2:	e014      	b.n	8006c0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006be4:	f7fe fbbc 	bl	8005360 <HAL_GetTick>
 8006be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bea:	e008      	b.n	8006bfe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006bec:	f7fe fbb8 	bl	8005360 <HAL_GetTick>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	1ad3      	subs	r3, r2, r3
 8006bf6:	2b64      	cmp	r3, #100	; 0x64
 8006bf8:	d901      	bls.n	8006bfe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006bfa:	2303      	movs	r3, #3
 8006bfc:	e1ec      	b.n	8006fd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bfe:	4b53      	ldr	r3, [pc, #332]	; (8006d4c <HAL_RCC_OscConfig+0x26c>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d1f0      	bne.n	8006bec <HAL_RCC_OscConfig+0x10c>
 8006c0a:	e000      	b.n	8006c0e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f003 0302 	and.w	r3, r3, #2
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d063      	beq.n	8006ce2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006c1a:	4b4c      	ldr	r3, [pc, #304]	; (8006d4c <HAL_RCC_OscConfig+0x26c>)
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	f003 030c 	and.w	r3, r3, #12
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d00b      	beq.n	8006c3e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006c26:	4b49      	ldr	r3, [pc, #292]	; (8006d4c <HAL_RCC_OscConfig+0x26c>)
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	f003 030c 	and.w	r3, r3, #12
 8006c2e:	2b08      	cmp	r3, #8
 8006c30:	d11c      	bne.n	8006c6c <HAL_RCC_OscConfig+0x18c>
 8006c32:	4b46      	ldr	r3, [pc, #280]	; (8006d4c <HAL_RCC_OscConfig+0x26c>)
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d116      	bne.n	8006c6c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c3e:	4b43      	ldr	r3, [pc, #268]	; (8006d4c <HAL_RCC_OscConfig+0x26c>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 0302 	and.w	r3, r3, #2
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d005      	beq.n	8006c56 <HAL_RCC_OscConfig+0x176>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	691b      	ldr	r3, [r3, #16]
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d001      	beq.n	8006c56 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	e1c0      	b.n	8006fd8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c56:	4b3d      	ldr	r3, [pc, #244]	; (8006d4c <HAL_RCC_OscConfig+0x26c>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	695b      	ldr	r3, [r3, #20]
 8006c62:	00db      	lsls	r3, r3, #3
 8006c64:	4939      	ldr	r1, [pc, #228]	; (8006d4c <HAL_RCC_OscConfig+0x26c>)
 8006c66:	4313      	orrs	r3, r2
 8006c68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c6a:	e03a      	b.n	8006ce2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d020      	beq.n	8006cb6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c74:	4b36      	ldr	r3, [pc, #216]	; (8006d50 <HAL_RCC_OscConfig+0x270>)
 8006c76:	2201      	movs	r2, #1
 8006c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c7a:	f7fe fb71 	bl	8005360 <HAL_GetTick>
 8006c7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c80:	e008      	b.n	8006c94 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c82:	f7fe fb6d 	bl	8005360 <HAL_GetTick>
 8006c86:	4602      	mov	r2, r0
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	1ad3      	subs	r3, r2, r3
 8006c8c:	2b02      	cmp	r3, #2
 8006c8e:	d901      	bls.n	8006c94 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006c90:	2303      	movs	r3, #3
 8006c92:	e1a1      	b.n	8006fd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c94:	4b2d      	ldr	r3, [pc, #180]	; (8006d4c <HAL_RCC_OscConfig+0x26c>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f003 0302 	and.w	r3, r3, #2
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d0f0      	beq.n	8006c82 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ca0:	4b2a      	ldr	r3, [pc, #168]	; (8006d4c <HAL_RCC_OscConfig+0x26c>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	695b      	ldr	r3, [r3, #20]
 8006cac:	00db      	lsls	r3, r3, #3
 8006cae:	4927      	ldr	r1, [pc, #156]	; (8006d4c <HAL_RCC_OscConfig+0x26c>)
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	600b      	str	r3, [r1, #0]
 8006cb4:	e015      	b.n	8006ce2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006cb6:	4b26      	ldr	r3, [pc, #152]	; (8006d50 <HAL_RCC_OscConfig+0x270>)
 8006cb8:	2200      	movs	r2, #0
 8006cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cbc:	f7fe fb50 	bl	8005360 <HAL_GetTick>
 8006cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cc2:	e008      	b.n	8006cd6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cc4:	f7fe fb4c 	bl	8005360 <HAL_GetTick>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	1ad3      	subs	r3, r2, r3
 8006cce:	2b02      	cmp	r3, #2
 8006cd0:	d901      	bls.n	8006cd6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006cd2:	2303      	movs	r3, #3
 8006cd4:	e180      	b.n	8006fd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cd6:	4b1d      	ldr	r3, [pc, #116]	; (8006d4c <HAL_RCC_OscConfig+0x26c>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 0302 	and.w	r3, r3, #2
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d1f0      	bne.n	8006cc4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 0308 	and.w	r3, r3, #8
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d03a      	beq.n	8006d64 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	699b      	ldr	r3, [r3, #24]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d019      	beq.n	8006d2a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006cf6:	4b17      	ldr	r3, [pc, #92]	; (8006d54 <HAL_RCC_OscConfig+0x274>)
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cfc:	f7fe fb30 	bl	8005360 <HAL_GetTick>
 8006d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d02:	e008      	b.n	8006d16 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d04:	f7fe fb2c 	bl	8005360 <HAL_GetTick>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	1ad3      	subs	r3, r2, r3
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	d901      	bls.n	8006d16 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006d12:	2303      	movs	r3, #3
 8006d14:	e160      	b.n	8006fd8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d16:	4b0d      	ldr	r3, [pc, #52]	; (8006d4c <HAL_RCC_OscConfig+0x26c>)
 8006d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1a:	f003 0302 	and.w	r3, r3, #2
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d0f0      	beq.n	8006d04 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006d22:	2001      	movs	r0, #1
 8006d24:	f000 face 	bl	80072c4 <RCC_Delay>
 8006d28:	e01c      	b.n	8006d64 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d2a:	4b0a      	ldr	r3, [pc, #40]	; (8006d54 <HAL_RCC_OscConfig+0x274>)
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d30:	f7fe fb16 	bl	8005360 <HAL_GetTick>
 8006d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d36:	e00f      	b.n	8006d58 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d38:	f7fe fb12 	bl	8005360 <HAL_GetTick>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	1ad3      	subs	r3, r2, r3
 8006d42:	2b02      	cmp	r3, #2
 8006d44:	d908      	bls.n	8006d58 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006d46:	2303      	movs	r3, #3
 8006d48:	e146      	b.n	8006fd8 <HAL_RCC_OscConfig+0x4f8>
 8006d4a:	bf00      	nop
 8006d4c:	40021000 	.word	0x40021000
 8006d50:	42420000 	.word	0x42420000
 8006d54:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d58:	4b92      	ldr	r3, [pc, #584]	; (8006fa4 <HAL_RCC_OscConfig+0x4c4>)
 8006d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5c:	f003 0302 	and.w	r3, r3, #2
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d1e9      	bne.n	8006d38 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 0304 	and.w	r3, r3, #4
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	f000 80a6 	beq.w	8006ebe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d72:	2300      	movs	r3, #0
 8006d74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d76:	4b8b      	ldr	r3, [pc, #556]	; (8006fa4 <HAL_RCC_OscConfig+0x4c4>)
 8006d78:	69db      	ldr	r3, [r3, #28]
 8006d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d10d      	bne.n	8006d9e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d82:	4b88      	ldr	r3, [pc, #544]	; (8006fa4 <HAL_RCC_OscConfig+0x4c4>)
 8006d84:	69db      	ldr	r3, [r3, #28]
 8006d86:	4a87      	ldr	r2, [pc, #540]	; (8006fa4 <HAL_RCC_OscConfig+0x4c4>)
 8006d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d8c:	61d3      	str	r3, [r2, #28]
 8006d8e:	4b85      	ldr	r3, [pc, #532]	; (8006fa4 <HAL_RCC_OscConfig+0x4c4>)
 8006d90:	69db      	ldr	r3, [r3, #28]
 8006d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d96:	60bb      	str	r3, [r7, #8]
 8006d98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d9e:	4b82      	ldr	r3, [pc, #520]	; (8006fa8 <HAL_RCC_OscConfig+0x4c8>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d118      	bne.n	8006ddc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006daa:	4b7f      	ldr	r3, [pc, #508]	; (8006fa8 <HAL_RCC_OscConfig+0x4c8>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a7e      	ldr	r2, [pc, #504]	; (8006fa8 <HAL_RCC_OscConfig+0x4c8>)
 8006db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006db4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006db6:	f7fe fad3 	bl	8005360 <HAL_GetTick>
 8006dba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dbc:	e008      	b.n	8006dd0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dbe:	f7fe facf 	bl	8005360 <HAL_GetTick>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	1ad3      	subs	r3, r2, r3
 8006dc8:	2b64      	cmp	r3, #100	; 0x64
 8006dca:	d901      	bls.n	8006dd0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006dcc:	2303      	movs	r3, #3
 8006dce:	e103      	b.n	8006fd8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dd0:	4b75      	ldr	r3, [pc, #468]	; (8006fa8 <HAL_RCC_OscConfig+0x4c8>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d0f0      	beq.n	8006dbe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d106      	bne.n	8006df2 <HAL_RCC_OscConfig+0x312>
 8006de4:	4b6f      	ldr	r3, [pc, #444]	; (8006fa4 <HAL_RCC_OscConfig+0x4c4>)
 8006de6:	6a1b      	ldr	r3, [r3, #32]
 8006de8:	4a6e      	ldr	r2, [pc, #440]	; (8006fa4 <HAL_RCC_OscConfig+0x4c4>)
 8006dea:	f043 0301 	orr.w	r3, r3, #1
 8006dee:	6213      	str	r3, [r2, #32]
 8006df0:	e02d      	b.n	8006e4e <HAL_RCC_OscConfig+0x36e>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d10c      	bne.n	8006e14 <HAL_RCC_OscConfig+0x334>
 8006dfa:	4b6a      	ldr	r3, [pc, #424]	; (8006fa4 <HAL_RCC_OscConfig+0x4c4>)
 8006dfc:	6a1b      	ldr	r3, [r3, #32]
 8006dfe:	4a69      	ldr	r2, [pc, #420]	; (8006fa4 <HAL_RCC_OscConfig+0x4c4>)
 8006e00:	f023 0301 	bic.w	r3, r3, #1
 8006e04:	6213      	str	r3, [r2, #32]
 8006e06:	4b67      	ldr	r3, [pc, #412]	; (8006fa4 <HAL_RCC_OscConfig+0x4c4>)
 8006e08:	6a1b      	ldr	r3, [r3, #32]
 8006e0a:	4a66      	ldr	r2, [pc, #408]	; (8006fa4 <HAL_RCC_OscConfig+0x4c4>)
 8006e0c:	f023 0304 	bic.w	r3, r3, #4
 8006e10:	6213      	str	r3, [r2, #32]
 8006e12:	e01c      	b.n	8006e4e <HAL_RCC_OscConfig+0x36e>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	2b05      	cmp	r3, #5
 8006e1a:	d10c      	bne.n	8006e36 <HAL_RCC_OscConfig+0x356>
 8006e1c:	4b61      	ldr	r3, [pc, #388]	; (8006fa4 <HAL_RCC_OscConfig+0x4c4>)
 8006e1e:	6a1b      	ldr	r3, [r3, #32]
 8006e20:	4a60      	ldr	r2, [pc, #384]	; (8006fa4 <HAL_RCC_OscConfig+0x4c4>)
 8006e22:	f043 0304 	orr.w	r3, r3, #4
 8006e26:	6213      	str	r3, [r2, #32]
 8006e28:	4b5e      	ldr	r3, [pc, #376]	; (8006fa4 <HAL_RCC_OscConfig+0x4c4>)
 8006e2a:	6a1b      	ldr	r3, [r3, #32]
 8006e2c:	4a5d      	ldr	r2, [pc, #372]	; (8006fa4 <HAL_RCC_OscConfig+0x4c4>)
 8006e2e:	f043 0301 	orr.w	r3, r3, #1
 8006e32:	6213      	str	r3, [r2, #32]
 8006e34:	e00b      	b.n	8006e4e <HAL_RCC_OscConfig+0x36e>
 8006e36:	4b5b      	ldr	r3, [pc, #364]	; (8006fa4 <HAL_RCC_OscConfig+0x4c4>)
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	4a5a      	ldr	r2, [pc, #360]	; (8006fa4 <HAL_RCC_OscConfig+0x4c4>)
 8006e3c:	f023 0301 	bic.w	r3, r3, #1
 8006e40:	6213      	str	r3, [r2, #32]
 8006e42:	4b58      	ldr	r3, [pc, #352]	; (8006fa4 <HAL_RCC_OscConfig+0x4c4>)
 8006e44:	6a1b      	ldr	r3, [r3, #32]
 8006e46:	4a57      	ldr	r2, [pc, #348]	; (8006fa4 <HAL_RCC_OscConfig+0x4c4>)
 8006e48:	f023 0304 	bic.w	r3, r3, #4
 8006e4c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d015      	beq.n	8006e82 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e56:	f7fe fa83 	bl	8005360 <HAL_GetTick>
 8006e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e5c:	e00a      	b.n	8006e74 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e5e:	f7fe fa7f 	bl	8005360 <HAL_GetTick>
 8006e62:	4602      	mov	r2, r0
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	1ad3      	subs	r3, r2, r3
 8006e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d901      	bls.n	8006e74 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006e70:	2303      	movs	r3, #3
 8006e72:	e0b1      	b.n	8006fd8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e74:	4b4b      	ldr	r3, [pc, #300]	; (8006fa4 <HAL_RCC_OscConfig+0x4c4>)
 8006e76:	6a1b      	ldr	r3, [r3, #32]
 8006e78:	f003 0302 	and.w	r3, r3, #2
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d0ee      	beq.n	8006e5e <HAL_RCC_OscConfig+0x37e>
 8006e80:	e014      	b.n	8006eac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e82:	f7fe fa6d 	bl	8005360 <HAL_GetTick>
 8006e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e88:	e00a      	b.n	8006ea0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e8a:	f7fe fa69 	bl	8005360 <HAL_GetTick>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	1ad3      	subs	r3, r2, r3
 8006e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d901      	bls.n	8006ea0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006e9c:	2303      	movs	r3, #3
 8006e9e:	e09b      	b.n	8006fd8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ea0:	4b40      	ldr	r3, [pc, #256]	; (8006fa4 <HAL_RCC_OscConfig+0x4c4>)
 8006ea2:	6a1b      	ldr	r3, [r3, #32]
 8006ea4:	f003 0302 	and.w	r3, r3, #2
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1ee      	bne.n	8006e8a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006eac:	7dfb      	ldrb	r3, [r7, #23]
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d105      	bne.n	8006ebe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006eb2:	4b3c      	ldr	r3, [pc, #240]	; (8006fa4 <HAL_RCC_OscConfig+0x4c4>)
 8006eb4:	69db      	ldr	r3, [r3, #28]
 8006eb6:	4a3b      	ldr	r2, [pc, #236]	; (8006fa4 <HAL_RCC_OscConfig+0x4c4>)
 8006eb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ebc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	69db      	ldr	r3, [r3, #28]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	f000 8087 	beq.w	8006fd6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006ec8:	4b36      	ldr	r3, [pc, #216]	; (8006fa4 <HAL_RCC_OscConfig+0x4c4>)
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	f003 030c 	and.w	r3, r3, #12
 8006ed0:	2b08      	cmp	r3, #8
 8006ed2:	d061      	beq.n	8006f98 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	69db      	ldr	r3, [r3, #28]
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	d146      	bne.n	8006f6a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006edc:	4b33      	ldr	r3, [pc, #204]	; (8006fac <HAL_RCC_OscConfig+0x4cc>)
 8006ede:	2200      	movs	r2, #0
 8006ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ee2:	f7fe fa3d 	bl	8005360 <HAL_GetTick>
 8006ee6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006ee8:	e008      	b.n	8006efc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006eea:	f7fe fa39 	bl	8005360 <HAL_GetTick>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	1ad3      	subs	r3, r2, r3
 8006ef4:	2b02      	cmp	r3, #2
 8006ef6:	d901      	bls.n	8006efc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	e06d      	b.n	8006fd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006efc:	4b29      	ldr	r3, [pc, #164]	; (8006fa4 <HAL_RCC_OscConfig+0x4c4>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d1f0      	bne.n	8006eea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6a1b      	ldr	r3, [r3, #32]
 8006f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f10:	d108      	bne.n	8006f24 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006f12:	4b24      	ldr	r3, [pc, #144]	; (8006fa4 <HAL_RCC_OscConfig+0x4c4>)
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	4921      	ldr	r1, [pc, #132]	; (8006fa4 <HAL_RCC_OscConfig+0x4c4>)
 8006f20:	4313      	orrs	r3, r2
 8006f22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f24:	4b1f      	ldr	r3, [pc, #124]	; (8006fa4 <HAL_RCC_OscConfig+0x4c4>)
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6a19      	ldr	r1, [r3, #32]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f34:	430b      	orrs	r3, r1
 8006f36:	491b      	ldr	r1, [pc, #108]	; (8006fa4 <HAL_RCC_OscConfig+0x4c4>)
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f3c:	4b1b      	ldr	r3, [pc, #108]	; (8006fac <HAL_RCC_OscConfig+0x4cc>)
 8006f3e:	2201      	movs	r2, #1
 8006f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f42:	f7fe fa0d 	bl	8005360 <HAL_GetTick>
 8006f46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006f48:	e008      	b.n	8006f5c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f4a:	f7fe fa09 	bl	8005360 <HAL_GetTick>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	1ad3      	subs	r3, r2, r3
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	d901      	bls.n	8006f5c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006f58:	2303      	movs	r3, #3
 8006f5a:	e03d      	b.n	8006fd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006f5c:	4b11      	ldr	r3, [pc, #68]	; (8006fa4 <HAL_RCC_OscConfig+0x4c4>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d0f0      	beq.n	8006f4a <HAL_RCC_OscConfig+0x46a>
 8006f68:	e035      	b.n	8006fd6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f6a:	4b10      	ldr	r3, [pc, #64]	; (8006fac <HAL_RCC_OscConfig+0x4cc>)
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f70:	f7fe f9f6 	bl	8005360 <HAL_GetTick>
 8006f74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f76:	e008      	b.n	8006f8a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f78:	f7fe f9f2 	bl	8005360 <HAL_GetTick>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	1ad3      	subs	r3, r2, r3
 8006f82:	2b02      	cmp	r3, #2
 8006f84:	d901      	bls.n	8006f8a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006f86:	2303      	movs	r3, #3
 8006f88:	e026      	b.n	8006fd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f8a:	4b06      	ldr	r3, [pc, #24]	; (8006fa4 <HAL_RCC_OscConfig+0x4c4>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d1f0      	bne.n	8006f78 <HAL_RCC_OscConfig+0x498>
 8006f96:	e01e      	b.n	8006fd6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	69db      	ldr	r3, [r3, #28]
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d107      	bne.n	8006fb0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e019      	b.n	8006fd8 <HAL_RCC_OscConfig+0x4f8>
 8006fa4:	40021000 	.word	0x40021000
 8006fa8:	40007000 	.word	0x40007000
 8006fac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006fb0:	4b0b      	ldr	r3, [pc, #44]	; (8006fe0 <HAL_RCC_OscConfig+0x500>)
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6a1b      	ldr	r3, [r3, #32]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d106      	bne.n	8006fd2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d001      	beq.n	8006fd6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e000      	b.n	8006fd8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3718      	adds	r7, #24
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}
 8006fe0:	40021000 	.word	0x40021000

08006fe4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d101      	bne.n	8006ff8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e0d0      	b.n	800719a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ff8:	4b6a      	ldr	r3, [pc, #424]	; (80071a4 <HAL_RCC_ClockConfig+0x1c0>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f003 0307 	and.w	r3, r3, #7
 8007000:	683a      	ldr	r2, [r7, #0]
 8007002:	429a      	cmp	r2, r3
 8007004:	d910      	bls.n	8007028 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007006:	4b67      	ldr	r3, [pc, #412]	; (80071a4 <HAL_RCC_ClockConfig+0x1c0>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f023 0207 	bic.w	r2, r3, #7
 800700e:	4965      	ldr	r1, [pc, #404]	; (80071a4 <HAL_RCC_ClockConfig+0x1c0>)
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	4313      	orrs	r3, r2
 8007014:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007016:	4b63      	ldr	r3, [pc, #396]	; (80071a4 <HAL_RCC_ClockConfig+0x1c0>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f003 0307 	and.w	r3, r3, #7
 800701e:	683a      	ldr	r2, [r7, #0]
 8007020:	429a      	cmp	r2, r3
 8007022:	d001      	beq.n	8007028 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	e0b8      	b.n	800719a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f003 0302 	and.w	r3, r3, #2
 8007030:	2b00      	cmp	r3, #0
 8007032:	d020      	beq.n	8007076 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 0304 	and.w	r3, r3, #4
 800703c:	2b00      	cmp	r3, #0
 800703e:	d005      	beq.n	800704c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007040:	4b59      	ldr	r3, [pc, #356]	; (80071a8 <HAL_RCC_ClockConfig+0x1c4>)
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	4a58      	ldr	r2, [pc, #352]	; (80071a8 <HAL_RCC_ClockConfig+0x1c4>)
 8007046:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800704a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f003 0308 	and.w	r3, r3, #8
 8007054:	2b00      	cmp	r3, #0
 8007056:	d005      	beq.n	8007064 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007058:	4b53      	ldr	r3, [pc, #332]	; (80071a8 <HAL_RCC_ClockConfig+0x1c4>)
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	4a52      	ldr	r2, [pc, #328]	; (80071a8 <HAL_RCC_ClockConfig+0x1c4>)
 800705e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007062:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007064:	4b50      	ldr	r3, [pc, #320]	; (80071a8 <HAL_RCC_ClockConfig+0x1c4>)
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	494d      	ldr	r1, [pc, #308]	; (80071a8 <HAL_RCC_ClockConfig+0x1c4>)
 8007072:	4313      	orrs	r3, r2
 8007074:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 0301 	and.w	r3, r3, #1
 800707e:	2b00      	cmp	r3, #0
 8007080:	d040      	beq.n	8007104 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	2b01      	cmp	r3, #1
 8007088:	d107      	bne.n	800709a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800708a:	4b47      	ldr	r3, [pc, #284]	; (80071a8 <HAL_RCC_ClockConfig+0x1c4>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007092:	2b00      	cmp	r3, #0
 8007094:	d115      	bne.n	80070c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	e07f      	b.n	800719a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	2b02      	cmp	r3, #2
 80070a0:	d107      	bne.n	80070b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070a2:	4b41      	ldr	r3, [pc, #260]	; (80071a8 <HAL_RCC_ClockConfig+0x1c4>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d109      	bne.n	80070c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	e073      	b.n	800719a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070b2:	4b3d      	ldr	r3, [pc, #244]	; (80071a8 <HAL_RCC_ClockConfig+0x1c4>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f003 0302 	and.w	r3, r3, #2
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d101      	bne.n	80070c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	e06b      	b.n	800719a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80070c2:	4b39      	ldr	r3, [pc, #228]	; (80071a8 <HAL_RCC_ClockConfig+0x1c4>)
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	f023 0203 	bic.w	r2, r3, #3
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	4936      	ldr	r1, [pc, #216]	; (80071a8 <HAL_RCC_ClockConfig+0x1c4>)
 80070d0:	4313      	orrs	r3, r2
 80070d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80070d4:	f7fe f944 	bl	8005360 <HAL_GetTick>
 80070d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070da:	e00a      	b.n	80070f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070dc:	f7fe f940 	bl	8005360 <HAL_GetTick>
 80070e0:	4602      	mov	r2, r0
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	1ad3      	subs	r3, r2, r3
 80070e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d901      	bls.n	80070f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80070ee:	2303      	movs	r3, #3
 80070f0:	e053      	b.n	800719a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070f2:	4b2d      	ldr	r3, [pc, #180]	; (80071a8 <HAL_RCC_ClockConfig+0x1c4>)
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	f003 020c 	and.w	r2, r3, #12
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	429a      	cmp	r2, r3
 8007102:	d1eb      	bne.n	80070dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007104:	4b27      	ldr	r3, [pc, #156]	; (80071a4 <HAL_RCC_ClockConfig+0x1c0>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f003 0307 	and.w	r3, r3, #7
 800710c:	683a      	ldr	r2, [r7, #0]
 800710e:	429a      	cmp	r2, r3
 8007110:	d210      	bcs.n	8007134 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007112:	4b24      	ldr	r3, [pc, #144]	; (80071a4 <HAL_RCC_ClockConfig+0x1c0>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f023 0207 	bic.w	r2, r3, #7
 800711a:	4922      	ldr	r1, [pc, #136]	; (80071a4 <HAL_RCC_ClockConfig+0x1c0>)
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	4313      	orrs	r3, r2
 8007120:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007122:	4b20      	ldr	r3, [pc, #128]	; (80071a4 <HAL_RCC_ClockConfig+0x1c0>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f003 0307 	and.w	r3, r3, #7
 800712a:	683a      	ldr	r2, [r7, #0]
 800712c:	429a      	cmp	r2, r3
 800712e:	d001      	beq.n	8007134 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	e032      	b.n	800719a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 0304 	and.w	r3, r3, #4
 800713c:	2b00      	cmp	r3, #0
 800713e:	d008      	beq.n	8007152 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007140:	4b19      	ldr	r3, [pc, #100]	; (80071a8 <HAL_RCC_ClockConfig+0x1c4>)
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	4916      	ldr	r1, [pc, #88]	; (80071a8 <HAL_RCC_ClockConfig+0x1c4>)
 800714e:	4313      	orrs	r3, r2
 8007150:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f003 0308 	and.w	r3, r3, #8
 800715a:	2b00      	cmp	r3, #0
 800715c:	d009      	beq.n	8007172 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800715e:	4b12      	ldr	r3, [pc, #72]	; (80071a8 <HAL_RCC_ClockConfig+0x1c4>)
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	00db      	lsls	r3, r3, #3
 800716c:	490e      	ldr	r1, [pc, #56]	; (80071a8 <HAL_RCC_ClockConfig+0x1c4>)
 800716e:	4313      	orrs	r3, r2
 8007170:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007172:	f000 f821 	bl	80071b8 <HAL_RCC_GetSysClockFreq>
 8007176:	4602      	mov	r2, r0
 8007178:	4b0b      	ldr	r3, [pc, #44]	; (80071a8 <HAL_RCC_ClockConfig+0x1c4>)
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	091b      	lsrs	r3, r3, #4
 800717e:	f003 030f 	and.w	r3, r3, #15
 8007182:	490a      	ldr	r1, [pc, #40]	; (80071ac <HAL_RCC_ClockConfig+0x1c8>)
 8007184:	5ccb      	ldrb	r3, [r1, r3]
 8007186:	fa22 f303 	lsr.w	r3, r2, r3
 800718a:	4a09      	ldr	r2, [pc, #36]	; (80071b0 <HAL_RCC_ClockConfig+0x1cc>)
 800718c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800718e:	4b09      	ldr	r3, [pc, #36]	; (80071b4 <HAL_RCC_ClockConfig+0x1d0>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4618      	mov	r0, r3
 8007194:	f7fe f8a2 	bl	80052dc <HAL_InitTick>

  return HAL_OK;
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	3710      	adds	r7, #16
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	40022000 	.word	0x40022000
 80071a8:	40021000 	.word	0x40021000
 80071ac:	0800de94 	.word	0x0800de94
 80071b0:	2000004c 	.word	0x2000004c
 80071b4:	20000050 	.word	0x20000050

080071b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b087      	sub	sp, #28
 80071bc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80071be:	2300      	movs	r3, #0
 80071c0:	60fb      	str	r3, [r7, #12]
 80071c2:	2300      	movs	r3, #0
 80071c4:	60bb      	str	r3, [r7, #8]
 80071c6:	2300      	movs	r3, #0
 80071c8:	617b      	str	r3, [r7, #20]
 80071ca:	2300      	movs	r3, #0
 80071cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80071ce:	2300      	movs	r3, #0
 80071d0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80071d2:	4b1e      	ldr	r3, [pc, #120]	; (800724c <HAL_RCC_GetSysClockFreq+0x94>)
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f003 030c 	and.w	r3, r3, #12
 80071de:	2b04      	cmp	r3, #4
 80071e0:	d002      	beq.n	80071e8 <HAL_RCC_GetSysClockFreq+0x30>
 80071e2:	2b08      	cmp	r3, #8
 80071e4:	d003      	beq.n	80071ee <HAL_RCC_GetSysClockFreq+0x36>
 80071e6:	e027      	b.n	8007238 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80071e8:	4b19      	ldr	r3, [pc, #100]	; (8007250 <HAL_RCC_GetSysClockFreq+0x98>)
 80071ea:	613b      	str	r3, [r7, #16]
      break;
 80071ec:	e027      	b.n	800723e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	0c9b      	lsrs	r3, r3, #18
 80071f2:	f003 030f 	and.w	r3, r3, #15
 80071f6:	4a17      	ldr	r2, [pc, #92]	; (8007254 <HAL_RCC_GetSysClockFreq+0x9c>)
 80071f8:	5cd3      	ldrb	r3, [r2, r3]
 80071fa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007202:	2b00      	cmp	r3, #0
 8007204:	d010      	beq.n	8007228 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007206:	4b11      	ldr	r3, [pc, #68]	; (800724c <HAL_RCC_GetSysClockFreq+0x94>)
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	0c5b      	lsrs	r3, r3, #17
 800720c:	f003 0301 	and.w	r3, r3, #1
 8007210:	4a11      	ldr	r2, [pc, #68]	; (8007258 <HAL_RCC_GetSysClockFreq+0xa0>)
 8007212:	5cd3      	ldrb	r3, [r2, r3]
 8007214:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4a0d      	ldr	r2, [pc, #52]	; (8007250 <HAL_RCC_GetSysClockFreq+0x98>)
 800721a:	fb03 f202 	mul.w	r2, r3, r2
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	fbb2 f3f3 	udiv	r3, r2, r3
 8007224:	617b      	str	r3, [r7, #20]
 8007226:	e004      	b.n	8007232 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	4a0c      	ldr	r2, [pc, #48]	; (800725c <HAL_RCC_GetSysClockFreq+0xa4>)
 800722c:	fb02 f303 	mul.w	r3, r2, r3
 8007230:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	613b      	str	r3, [r7, #16]
      break;
 8007236:	e002      	b.n	800723e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007238:	4b05      	ldr	r3, [pc, #20]	; (8007250 <HAL_RCC_GetSysClockFreq+0x98>)
 800723a:	613b      	str	r3, [r7, #16]
      break;
 800723c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800723e:	693b      	ldr	r3, [r7, #16]
}
 8007240:	4618      	mov	r0, r3
 8007242:	371c      	adds	r7, #28
 8007244:	46bd      	mov	sp, r7
 8007246:	bc80      	pop	{r7}
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop
 800724c:	40021000 	.word	0x40021000
 8007250:	007a1200 	.word	0x007a1200
 8007254:	0800deac 	.word	0x0800deac
 8007258:	0800debc 	.word	0x0800debc
 800725c:	003d0900 	.word	0x003d0900

08007260 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007260:	b480      	push	{r7}
 8007262:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007264:	4b02      	ldr	r3, [pc, #8]	; (8007270 <HAL_RCC_GetHCLKFreq+0x10>)
 8007266:	681b      	ldr	r3, [r3, #0]
}
 8007268:	4618      	mov	r0, r3
 800726a:	46bd      	mov	sp, r7
 800726c:	bc80      	pop	{r7}
 800726e:	4770      	bx	lr
 8007270:	2000004c 	.word	0x2000004c

08007274 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007278:	f7ff fff2 	bl	8007260 <HAL_RCC_GetHCLKFreq>
 800727c:	4602      	mov	r2, r0
 800727e:	4b05      	ldr	r3, [pc, #20]	; (8007294 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	0a1b      	lsrs	r3, r3, #8
 8007284:	f003 0307 	and.w	r3, r3, #7
 8007288:	4903      	ldr	r1, [pc, #12]	; (8007298 <HAL_RCC_GetPCLK1Freq+0x24>)
 800728a:	5ccb      	ldrb	r3, [r1, r3]
 800728c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007290:	4618      	mov	r0, r3
 8007292:	bd80      	pop	{r7, pc}
 8007294:	40021000 	.word	0x40021000
 8007298:	0800dea4 	.word	0x0800dea4

0800729c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80072a0:	f7ff ffde 	bl	8007260 <HAL_RCC_GetHCLKFreq>
 80072a4:	4602      	mov	r2, r0
 80072a6:	4b05      	ldr	r3, [pc, #20]	; (80072bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	0adb      	lsrs	r3, r3, #11
 80072ac:	f003 0307 	and.w	r3, r3, #7
 80072b0:	4903      	ldr	r1, [pc, #12]	; (80072c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80072b2:	5ccb      	ldrb	r3, [r1, r3]
 80072b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	40021000 	.word	0x40021000
 80072c0:	0800dea4 	.word	0x0800dea4

080072c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b085      	sub	sp, #20
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80072cc:	4b0a      	ldr	r3, [pc, #40]	; (80072f8 <RCC_Delay+0x34>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a0a      	ldr	r2, [pc, #40]	; (80072fc <RCC_Delay+0x38>)
 80072d2:	fba2 2303 	umull	r2, r3, r2, r3
 80072d6:	0a5b      	lsrs	r3, r3, #9
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	fb02 f303 	mul.w	r3, r2, r3
 80072de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80072e0:	bf00      	nop
  }
  while (Delay --);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	1e5a      	subs	r2, r3, #1
 80072e6:	60fa      	str	r2, [r7, #12]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d1f9      	bne.n	80072e0 <RCC_Delay+0x1c>
}
 80072ec:	bf00      	nop
 80072ee:	bf00      	nop
 80072f0:	3714      	adds	r7, #20
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bc80      	pop	{r7}
 80072f6:	4770      	bx	lr
 80072f8:	2000004c 	.word	0x2000004c
 80072fc:	10624dd3 	.word	0x10624dd3

08007300 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b082      	sub	sp, #8
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d101      	bne.n	8007312 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	e041      	b.n	8007396 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007318:	b2db      	uxtb	r3, r3
 800731a:	2b00      	cmp	r3, #0
 800731c:	d106      	bne.n	800732c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f7fd fe9c 	bl	8005064 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2202      	movs	r2, #2
 8007330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	3304      	adds	r3, #4
 800733c:	4619      	mov	r1, r3
 800733e:	4610      	mov	r0, r2
 8007340:	f000 fcd2 	bl	8007ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2201      	movs	r2, #1
 8007370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2201      	movs	r2, #1
 8007378:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2201      	movs	r2, #1
 8007380:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2201      	movs	r2, #1
 8007388:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2201      	movs	r2, #1
 8007390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007394:	2300      	movs	r3, #0
}
 8007396:	4618      	mov	r0, r3
 8007398:	3708      	adds	r7, #8
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
	...

080073a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b085      	sub	sp, #20
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d001      	beq.n	80073b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80073b4:	2301      	movs	r3, #1
 80073b6:	e03a      	b.n	800742e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2202      	movs	r2, #2
 80073bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	68da      	ldr	r2, [r3, #12]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f042 0201 	orr.w	r2, r2, #1
 80073ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a18      	ldr	r2, [pc, #96]	; (8007438 <HAL_TIM_Base_Start_IT+0x98>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d00e      	beq.n	80073f8 <HAL_TIM_Base_Start_IT+0x58>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073e2:	d009      	beq.n	80073f8 <HAL_TIM_Base_Start_IT+0x58>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a14      	ldr	r2, [pc, #80]	; (800743c <HAL_TIM_Base_Start_IT+0x9c>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d004      	beq.n	80073f8 <HAL_TIM_Base_Start_IT+0x58>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a13      	ldr	r2, [pc, #76]	; (8007440 <HAL_TIM_Base_Start_IT+0xa0>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d111      	bne.n	800741c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	f003 0307 	and.w	r3, r3, #7
 8007402:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2b06      	cmp	r3, #6
 8007408:	d010      	beq.n	800742c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f042 0201 	orr.w	r2, r2, #1
 8007418:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800741a:	e007      	b.n	800742c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f042 0201 	orr.w	r2, r2, #1
 800742a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800742c:	2300      	movs	r3, #0
}
 800742e:	4618      	mov	r0, r3
 8007430:	3714      	adds	r7, #20
 8007432:	46bd      	mov	sp, r7
 8007434:	bc80      	pop	{r7}
 8007436:	4770      	bx	lr
 8007438:	40012c00 	.word	0x40012c00
 800743c:	40000400 	.word	0x40000400
 8007440:	40000800 	.word	0x40000800

08007444 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d101      	bne.n	8007456 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	e041      	b.n	80074da <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800745c:	b2db      	uxtb	r3, r3
 800745e:	2b00      	cmp	r3, #0
 8007460:	d106      	bne.n	8007470 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 f839 	bl	80074e2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2202      	movs	r2, #2
 8007474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	3304      	adds	r3, #4
 8007480:	4619      	mov	r1, r3
 8007482:	4610      	mov	r0, r2
 8007484:	f000 fc30 	bl	8007ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3708      	adds	r7, #8
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80074e2:	b480      	push	{r7}
 80074e4:	b083      	sub	sp, #12
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80074ea:	bf00      	nop
 80074ec:	370c      	adds	r7, #12
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bc80      	pop	{r7}
 80074f2:	4770      	bx	lr

080074f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d109      	bne.n	8007518 <HAL_TIM_PWM_Start+0x24>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800750a:	b2db      	uxtb	r3, r3
 800750c:	2b01      	cmp	r3, #1
 800750e:	bf14      	ite	ne
 8007510:	2301      	movne	r3, #1
 8007512:	2300      	moveq	r3, #0
 8007514:	b2db      	uxtb	r3, r3
 8007516:	e022      	b.n	800755e <HAL_TIM_PWM_Start+0x6a>
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	2b04      	cmp	r3, #4
 800751c:	d109      	bne.n	8007532 <HAL_TIM_PWM_Start+0x3e>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007524:	b2db      	uxtb	r3, r3
 8007526:	2b01      	cmp	r3, #1
 8007528:	bf14      	ite	ne
 800752a:	2301      	movne	r3, #1
 800752c:	2300      	moveq	r3, #0
 800752e:	b2db      	uxtb	r3, r3
 8007530:	e015      	b.n	800755e <HAL_TIM_PWM_Start+0x6a>
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	2b08      	cmp	r3, #8
 8007536:	d109      	bne.n	800754c <HAL_TIM_PWM_Start+0x58>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800753e:	b2db      	uxtb	r3, r3
 8007540:	2b01      	cmp	r3, #1
 8007542:	bf14      	ite	ne
 8007544:	2301      	movne	r3, #1
 8007546:	2300      	moveq	r3, #0
 8007548:	b2db      	uxtb	r3, r3
 800754a:	e008      	b.n	800755e <HAL_TIM_PWM_Start+0x6a>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007552:	b2db      	uxtb	r3, r3
 8007554:	2b01      	cmp	r3, #1
 8007556:	bf14      	ite	ne
 8007558:	2301      	movne	r3, #1
 800755a:	2300      	moveq	r3, #0
 800755c:	b2db      	uxtb	r3, r3
 800755e:	2b00      	cmp	r3, #0
 8007560:	d001      	beq.n	8007566 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	e05e      	b.n	8007624 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d104      	bne.n	8007576 <HAL_TIM_PWM_Start+0x82>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2202      	movs	r2, #2
 8007570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007574:	e013      	b.n	800759e <HAL_TIM_PWM_Start+0xaa>
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	2b04      	cmp	r3, #4
 800757a:	d104      	bne.n	8007586 <HAL_TIM_PWM_Start+0x92>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2202      	movs	r2, #2
 8007580:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007584:	e00b      	b.n	800759e <HAL_TIM_PWM_Start+0xaa>
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	2b08      	cmp	r3, #8
 800758a:	d104      	bne.n	8007596 <HAL_TIM_PWM_Start+0xa2>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2202      	movs	r2, #2
 8007590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007594:	e003      	b.n	800759e <HAL_TIM_PWM_Start+0xaa>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2202      	movs	r2, #2
 800759a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2201      	movs	r2, #1
 80075a4:	6839      	ldr	r1, [r7, #0]
 80075a6:	4618      	mov	r0, r3
 80075a8:	f000 fe1e 	bl	80081e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a1e      	ldr	r2, [pc, #120]	; (800762c <HAL_TIM_PWM_Start+0x138>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d107      	bne.n	80075c6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80075c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a18      	ldr	r2, [pc, #96]	; (800762c <HAL_TIM_PWM_Start+0x138>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d00e      	beq.n	80075ee <HAL_TIM_PWM_Start+0xfa>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075d8:	d009      	beq.n	80075ee <HAL_TIM_PWM_Start+0xfa>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a14      	ldr	r2, [pc, #80]	; (8007630 <HAL_TIM_PWM_Start+0x13c>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d004      	beq.n	80075ee <HAL_TIM_PWM_Start+0xfa>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a12      	ldr	r2, [pc, #72]	; (8007634 <HAL_TIM_PWM_Start+0x140>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d111      	bne.n	8007612 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	f003 0307 	and.w	r3, r3, #7
 80075f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2b06      	cmp	r3, #6
 80075fe:	d010      	beq.n	8007622 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f042 0201 	orr.w	r2, r2, #1
 800760e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007610:	e007      	b.n	8007622 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f042 0201 	orr.w	r2, r2, #1
 8007620:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007622:	2300      	movs	r3, #0
}
 8007624:	4618      	mov	r0, r3
 8007626:	3710      	adds	r7, #16
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}
 800762c:	40012c00 	.word	0x40012c00
 8007630:	40000400 	.word	0x40000400
 8007634:	40000800 	.word	0x40000800

08007638 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b086      	sub	sp, #24
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d101      	bne.n	800764c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007648:	2301      	movs	r3, #1
 800764a:	e093      	b.n	8007774 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007652:	b2db      	uxtb	r3, r3
 8007654:	2b00      	cmp	r3, #0
 8007656:	d106      	bne.n	8007666 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f7fd fc91 	bl	8004f88 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2202      	movs	r2, #2
 800766a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	6812      	ldr	r2, [r2, #0]
 8007678:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800767c:	f023 0307 	bic.w	r3, r3, #7
 8007680:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	3304      	adds	r3, #4
 800768a:	4619      	mov	r1, r3
 800768c:	4610      	mov	r0, r2
 800768e:	f000 fb2b 	bl	8007ce8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	699b      	ldr	r3, [r3, #24]
 80076a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	6a1b      	ldr	r3, [r3, #32]
 80076a8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	697a      	ldr	r2, [r7, #20]
 80076b0:	4313      	orrs	r3, r2
 80076b2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076ba:	f023 0303 	bic.w	r3, r3, #3
 80076be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	689a      	ldr	r2, [r3, #8]
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	699b      	ldr	r3, [r3, #24]
 80076c8:	021b      	lsls	r3, r3, #8
 80076ca:	4313      	orrs	r3, r2
 80076cc:	693a      	ldr	r2, [r7, #16]
 80076ce:	4313      	orrs	r3, r2
 80076d0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80076d8:	f023 030c 	bic.w	r3, r3, #12
 80076dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80076e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80076e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	68da      	ldr	r2, [r3, #12]
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	69db      	ldr	r3, [r3, #28]
 80076f2:	021b      	lsls	r3, r3, #8
 80076f4:	4313      	orrs	r3, r2
 80076f6:	693a      	ldr	r2, [r7, #16]
 80076f8:	4313      	orrs	r3, r2
 80076fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	691b      	ldr	r3, [r3, #16]
 8007700:	011a      	lsls	r2, r3, #4
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	6a1b      	ldr	r3, [r3, #32]
 8007706:	031b      	lsls	r3, r3, #12
 8007708:	4313      	orrs	r3, r2
 800770a:	693a      	ldr	r2, [r7, #16]
 800770c:	4313      	orrs	r3, r2
 800770e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007716:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	685a      	ldr	r2, [r3, #4]
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	695b      	ldr	r3, [r3, #20]
 8007720:	011b      	lsls	r3, r3, #4
 8007722:	4313      	orrs	r3, r2
 8007724:	68fa      	ldr	r2, [r7, #12]
 8007726:	4313      	orrs	r3, r2
 8007728:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	697a      	ldr	r2, [r7, #20]
 8007730:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	693a      	ldr	r2, [r7, #16]
 8007738:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2201      	movs	r2, #1
 8007746:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2201      	movs	r2, #1
 800774e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2201      	movs	r2, #1
 8007756:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2201      	movs	r2, #1
 800775e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2201      	movs	r2, #1
 8007766:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2201      	movs	r2, #1
 800776e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007772:	2300      	movs	r3, #0
}
 8007774:	4618      	mov	r0, r3
 8007776:	3718      	adds	r7, #24
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}

0800777c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b082      	sub	sp, #8
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	691b      	ldr	r3, [r3, #16]
 800778a:	f003 0302 	and.w	r3, r3, #2
 800778e:	2b02      	cmp	r3, #2
 8007790:	d122      	bne.n	80077d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	68db      	ldr	r3, [r3, #12]
 8007798:	f003 0302 	and.w	r3, r3, #2
 800779c:	2b02      	cmp	r3, #2
 800779e:	d11b      	bne.n	80077d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f06f 0202 	mvn.w	r2, #2
 80077a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2201      	movs	r2, #1
 80077ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	699b      	ldr	r3, [r3, #24]
 80077b6:	f003 0303 	and.w	r3, r3, #3
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d003      	beq.n	80077c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 fa76 	bl	8007cb0 <HAL_TIM_IC_CaptureCallback>
 80077c4:	e005      	b.n	80077d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 fa69 	bl	8007c9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 fa78 	bl	8007cc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	691b      	ldr	r3, [r3, #16]
 80077de:	f003 0304 	and.w	r3, r3, #4
 80077e2:	2b04      	cmp	r3, #4
 80077e4:	d122      	bne.n	800782c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	f003 0304 	and.w	r3, r3, #4
 80077f0:	2b04      	cmp	r3, #4
 80077f2:	d11b      	bne.n	800782c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f06f 0204 	mvn.w	r2, #4
 80077fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2202      	movs	r2, #2
 8007802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	699b      	ldr	r3, [r3, #24]
 800780a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800780e:	2b00      	cmp	r3, #0
 8007810:	d003      	beq.n	800781a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 fa4c 	bl	8007cb0 <HAL_TIM_IC_CaptureCallback>
 8007818:	e005      	b.n	8007826 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 fa3f 	bl	8007c9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 fa4e 	bl	8007cc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	691b      	ldr	r3, [r3, #16]
 8007832:	f003 0308 	and.w	r3, r3, #8
 8007836:	2b08      	cmp	r3, #8
 8007838:	d122      	bne.n	8007880 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	f003 0308 	and.w	r3, r3, #8
 8007844:	2b08      	cmp	r3, #8
 8007846:	d11b      	bne.n	8007880 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f06f 0208 	mvn.w	r2, #8
 8007850:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2204      	movs	r2, #4
 8007856:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	69db      	ldr	r3, [r3, #28]
 800785e:	f003 0303 	and.w	r3, r3, #3
 8007862:	2b00      	cmp	r3, #0
 8007864:	d003      	beq.n	800786e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 fa22 	bl	8007cb0 <HAL_TIM_IC_CaptureCallback>
 800786c:	e005      	b.n	800787a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 fa15 	bl	8007c9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 fa24 	bl	8007cc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	691b      	ldr	r3, [r3, #16]
 8007886:	f003 0310 	and.w	r3, r3, #16
 800788a:	2b10      	cmp	r3, #16
 800788c:	d122      	bne.n	80078d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	68db      	ldr	r3, [r3, #12]
 8007894:	f003 0310 	and.w	r3, r3, #16
 8007898:	2b10      	cmp	r3, #16
 800789a:	d11b      	bne.n	80078d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f06f 0210 	mvn.w	r2, #16
 80078a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2208      	movs	r2, #8
 80078aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	69db      	ldr	r3, [r3, #28]
 80078b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d003      	beq.n	80078c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 f9f8 	bl	8007cb0 <HAL_TIM_IC_CaptureCallback>
 80078c0:	e005      	b.n	80078ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 f9eb 	bl	8007c9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 f9fa 	bl	8007cc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2200      	movs	r2, #0
 80078d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	691b      	ldr	r3, [r3, #16]
 80078da:	f003 0301 	and.w	r3, r3, #1
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d10e      	bne.n	8007900 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	f003 0301 	and.w	r3, r3, #1
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d107      	bne.n	8007900 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f06f 0201 	mvn.w	r2, #1
 80078f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f7f9 ffc6 	bl	800188c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800790a:	2b80      	cmp	r3, #128	; 0x80
 800790c:	d10e      	bne.n	800792c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007918:	2b80      	cmp	r3, #128	; 0x80
 800791a:	d107      	bne.n	800792c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 fce9 	bl	80082fe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	691b      	ldr	r3, [r3, #16]
 8007932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007936:	2b40      	cmp	r3, #64	; 0x40
 8007938:	d10e      	bne.n	8007958 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007944:	2b40      	cmp	r3, #64	; 0x40
 8007946:	d107      	bne.n	8007958 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 f9be 	bl	8007cd4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	f003 0320 	and.w	r3, r3, #32
 8007962:	2b20      	cmp	r3, #32
 8007964:	d10e      	bne.n	8007984 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	f003 0320 	and.w	r3, r3, #32
 8007970:	2b20      	cmp	r3, #32
 8007972:	d107      	bne.n	8007984 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f06f 0220 	mvn.w	r2, #32
 800797c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 fcb4 	bl	80082ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007984:	bf00      	nop
 8007986:	3708      	adds	r7, #8
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b086      	sub	sp, #24
 8007990:	af00      	add	r7, sp, #0
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	60b9      	str	r1, [r7, #8]
 8007996:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007998:	2300      	movs	r3, #0
 800799a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d101      	bne.n	80079aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80079a6:	2302      	movs	r3, #2
 80079a8:	e0ae      	b.n	8007b08 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2201      	movs	r2, #1
 80079ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2b0c      	cmp	r3, #12
 80079b6:	f200 809f 	bhi.w	8007af8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80079ba:	a201      	add	r2, pc, #4	; (adr r2, 80079c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80079bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c0:	080079f5 	.word	0x080079f5
 80079c4:	08007af9 	.word	0x08007af9
 80079c8:	08007af9 	.word	0x08007af9
 80079cc:	08007af9 	.word	0x08007af9
 80079d0:	08007a35 	.word	0x08007a35
 80079d4:	08007af9 	.word	0x08007af9
 80079d8:	08007af9 	.word	0x08007af9
 80079dc:	08007af9 	.word	0x08007af9
 80079e0:	08007a77 	.word	0x08007a77
 80079e4:	08007af9 	.word	0x08007af9
 80079e8:	08007af9 	.word	0x08007af9
 80079ec:	08007af9 	.word	0x08007af9
 80079f0:	08007ab7 	.word	0x08007ab7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	68b9      	ldr	r1, [r7, #8]
 80079fa:	4618      	mov	r0, r3
 80079fc:	f000 f9d6 	bl	8007dac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	699a      	ldr	r2, [r3, #24]
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f042 0208 	orr.w	r2, r2, #8
 8007a0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	699a      	ldr	r2, [r3, #24]
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f022 0204 	bic.w	r2, r2, #4
 8007a1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	6999      	ldr	r1, [r3, #24]
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	691a      	ldr	r2, [r3, #16]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	430a      	orrs	r2, r1
 8007a30:	619a      	str	r2, [r3, #24]
      break;
 8007a32:	e064      	b.n	8007afe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	68b9      	ldr	r1, [r7, #8]
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f000 fa1c 	bl	8007e78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	699a      	ldr	r2, [r3, #24]
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	699a      	ldr	r2, [r3, #24]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	6999      	ldr	r1, [r3, #24]
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	691b      	ldr	r3, [r3, #16]
 8007a6a:	021a      	lsls	r2, r3, #8
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	430a      	orrs	r2, r1
 8007a72:	619a      	str	r2, [r3, #24]
      break;
 8007a74:	e043      	b.n	8007afe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	68b9      	ldr	r1, [r7, #8]
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f000 fa65 	bl	8007f4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	69da      	ldr	r2, [r3, #28]
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f042 0208 	orr.w	r2, r2, #8
 8007a90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	69da      	ldr	r2, [r3, #28]
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f022 0204 	bic.w	r2, r2, #4
 8007aa0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	69d9      	ldr	r1, [r3, #28]
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	691a      	ldr	r2, [r3, #16]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	430a      	orrs	r2, r1
 8007ab2:	61da      	str	r2, [r3, #28]
      break;
 8007ab4:	e023      	b.n	8007afe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	68b9      	ldr	r1, [r7, #8]
 8007abc:	4618      	mov	r0, r3
 8007abe:	f000 faaf 	bl	8008020 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	69da      	ldr	r2, [r3, #28]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ad0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	69da      	ldr	r2, [r3, #28]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ae0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	69d9      	ldr	r1, [r3, #28]
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	691b      	ldr	r3, [r3, #16]
 8007aec:	021a      	lsls	r2, r3, #8
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	430a      	orrs	r2, r1
 8007af4:	61da      	str	r2, [r3, #28]
      break;
 8007af6:	e002      	b.n	8007afe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007af8:	2301      	movs	r3, #1
 8007afa:	75fb      	strb	r3, [r7, #23]
      break;
 8007afc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2200      	movs	r2, #0
 8007b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007b06:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3718      	adds	r7, #24
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d101      	bne.n	8007b2c <HAL_TIM_ConfigClockSource+0x1c>
 8007b28:	2302      	movs	r3, #2
 8007b2a:	e0b4      	b.n	8007c96 <HAL_TIM_ConfigClockSource+0x186>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2202      	movs	r2, #2
 8007b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007b4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	68ba      	ldr	r2, [r7, #8]
 8007b5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b64:	d03e      	beq.n	8007be4 <HAL_TIM_ConfigClockSource+0xd4>
 8007b66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b6a:	f200 8087 	bhi.w	8007c7c <HAL_TIM_ConfigClockSource+0x16c>
 8007b6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b72:	f000 8086 	beq.w	8007c82 <HAL_TIM_ConfigClockSource+0x172>
 8007b76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b7a:	d87f      	bhi.n	8007c7c <HAL_TIM_ConfigClockSource+0x16c>
 8007b7c:	2b70      	cmp	r3, #112	; 0x70
 8007b7e:	d01a      	beq.n	8007bb6 <HAL_TIM_ConfigClockSource+0xa6>
 8007b80:	2b70      	cmp	r3, #112	; 0x70
 8007b82:	d87b      	bhi.n	8007c7c <HAL_TIM_ConfigClockSource+0x16c>
 8007b84:	2b60      	cmp	r3, #96	; 0x60
 8007b86:	d050      	beq.n	8007c2a <HAL_TIM_ConfigClockSource+0x11a>
 8007b88:	2b60      	cmp	r3, #96	; 0x60
 8007b8a:	d877      	bhi.n	8007c7c <HAL_TIM_ConfigClockSource+0x16c>
 8007b8c:	2b50      	cmp	r3, #80	; 0x50
 8007b8e:	d03c      	beq.n	8007c0a <HAL_TIM_ConfigClockSource+0xfa>
 8007b90:	2b50      	cmp	r3, #80	; 0x50
 8007b92:	d873      	bhi.n	8007c7c <HAL_TIM_ConfigClockSource+0x16c>
 8007b94:	2b40      	cmp	r3, #64	; 0x40
 8007b96:	d058      	beq.n	8007c4a <HAL_TIM_ConfigClockSource+0x13a>
 8007b98:	2b40      	cmp	r3, #64	; 0x40
 8007b9a:	d86f      	bhi.n	8007c7c <HAL_TIM_ConfigClockSource+0x16c>
 8007b9c:	2b30      	cmp	r3, #48	; 0x30
 8007b9e:	d064      	beq.n	8007c6a <HAL_TIM_ConfigClockSource+0x15a>
 8007ba0:	2b30      	cmp	r3, #48	; 0x30
 8007ba2:	d86b      	bhi.n	8007c7c <HAL_TIM_ConfigClockSource+0x16c>
 8007ba4:	2b20      	cmp	r3, #32
 8007ba6:	d060      	beq.n	8007c6a <HAL_TIM_ConfigClockSource+0x15a>
 8007ba8:	2b20      	cmp	r3, #32
 8007baa:	d867      	bhi.n	8007c7c <HAL_TIM_ConfigClockSource+0x16c>
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d05c      	beq.n	8007c6a <HAL_TIM_ConfigClockSource+0x15a>
 8007bb0:	2b10      	cmp	r3, #16
 8007bb2:	d05a      	beq.n	8007c6a <HAL_TIM_ConfigClockSource+0x15a>
 8007bb4:	e062      	b.n	8007c7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007bc6:	f000 faf0 	bl	80081aa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007bd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	68ba      	ldr	r2, [r7, #8]
 8007be0:	609a      	str	r2, [r3, #8]
      break;
 8007be2:	e04f      	b.n	8007c84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007bf4:	f000 fad9 	bl	80081aa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	689a      	ldr	r2, [r3, #8]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007c06:	609a      	str	r2, [r3, #8]
      break;
 8007c08:	e03c      	b.n	8007c84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c16:	461a      	mov	r2, r3
 8007c18:	f000 fa50 	bl	80080bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	2150      	movs	r1, #80	; 0x50
 8007c22:	4618      	mov	r0, r3
 8007c24:	f000 faa7 	bl	8008176 <TIM_ITRx_SetConfig>
      break;
 8007c28:	e02c      	b.n	8007c84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c36:	461a      	mov	r2, r3
 8007c38:	f000 fa6e 	bl	8008118 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	2160      	movs	r1, #96	; 0x60
 8007c42:	4618      	mov	r0, r3
 8007c44:	f000 fa97 	bl	8008176 <TIM_ITRx_SetConfig>
      break;
 8007c48:	e01c      	b.n	8007c84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c56:	461a      	mov	r2, r3
 8007c58:	f000 fa30 	bl	80080bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	2140      	movs	r1, #64	; 0x40
 8007c62:	4618      	mov	r0, r3
 8007c64:	f000 fa87 	bl	8008176 <TIM_ITRx_SetConfig>
      break;
 8007c68:	e00c      	b.n	8007c84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4619      	mov	r1, r3
 8007c74:	4610      	mov	r0, r2
 8007c76:	f000 fa7e 	bl	8008176 <TIM_ITRx_SetConfig>
      break;
 8007c7a:	e003      	b.n	8007c84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	73fb      	strb	r3, [r7, #15]
      break;
 8007c80:	e000      	b.n	8007c84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007c82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2201      	movs	r2, #1
 8007c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3710      	adds	r7, #16
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}

08007c9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c9e:	b480      	push	{r7}
 8007ca0:	b083      	sub	sp, #12
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ca6:	bf00      	nop
 8007ca8:	370c      	adds	r7, #12
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bc80      	pop	{r7}
 8007cae:	4770      	bx	lr

08007cb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b083      	sub	sp, #12
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007cb8:	bf00      	nop
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bc80      	pop	{r7}
 8007cc0:	4770      	bx	lr

08007cc2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007cc2:	b480      	push	{r7}
 8007cc4:	b083      	sub	sp, #12
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007cca:	bf00      	nop
 8007ccc:	370c      	adds	r7, #12
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bc80      	pop	{r7}
 8007cd2:	4770      	bx	lr

08007cd4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007cdc:	bf00      	nop
 8007cde:	370c      	adds	r7, #12
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bc80      	pop	{r7}
 8007ce4:	4770      	bx	lr
	...

08007ce8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b085      	sub	sp, #20
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	4a29      	ldr	r2, [pc, #164]	; (8007da0 <TIM_Base_SetConfig+0xb8>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d00b      	beq.n	8007d18 <TIM_Base_SetConfig+0x30>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d06:	d007      	beq.n	8007d18 <TIM_Base_SetConfig+0x30>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	4a26      	ldr	r2, [pc, #152]	; (8007da4 <TIM_Base_SetConfig+0xbc>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d003      	beq.n	8007d18 <TIM_Base_SetConfig+0x30>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4a25      	ldr	r2, [pc, #148]	; (8007da8 <TIM_Base_SetConfig+0xc0>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d108      	bne.n	8007d2a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	4313      	orrs	r3, r2
 8007d28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	4a1c      	ldr	r2, [pc, #112]	; (8007da0 <TIM_Base_SetConfig+0xb8>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d00b      	beq.n	8007d4a <TIM_Base_SetConfig+0x62>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d38:	d007      	beq.n	8007d4a <TIM_Base_SetConfig+0x62>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	4a19      	ldr	r2, [pc, #100]	; (8007da4 <TIM_Base_SetConfig+0xbc>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d003      	beq.n	8007d4a <TIM_Base_SetConfig+0x62>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	4a18      	ldr	r2, [pc, #96]	; (8007da8 <TIM_Base_SetConfig+0xc0>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d108      	bne.n	8007d5c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	68db      	ldr	r3, [r3, #12]
 8007d56:	68fa      	ldr	r2, [r7, #12]
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	695b      	ldr	r3, [r3, #20]
 8007d66:	4313      	orrs	r3, r2
 8007d68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	68fa      	ldr	r2, [r7, #12]
 8007d6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	689a      	ldr	r2, [r3, #8]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	4a07      	ldr	r2, [pc, #28]	; (8007da0 <TIM_Base_SetConfig+0xb8>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d103      	bne.n	8007d90 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	691a      	ldr	r2, [r3, #16]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2201      	movs	r2, #1
 8007d94:	615a      	str	r2, [r3, #20]
}
 8007d96:	bf00      	nop
 8007d98:	3714      	adds	r7, #20
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bc80      	pop	{r7}
 8007d9e:	4770      	bx	lr
 8007da0:	40012c00 	.word	0x40012c00
 8007da4:	40000400 	.word	0x40000400
 8007da8:	40000800 	.word	0x40000800

08007dac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b087      	sub	sp, #28
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6a1b      	ldr	r3, [r3, #32]
 8007dba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6a1b      	ldr	r3, [r3, #32]
 8007dc0:	f023 0201 	bic.w	r2, r3, #1
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	699b      	ldr	r3, [r3, #24]
 8007dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f023 0303 	bic.w	r3, r3, #3
 8007de2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	68fa      	ldr	r2, [r7, #12]
 8007dea:	4313      	orrs	r3, r2
 8007dec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	f023 0302 	bic.w	r3, r3, #2
 8007df4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	689b      	ldr	r3, [r3, #8]
 8007dfa:	697a      	ldr	r2, [r7, #20]
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	4a1c      	ldr	r2, [pc, #112]	; (8007e74 <TIM_OC1_SetConfig+0xc8>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d10c      	bne.n	8007e22 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	f023 0308 	bic.w	r3, r3, #8
 8007e0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	68db      	ldr	r3, [r3, #12]
 8007e14:	697a      	ldr	r2, [r7, #20]
 8007e16:	4313      	orrs	r3, r2
 8007e18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	f023 0304 	bic.w	r3, r3, #4
 8007e20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	4a13      	ldr	r2, [pc, #76]	; (8007e74 <TIM_OC1_SetConfig+0xc8>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d111      	bne.n	8007e4e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	695b      	ldr	r3, [r3, #20]
 8007e3e:	693a      	ldr	r2, [r7, #16]
 8007e40:	4313      	orrs	r3, r2
 8007e42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	699b      	ldr	r3, [r3, #24]
 8007e48:	693a      	ldr	r2, [r7, #16]
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	693a      	ldr	r2, [r7, #16]
 8007e52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	68fa      	ldr	r2, [r7, #12]
 8007e58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	685a      	ldr	r2, [r3, #4]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	697a      	ldr	r2, [r7, #20]
 8007e66:	621a      	str	r2, [r3, #32]
}
 8007e68:	bf00      	nop
 8007e6a:	371c      	adds	r7, #28
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bc80      	pop	{r7}
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop
 8007e74:	40012c00 	.word	0x40012c00

08007e78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b087      	sub	sp, #28
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6a1b      	ldr	r3, [r3, #32]
 8007e86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6a1b      	ldr	r3, [r3, #32]
 8007e8c:	f023 0210 	bic.w	r2, r3, #16
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	699b      	ldr	r3, [r3, #24]
 8007e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007eae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	021b      	lsls	r3, r3, #8
 8007eb6:	68fa      	ldr	r2, [r7, #12]
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	f023 0320 	bic.w	r3, r3, #32
 8007ec2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	011b      	lsls	r3, r3, #4
 8007eca:	697a      	ldr	r2, [r7, #20]
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	4a1d      	ldr	r2, [pc, #116]	; (8007f48 <TIM_OC2_SetConfig+0xd0>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d10d      	bne.n	8007ef4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ede:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	68db      	ldr	r3, [r3, #12]
 8007ee4:	011b      	lsls	r3, r3, #4
 8007ee6:	697a      	ldr	r2, [r7, #20]
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ef2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	4a14      	ldr	r2, [pc, #80]	; (8007f48 <TIM_OC2_SetConfig+0xd0>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d113      	bne.n	8007f24 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	695b      	ldr	r3, [r3, #20]
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	693a      	ldr	r2, [r7, #16]
 8007f14:	4313      	orrs	r3, r2
 8007f16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	699b      	ldr	r3, [r3, #24]
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	693a      	ldr	r2, [r7, #16]
 8007f20:	4313      	orrs	r3, r2
 8007f22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	693a      	ldr	r2, [r7, #16]
 8007f28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	68fa      	ldr	r2, [r7, #12]
 8007f2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	685a      	ldr	r2, [r3, #4]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	697a      	ldr	r2, [r7, #20]
 8007f3c:	621a      	str	r2, [r3, #32]
}
 8007f3e:	bf00      	nop
 8007f40:	371c      	adds	r7, #28
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bc80      	pop	{r7}
 8007f46:	4770      	bx	lr
 8007f48:	40012c00 	.word	0x40012c00

08007f4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b087      	sub	sp, #28
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6a1b      	ldr	r3, [r3, #32]
 8007f5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6a1b      	ldr	r3, [r3, #32]
 8007f60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	69db      	ldr	r3, [r3, #28]
 8007f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f023 0303 	bic.w	r3, r3, #3
 8007f82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	68fa      	ldr	r2, [r7, #12]
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	021b      	lsls	r3, r3, #8
 8007f9c:	697a      	ldr	r2, [r7, #20]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	4a1d      	ldr	r2, [pc, #116]	; (800801c <TIM_OC3_SetConfig+0xd0>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d10d      	bne.n	8007fc6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007fb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	68db      	ldr	r3, [r3, #12]
 8007fb6:	021b      	lsls	r3, r3, #8
 8007fb8:	697a      	ldr	r2, [r7, #20]
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007fc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	4a14      	ldr	r2, [pc, #80]	; (800801c <TIM_OC3_SetConfig+0xd0>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d113      	bne.n	8007ff6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007fd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007fdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	695b      	ldr	r3, [r3, #20]
 8007fe2:	011b      	lsls	r3, r3, #4
 8007fe4:	693a      	ldr	r2, [r7, #16]
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	699b      	ldr	r3, [r3, #24]
 8007fee:	011b      	lsls	r3, r3, #4
 8007ff0:	693a      	ldr	r2, [r7, #16]
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	693a      	ldr	r2, [r7, #16]
 8007ffa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	68fa      	ldr	r2, [r7, #12]
 8008000:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	685a      	ldr	r2, [r3, #4]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	697a      	ldr	r2, [r7, #20]
 800800e:	621a      	str	r2, [r3, #32]
}
 8008010:	bf00      	nop
 8008012:	371c      	adds	r7, #28
 8008014:	46bd      	mov	sp, r7
 8008016:	bc80      	pop	{r7}
 8008018:	4770      	bx	lr
 800801a:	bf00      	nop
 800801c:	40012c00 	.word	0x40012c00

08008020 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008020:	b480      	push	{r7}
 8008022:	b087      	sub	sp, #28
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6a1b      	ldr	r3, [r3, #32]
 800802e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6a1b      	ldr	r3, [r3, #32]
 8008034:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	69db      	ldr	r3, [r3, #28]
 8008046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800804e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008056:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	021b      	lsls	r3, r3, #8
 800805e:	68fa      	ldr	r2, [r7, #12]
 8008060:	4313      	orrs	r3, r2
 8008062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800806a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	031b      	lsls	r3, r3, #12
 8008072:	693a      	ldr	r2, [r7, #16]
 8008074:	4313      	orrs	r3, r2
 8008076:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	4a0f      	ldr	r2, [pc, #60]	; (80080b8 <TIM_OC4_SetConfig+0x98>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d109      	bne.n	8008094 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008086:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	695b      	ldr	r3, [r3, #20]
 800808c:	019b      	lsls	r3, r3, #6
 800808e:	697a      	ldr	r2, [r7, #20]
 8008090:	4313      	orrs	r3, r2
 8008092:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	697a      	ldr	r2, [r7, #20]
 8008098:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	68fa      	ldr	r2, [r7, #12]
 800809e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	685a      	ldr	r2, [r3, #4]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	693a      	ldr	r2, [r7, #16]
 80080ac:	621a      	str	r2, [r3, #32]
}
 80080ae:	bf00      	nop
 80080b0:	371c      	adds	r7, #28
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bc80      	pop	{r7}
 80080b6:	4770      	bx	lr
 80080b8:	40012c00 	.word	0x40012c00

080080bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080bc:	b480      	push	{r7}
 80080be:	b087      	sub	sp, #28
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	60f8      	str	r0, [r7, #12]
 80080c4:	60b9      	str	r1, [r7, #8]
 80080c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	6a1b      	ldr	r3, [r3, #32]
 80080cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	6a1b      	ldr	r3, [r3, #32]
 80080d2:	f023 0201 	bic.w	r2, r3, #1
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	699b      	ldr	r3, [r3, #24]
 80080de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80080e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	011b      	lsls	r3, r3, #4
 80080ec:	693a      	ldr	r2, [r7, #16]
 80080ee:	4313      	orrs	r3, r2
 80080f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	f023 030a 	bic.w	r3, r3, #10
 80080f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80080fa:	697a      	ldr	r2, [r7, #20]
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	4313      	orrs	r3, r2
 8008100:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	693a      	ldr	r2, [r7, #16]
 8008106:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	697a      	ldr	r2, [r7, #20]
 800810c:	621a      	str	r2, [r3, #32]
}
 800810e:	bf00      	nop
 8008110:	371c      	adds	r7, #28
 8008112:	46bd      	mov	sp, r7
 8008114:	bc80      	pop	{r7}
 8008116:	4770      	bx	lr

08008118 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008118:	b480      	push	{r7}
 800811a:	b087      	sub	sp, #28
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	6a1b      	ldr	r3, [r3, #32]
 8008128:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	6a1b      	ldr	r3, [r3, #32]
 800812e:	f023 0210 	bic.w	r2, r3, #16
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	699b      	ldr	r3, [r3, #24]
 800813a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008142:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	031b      	lsls	r3, r3, #12
 8008148:	693a      	ldr	r2, [r7, #16]
 800814a:	4313      	orrs	r3, r2
 800814c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008154:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	011b      	lsls	r3, r3, #4
 800815a:	697a      	ldr	r2, [r7, #20]
 800815c:	4313      	orrs	r3, r2
 800815e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	693a      	ldr	r2, [r7, #16]
 8008164:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	697a      	ldr	r2, [r7, #20]
 800816a:	621a      	str	r2, [r3, #32]
}
 800816c:	bf00      	nop
 800816e:	371c      	adds	r7, #28
 8008170:	46bd      	mov	sp, r7
 8008172:	bc80      	pop	{r7}
 8008174:	4770      	bx	lr

08008176 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008176:	b480      	push	{r7}
 8008178:	b085      	sub	sp, #20
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
 800817e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800818c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800818e:	683a      	ldr	r2, [r7, #0]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	4313      	orrs	r3, r2
 8008194:	f043 0307 	orr.w	r3, r3, #7
 8008198:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	68fa      	ldr	r2, [r7, #12]
 800819e:	609a      	str	r2, [r3, #8]
}
 80081a0:	bf00      	nop
 80081a2:	3714      	adds	r7, #20
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bc80      	pop	{r7}
 80081a8:	4770      	bx	lr

080081aa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80081aa:	b480      	push	{r7}
 80081ac:	b087      	sub	sp, #28
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	60f8      	str	r0, [r7, #12]
 80081b2:	60b9      	str	r1, [r7, #8]
 80081b4:	607a      	str	r2, [r7, #4]
 80081b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	689b      	ldr	r3, [r3, #8]
 80081bc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80081c4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	021a      	lsls	r2, r3, #8
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	431a      	orrs	r2, r3
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	4313      	orrs	r3, r2
 80081d2:	697a      	ldr	r2, [r7, #20]
 80081d4:	4313      	orrs	r3, r2
 80081d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	697a      	ldr	r2, [r7, #20]
 80081dc:	609a      	str	r2, [r3, #8]
}
 80081de:	bf00      	nop
 80081e0:	371c      	adds	r7, #28
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bc80      	pop	{r7}
 80081e6:	4770      	bx	lr

080081e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b087      	sub	sp, #28
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	60f8      	str	r0, [r7, #12]
 80081f0:	60b9      	str	r1, [r7, #8]
 80081f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	f003 031f 	and.w	r3, r3, #31
 80081fa:	2201      	movs	r2, #1
 80081fc:	fa02 f303 	lsl.w	r3, r2, r3
 8008200:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	6a1a      	ldr	r2, [r3, #32]
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	43db      	mvns	r3, r3
 800820a:	401a      	ands	r2, r3
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	6a1a      	ldr	r2, [r3, #32]
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	f003 031f 	and.w	r3, r3, #31
 800821a:	6879      	ldr	r1, [r7, #4]
 800821c:	fa01 f303 	lsl.w	r3, r1, r3
 8008220:	431a      	orrs	r2, r3
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	621a      	str	r2, [r3, #32]
}
 8008226:	bf00      	nop
 8008228:	371c      	adds	r7, #28
 800822a:	46bd      	mov	sp, r7
 800822c:	bc80      	pop	{r7}
 800822e:	4770      	bx	lr

08008230 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008230:	b480      	push	{r7}
 8008232:	b085      	sub	sp, #20
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008240:	2b01      	cmp	r3, #1
 8008242:	d101      	bne.n	8008248 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008244:	2302      	movs	r3, #2
 8008246:	e046      	b.n	80082d6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2201      	movs	r2, #1
 800824c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2202      	movs	r2, #2
 8008254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800826e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	68fa      	ldr	r2, [r7, #12]
 8008276:	4313      	orrs	r3, r2
 8008278:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	68fa      	ldr	r2, [r7, #12]
 8008280:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a16      	ldr	r2, [pc, #88]	; (80082e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d00e      	beq.n	80082aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008294:	d009      	beq.n	80082aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a12      	ldr	r2, [pc, #72]	; (80082e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d004      	beq.n	80082aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a10      	ldr	r2, [pc, #64]	; (80082e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d10c      	bne.n	80082c4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	68ba      	ldr	r2, [r7, #8]
 80082b8:	4313      	orrs	r3, r2
 80082ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	68ba      	ldr	r2, [r7, #8]
 80082c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2201      	movs	r2, #1
 80082c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2200      	movs	r2, #0
 80082d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80082d4:	2300      	movs	r3, #0
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3714      	adds	r7, #20
 80082da:	46bd      	mov	sp, r7
 80082dc:	bc80      	pop	{r7}
 80082de:	4770      	bx	lr
 80082e0:	40012c00 	.word	0x40012c00
 80082e4:	40000400 	.word	0x40000400
 80082e8:	40000800 	.word	0x40000800

080082ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b083      	sub	sp, #12
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80082f4:	bf00      	nop
 80082f6:	370c      	adds	r7, #12
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bc80      	pop	{r7}
 80082fc:	4770      	bx	lr

080082fe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80082fe:	b480      	push	{r7}
 8008300:	b083      	sub	sp, #12
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008306:	bf00      	nop
 8008308:	370c      	adds	r7, #12
 800830a:	46bd      	mov	sp, r7
 800830c:	bc80      	pop	{r7}
 800830e:	4770      	bx	lr

08008310 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b082      	sub	sp, #8
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d101      	bne.n	8008322 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800831e:	2301      	movs	r3, #1
 8008320:	e042      	b.n	80083a8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008328:	b2db      	uxtb	r3, r3
 800832a:	2b00      	cmp	r3, #0
 800832c:	d106      	bne.n	800833c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2200      	movs	r2, #0
 8008332:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f7fc ff42 	bl	80051c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2224      	movs	r2, #36	; 0x24
 8008340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	68da      	ldr	r2, [r3, #12]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008352:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 fc7f 	bl	8008c58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	691a      	ldr	r2, [r3, #16]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008368:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	695a      	ldr	r2, [r3, #20]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008378:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	68da      	ldr	r2, [r3, #12]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008388:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2220      	movs	r2, #32
 8008394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2220      	movs	r2, #32
 800839c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80083a6:	2300      	movs	r3, #0
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3708      	adds	r7, #8
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b0ba      	sub	sp, #232	; 0xe8
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	68db      	ldr	r3, [r3, #12]
 80083c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	695b      	ldr	r3, [r3, #20]
 80083d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80083d6:	2300      	movs	r3, #0
 80083d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80083dc:	2300      	movs	r3, #0
 80083de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80083e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083e6:	f003 030f 	and.w	r3, r3, #15
 80083ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80083ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d10f      	bne.n	8008416 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80083f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083fa:	f003 0320 	and.w	r3, r3, #32
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d009      	beq.n	8008416 <HAL_UART_IRQHandler+0x66>
 8008402:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008406:	f003 0320 	and.w	r3, r3, #32
 800840a:	2b00      	cmp	r3, #0
 800840c:	d003      	beq.n	8008416 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 fb63 	bl	8008ada <UART_Receive_IT>
      return;
 8008414:	e25b      	b.n	80088ce <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008416:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800841a:	2b00      	cmp	r3, #0
 800841c:	f000 80de 	beq.w	80085dc <HAL_UART_IRQHandler+0x22c>
 8008420:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008424:	f003 0301 	and.w	r3, r3, #1
 8008428:	2b00      	cmp	r3, #0
 800842a:	d106      	bne.n	800843a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800842c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008430:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008434:	2b00      	cmp	r3, #0
 8008436:	f000 80d1 	beq.w	80085dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800843a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800843e:	f003 0301 	and.w	r3, r3, #1
 8008442:	2b00      	cmp	r3, #0
 8008444:	d00b      	beq.n	800845e <HAL_UART_IRQHandler+0xae>
 8008446:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800844a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800844e:	2b00      	cmp	r3, #0
 8008450:	d005      	beq.n	800845e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008456:	f043 0201 	orr.w	r2, r3, #1
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800845e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008462:	f003 0304 	and.w	r3, r3, #4
 8008466:	2b00      	cmp	r3, #0
 8008468:	d00b      	beq.n	8008482 <HAL_UART_IRQHandler+0xd2>
 800846a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800846e:	f003 0301 	and.w	r3, r3, #1
 8008472:	2b00      	cmp	r3, #0
 8008474:	d005      	beq.n	8008482 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800847a:	f043 0202 	orr.w	r2, r3, #2
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008486:	f003 0302 	and.w	r3, r3, #2
 800848a:	2b00      	cmp	r3, #0
 800848c:	d00b      	beq.n	80084a6 <HAL_UART_IRQHandler+0xf6>
 800848e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008492:	f003 0301 	and.w	r3, r3, #1
 8008496:	2b00      	cmp	r3, #0
 8008498:	d005      	beq.n	80084a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800849e:	f043 0204 	orr.w	r2, r3, #4
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80084a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084aa:	f003 0308 	and.w	r3, r3, #8
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d011      	beq.n	80084d6 <HAL_UART_IRQHandler+0x126>
 80084b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084b6:	f003 0320 	and.w	r3, r3, #32
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d105      	bne.n	80084ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80084be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084c2:	f003 0301 	and.w	r3, r3, #1
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d005      	beq.n	80084d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084ce:	f043 0208 	orr.w	r2, r3, #8
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084da:	2b00      	cmp	r3, #0
 80084dc:	f000 81f2 	beq.w	80088c4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80084e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084e4:	f003 0320 	and.w	r3, r3, #32
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d008      	beq.n	80084fe <HAL_UART_IRQHandler+0x14e>
 80084ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084f0:	f003 0320 	and.w	r3, r3, #32
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d002      	beq.n	80084fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f000 faee 	bl	8008ada <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	695b      	ldr	r3, [r3, #20]
 8008504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008508:	2b00      	cmp	r3, #0
 800850a:	bf14      	ite	ne
 800850c:	2301      	movne	r3, #1
 800850e:	2300      	moveq	r3, #0
 8008510:	b2db      	uxtb	r3, r3
 8008512:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800851a:	f003 0308 	and.w	r3, r3, #8
 800851e:	2b00      	cmp	r3, #0
 8008520:	d103      	bne.n	800852a <HAL_UART_IRQHandler+0x17a>
 8008522:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008526:	2b00      	cmp	r3, #0
 8008528:	d04f      	beq.n	80085ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 f9f8 	bl	8008920 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	695b      	ldr	r3, [r3, #20]
 8008536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800853a:	2b00      	cmp	r3, #0
 800853c:	d041      	beq.n	80085c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	3314      	adds	r3, #20
 8008544:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008548:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800854c:	e853 3f00 	ldrex	r3, [r3]
 8008550:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008554:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008558:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800855c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	3314      	adds	r3, #20
 8008566:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800856a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800856e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008572:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008576:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800857a:	e841 2300 	strex	r3, r2, [r1]
 800857e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008582:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008586:	2b00      	cmp	r3, #0
 8008588:	d1d9      	bne.n	800853e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800858e:	2b00      	cmp	r3, #0
 8008590:	d013      	beq.n	80085ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008596:	4a7e      	ldr	r2, [pc, #504]	; (8008790 <HAL_UART_IRQHandler+0x3e0>)
 8008598:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800859e:	4618      	mov	r0, r3
 80085a0:	f7fd f830 	bl	8005604 <HAL_DMA_Abort_IT>
 80085a4:	4603      	mov	r3, r0
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d016      	beq.n	80085d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085b0:	687a      	ldr	r2, [r7, #4]
 80085b2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80085b4:	4610      	mov	r0, r2
 80085b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085b8:	e00e      	b.n	80085d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 f99c 	bl	80088f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085c0:	e00a      	b.n	80085d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 f998 	bl	80088f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085c8:	e006      	b.n	80085d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 f994 	bl	80088f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2200      	movs	r2, #0
 80085d4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80085d6:	e175      	b.n	80088c4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085d8:	bf00      	nop
    return;
 80085da:	e173      	b.n	80088c4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	f040 814f 	bne.w	8008884 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80085e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085ea:	f003 0310 	and.w	r3, r3, #16
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	f000 8148 	beq.w	8008884 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80085f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085f8:	f003 0310 	and.w	r3, r3, #16
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	f000 8141 	beq.w	8008884 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008602:	2300      	movs	r3, #0
 8008604:	60bb      	str	r3, [r7, #8]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	60bb      	str	r3, [r7, #8]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	60bb      	str	r3, [r7, #8]
 8008616:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	695b      	ldr	r3, [r3, #20]
 800861e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008622:	2b00      	cmp	r3, #0
 8008624:	f000 80b6 	beq.w	8008794 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008634:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008638:	2b00      	cmp	r3, #0
 800863a:	f000 8145 	beq.w	80088c8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008642:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008646:	429a      	cmp	r2, r3
 8008648:	f080 813e 	bcs.w	80088c8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008652:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008658:	699b      	ldr	r3, [r3, #24]
 800865a:	2b20      	cmp	r3, #32
 800865c:	f000 8088 	beq.w	8008770 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	330c      	adds	r3, #12
 8008666:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800866a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800866e:	e853 3f00 	ldrex	r3, [r3]
 8008672:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008676:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800867a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800867e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	330c      	adds	r3, #12
 8008688:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800868c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008690:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008694:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008698:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800869c:	e841 2300 	strex	r3, r2, [r1]
 80086a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80086a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d1d9      	bne.n	8008660 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	3314      	adds	r3, #20
 80086b2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086b6:	e853 3f00 	ldrex	r3, [r3]
 80086ba:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80086bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80086be:	f023 0301 	bic.w	r3, r3, #1
 80086c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	3314      	adds	r3, #20
 80086cc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80086d0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80086d4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80086d8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80086dc:	e841 2300 	strex	r3, r2, [r1]
 80086e0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80086e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d1e1      	bne.n	80086ac <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	3314      	adds	r3, #20
 80086ee:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80086f2:	e853 3f00 	ldrex	r3, [r3]
 80086f6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80086f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	3314      	adds	r3, #20
 8008708:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800870c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800870e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008710:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008712:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008714:	e841 2300 	strex	r3, r2, [r1]
 8008718:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800871a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800871c:	2b00      	cmp	r3, #0
 800871e:	d1e3      	bne.n	80086e8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2220      	movs	r2, #32
 8008724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2200      	movs	r2, #0
 800872c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	330c      	adds	r3, #12
 8008734:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008738:	e853 3f00 	ldrex	r3, [r3]
 800873c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800873e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008740:	f023 0310 	bic.w	r3, r3, #16
 8008744:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	330c      	adds	r3, #12
 800874e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008752:	65ba      	str	r2, [r7, #88]	; 0x58
 8008754:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008756:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008758:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800875a:	e841 2300 	strex	r3, r2, [r1]
 800875e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008760:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008762:	2b00      	cmp	r3, #0
 8008764:	d1e3      	bne.n	800872e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800876a:	4618      	mov	r0, r3
 800876c:	f7fc ff0f 	bl	800558e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2202      	movs	r2, #2
 8008774:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800877e:	b29b      	uxth	r3, r3
 8008780:	1ad3      	subs	r3, r2, r3
 8008782:	b29b      	uxth	r3, r3
 8008784:	4619      	mov	r1, r3
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f000 f8bf 	bl	800890a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800878c:	e09c      	b.n	80088c8 <HAL_UART_IRQHandler+0x518>
 800878e:	bf00      	nop
 8008790:	080089e5 	.word	0x080089e5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800879c:	b29b      	uxth	r3, r3
 800879e:	1ad3      	subs	r3, r2, r3
 80087a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	f000 808e 	beq.w	80088cc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80087b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	f000 8089 	beq.w	80088cc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	330c      	adds	r3, #12
 80087c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087c4:	e853 3f00 	ldrex	r3, [r3]
 80087c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80087ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80087d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	330c      	adds	r3, #12
 80087da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80087de:	647a      	str	r2, [r7, #68]	; 0x44
 80087e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80087e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087e6:	e841 2300 	strex	r3, r2, [r1]
 80087ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80087ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d1e3      	bne.n	80087ba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	3314      	adds	r3, #20
 80087f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087fc:	e853 3f00 	ldrex	r3, [r3]
 8008800:	623b      	str	r3, [r7, #32]
   return(result);
 8008802:	6a3b      	ldr	r3, [r7, #32]
 8008804:	f023 0301 	bic.w	r3, r3, #1
 8008808:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	3314      	adds	r3, #20
 8008812:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008816:	633a      	str	r2, [r7, #48]	; 0x30
 8008818:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800881a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800881c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800881e:	e841 2300 	strex	r3, r2, [r1]
 8008822:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008826:	2b00      	cmp	r3, #0
 8008828:	d1e3      	bne.n	80087f2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2220      	movs	r2, #32
 800882e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	330c      	adds	r3, #12
 800883e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	e853 3f00 	ldrex	r3, [r3]
 8008846:	60fb      	str	r3, [r7, #12]
   return(result);
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f023 0310 	bic.w	r3, r3, #16
 800884e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	330c      	adds	r3, #12
 8008858:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800885c:	61fa      	str	r2, [r7, #28]
 800885e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008860:	69b9      	ldr	r1, [r7, #24]
 8008862:	69fa      	ldr	r2, [r7, #28]
 8008864:	e841 2300 	strex	r3, r2, [r1]
 8008868:	617b      	str	r3, [r7, #20]
   return(result);
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d1e3      	bne.n	8008838 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2202      	movs	r2, #2
 8008874:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008876:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800887a:	4619      	mov	r1, r3
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 f844 	bl	800890a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008882:	e023      	b.n	80088cc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800888c:	2b00      	cmp	r3, #0
 800888e:	d009      	beq.n	80088a4 <HAL_UART_IRQHandler+0x4f4>
 8008890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008898:	2b00      	cmp	r3, #0
 800889a:	d003      	beq.n	80088a4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f000 f8b5 	bl	8008a0c <UART_Transmit_IT>
    return;
 80088a2:	e014      	b.n	80088ce <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80088a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d00e      	beq.n	80088ce <HAL_UART_IRQHandler+0x51e>
 80088b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d008      	beq.n	80088ce <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 f8f4 	bl	8008aaa <UART_EndTransmit_IT>
    return;
 80088c2:	e004      	b.n	80088ce <HAL_UART_IRQHandler+0x51e>
    return;
 80088c4:	bf00      	nop
 80088c6:	e002      	b.n	80088ce <HAL_UART_IRQHandler+0x51e>
      return;
 80088c8:	bf00      	nop
 80088ca:	e000      	b.n	80088ce <HAL_UART_IRQHandler+0x51e>
      return;
 80088cc:	bf00      	nop
  }
}
 80088ce:	37e8      	adds	r7, #232	; 0xe8
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80088dc:	bf00      	nop
 80088de:	370c      	adds	r7, #12
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bc80      	pop	{r7}
 80088e4:	4770      	bx	lr

080088e6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80088e6:	b480      	push	{r7}
 80088e8:	b083      	sub	sp, #12
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80088ee:	bf00      	nop
 80088f0:	370c      	adds	r7, #12
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bc80      	pop	{r7}
 80088f6:	4770      	bx	lr

080088f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b083      	sub	sp, #12
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008900:	bf00      	nop
 8008902:	370c      	adds	r7, #12
 8008904:	46bd      	mov	sp, r7
 8008906:	bc80      	pop	{r7}
 8008908:	4770      	bx	lr

0800890a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800890a:	b480      	push	{r7}
 800890c:	b083      	sub	sp, #12
 800890e:	af00      	add	r7, sp, #0
 8008910:	6078      	str	r0, [r7, #4]
 8008912:	460b      	mov	r3, r1
 8008914:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008916:	bf00      	nop
 8008918:	370c      	adds	r7, #12
 800891a:	46bd      	mov	sp, r7
 800891c:	bc80      	pop	{r7}
 800891e:	4770      	bx	lr

08008920 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008920:	b480      	push	{r7}
 8008922:	b095      	sub	sp, #84	; 0x54
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	330c      	adds	r3, #12
 800892e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008932:	e853 3f00 	ldrex	r3, [r3]
 8008936:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800893a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800893e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	330c      	adds	r3, #12
 8008946:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008948:	643a      	str	r2, [r7, #64]	; 0x40
 800894a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800894c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800894e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008950:	e841 2300 	strex	r3, r2, [r1]
 8008954:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008958:	2b00      	cmp	r3, #0
 800895a:	d1e5      	bne.n	8008928 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	3314      	adds	r3, #20
 8008962:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008964:	6a3b      	ldr	r3, [r7, #32]
 8008966:	e853 3f00 	ldrex	r3, [r3]
 800896a:	61fb      	str	r3, [r7, #28]
   return(result);
 800896c:	69fb      	ldr	r3, [r7, #28]
 800896e:	f023 0301 	bic.w	r3, r3, #1
 8008972:	64bb      	str	r3, [r7, #72]	; 0x48
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	3314      	adds	r3, #20
 800897a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800897c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800897e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008980:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008982:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008984:	e841 2300 	strex	r3, r2, [r1]
 8008988:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800898a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898c:	2b00      	cmp	r3, #0
 800898e:	d1e5      	bne.n	800895c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008994:	2b01      	cmp	r3, #1
 8008996:	d119      	bne.n	80089cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	330c      	adds	r3, #12
 800899e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	e853 3f00 	ldrex	r3, [r3]
 80089a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	f023 0310 	bic.w	r3, r3, #16
 80089ae:	647b      	str	r3, [r7, #68]	; 0x44
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	330c      	adds	r3, #12
 80089b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089b8:	61ba      	str	r2, [r7, #24]
 80089ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089bc:	6979      	ldr	r1, [r7, #20]
 80089be:	69ba      	ldr	r2, [r7, #24]
 80089c0:	e841 2300 	strex	r3, r2, [r1]
 80089c4:	613b      	str	r3, [r7, #16]
   return(result);
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d1e5      	bne.n	8008998 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2220      	movs	r2, #32
 80089d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2200      	movs	r2, #0
 80089d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80089da:	bf00      	nop
 80089dc:	3754      	adds	r7, #84	; 0x54
 80089de:	46bd      	mov	sp, r7
 80089e0:	bc80      	pop	{r7}
 80089e2:	4770      	bx	lr

080089e4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	2200      	movs	r2, #0
 80089f6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2200      	movs	r2, #0
 80089fc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80089fe:	68f8      	ldr	r0, [r7, #12]
 8008a00:	f7ff ff7a 	bl	80088f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a04:	bf00      	nop
 8008a06:	3710      	adds	r7, #16
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b085      	sub	sp, #20
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	2b21      	cmp	r3, #33	; 0x21
 8008a1e:	d13e      	bne.n	8008a9e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	689b      	ldr	r3, [r3, #8]
 8008a24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a28:	d114      	bne.n	8008a54 <UART_Transmit_IT+0x48>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	691b      	ldr	r3, [r3, #16]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d110      	bne.n	8008a54 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6a1b      	ldr	r3, [r3, #32]
 8008a36:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	881b      	ldrh	r3, [r3, #0]
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a46:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6a1b      	ldr	r3, [r3, #32]
 8008a4c:	1c9a      	adds	r2, r3, #2
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	621a      	str	r2, [r3, #32]
 8008a52:	e008      	b.n	8008a66 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6a1b      	ldr	r3, [r3, #32]
 8008a58:	1c59      	adds	r1, r3, #1
 8008a5a:	687a      	ldr	r2, [r7, #4]
 8008a5c:	6211      	str	r1, [r2, #32]
 8008a5e:	781a      	ldrb	r2, [r3, #0]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	3b01      	subs	r3, #1
 8008a6e:	b29b      	uxth	r3, r3
 8008a70:	687a      	ldr	r2, [r7, #4]
 8008a72:	4619      	mov	r1, r3
 8008a74:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d10f      	bne.n	8008a9a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	68da      	ldr	r2, [r3, #12]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a88:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	68da      	ldr	r2, [r3, #12]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a98:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	e000      	b.n	8008aa0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008a9e:	2302      	movs	r3, #2
  }
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3714      	adds	r7, #20
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bc80      	pop	{r7}
 8008aa8:	4770      	bx	lr

08008aaa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008aaa:	b580      	push	{r7, lr}
 8008aac:	b082      	sub	sp, #8
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	68da      	ldr	r2, [r3, #12]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ac0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2220      	movs	r2, #32
 8008ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f7ff ff02 	bl	80088d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008ad0:	2300      	movs	r3, #0
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3708      	adds	r7, #8
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}

08008ada <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008ada:	b580      	push	{r7, lr}
 8008adc:	b08c      	sub	sp, #48	; 0x30
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008ae8:	b2db      	uxtb	r3, r3
 8008aea:	2b22      	cmp	r3, #34	; 0x22
 8008aec:	f040 80ae 	bne.w	8008c4c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008af8:	d117      	bne.n	8008b2a <UART_Receive_IT+0x50>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	691b      	ldr	r3, [r3, #16]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d113      	bne.n	8008b2a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008b02:	2300      	movs	r3, #0
 8008b04:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b0a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b18:	b29a      	uxth	r2, r3
 8008b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b1c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b22:	1c9a      	adds	r2, r3, #2
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	629a      	str	r2, [r3, #40]	; 0x28
 8008b28:	e026      	b.n	8008b78 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008b30:	2300      	movs	r3, #0
 8008b32:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	689b      	ldr	r3, [r3, #8]
 8008b38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b3c:	d007      	beq.n	8008b4e <UART_Receive_IT+0x74>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	689b      	ldr	r3, [r3, #8]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d10a      	bne.n	8008b5c <UART_Receive_IT+0x82>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	691b      	ldr	r3, [r3, #16]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d106      	bne.n	8008b5c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	b2da      	uxtb	r2, r3
 8008b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b58:	701a      	strb	r2, [r3, #0]
 8008b5a:	e008      	b.n	8008b6e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b68:	b2da      	uxtb	r2, r3
 8008b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b6c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b72:	1c5a      	adds	r2, r3, #1
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b7c:	b29b      	uxth	r3, r3
 8008b7e:	3b01      	subs	r3, #1
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	687a      	ldr	r2, [r7, #4]
 8008b84:	4619      	mov	r1, r3
 8008b86:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d15d      	bne.n	8008c48 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	68da      	ldr	r2, [r3, #12]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f022 0220 	bic.w	r2, r2, #32
 8008b9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	68da      	ldr	r2, [r3, #12]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008baa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	695a      	ldr	r2, [r3, #20]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f022 0201 	bic.w	r2, r2, #1
 8008bba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2220      	movs	r2, #32
 8008bc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d135      	bne.n	8008c3e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	330c      	adds	r3, #12
 8008bde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	e853 3f00 	ldrex	r3, [r3]
 8008be6:	613b      	str	r3, [r7, #16]
   return(result);
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	f023 0310 	bic.w	r3, r3, #16
 8008bee:	627b      	str	r3, [r7, #36]	; 0x24
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	330c      	adds	r3, #12
 8008bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bf8:	623a      	str	r2, [r7, #32]
 8008bfa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bfc:	69f9      	ldr	r1, [r7, #28]
 8008bfe:	6a3a      	ldr	r2, [r7, #32]
 8008c00:	e841 2300 	strex	r3, r2, [r1]
 8008c04:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c06:	69bb      	ldr	r3, [r7, #24]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d1e5      	bne.n	8008bd8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f003 0310 	and.w	r3, r3, #16
 8008c16:	2b10      	cmp	r3, #16
 8008c18:	d10a      	bne.n	8008c30 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	60fb      	str	r3, [r7, #12]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	60fb      	str	r3, [r7, #12]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	60fb      	str	r3, [r7, #12]
 8008c2e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008c34:	4619      	mov	r1, r3
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f7ff fe67 	bl	800890a <HAL_UARTEx_RxEventCallback>
 8008c3c:	e002      	b.n	8008c44 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f7ff fe51 	bl	80088e6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008c44:	2300      	movs	r3, #0
 8008c46:	e002      	b.n	8008c4e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	e000      	b.n	8008c4e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008c4c:	2302      	movs	r3, #2
  }
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3730      	adds	r7, #48	; 0x30
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
	...

08008c58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	691b      	ldr	r3, [r3, #16]
 8008c66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	68da      	ldr	r2, [r3, #12]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	430a      	orrs	r2, r1
 8008c74:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	689a      	ldr	r2, [r3, #8]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	691b      	ldr	r3, [r3, #16]
 8008c7e:	431a      	orrs	r2, r3
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	695b      	ldr	r3, [r3, #20]
 8008c84:	4313      	orrs	r3, r2
 8008c86:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	68db      	ldr	r3, [r3, #12]
 8008c8e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008c92:	f023 030c 	bic.w	r3, r3, #12
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	6812      	ldr	r2, [r2, #0]
 8008c9a:	68b9      	ldr	r1, [r7, #8]
 8008c9c:	430b      	orrs	r3, r1
 8008c9e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	695b      	ldr	r3, [r3, #20]
 8008ca6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	699a      	ldr	r2, [r3, #24]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	430a      	orrs	r2, r1
 8008cb4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a2c      	ldr	r2, [pc, #176]	; (8008d6c <UART_SetConfig+0x114>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d103      	bne.n	8008cc8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008cc0:	f7fe faec 	bl	800729c <HAL_RCC_GetPCLK2Freq>
 8008cc4:	60f8      	str	r0, [r7, #12]
 8008cc6:	e002      	b.n	8008cce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008cc8:	f7fe fad4 	bl	8007274 <HAL_RCC_GetPCLK1Freq>
 8008ccc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008cce:	68fa      	ldr	r2, [r7, #12]
 8008cd0:	4613      	mov	r3, r2
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	4413      	add	r3, r2
 8008cd6:	009a      	lsls	r2, r3, #2
 8008cd8:	441a      	add	r2, r3
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ce4:	4a22      	ldr	r2, [pc, #136]	; (8008d70 <UART_SetConfig+0x118>)
 8008ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8008cea:	095b      	lsrs	r3, r3, #5
 8008cec:	0119      	lsls	r1, r3, #4
 8008cee:	68fa      	ldr	r2, [r7, #12]
 8008cf0:	4613      	mov	r3, r2
 8008cf2:	009b      	lsls	r3, r3, #2
 8008cf4:	4413      	add	r3, r2
 8008cf6:	009a      	lsls	r2, r3, #2
 8008cf8:	441a      	add	r2, r3
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	009b      	lsls	r3, r3, #2
 8008d00:	fbb2 f2f3 	udiv	r2, r2, r3
 8008d04:	4b1a      	ldr	r3, [pc, #104]	; (8008d70 <UART_SetConfig+0x118>)
 8008d06:	fba3 0302 	umull	r0, r3, r3, r2
 8008d0a:	095b      	lsrs	r3, r3, #5
 8008d0c:	2064      	movs	r0, #100	; 0x64
 8008d0e:	fb00 f303 	mul.w	r3, r0, r3
 8008d12:	1ad3      	subs	r3, r2, r3
 8008d14:	011b      	lsls	r3, r3, #4
 8008d16:	3332      	adds	r3, #50	; 0x32
 8008d18:	4a15      	ldr	r2, [pc, #84]	; (8008d70 <UART_SetConfig+0x118>)
 8008d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8008d1e:	095b      	lsrs	r3, r3, #5
 8008d20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d24:	4419      	add	r1, r3
 8008d26:	68fa      	ldr	r2, [r7, #12]
 8008d28:	4613      	mov	r3, r2
 8008d2a:	009b      	lsls	r3, r3, #2
 8008d2c:	4413      	add	r3, r2
 8008d2e:	009a      	lsls	r2, r3, #2
 8008d30:	441a      	add	r2, r3
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	fbb2 f2f3 	udiv	r2, r2, r3
 8008d3c:	4b0c      	ldr	r3, [pc, #48]	; (8008d70 <UART_SetConfig+0x118>)
 8008d3e:	fba3 0302 	umull	r0, r3, r3, r2
 8008d42:	095b      	lsrs	r3, r3, #5
 8008d44:	2064      	movs	r0, #100	; 0x64
 8008d46:	fb00 f303 	mul.w	r3, r0, r3
 8008d4a:	1ad3      	subs	r3, r2, r3
 8008d4c:	011b      	lsls	r3, r3, #4
 8008d4e:	3332      	adds	r3, #50	; 0x32
 8008d50:	4a07      	ldr	r2, [pc, #28]	; (8008d70 <UART_SetConfig+0x118>)
 8008d52:	fba2 2303 	umull	r2, r3, r2, r3
 8008d56:	095b      	lsrs	r3, r3, #5
 8008d58:	f003 020f 	and.w	r2, r3, #15
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	440a      	add	r2, r1
 8008d62:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008d64:	bf00      	nop
 8008d66:	3710      	adds	r7, #16
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}
 8008d6c:	40013800 	.word	0x40013800
 8008d70:	51eb851f 	.word	0x51eb851f

08008d74 <__cvt>:
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d7a:	461f      	mov	r7, r3
 8008d7c:	bfbb      	ittet	lt
 8008d7e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008d82:	461f      	movlt	r7, r3
 8008d84:	2300      	movge	r3, #0
 8008d86:	232d      	movlt	r3, #45	; 0x2d
 8008d88:	b088      	sub	sp, #32
 8008d8a:	4614      	mov	r4, r2
 8008d8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008d8e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008d90:	7013      	strb	r3, [r2, #0]
 8008d92:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008d94:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008d98:	f023 0820 	bic.w	r8, r3, #32
 8008d9c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008da0:	d005      	beq.n	8008dae <__cvt+0x3a>
 8008da2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008da6:	d100      	bne.n	8008daa <__cvt+0x36>
 8008da8:	3501      	adds	r5, #1
 8008daa:	2302      	movs	r3, #2
 8008dac:	e000      	b.n	8008db0 <__cvt+0x3c>
 8008dae:	2303      	movs	r3, #3
 8008db0:	aa07      	add	r2, sp, #28
 8008db2:	9204      	str	r2, [sp, #16]
 8008db4:	aa06      	add	r2, sp, #24
 8008db6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008dba:	e9cd 3500 	strd	r3, r5, [sp]
 8008dbe:	4622      	mov	r2, r4
 8008dc0:	463b      	mov	r3, r7
 8008dc2:	f001 f885 	bl	8009ed0 <_dtoa_r>
 8008dc6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008dca:	4606      	mov	r6, r0
 8008dcc:	d102      	bne.n	8008dd4 <__cvt+0x60>
 8008dce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008dd0:	07db      	lsls	r3, r3, #31
 8008dd2:	d522      	bpl.n	8008e1a <__cvt+0xa6>
 8008dd4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008dd8:	eb06 0905 	add.w	r9, r6, r5
 8008ddc:	d110      	bne.n	8008e00 <__cvt+0x8c>
 8008dde:	7833      	ldrb	r3, [r6, #0]
 8008de0:	2b30      	cmp	r3, #48	; 0x30
 8008de2:	d10a      	bne.n	8008dfa <__cvt+0x86>
 8008de4:	2200      	movs	r2, #0
 8008de6:	2300      	movs	r3, #0
 8008de8:	4620      	mov	r0, r4
 8008dea:	4639      	mov	r1, r7
 8008dec:	f7f7 fddc 	bl	80009a8 <__aeabi_dcmpeq>
 8008df0:	b918      	cbnz	r0, 8008dfa <__cvt+0x86>
 8008df2:	f1c5 0501 	rsb	r5, r5, #1
 8008df6:	f8ca 5000 	str.w	r5, [sl]
 8008dfa:	f8da 3000 	ldr.w	r3, [sl]
 8008dfe:	4499      	add	r9, r3
 8008e00:	2200      	movs	r2, #0
 8008e02:	2300      	movs	r3, #0
 8008e04:	4620      	mov	r0, r4
 8008e06:	4639      	mov	r1, r7
 8008e08:	f7f7 fdce 	bl	80009a8 <__aeabi_dcmpeq>
 8008e0c:	b108      	cbz	r0, 8008e12 <__cvt+0x9e>
 8008e0e:	f8cd 901c 	str.w	r9, [sp, #28]
 8008e12:	2230      	movs	r2, #48	; 0x30
 8008e14:	9b07      	ldr	r3, [sp, #28]
 8008e16:	454b      	cmp	r3, r9
 8008e18:	d307      	bcc.n	8008e2a <__cvt+0xb6>
 8008e1a:	4630      	mov	r0, r6
 8008e1c:	9b07      	ldr	r3, [sp, #28]
 8008e1e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008e20:	1b9b      	subs	r3, r3, r6
 8008e22:	6013      	str	r3, [r2, #0]
 8008e24:	b008      	add	sp, #32
 8008e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e2a:	1c59      	adds	r1, r3, #1
 8008e2c:	9107      	str	r1, [sp, #28]
 8008e2e:	701a      	strb	r2, [r3, #0]
 8008e30:	e7f0      	b.n	8008e14 <__cvt+0xa0>

08008e32 <__exponent>:
 8008e32:	4603      	mov	r3, r0
 8008e34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e36:	2900      	cmp	r1, #0
 8008e38:	f803 2b02 	strb.w	r2, [r3], #2
 8008e3c:	bfb6      	itet	lt
 8008e3e:	222d      	movlt	r2, #45	; 0x2d
 8008e40:	222b      	movge	r2, #43	; 0x2b
 8008e42:	4249      	neglt	r1, r1
 8008e44:	2909      	cmp	r1, #9
 8008e46:	7042      	strb	r2, [r0, #1]
 8008e48:	dd2a      	ble.n	8008ea0 <__exponent+0x6e>
 8008e4a:	f10d 0207 	add.w	r2, sp, #7
 8008e4e:	4617      	mov	r7, r2
 8008e50:	260a      	movs	r6, #10
 8008e52:	fb91 f5f6 	sdiv	r5, r1, r6
 8008e56:	4694      	mov	ip, r2
 8008e58:	fb06 1415 	mls	r4, r6, r5, r1
 8008e5c:	3430      	adds	r4, #48	; 0x30
 8008e5e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008e62:	460c      	mov	r4, r1
 8008e64:	2c63      	cmp	r4, #99	; 0x63
 8008e66:	4629      	mov	r1, r5
 8008e68:	f102 32ff 	add.w	r2, r2, #4294967295
 8008e6c:	dcf1      	bgt.n	8008e52 <__exponent+0x20>
 8008e6e:	3130      	adds	r1, #48	; 0x30
 8008e70:	f1ac 0402 	sub.w	r4, ip, #2
 8008e74:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008e78:	4622      	mov	r2, r4
 8008e7a:	1c41      	adds	r1, r0, #1
 8008e7c:	42ba      	cmp	r2, r7
 8008e7e:	d30a      	bcc.n	8008e96 <__exponent+0x64>
 8008e80:	f10d 0209 	add.w	r2, sp, #9
 8008e84:	eba2 020c 	sub.w	r2, r2, ip
 8008e88:	42bc      	cmp	r4, r7
 8008e8a:	bf88      	it	hi
 8008e8c:	2200      	movhi	r2, #0
 8008e8e:	4413      	add	r3, r2
 8008e90:	1a18      	subs	r0, r3, r0
 8008e92:	b003      	add	sp, #12
 8008e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e96:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008e9a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008e9e:	e7ed      	b.n	8008e7c <__exponent+0x4a>
 8008ea0:	2330      	movs	r3, #48	; 0x30
 8008ea2:	3130      	adds	r1, #48	; 0x30
 8008ea4:	7083      	strb	r3, [r0, #2]
 8008ea6:	70c1      	strb	r1, [r0, #3]
 8008ea8:	1d03      	adds	r3, r0, #4
 8008eaa:	e7f1      	b.n	8008e90 <__exponent+0x5e>

08008eac <_printf_float>:
 8008eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eb0:	b091      	sub	sp, #68	; 0x44
 8008eb2:	460c      	mov	r4, r1
 8008eb4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8008eb8:	4616      	mov	r6, r2
 8008eba:	461f      	mov	r7, r3
 8008ebc:	4605      	mov	r5, r0
 8008ebe:	f000 fef3 	bl	8009ca8 <_localeconv_r>
 8008ec2:	6803      	ldr	r3, [r0, #0]
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	9309      	str	r3, [sp, #36]	; 0x24
 8008ec8:	f7f7 f942 	bl	8000150 <strlen>
 8008ecc:	2300      	movs	r3, #0
 8008ece:	930e      	str	r3, [sp, #56]	; 0x38
 8008ed0:	f8d8 3000 	ldr.w	r3, [r8]
 8008ed4:	900a      	str	r0, [sp, #40]	; 0x28
 8008ed6:	3307      	adds	r3, #7
 8008ed8:	f023 0307 	bic.w	r3, r3, #7
 8008edc:	f103 0208 	add.w	r2, r3, #8
 8008ee0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008ee4:	f8d4 b000 	ldr.w	fp, [r4]
 8008ee8:	f8c8 2000 	str.w	r2, [r8]
 8008eec:	e9d3 a800 	ldrd	sl, r8, [r3]
 8008ef0:	4652      	mov	r2, sl
 8008ef2:	4643      	mov	r3, r8
 8008ef4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008ef8:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8008efc:	930b      	str	r3, [sp, #44]	; 0x2c
 8008efe:	f04f 32ff 	mov.w	r2, #4294967295
 8008f02:	4650      	mov	r0, sl
 8008f04:	4b9c      	ldr	r3, [pc, #624]	; (8009178 <_printf_float+0x2cc>)
 8008f06:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f08:	f7f7 fd80 	bl	8000a0c <__aeabi_dcmpun>
 8008f0c:	bb70      	cbnz	r0, 8008f6c <_printf_float+0xc0>
 8008f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8008f12:	4650      	mov	r0, sl
 8008f14:	4b98      	ldr	r3, [pc, #608]	; (8009178 <_printf_float+0x2cc>)
 8008f16:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f18:	f7f7 fd5a 	bl	80009d0 <__aeabi_dcmple>
 8008f1c:	bb30      	cbnz	r0, 8008f6c <_printf_float+0xc0>
 8008f1e:	2200      	movs	r2, #0
 8008f20:	2300      	movs	r3, #0
 8008f22:	4650      	mov	r0, sl
 8008f24:	4641      	mov	r1, r8
 8008f26:	f7f7 fd49 	bl	80009bc <__aeabi_dcmplt>
 8008f2a:	b110      	cbz	r0, 8008f32 <_printf_float+0x86>
 8008f2c:	232d      	movs	r3, #45	; 0x2d
 8008f2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f32:	4a92      	ldr	r2, [pc, #584]	; (800917c <_printf_float+0x2d0>)
 8008f34:	4b92      	ldr	r3, [pc, #584]	; (8009180 <_printf_float+0x2d4>)
 8008f36:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008f3a:	bf94      	ite	ls
 8008f3c:	4690      	movls	r8, r2
 8008f3e:	4698      	movhi	r8, r3
 8008f40:	2303      	movs	r3, #3
 8008f42:	f04f 0a00 	mov.w	sl, #0
 8008f46:	6123      	str	r3, [r4, #16]
 8008f48:	f02b 0304 	bic.w	r3, fp, #4
 8008f4c:	6023      	str	r3, [r4, #0]
 8008f4e:	4633      	mov	r3, r6
 8008f50:	4621      	mov	r1, r4
 8008f52:	4628      	mov	r0, r5
 8008f54:	9700      	str	r7, [sp, #0]
 8008f56:	aa0f      	add	r2, sp, #60	; 0x3c
 8008f58:	f000 f9d6 	bl	8009308 <_printf_common>
 8008f5c:	3001      	adds	r0, #1
 8008f5e:	f040 8090 	bne.w	8009082 <_printf_float+0x1d6>
 8008f62:	f04f 30ff 	mov.w	r0, #4294967295
 8008f66:	b011      	add	sp, #68	; 0x44
 8008f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f6c:	4652      	mov	r2, sl
 8008f6e:	4643      	mov	r3, r8
 8008f70:	4650      	mov	r0, sl
 8008f72:	4641      	mov	r1, r8
 8008f74:	f7f7 fd4a 	bl	8000a0c <__aeabi_dcmpun>
 8008f78:	b148      	cbz	r0, 8008f8e <_printf_float+0xe2>
 8008f7a:	f1b8 0f00 	cmp.w	r8, #0
 8008f7e:	bfb8      	it	lt
 8008f80:	232d      	movlt	r3, #45	; 0x2d
 8008f82:	4a80      	ldr	r2, [pc, #512]	; (8009184 <_printf_float+0x2d8>)
 8008f84:	bfb8      	it	lt
 8008f86:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008f8a:	4b7f      	ldr	r3, [pc, #508]	; (8009188 <_printf_float+0x2dc>)
 8008f8c:	e7d3      	b.n	8008f36 <_printf_float+0x8a>
 8008f8e:	6863      	ldr	r3, [r4, #4]
 8008f90:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008f94:	1c5a      	adds	r2, r3, #1
 8008f96:	d142      	bne.n	800901e <_printf_float+0x172>
 8008f98:	2306      	movs	r3, #6
 8008f9a:	6063      	str	r3, [r4, #4]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	9206      	str	r2, [sp, #24]
 8008fa0:	aa0e      	add	r2, sp, #56	; 0x38
 8008fa2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8008fa6:	aa0d      	add	r2, sp, #52	; 0x34
 8008fa8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008fac:	9203      	str	r2, [sp, #12]
 8008fae:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008fb2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008fb6:	6023      	str	r3, [r4, #0]
 8008fb8:	6863      	ldr	r3, [r4, #4]
 8008fba:	4652      	mov	r2, sl
 8008fbc:	9300      	str	r3, [sp, #0]
 8008fbe:	4628      	mov	r0, r5
 8008fc0:	4643      	mov	r3, r8
 8008fc2:	910b      	str	r1, [sp, #44]	; 0x2c
 8008fc4:	f7ff fed6 	bl	8008d74 <__cvt>
 8008fc8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008fca:	4680      	mov	r8, r0
 8008fcc:	2947      	cmp	r1, #71	; 0x47
 8008fce:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008fd0:	d108      	bne.n	8008fe4 <_printf_float+0x138>
 8008fd2:	1cc8      	adds	r0, r1, #3
 8008fd4:	db02      	blt.n	8008fdc <_printf_float+0x130>
 8008fd6:	6863      	ldr	r3, [r4, #4]
 8008fd8:	4299      	cmp	r1, r3
 8008fda:	dd40      	ble.n	800905e <_printf_float+0x1b2>
 8008fdc:	f1a9 0902 	sub.w	r9, r9, #2
 8008fe0:	fa5f f989 	uxtb.w	r9, r9
 8008fe4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008fe8:	d81f      	bhi.n	800902a <_printf_float+0x17e>
 8008fea:	464a      	mov	r2, r9
 8008fec:	3901      	subs	r1, #1
 8008fee:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008ff2:	910d      	str	r1, [sp, #52]	; 0x34
 8008ff4:	f7ff ff1d 	bl	8008e32 <__exponent>
 8008ff8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ffa:	4682      	mov	sl, r0
 8008ffc:	1813      	adds	r3, r2, r0
 8008ffe:	2a01      	cmp	r2, #1
 8009000:	6123      	str	r3, [r4, #16]
 8009002:	dc02      	bgt.n	800900a <_printf_float+0x15e>
 8009004:	6822      	ldr	r2, [r4, #0]
 8009006:	07d2      	lsls	r2, r2, #31
 8009008:	d501      	bpl.n	800900e <_printf_float+0x162>
 800900a:	3301      	adds	r3, #1
 800900c:	6123      	str	r3, [r4, #16]
 800900e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009012:	2b00      	cmp	r3, #0
 8009014:	d09b      	beq.n	8008f4e <_printf_float+0xa2>
 8009016:	232d      	movs	r3, #45	; 0x2d
 8009018:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800901c:	e797      	b.n	8008f4e <_printf_float+0xa2>
 800901e:	2947      	cmp	r1, #71	; 0x47
 8009020:	d1bc      	bne.n	8008f9c <_printf_float+0xf0>
 8009022:	2b00      	cmp	r3, #0
 8009024:	d1ba      	bne.n	8008f9c <_printf_float+0xf0>
 8009026:	2301      	movs	r3, #1
 8009028:	e7b7      	b.n	8008f9a <_printf_float+0xee>
 800902a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800902e:	d118      	bne.n	8009062 <_printf_float+0x1b6>
 8009030:	2900      	cmp	r1, #0
 8009032:	6863      	ldr	r3, [r4, #4]
 8009034:	dd0b      	ble.n	800904e <_printf_float+0x1a2>
 8009036:	6121      	str	r1, [r4, #16]
 8009038:	b913      	cbnz	r3, 8009040 <_printf_float+0x194>
 800903a:	6822      	ldr	r2, [r4, #0]
 800903c:	07d0      	lsls	r0, r2, #31
 800903e:	d502      	bpl.n	8009046 <_printf_float+0x19a>
 8009040:	3301      	adds	r3, #1
 8009042:	440b      	add	r3, r1
 8009044:	6123      	str	r3, [r4, #16]
 8009046:	f04f 0a00 	mov.w	sl, #0
 800904a:	65a1      	str	r1, [r4, #88]	; 0x58
 800904c:	e7df      	b.n	800900e <_printf_float+0x162>
 800904e:	b913      	cbnz	r3, 8009056 <_printf_float+0x1aa>
 8009050:	6822      	ldr	r2, [r4, #0]
 8009052:	07d2      	lsls	r2, r2, #31
 8009054:	d501      	bpl.n	800905a <_printf_float+0x1ae>
 8009056:	3302      	adds	r3, #2
 8009058:	e7f4      	b.n	8009044 <_printf_float+0x198>
 800905a:	2301      	movs	r3, #1
 800905c:	e7f2      	b.n	8009044 <_printf_float+0x198>
 800905e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009062:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009064:	4299      	cmp	r1, r3
 8009066:	db05      	blt.n	8009074 <_printf_float+0x1c8>
 8009068:	6823      	ldr	r3, [r4, #0]
 800906a:	6121      	str	r1, [r4, #16]
 800906c:	07d8      	lsls	r0, r3, #31
 800906e:	d5ea      	bpl.n	8009046 <_printf_float+0x19a>
 8009070:	1c4b      	adds	r3, r1, #1
 8009072:	e7e7      	b.n	8009044 <_printf_float+0x198>
 8009074:	2900      	cmp	r1, #0
 8009076:	bfcc      	ite	gt
 8009078:	2201      	movgt	r2, #1
 800907a:	f1c1 0202 	rsble	r2, r1, #2
 800907e:	4413      	add	r3, r2
 8009080:	e7e0      	b.n	8009044 <_printf_float+0x198>
 8009082:	6823      	ldr	r3, [r4, #0]
 8009084:	055a      	lsls	r2, r3, #21
 8009086:	d407      	bmi.n	8009098 <_printf_float+0x1ec>
 8009088:	6923      	ldr	r3, [r4, #16]
 800908a:	4642      	mov	r2, r8
 800908c:	4631      	mov	r1, r6
 800908e:	4628      	mov	r0, r5
 8009090:	47b8      	blx	r7
 8009092:	3001      	adds	r0, #1
 8009094:	d12b      	bne.n	80090ee <_printf_float+0x242>
 8009096:	e764      	b.n	8008f62 <_printf_float+0xb6>
 8009098:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800909c:	f240 80dd 	bls.w	800925a <_printf_float+0x3ae>
 80090a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80090a4:	2200      	movs	r2, #0
 80090a6:	2300      	movs	r3, #0
 80090a8:	f7f7 fc7e 	bl	80009a8 <__aeabi_dcmpeq>
 80090ac:	2800      	cmp	r0, #0
 80090ae:	d033      	beq.n	8009118 <_printf_float+0x26c>
 80090b0:	2301      	movs	r3, #1
 80090b2:	4631      	mov	r1, r6
 80090b4:	4628      	mov	r0, r5
 80090b6:	4a35      	ldr	r2, [pc, #212]	; (800918c <_printf_float+0x2e0>)
 80090b8:	47b8      	blx	r7
 80090ba:	3001      	adds	r0, #1
 80090bc:	f43f af51 	beq.w	8008f62 <_printf_float+0xb6>
 80090c0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80090c4:	429a      	cmp	r2, r3
 80090c6:	db02      	blt.n	80090ce <_printf_float+0x222>
 80090c8:	6823      	ldr	r3, [r4, #0]
 80090ca:	07d8      	lsls	r0, r3, #31
 80090cc:	d50f      	bpl.n	80090ee <_printf_float+0x242>
 80090ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80090d2:	4631      	mov	r1, r6
 80090d4:	4628      	mov	r0, r5
 80090d6:	47b8      	blx	r7
 80090d8:	3001      	adds	r0, #1
 80090da:	f43f af42 	beq.w	8008f62 <_printf_float+0xb6>
 80090de:	f04f 0800 	mov.w	r8, #0
 80090e2:	f104 091a 	add.w	r9, r4, #26
 80090e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090e8:	3b01      	subs	r3, #1
 80090ea:	4543      	cmp	r3, r8
 80090ec:	dc09      	bgt.n	8009102 <_printf_float+0x256>
 80090ee:	6823      	ldr	r3, [r4, #0]
 80090f0:	079b      	lsls	r3, r3, #30
 80090f2:	f100 8104 	bmi.w	80092fe <_printf_float+0x452>
 80090f6:	68e0      	ldr	r0, [r4, #12]
 80090f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80090fa:	4298      	cmp	r0, r3
 80090fc:	bfb8      	it	lt
 80090fe:	4618      	movlt	r0, r3
 8009100:	e731      	b.n	8008f66 <_printf_float+0xba>
 8009102:	2301      	movs	r3, #1
 8009104:	464a      	mov	r2, r9
 8009106:	4631      	mov	r1, r6
 8009108:	4628      	mov	r0, r5
 800910a:	47b8      	blx	r7
 800910c:	3001      	adds	r0, #1
 800910e:	f43f af28 	beq.w	8008f62 <_printf_float+0xb6>
 8009112:	f108 0801 	add.w	r8, r8, #1
 8009116:	e7e6      	b.n	80090e6 <_printf_float+0x23a>
 8009118:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800911a:	2b00      	cmp	r3, #0
 800911c:	dc38      	bgt.n	8009190 <_printf_float+0x2e4>
 800911e:	2301      	movs	r3, #1
 8009120:	4631      	mov	r1, r6
 8009122:	4628      	mov	r0, r5
 8009124:	4a19      	ldr	r2, [pc, #100]	; (800918c <_printf_float+0x2e0>)
 8009126:	47b8      	blx	r7
 8009128:	3001      	adds	r0, #1
 800912a:	f43f af1a 	beq.w	8008f62 <_printf_float+0xb6>
 800912e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8009132:	4313      	orrs	r3, r2
 8009134:	d102      	bne.n	800913c <_printf_float+0x290>
 8009136:	6823      	ldr	r3, [r4, #0]
 8009138:	07d9      	lsls	r1, r3, #31
 800913a:	d5d8      	bpl.n	80090ee <_printf_float+0x242>
 800913c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009140:	4631      	mov	r1, r6
 8009142:	4628      	mov	r0, r5
 8009144:	47b8      	blx	r7
 8009146:	3001      	adds	r0, #1
 8009148:	f43f af0b 	beq.w	8008f62 <_printf_float+0xb6>
 800914c:	f04f 0900 	mov.w	r9, #0
 8009150:	f104 0a1a 	add.w	sl, r4, #26
 8009154:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009156:	425b      	negs	r3, r3
 8009158:	454b      	cmp	r3, r9
 800915a:	dc01      	bgt.n	8009160 <_printf_float+0x2b4>
 800915c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800915e:	e794      	b.n	800908a <_printf_float+0x1de>
 8009160:	2301      	movs	r3, #1
 8009162:	4652      	mov	r2, sl
 8009164:	4631      	mov	r1, r6
 8009166:	4628      	mov	r0, r5
 8009168:	47b8      	blx	r7
 800916a:	3001      	adds	r0, #1
 800916c:	f43f aef9 	beq.w	8008f62 <_printf_float+0xb6>
 8009170:	f109 0901 	add.w	r9, r9, #1
 8009174:	e7ee      	b.n	8009154 <_printf_float+0x2a8>
 8009176:	bf00      	nop
 8009178:	7fefffff 	.word	0x7fefffff
 800917c:	0800debe 	.word	0x0800debe
 8009180:	0800dec2 	.word	0x0800dec2
 8009184:	0800dec6 	.word	0x0800dec6
 8009188:	0800deca 	.word	0x0800deca
 800918c:	0800dece 	.word	0x0800dece
 8009190:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009192:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009194:	429a      	cmp	r2, r3
 8009196:	bfa8      	it	ge
 8009198:	461a      	movge	r2, r3
 800919a:	2a00      	cmp	r2, #0
 800919c:	4691      	mov	r9, r2
 800919e:	dc37      	bgt.n	8009210 <_printf_float+0x364>
 80091a0:	f04f 0b00 	mov.w	fp, #0
 80091a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80091a8:	f104 021a 	add.w	r2, r4, #26
 80091ac:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80091b0:	ebaa 0309 	sub.w	r3, sl, r9
 80091b4:	455b      	cmp	r3, fp
 80091b6:	dc33      	bgt.n	8009220 <_printf_float+0x374>
 80091b8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80091bc:	429a      	cmp	r2, r3
 80091be:	db3b      	blt.n	8009238 <_printf_float+0x38c>
 80091c0:	6823      	ldr	r3, [r4, #0]
 80091c2:	07da      	lsls	r2, r3, #31
 80091c4:	d438      	bmi.n	8009238 <_printf_float+0x38c>
 80091c6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80091ca:	eba2 0903 	sub.w	r9, r2, r3
 80091ce:	eba2 020a 	sub.w	r2, r2, sl
 80091d2:	4591      	cmp	r9, r2
 80091d4:	bfa8      	it	ge
 80091d6:	4691      	movge	r9, r2
 80091d8:	f1b9 0f00 	cmp.w	r9, #0
 80091dc:	dc34      	bgt.n	8009248 <_printf_float+0x39c>
 80091de:	f04f 0800 	mov.w	r8, #0
 80091e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80091e6:	f104 0a1a 	add.w	sl, r4, #26
 80091ea:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80091ee:	1a9b      	subs	r3, r3, r2
 80091f0:	eba3 0309 	sub.w	r3, r3, r9
 80091f4:	4543      	cmp	r3, r8
 80091f6:	f77f af7a 	ble.w	80090ee <_printf_float+0x242>
 80091fa:	2301      	movs	r3, #1
 80091fc:	4652      	mov	r2, sl
 80091fe:	4631      	mov	r1, r6
 8009200:	4628      	mov	r0, r5
 8009202:	47b8      	blx	r7
 8009204:	3001      	adds	r0, #1
 8009206:	f43f aeac 	beq.w	8008f62 <_printf_float+0xb6>
 800920a:	f108 0801 	add.w	r8, r8, #1
 800920e:	e7ec      	b.n	80091ea <_printf_float+0x33e>
 8009210:	4613      	mov	r3, r2
 8009212:	4631      	mov	r1, r6
 8009214:	4642      	mov	r2, r8
 8009216:	4628      	mov	r0, r5
 8009218:	47b8      	blx	r7
 800921a:	3001      	adds	r0, #1
 800921c:	d1c0      	bne.n	80091a0 <_printf_float+0x2f4>
 800921e:	e6a0      	b.n	8008f62 <_printf_float+0xb6>
 8009220:	2301      	movs	r3, #1
 8009222:	4631      	mov	r1, r6
 8009224:	4628      	mov	r0, r5
 8009226:	920b      	str	r2, [sp, #44]	; 0x2c
 8009228:	47b8      	blx	r7
 800922a:	3001      	adds	r0, #1
 800922c:	f43f ae99 	beq.w	8008f62 <_printf_float+0xb6>
 8009230:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009232:	f10b 0b01 	add.w	fp, fp, #1
 8009236:	e7b9      	b.n	80091ac <_printf_float+0x300>
 8009238:	4631      	mov	r1, r6
 800923a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800923e:	4628      	mov	r0, r5
 8009240:	47b8      	blx	r7
 8009242:	3001      	adds	r0, #1
 8009244:	d1bf      	bne.n	80091c6 <_printf_float+0x31a>
 8009246:	e68c      	b.n	8008f62 <_printf_float+0xb6>
 8009248:	464b      	mov	r3, r9
 800924a:	4631      	mov	r1, r6
 800924c:	4628      	mov	r0, r5
 800924e:	eb08 020a 	add.w	r2, r8, sl
 8009252:	47b8      	blx	r7
 8009254:	3001      	adds	r0, #1
 8009256:	d1c2      	bne.n	80091de <_printf_float+0x332>
 8009258:	e683      	b.n	8008f62 <_printf_float+0xb6>
 800925a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800925c:	2a01      	cmp	r2, #1
 800925e:	dc01      	bgt.n	8009264 <_printf_float+0x3b8>
 8009260:	07db      	lsls	r3, r3, #31
 8009262:	d539      	bpl.n	80092d8 <_printf_float+0x42c>
 8009264:	2301      	movs	r3, #1
 8009266:	4642      	mov	r2, r8
 8009268:	4631      	mov	r1, r6
 800926a:	4628      	mov	r0, r5
 800926c:	47b8      	blx	r7
 800926e:	3001      	adds	r0, #1
 8009270:	f43f ae77 	beq.w	8008f62 <_printf_float+0xb6>
 8009274:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009278:	4631      	mov	r1, r6
 800927a:	4628      	mov	r0, r5
 800927c:	47b8      	blx	r7
 800927e:	3001      	adds	r0, #1
 8009280:	f43f ae6f 	beq.w	8008f62 <_printf_float+0xb6>
 8009284:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009288:	2200      	movs	r2, #0
 800928a:	2300      	movs	r3, #0
 800928c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8009290:	f7f7 fb8a 	bl	80009a8 <__aeabi_dcmpeq>
 8009294:	b9d8      	cbnz	r0, 80092ce <_printf_float+0x422>
 8009296:	f109 33ff 	add.w	r3, r9, #4294967295
 800929a:	f108 0201 	add.w	r2, r8, #1
 800929e:	4631      	mov	r1, r6
 80092a0:	4628      	mov	r0, r5
 80092a2:	47b8      	blx	r7
 80092a4:	3001      	adds	r0, #1
 80092a6:	d10e      	bne.n	80092c6 <_printf_float+0x41a>
 80092a8:	e65b      	b.n	8008f62 <_printf_float+0xb6>
 80092aa:	2301      	movs	r3, #1
 80092ac:	464a      	mov	r2, r9
 80092ae:	4631      	mov	r1, r6
 80092b0:	4628      	mov	r0, r5
 80092b2:	47b8      	blx	r7
 80092b4:	3001      	adds	r0, #1
 80092b6:	f43f ae54 	beq.w	8008f62 <_printf_float+0xb6>
 80092ba:	f108 0801 	add.w	r8, r8, #1
 80092be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092c0:	3b01      	subs	r3, #1
 80092c2:	4543      	cmp	r3, r8
 80092c4:	dcf1      	bgt.n	80092aa <_printf_float+0x3fe>
 80092c6:	4653      	mov	r3, sl
 80092c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80092cc:	e6de      	b.n	800908c <_printf_float+0x1e0>
 80092ce:	f04f 0800 	mov.w	r8, #0
 80092d2:	f104 091a 	add.w	r9, r4, #26
 80092d6:	e7f2      	b.n	80092be <_printf_float+0x412>
 80092d8:	2301      	movs	r3, #1
 80092da:	4642      	mov	r2, r8
 80092dc:	e7df      	b.n	800929e <_printf_float+0x3f2>
 80092de:	2301      	movs	r3, #1
 80092e0:	464a      	mov	r2, r9
 80092e2:	4631      	mov	r1, r6
 80092e4:	4628      	mov	r0, r5
 80092e6:	47b8      	blx	r7
 80092e8:	3001      	adds	r0, #1
 80092ea:	f43f ae3a 	beq.w	8008f62 <_printf_float+0xb6>
 80092ee:	f108 0801 	add.w	r8, r8, #1
 80092f2:	68e3      	ldr	r3, [r4, #12]
 80092f4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80092f6:	1a5b      	subs	r3, r3, r1
 80092f8:	4543      	cmp	r3, r8
 80092fa:	dcf0      	bgt.n	80092de <_printf_float+0x432>
 80092fc:	e6fb      	b.n	80090f6 <_printf_float+0x24a>
 80092fe:	f04f 0800 	mov.w	r8, #0
 8009302:	f104 0919 	add.w	r9, r4, #25
 8009306:	e7f4      	b.n	80092f2 <_printf_float+0x446>

08009308 <_printf_common>:
 8009308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800930c:	4616      	mov	r6, r2
 800930e:	4699      	mov	r9, r3
 8009310:	688a      	ldr	r2, [r1, #8]
 8009312:	690b      	ldr	r3, [r1, #16]
 8009314:	4607      	mov	r7, r0
 8009316:	4293      	cmp	r3, r2
 8009318:	bfb8      	it	lt
 800931a:	4613      	movlt	r3, r2
 800931c:	6033      	str	r3, [r6, #0]
 800931e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009322:	460c      	mov	r4, r1
 8009324:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009328:	b10a      	cbz	r2, 800932e <_printf_common+0x26>
 800932a:	3301      	adds	r3, #1
 800932c:	6033      	str	r3, [r6, #0]
 800932e:	6823      	ldr	r3, [r4, #0]
 8009330:	0699      	lsls	r1, r3, #26
 8009332:	bf42      	ittt	mi
 8009334:	6833      	ldrmi	r3, [r6, #0]
 8009336:	3302      	addmi	r3, #2
 8009338:	6033      	strmi	r3, [r6, #0]
 800933a:	6825      	ldr	r5, [r4, #0]
 800933c:	f015 0506 	ands.w	r5, r5, #6
 8009340:	d106      	bne.n	8009350 <_printf_common+0x48>
 8009342:	f104 0a19 	add.w	sl, r4, #25
 8009346:	68e3      	ldr	r3, [r4, #12]
 8009348:	6832      	ldr	r2, [r6, #0]
 800934a:	1a9b      	subs	r3, r3, r2
 800934c:	42ab      	cmp	r3, r5
 800934e:	dc2b      	bgt.n	80093a8 <_printf_common+0xa0>
 8009350:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009354:	1e13      	subs	r3, r2, #0
 8009356:	6822      	ldr	r2, [r4, #0]
 8009358:	bf18      	it	ne
 800935a:	2301      	movne	r3, #1
 800935c:	0692      	lsls	r2, r2, #26
 800935e:	d430      	bmi.n	80093c2 <_printf_common+0xba>
 8009360:	4649      	mov	r1, r9
 8009362:	4638      	mov	r0, r7
 8009364:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009368:	47c0      	blx	r8
 800936a:	3001      	adds	r0, #1
 800936c:	d023      	beq.n	80093b6 <_printf_common+0xae>
 800936e:	6823      	ldr	r3, [r4, #0]
 8009370:	6922      	ldr	r2, [r4, #16]
 8009372:	f003 0306 	and.w	r3, r3, #6
 8009376:	2b04      	cmp	r3, #4
 8009378:	bf14      	ite	ne
 800937a:	2500      	movne	r5, #0
 800937c:	6833      	ldreq	r3, [r6, #0]
 800937e:	f04f 0600 	mov.w	r6, #0
 8009382:	bf08      	it	eq
 8009384:	68e5      	ldreq	r5, [r4, #12]
 8009386:	f104 041a 	add.w	r4, r4, #26
 800938a:	bf08      	it	eq
 800938c:	1aed      	subeq	r5, r5, r3
 800938e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009392:	bf08      	it	eq
 8009394:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009398:	4293      	cmp	r3, r2
 800939a:	bfc4      	itt	gt
 800939c:	1a9b      	subgt	r3, r3, r2
 800939e:	18ed      	addgt	r5, r5, r3
 80093a0:	42b5      	cmp	r5, r6
 80093a2:	d11a      	bne.n	80093da <_printf_common+0xd2>
 80093a4:	2000      	movs	r0, #0
 80093a6:	e008      	b.n	80093ba <_printf_common+0xb2>
 80093a8:	2301      	movs	r3, #1
 80093aa:	4652      	mov	r2, sl
 80093ac:	4649      	mov	r1, r9
 80093ae:	4638      	mov	r0, r7
 80093b0:	47c0      	blx	r8
 80093b2:	3001      	adds	r0, #1
 80093b4:	d103      	bne.n	80093be <_printf_common+0xb6>
 80093b6:	f04f 30ff 	mov.w	r0, #4294967295
 80093ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093be:	3501      	adds	r5, #1
 80093c0:	e7c1      	b.n	8009346 <_printf_common+0x3e>
 80093c2:	2030      	movs	r0, #48	; 0x30
 80093c4:	18e1      	adds	r1, r4, r3
 80093c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80093ca:	1c5a      	adds	r2, r3, #1
 80093cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80093d0:	4422      	add	r2, r4
 80093d2:	3302      	adds	r3, #2
 80093d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80093d8:	e7c2      	b.n	8009360 <_printf_common+0x58>
 80093da:	2301      	movs	r3, #1
 80093dc:	4622      	mov	r2, r4
 80093de:	4649      	mov	r1, r9
 80093e0:	4638      	mov	r0, r7
 80093e2:	47c0      	blx	r8
 80093e4:	3001      	adds	r0, #1
 80093e6:	d0e6      	beq.n	80093b6 <_printf_common+0xae>
 80093e8:	3601      	adds	r6, #1
 80093ea:	e7d9      	b.n	80093a0 <_printf_common+0x98>

080093ec <_printf_i>:
 80093ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093f0:	7e0f      	ldrb	r7, [r1, #24]
 80093f2:	4691      	mov	r9, r2
 80093f4:	2f78      	cmp	r7, #120	; 0x78
 80093f6:	4680      	mov	r8, r0
 80093f8:	460c      	mov	r4, r1
 80093fa:	469a      	mov	sl, r3
 80093fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80093fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009402:	d807      	bhi.n	8009414 <_printf_i+0x28>
 8009404:	2f62      	cmp	r7, #98	; 0x62
 8009406:	d80a      	bhi.n	800941e <_printf_i+0x32>
 8009408:	2f00      	cmp	r7, #0
 800940a:	f000 80d5 	beq.w	80095b8 <_printf_i+0x1cc>
 800940e:	2f58      	cmp	r7, #88	; 0x58
 8009410:	f000 80c1 	beq.w	8009596 <_printf_i+0x1aa>
 8009414:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009418:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800941c:	e03a      	b.n	8009494 <_printf_i+0xa8>
 800941e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009422:	2b15      	cmp	r3, #21
 8009424:	d8f6      	bhi.n	8009414 <_printf_i+0x28>
 8009426:	a101      	add	r1, pc, #4	; (adr r1, 800942c <_printf_i+0x40>)
 8009428:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800942c:	08009485 	.word	0x08009485
 8009430:	08009499 	.word	0x08009499
 8009434:	08009415 	.word	0x08009415
 8009438:	08009415 	.word	0x08009415
 800943c:	08009415 	.word	0x08009415
 8009440:	08009415 	.word	0x08009415
 8009444:	08009499 	.word	0x08009499
 8009448:	08009415 	.word	0x08009415
 800944c:	08009415 	.word	0x08009415
 8009450:	08009415 	.word	0x08009415
 8009454:	08009415 	.word	0x08009415
 8009458:	0800959f 	.word	0x0800959f
 800945c:	080094c5 	.word	0x080094c5
 8009460:	08009559 	.word	0x08009559
 8009464:	08009415 	.word	0x08009415
 8009468:	08009415 	.word	0x08009415
 800946c:	080095c1 	.word	0x080095c1
 8009470:	08009415 	.word	0x08009415
 8009474:	080094c5 	.word	0x080094c5
 8009478:	08009415 	.word	0x08009415
 800947c:	08009415 	.word	0x08009415
 8009480:	08009561 	.word	0x08009561
 8009484:	682b      	ldr	r3, [r5, #0]
 8009486:	1d1a      	adds	r2, r3, #4
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	602a      	str	r2, [r5, #0]
 800948c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009490:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009494:	2301      	movs	r3, #1
 8009496:	e0a0      	b.n	80095da <_printf_i+0x1ee>
 8009498:	6820      	ldr	r0, [r4, #0]
 800949a:	682b      	ldr	r3, [r5, #0]
 800949c:	0607      	lsls	r7, r0, #24
 800949e:	f103 0104 	add.w	r1, r3, #4
 80094a2:	6029      	str	r1, [r5, #0]
 80094a4:	d501      	bpl.n	80094aa <_printf_i+0xbe>
 80094a6:	681e      	ldr	r6, [r3, #0]
 80094a8:	e003      	b.n	80094b2 <_printf_i+0xc6>
 80094aa:	0646      	lsls	r6, r0, #25
 80094ac:	d5fb      	bpl.n	80094a6 <_printf_i+0xba>
 80094ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 80094b2:	2e00      	cmp	r6, #0
 80094b4:	da03      	bge.n	80094be <_printf_i+0xd2>
 80094b6:	232d      	movs	r3, #45	; 0x2d
 80094b8:	4276      	negs	r6, r6
 80094ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094be:	230a      	movs	r3, #10
 80094c0:	4859      	ldr	r0, [pc, #356]	; (8009628 <_printf_i+0x23c>)
 80094c2:	e012      	b.n	80094ea <_printf_i+0xfe>
 80094c4:	682b      	ldr	r3, [r5, #0]
 80094c6:	6820      	ldr	r0, [r4, #0]
 80094c8:	1d19      	adds	r1, r3, #4
 80094ca:	6029      	str	r1, [r5, #0]
 80094cc:	0605      	lsls	r5, r0, #24
 80094ce:	d501      	bpl.n	80094d4 <_printf_i+0xe8>
 80094d0:	681e      	ldr	r6, [r3, #0]
 80094d2:	e002      	b.n	80094da <_printf_i+0xee>
 80094d4:	0641      	lsls	r1, r0, #25
 80094d6:	d5fb      	bpl.n	80094d0 <_printf_i+0xe4>
 80094d8:	881e      	ldrh	r6, [r3, #0]
 80094da:	2f6f      	cmp	r7, #111	; 0x6f
 80094dc:	bf0c      	ite	eq
 80094de:	2308      	moveq	r3, #8
 80094e0:	230a      	movne	r3, #10
 80094e2:	4851      	ldr	r0, [pc, #324]	; (8009628 <_printf_i+0x23c>)
 80094e4:	2100      	movs	r1, #0
 80094e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80094ea:	6865      	ldr	r5, [r4, #4]
 80094ec:	2d00      	cmp	r5, #0
 80094ee:	bfa8      	it	ge
 80094f0:	6821      	ldrge	r1, [r4, #0]
 80094f2:	60a5      	str	r5, [r4, #8]
 80094f4:	bfa4      	itt	ge
 80094f6:	f021 0104 	bicge.w	r1, r1, #4
 80094fa:	6021      	strge	r1, [r4, #0]
 80094fc:	b90e      	cbnz	r6, 8009502 <_printf_i+0x116>
 80094fe:	2d00      	cmp	r5, #0
 8009500:	d04b      	beq.n	800959a <_printf_i+0x1ae>
 8009502:	4615      	mov	r5, r2
 8009504:	fbb6 f1f3 	udiv	r1, r6, r3
 8009508:	fb03 6711 	mls	r7, r3, r1, r6
 800950c:	5dc7      	ldrb	r7, [r0, r7]
 800950e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009512:	4637      	mov	r7, r6
 8009514:	42bb      	cmp	r3, r7
 8009516:	460e      	mov	r6, r1
 8009518:	d9f4      	bls.n	8009504 <_printf_i+0x118>
 800951a:	2b08      	cmp	r3, #8
 800951c:	d10b      	bne.n	8009536 <_printf_i+0x14a>
 800951e:	6823      	ldr	r3, [r4, #0]
 8009520:	07de      	lsls	r6, r3, #31
 8009522:	d508      	bpl.n	8009536 <_printf_i+0x14a>
 8009524:	6923      	ldr	r3, [r4, #16]
 8009526:	6861      	ldr	r1, [r4, #4]
 8009528:	4299      	cmp	r1, r3
 800952a:	bfde      	ittt	le
 800952c:	2330      	movle	r3, #48	; 0x30
 800952e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009532:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009536:	1b52      	subs	r2, r2, r5
 8009538:	6122      	str	r2, [r4, #16]
 800953a:	464b      	mov	r3, r9
 800953c:	4621      	mov	r1, r4
 800953e:	4640      	mov	r0, r8
 8009540:	f8cd a000 	str.w	sl, [sp]
 8009544:	aa03      	add	r2, sp, #12
 8009546:	f7ff fedf 	bl	8009308 <_printf_common>
 800954a:	3001      	adds	r0, #1
 800954c:	d14a      	bne.n	80095e4 <_printf_i+0x1f8>
 800954e:	f04f 30ff 	mov.w	r0, #4294967295
 8009552:	b004      	add	sp, #16
 8009554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009558:	6823      	ldr	r3, [r4, #0]
 800955a:	f043 0320 	orr.w	r3, r3, #32
 800955e:	6023      	str	r3, [r4, #0]
 8009560:	2778      	movs	r7, #120	; 0x78
 8009562:	4832      	ldr	r0, [pc, #200]	; (800962c <_printf_i+0x240>)
 8009564:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009568:	6823      	ldr	r3, [r4, #0]
 800956a:	6829      	ldr	r1, [r5, #0]
 800956c:	061f      	lsls	r7, r3, #24
 800956e:	f851 6b04 	ldr.w	r6, [r1], #4
 8009572:	d402      	bmi.n	800957a <_printf_i+0x18e>
 8009574:	065f      	lsls	r7, r3, #25
 8009576:	bf48      	it	mi
 8009578:	b2b6      	uxthmi	r6, r6
 800957a:	07df      	lsls	r7, r3, #31
 800957c:	bf48      	it	mi
 800957e:	f043 0320 	orrmi.w	r3, r3, #32
 8009582:	6029      	str	r1, [r5, #0]
 8009584:	bf48      	it	mi
 8009586:	6023      	strmi	r3, [r4, #0]
 8009588:	b91e      	cbnz	r6, 8009592 <_printf_i+0x1a6>
 800958a:	6823      	ldr	r3, [r4, #0]
 800958c:	f023 0320 	bic.w	r3, r3, #32
 8009590:	6023      	str	r3, [r4, #0]
 8009592:	2310      	movs	r3, #16
 8009594:	e7a6      	b.n	80094e4 <_printf_i+0xf8>
 8009596:	4824      	ldr	r0, [pc, #144]	; (8009628 <_printf_i+0x23c>)
 8009598:	e7e4      	b.n	8009564 <_printf_i+0x178>
 800959a:	4615      	mov	r5, r2
 800959c:	e7bd      	b.n	800951a <_printf_i+0x12e>
 800959e:	682b      	ldr	r3, [r5, #0]
 80095a0:	6826      	ldr	r6, [r4, #0]
 80095a2:	1d18      	adds	r0, r3, #4
 80095a4:	6961      	ldr	r1, [r4, #20]
 80095a6:	6028      	str	r0, [r5, #0]
 80095a8:	0635      	lsls	r5, r6, #24
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	d501      	bpl.n	80095b2 <_printf_i+0x1c6>
 80095ae:	6019      	str	r1, [r3, #0]
 80095b0:	e002      	b.n	80095b8 <_printf_i+0x1cc>
 80095b2:	0670      	lsls	r0, r6, #25
 80095b4:	d5fb      	bpl.n	80095ae <_printf_i+0x1c2>
 80095b6:	8019      	strh	r1, [r3, #0]
 80095b8:	2300      	movs	r3, #0
 80095ba:	4615      	mov	r5, r2
 80095bc:	6123      	str	r3, [r4, #16]
 80095be:	e7bc      	b.n	800953a <_printf_i+0x14e>
 80095c0:	682b      	ldr	r3, [r5, #0]
 80095c2:	2100      	movs	r1, #0
 80095c4:	1d1a      	adds	r2, r3, #4
 80095c6:	602a      	str	r2, [r5, #0]
 80095c8:	681d      	ldr	r5, [r3, #0]
 80095ca:	6862      	ldr	r2, [r4, #4]
 80095cc:	4628      	mov	r0, r5
 80095ce:	f000 fbe2 	bl	8009d96 <memchr>
 80095d2:	b108      	cbz	r0, 80095d8 <_printf_i+0x1ec>
 80095d4:	1b40      	subs	r0, r0, r5
 80095d6:	6060      	str	r0, [r4, #4]
 80095d8:	6863      	ldr	r3, [r4, #4]
 80095da:	6123      	str	r3, [r4, #16]
 80095dc:	2300      	movs	r3, #0
 80095de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095e2:	e7aa      	b.n	800953a <_printf_i+0x14e>
 80095e4:	462a      	mov	r2, r5
 80095e6:	4649      	mov	r1, r9
 80095e8:	4640      	mov	r0, r8
 80095ea:	6923      	ldr	r3, [r4, #16]
 80095ec:	47d0      	blx	sl
 80095ee:	3001      	adds	r0, #1
 80095f0:	d0ad      	beq.n	800954e <_printf_i+0x162>
 80095f2:	6823      	ldr	r3, [r4, #0]
 80095f4:	079b      	lsls	r3, r3, #30
 80095f6:	d413      	bmi.n	8009620 <_printf_i+0x234>
 80095f8:	68e0      	ldr	r0, [r4, #12]
 80095fa:	9b03      	ldr	r3, [sp, #12]
 80095fc:	4298      	cmp	r0, r3
 80095fe:	bfb8      	it	lt
 8009600:	4618      	movlt	r0, r3
 8009602:	e7a6      	b.n	8009552 <_printf_i+0x166>
 8009604:	2301      	movs	r3, #1
 8009606:	4632      	mov	r2, r6
 8009608:	4649      	mov	r1, r9
 800960a:	4640      	mov	r0, r8
 800960c:	47d0      	blx	sl
 800960e:	3001      	adds	r0, #1
 8009610:	d09d      	beq.n	800954e <_printf_i+0x162>
 8009612:	3501      	adds	r5, #1
 8009614:	68e3      	ldr	r3, [r4, #12]
 8009616:	9903      	ldr	r1, [sp, #12]
 8009618:	1a5b      	subs	r3, r3, r1
 800961a:	42ab      	cmp	r3, r5
 800961c:	dcf2      	bgt.n	8009604 <_printf_i+0x218>
 800961e:	e7eb      	b.n	80095f8 <_printf_i+0x20c>
 8009620:	2500      	movs	r5, #0
 8009622:	f104 0619 	add.w	r6, r4, #25
 8009626:	e7f5      	b.n	8009614 <_printf_i+0x228>
 8009628:	0800ded0 	.word	0x0800ded0
 800962c:	0800dee1 	.word	0x0800dee1

08009630 <_scanf_float>:
 8009630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009634:	b087      	sub	sp, #28
 8009636:	9303      	str	r3, [sp, #12]
 8009638:	688b      	ldr	r3, [r1, #8]
 800963a:	4617      	mov	r7, r2
 800963c:	1e5a      	subs	r2, r3, #1
 800963e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009642:	bf85      	ittet	hi
 8009644:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009648:	195b      	addhi	r3, r3, r5
 800964a:	2300      	movls	r3, #0
 800964c:	9302      	strhi	r3, [sp, #8]
 800964e:	bf88      	it	hi
 8009650:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009654:	468b      	mov	fp, r1
 8009656:	f04f 0500 	mov.w	r5, #0
 800965a:	bf8c      	ite	hi
 800965c:	608b      	strhi	r3, [r1, #8]
 800965e:	9302      	strls	r3, [sp, #8]
 8009660:	680b      	ldr	r3, [r1, #0]
 8009662:	4680      	mov	r8, r0
 8009664:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009668:	f84b 3b1c 	str.w	r3, [fp], #28
 800966c:	460c      	mov	r4, r1
 800966e:	465e      	mov	r6, fp
 8009670:	46aa      	mov	sl, r5
 8009672:	46a9      	mov	r9, r5
 8009674:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009678:	9501      	str	r5, [sp, #4]
 800967a:	68a2      	ldr	r2, [r4, #8]
 800967c:	b152      	cbz	r2, 8009694 <_scanf_float+0x64>
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	781b      	ldrb	r3, [r3, #0]
 8009682:	2b4e      	cmp	r3, #78	; 0x4e
 8009684:	d864      	bhi.n	8009750 <_scanf_float+0x120>
 8009686:	2b40      	cmp	r3, #64	; 0x40
 8009688:	d83c      	bhi.n	8009704 <_scanf_float+0xd4>
 800968a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800968e:	b2c8      	uxtb	r0, r1
 8009690:	280e      	cmp	r0, #14
 8009692:	d93a      	bls.n	800970a <_scanf_float+0xda>
 8009694:	f1b9 0f00 	cmp.w	r9, #0
 8009698:	d003      	beq.n	80096a2 <_scanf_float+0x72>
 800969a:	6823      	ldr	r3, [r4, #0]
 800969c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80096a0:	6023      	str	r3, [r4, #0]
 80096a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80096a6:	f1ba 0f01 	cmp.w	sl, #1
 80096aa:	f200 8113 	bhi.w	80098d4 <_scanf_float+0x2a4>
 80096ae:	455e      	cmp	r6, fp
 80096b0:	f200 8105 	bhi.w	80098be <_scanf_float+0x28e>
 80096b4:	2501      	movs	r5, #1
 80096b6:	4628      	mov	r0, r5
 80096b8:	b007      	add	sp, #28
 80096ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096be:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80096c2:	2a0d      	cmp	r2, #13
 80096c4:	d8e6      	bhi.n	8009694 <_scanf_float+0x64>
 80096c6:	a101      	add	r1, pc, #4	; (adr r1, 80096cc <_scanf_float+0x9c>)
 80096c8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80096cc:	0800980b 	.word	0x0800980b
 80096d0:	08009695 	.word	0x08009695
 80096d4:	08009695 	.word	0x08009695
 80096d8:	08009695 	.word	0x08009695
 80096dc:	0800986b 	.word	0x0800986b
 80096e0:	08009843 	.word	0x08009843
 80096e4:	08009695 	.word	0x08009695
 80096e8:	08009695 	.word	0x08009695
 80096ec:	08009819 	.word	0x08009819
 80096f0:	08009695 	.word	0x08009695
 80096f4:	08009695 	.word	0x08009695
 80096f8:	08009695 	.word	0x08009695
 80096fc:	08009695 	.word	0x08009695
 8009700:	080097d1 	.word	0x080097d1
 8009704:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009708:	e7db      	b.n	80096c2 <_scanf_float+0x92>
 800970a:	290e      	cmp	r1, #14
 800970c:	d8c2      	bhi.n	8009694 <_scanf_float+0x64>
 800970e:	a001      	add	r0, pc, #4	; (adr r0, 8009714 <_scanf_float+0xe4>)
 8009710:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009714:	080097c3 	.word	0x080097c3
 8009718:	08009695 	.word	0x08009695
 800971c:	080097c3 	.word	0x080097c3
 8009720:	08009857 	.word	0x08009857
 8009724:	08009695 	.word	0x08009695
 8009728:	08009771 	.word	0x08009771
 800972c:	080097ad 	.word	0x080097ad
 8009730:	080097ad 	.word	0x080097ad
 8009734:	080097ad 	.word	0x080097ad
 8009738:	080097ad 	.word	0x080097ad
 800973c:	080097ad 	.word	0x080097ad
 8009740:	080097ad 	.word	0x080097ad
 8009744:	080097ad 	.word	0x080097ad
 8009748:	080097ad 	.word	0x080097ad
 800974c:	080097ad 	.word	0x080097ad
 8009750:	2b6e      	cmp	r3, #110	; 0x6e
 8009752:	d809      	bhi.n	8009768 <_scanf_float+0x138>
 8009754:	2b60      	cmp	r3, #96	; 0x60
 8009756:	d8b2      	bhi.n	80096be <_scanf_float+0x8e>
 8009758:	2b54      	cmp	r3, #84	; 0x54
 800975a:	d077      	beq.n	800984c <_scanf_float+0x21c>
 800975c:	2b59      	cmp	r3, #89	; 0x59
 800975e:	d199      	bne.n	8009694 <_scanf_float+0x64>
 8009760:	2d07      	cmp	r5, #7
 8009762:	d197      	bne.n	8009694 <_scanf_float+0x64>
 8009764:	2508      	movs	r5, #8
 8009766:	e029      	b.n	80097bc <_scanf_float+0x18c>
 8009768:	2b74      	cmp	r3, #116	; 0x74
 800976a:	d06f      	beq.n	800984c <_scanf_float+0x21c>
 800976c:	2b79      	cmp	r3, #121	; 0x79
 800976e:	e7f6      	b.n	800975e <_scanf_float+0x12e>
 8009770:	6821      	ldr	r1, [r4, #0]
 8009772:	05c8      	lsls	r0, r1, #23
 8009774:	d51a      	bpl.n	80097ac <_scanf_float+0x17c>
 8009776:	9b02      	ldr	r3, [sp, #8]
 8009778:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800977c:	6021      	str	r1, [r4, #0]
 800977e:	f109 0901 	add.w	r9, r9, #1
 8009782:	b11b      	cbz	r3, 800978c <_scanf_float+0x15c>
 8009784:	3b01      	subs	r3, #1
 8009786:	3201      	adds	r2, #1
 8009788:	9302      	str	r3, [sp, #8]
 800978a:	60a2      	str	r2, [r4, #8]
 800978c:	68a3      	ldr	r3, [r4, #8]
 800978e:	3b01      	subs	r3, #1
 8009790:	60a3      	str	r3, [r4, #8]
 8009792:	6923      	ldr	r3, [r4, #16]
 8009794:	3301      	adds	r3, #1
 8009796:	6123      	str	r3, [r4, #16]
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	3b01      	subs	r3, #1
 800979c:	2b00      	cmp	r3, #0
 800979e:	607b      	str	r3, [r7, #4]
 80097a0:	f340 8084 	ble.w	80098ac <_scanf_float+0x27c>
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	3301      	adds	r3, #1
 80097a8:	603b      	str	r3, [r7, #0]
 80097aa:	e766      	b.n	800967a <_scanf_float+0x4a>
 80097ac:	eb1a 0f05 	cmn.w	sl, r5
 80097b0:	f47f af70 	bne.w	8009694 <_scanf_float+0x64>
 80097b4:	6822      	ldr	r2, [r4, #0]
 80097b6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80097ba:	6022      	str	r2, [r4, #0]
 80097bc:	f806 3b01 	strb.w	r3, [r6], #1
 80097c0:	e7e4      	b.n	800978c <_scanf_float+0x15c>
 80097c2:	6822      	ldr	r2, [r4, #0]
 80097c4:	0610      	lsls	r0, r2, #24
 80097c6:	f57f af65 	bpl.w	8009694 <_scanf_float+0x64>
 80097ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80097ce:	e7f4      	b.n	80097ba <_scanf_float+0x18a>
 80097d0:	f1ba 0f00 	cmp.w	sl, #0
 80097d4:	d10e      	bne.n	80097f4 <_scanf_float+0x1c4>
 80097d6:	f1b9 0f00 	cmp.w	r9, #0
 80097da:	d10e      	bne.n	80097fa <_scanf_float+0x1ca>
 80097dc:	6822      	ldr	r2, [r4, #0]
 80097de:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80097e2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80097e6:	d108      	bne.n	80097fa <_scanf_float+0x1ca>
 80097e8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80097ec:	f04f 0a01 	mov.w	sl, #1
 80097f0:	6022      	str	r2, [r4, #0]
 80097f2:	e7e3      	b.n	80097bc <_scanf_float+0x18c>
 80097f4:	f1ba 0f02 	cmp.w	sl, #2
 80097f8:	d055      	beq.n	80098a6 <_scanf_float+0x276>
 80097fa:	2d01      	cmp	r5, #1
 80097fc:	d002      	beq.n	8009804 <_scanf_float+0x1d4>
 80097fe:	2d04      	cmp	r5, #4
 8009800:	f47f af48 	bne.w	8009694 <_scanf_float+0x64>
 8009804:	3501      	adds	r5, #1
 8009806:	b2ed      	uxtb	r5, r5
 8009808:	e7d8      	b.n	80097bc <_scanf_float+0x18c>
 800980a:	f1ba 0f01 	cmp.w	sl, #1
 800980e:	f47f af41 	bne.w	8009694 <_scanf_float+0x64>
 8009812:	f04f 0a02 	mov.w	sl, #2
 8009816:	e7d1      	b.n	80097bc <_scanf_float+0x18c>
 8009818:	b97d      	cbnz	r5, 800983a <_scanf_float+0x20a>
 800981a:	f1b9 0f00 	cmp.w	r9, #0
 800981e:	f47f af3c 	bne.w	800969a <_scanf_float+0x6a>
 8009822:	6822      	ldr	r2, [r4, #0]
 8009824:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009828:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800982c:	f47f af39 	bne.w	80096a2 <_scanf_float+0x72>
 8009830:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009834:	2501      	movs	r5, #1
 8009836:	6022      	str	r2, [r4, #0]
 8009838:	e7c0      	b.n	80097bc <_scanf_float+0x18c>
 800983a:	2d03      	cmp	r5, #3
 800983c:	d0e2      	beq.n	8009804 <_scanf_float+0x1d4>
 800983e:	2d05      	cmp	r5, #5
 8009840:	e7de      	b.n	8009800 <_scanf_float+0x1d0>
 8009842:	2d02      	cmp	r5, #2
 8009844:	f47f af26 	bne.w	8009694 <_scanf_float+0x64>
 8009848:	2503      	movs	r5, #3
 800984a:	e7b7      	b.n	80097bc <_scanf_float+0x18c>
 800984c:	2d06      	cmp	r5, #6
 800984e:	f47f af21 	bne.w	8009694 <_scanf_float+0x64>
 8009852:	2507      	movs	r5, #7
 8009854:	e7b2      	b.n	80097bc <_scanf_float+0x18c>
 8009856:	6822      	ldr	r2, [r4, #0]
 8009858:	0591      	lsls	r1, r2, #22
 800985a:	f57f af1b 	bpl.w	8009694 <_scanf_float+0x64>
 800985e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009862:	6022      	str	r2, [r4, #0]
 8009864:	f8cd 9004 	str.w	r9, [sp, #4]
 8009868:	e7a8      	b.n	80097bc <_scanf_float+0x18c>
 800986a:	6822      	ldr	r2, [r4, #0]
 800986c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009870:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009874:	d006      	beq.n	8009884 <_scanf_float+0x254>
 8009876:	0550      	lsls	r0, r2, #21
 8009878:	f57f af0c 	bpl.w	8009694 <_scanf_float+0x64>
 800987c:	f1b9 0f00 	cmp.w	r9, #0
 8009880:	f43f af0f 	beq.w	80096a2 <_scanf_float+0x72>
 8009884:	0591      	lsls	r1, r2, #22
 8009886:	bf58      	it	pl
 8009888:	9901      	ldrpl	r1, [sp, #4]
 800988a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800988e:	bf58      	it	pl
 8009890:	eba9 0101 	subpl.w	r1, r9, r1
 8009894:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009898:	f04f 0900 	mov.w	r9, #0
 800989c:	bf58      	it	pl
 800989e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80098a2:	6022      	str	r2, [r4, #0]
 80098a4:	e78a      	b.n	80097bc <_scanf_float+0x18c>
 80098a6:	f04f 0a03 	mov.w	sl, #3
 80098aa:	e787      	b.n	80097bc <_scanf_float+0x18c>
 80098ac:	4639      	mov	r1, r7
 80098ae:	4640      	mov	r0, r8
 80098b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80098b4:	4798      	blx	r3
 80098b6:	2800      	cmp	r0, #0
 80098b8:	f43f aedf 	beq.w	800967a <_scanf_float+0x4a>
 80098bc:	e6ea      	b.n	8009694 <_scanf_float+0x64>
 80098be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80098c2:	463a      	mov	r2, r7
 80098c4:	4640      	mov	r0, r8
 80098c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80098ca:	4798      	blx	r3
 80098cc:	6923      	ldr	r3, [r4, #16]
 80098ce:	3b01      	subs	r3, #1
 80098d0:	6123      	str	r3, [r4, #16]
 80098d2:	e6ec      	b.n	80096ae <_scanf_float+0x7e>
 80098d4:	1e6b      	subs	r3, r5, #1
 80098d6:	2b06      	cmp	r3, #6
 80098d8:	d825      	bhi.n	8009926 <_scanf_float+0x2f6>
 80098da:	2d02      	cmp	r5, #2
 80098dc:	d836      	bhi.n	800994c <_scanf_float+0x31c>
 80098de:	455e      	cmp	r6, fp
 80098e0:	f67f aee8 	bls.w	80096b4 <_scanf_float+0x84>
 80098e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80098e8:	463a      	mov	r2, r7
 80098ea:	4640      	mov	r0, r8
 80098ec:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80098f0:	4798      	blx	r3
 80098f2:	6923      	ldr	r3, [r4, #16]
 80098f4:	3b01      	subs	r3, #1
 80098f6:	6123      	str	r3, [r4, #16]
 80098f8:	e7f1      	b.n	80098de <_scanf_float+0x2ae>
 80098fa:	9802      	ldr	r0, [sp, #8]
 80098fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009900:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009904:	463a      	mov	r2, r7
 8009906:	9002      	str	r0, [sp, #8]
 8009908:	4640      	mov	r0, r8
 800990a:	4798      	blx	r3
 800990c:	6923      	ldr	r3, [r4, #16]
 800990e:	3b01      	subs	r3, #1
 8009910:	6123      	str	r3, [r4, #16]
 8009912:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009916:	fa5f fa8a 	uxtb.w	sl, sl
 800991a:	f1ba 0f02 	cmp.w	sl, #2
 800991e:	d1ec      	bne.n	80098fa <_scanf_float+0x2ca>
 8009920:	3d03      	subs	r5, #3
 8009922:	b2ed      	uxtb	r5, r5
 8009924:	1b76      	subs	r6, r6, r5
 8009926:	6823      	ldr	r3, [r4, #0]
 8009928:	05da      	lsls	r2, r3, #23
 800992a:	d52f      	bpl.n	800998c <_scanf_float+0x35c>
 800992c:	055b      	lsls	r3, r3, #21
 800992e:	d510      	bpl.n	8009952 <_scanf_float+0x322>
 8009930:	455e      	cmp	r6, fp
 8009932:	f67f aebf 	bls.w	80096b4 <_scanf_float+0x84>
 8009936:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800993a:	463a      	mov	r2, r7
 800993c:	4640      	mov	r0, r8
 800993e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009942:	4798      	blx	r3
 8009944:	6923      	ldr	r3, [r4, #16]
 8009946:	3b01      	subs	r3, #1
 8009948:	6123      	str	r3, [r4, #16]
 800994a:	e7f1      	b.n	8009930 <_scanf_float+0x300>
 800994c:	46aa      	mov	sl, r5
 800994e:	9602      	str	r6, [sp, #8]
 8009950:	e7df      	b.n	8009912 <_scanf_float+0x2e2>
 8009952:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009956:	6923      	ldr	r3, [r4, #16]
 8009958:	2965      	cmp	r1, #101	; 0x65
 800995a:	f103 33ff 	add.w	r3, r3, #4294967295
 800995e:	f106 35ff 	add.w	r5, r6, #4294967295
 8009962:	6123      	str	r3, [r4, #16]
 8009964:	d00c      	beq.n	8009980 <_scanf_float+0x350>
 8009966:	2945      	cmp	r1, #69	; 0x45
 8009968:	d00a      	beq.n	8009980 <_scanf_float+0x350>
 800996a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800996e:	463a      	mov	r2, r7
 8009970:	4640      	mov	r0, r8
 8009972:	4798      	blx	r3
 8009974:	6923      	ldr	r3, [r4, #16]
 8009976:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800997a:	3b01      	subs	r3, #1
 800997c:	1eb5      	subs	r5, r6, #2
 800997e:	6123      	str	r3, [r4, #16]
 8009980:	463a      	mov	r2, r7
 8009982:	4640      	mov	r0, r8
 8009984:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009988:	4798      	blx	r3
 800998a:	462e      	mov	r6, r5
 800998c:	6825      	ldr	r5, [r4, #0]
 800998e:	f015 0510 	ands.w	r5, r5, #16
 8009992:	d155      	bne.n	8009a40 <_scanf_float+0x410>
 8009994:	7035      	strb	r5, [r6, #0]
 8009996:	6823      	ldr	r3, [r4, #0]
 8009998:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800999c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099a0:	d11d      	bne.n	80099de <_scanf_float+0x3ae>
 80099a2:	9b01      	ldr	r3, [sp, #4]
 80099a4:	454b      	cmp	r3, r9
 80099a6:	eba3 0209 	sub.w	r2, r3, r9
 80099aa:	d125      	bne.n	80099f8 <_scanf_float+0x3c8>
 80099ac:	2200      	movs	r2, #0
 80099ae:	4659      	mov	r1, fp
 80099b0:	4640      	mov	r0, r8
 80099b2:	f002 fc21 	bl	800c1f8 <_strtod_r>
 80099b6:	9b03      	ldr	r3, [sp, #12]
 80099b8:	f8d4 c000 	ldr.w	ip, [r4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f01c 0f02 	tst.w	ip, #2
 80099c2:	4606      	mov	r6, r0
 80099c4:	460f      	mov	r7, r1
 80099c6:	f103 0204 	add.w	r2, r3, #4
 80099ca:	d020      	beq.n	8009a0e <_scanf_float+0x3de>
 80099cc:	9903      	ldr	r1, [sp, #12]
 80099ce:	600a      	str	r2, [r1, #0]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	e9c3 6700 	strd	r6, r7, [r3]
 80099d6:	68e3      	ldr	r3, [r4, #12]
 80099d8:	3301      	adds	r3, #1
 80099da:	60e3      	str	r3, [r4, #12]
 80099dc:	e66b      	b.n	80096b6 <_scanf_float+0x86>
 80099de:	9b04      	ldr	r3, [sp, #16]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d0e3      	beq.n	80099ac <_scanf_float+0x37c>
 80099e4:	9905      	ldr	r1, [sp, #20]
 80099e6:	230a      	movs	r3, #10
 80099e8:	462a      	mov	r2, r5
 80099ea:	4640      	mov	r0, r8
 80099ec:	3101      	adds	r1, #1
 80099ee:	f002 fc87 	bl	800c300 <_strtol_r>
 80099f2:	9b04      	ldr	r3, [sp, #16]
 80099f4:	9e05      	ldr	r6, [sp, #20]
 80099f6:	1ac2      	subs	r2, r0, r3
 80099f8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80099fc:	429e      	cmp	r6, r3
 80099fe:	bf28      	it	cs
 8009a00:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009a04:	4630      	mov	r0, r6
 8009a06:	490f      	ldr	r1, [pc, #60]	; (8009a44 <_scanf_float+0x414>)
 8009a08:	f000 f8e2 	bl	8009bd0 <siprintf>
 8009a0c:	e7ce      	b.n	80099ac <_scanf_float+0x37c>
 8009a0e:	f01c 0f04 	tst.w	ip, #4
 8009a12:	d1db      	bne.n	80099cc <_scanf_float+0x39c>
 8009a14:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8009a18:	f8cc 2000 	str.w	r2, [ip]
 8009a1c:	f8d3 8000 	ldr.w	r8, [r3]
 8009a20:	4602      	mov	r2, r0
 8009a22:	460b      	mov	r3, r1
 8009a24:	f7f6 fff2 	bl	8000a0c <__aeabi_dcmpun>
 8009a28:	b128      	cbz	r0, 8009a36 <_scanf_float+0x406>
 8009a2a:	4807      	ldr	r0, [pc, #28]	; (8009a48 <_scanf_float+0x418>)
 8009a2c:	f000 f9c2 	bl	8009db4 <nanf>
 8009a30:	f8c8 0000 	str.w	r0, [r8]
 8009a34:	e7cf      	b.n	80099d6 <_scanf_float+0x3a6>
 8009a36:	4630      	mov	r0, r6
 8009a38:	4639      	mov	r1, r7
 8009a3a:	f7f7 f845 	bl	8000ac8 <__aeabi_d2f>
 8009a3e:	e7f7      	b.n	8009a30 <_scanf_float+0x400>
 8009a40:	2500      	movs	r5, #0
 8009a42:	e638      	b.n	80096b6 <_scanf_float+0x86>
 8009a44:	0800def2 	.word	0x0800def2
 8009a48:	0800e285 	.word	0x0800e285

08009a4c <std>:
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	b510      	push	{r4, lr}
 8009a50:	4604      	mov	r4, r0
 8009a52:	e9c0 3300 	strd	r3, r3, [r0]
 8009a56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a5a:	6083      	str	r3, [r0, #8]
 8009a5c:	8181      	strh	r1, [r0, #12]
 8009a5e:	6643      	str	r3, [r0, #100]	; 0x64
 8009a60:	81c2      	strh	r2, [r0, #14]
 8009a62:	6183      	str	r3, [r0, #24]
 8009a64:	4619      	mov	r1, r3
 8009a66:	2208      	movs	r2, #8
 8009a68:	305c      	adds	r0, #92	; 0x5c
 8009a6a:	f000 f914 	bl	8009c96 <memset>
 8009a6e:	4b0d      	ldr	r3, [pc, #52]	; (8009aa4 <std+0x58>)
 8009a70:	6224      	str	r4, [r4, #32]
 8009a72:	6263      	str	r3, [r4, #36]	; 0x24
 8009a74:	4b0c      	ldr	r3, [pc, #48]	; (8009aa8 <std+0x5c>)
 8009a76:	62a3      	str	r3, [r4, #40]	; 0x28
 8009a78:	4b0c      	ldr	r3, [pc, #48]	; (8009aac <std+0x60>)
 8009a7a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009a7c:	4b0c      	ldr	r3, [pc, #48]	; (8009ab0 <std+0x64>)
 8009a7e:	6323      	str	r3, [r4, #48]	; 0x30
 8009a80:	4b0c      	ldr	r3, [pc, #48]	; (8009ab4 <std+0x68>)
 8009a82:	429c      	cmp	r4, r3
 8009a84:	d006      	beq.n	8009a94 <std+0x48>
 8009a86:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009a8a:	4294      	cmp	r4, r2
 8009a8c:	d002      	beq.n	8009a94 <std+0x48>
 8009a8e:	33d0      	adds	r3, #208	; 0xd0
 8009a90:	429c      	cmp	r4, r3
 8009a92:	d105      	bne.n	8009aa0 <std+0x54>
 8009a94:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a9c:	f000 b978 	b.w	8009d90 <__retarget_lock_init_recursive>
 8009aa0:	bd10      	pop	{r4, pc}
 8009aa2:	bf00      	nop
 8009aa4:	08009c11 	.word	0x08009c11
 8009aa8:	08009c33 	.word	0x08009c33
 8009aac:	08009c6b 	.word	0x08009c6b
 8009ab0:	08009c8f 	.word	0x08009c8f
 8009ab4:	20000758 	.word	0x20000758

08009ab8 <stdio_exit_handler>:
 8009ab8:	4a02      	ldr	r2, [pc, #8]	; (8009ac4 <stdio_exit_handler+0xc>)
 8009aba:	4903      	ldr	r1, [pc, #12]	; (8009ac8 <stdio_exit_handler+0x10>)
 8009abc:	4803      	ldr	r0, [pc, #12]	; (8009acc <stdio_exit_handler+0x14>)
 8009abe:	f000 b869 	b.w	8009b94 <_fwalk_sglue>
 8009ac2:	bf00      	nop
 8009ac4:	20000058 	.word	0x20000058
 8009ac8:	0800c6b9 	.word	0x0800c6b9
 8009acc:	20000064 	.word	0x20000064

08009ad0 <cleanup_stdio>:
 8009ad0:	6841      	ldr	r1, [r0, #4]
 8009ad2:	4b0c      	ldr	r3, [pc, #48]	; (8009b04 <cleanup_stdio+0x34>)
 8009ad4:	b510      	push	{r4, lr}
 8009ad6:	4299      	cmp	r1, r3
 8009ad8:	4604      	mov	r4, r0
 8009ada:	d001      	beq.n	8009ae0 <cleanup_stdio+0x10>
 8009adc:	f002 fdec 	bl	800c6b8 <_fflush_r>
 8009ae0:	68a1      	ldr	r1, [r4, #8]
 8009ae2:	4b09      	ldr	r3, [pc, #36]	; (8009b08 <cleanup_stdio+0x38>)
 8009ae4:	4299      	cmp	r1, r3
 8009ae6:	d002      	beq.n	8009aee <cleanup_stdio+0x1e>
 8009ae8:	4620      	mov	r0, r4
 8009aea:	f002 fde5 	bl	800c6b8 <_fflush_r>
 8009aee:	68e1      	ldr	r1, [r4, #12]
 8009af0:	4b06      	ldr	r3, [pc, #24]	; (8009b0c <cleanup_stdio+0x3c>)
 8009af2:	4299      	cmp	r1, r3
 8009af4:	d004      	beq.n	8009b00 <cleanup_stdio+0x30>
 8009af6:	4620      	mov	r0, r4
 8009af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009afc:	f002 bddc 	b.w	800c6b8 <_fflush_r>
 8009b00:	bd10      	pop	{r4, pc}
 8009b02:	bf00      	nop
 8009b04:	20000758 	.word	0x20000758
 8009b08:	200007c0 	.word	0x200007c0
 8009b0c:	20000828 	.word	0x20000828

08009b10 <global_stdio_init.part.0>:
 8009b10:	b510      	push	{r4, lr}
 8009b12:	4b0b      	ldr	r3, [pc, #44]	; (8009b40 <global_stdio_init.part.0+0x30>)
 8009b14:	4c0b      	ldr	r4, [pc, #44]	; (8009b44 <global_stdio_init.part.0+0x34>)
 8009b16:	4a0c      	ldr	r2, [pc, #48]	; (8009b48 <global_stdio_init.part.0+0x38>)
 8009b18:	4620      	mov	r0, r4
 8009b1a:	601a      	str	r2, [r3, #0]
 8009b1c:	2104      	movs	r1, #4
 8009b1e:	2200      	movs	r2, #0
 8009b20:	f7ff ff94 	bl	8009a4c <std>
 8009b24:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009b28:	2201      	movs	r2, #1
 8009b2a:	2109      	movs	r1, #9
 8009b2c:	f7ff ff8e 	bl	8009a4c <std>
 8009b30:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009b34:	2202      	movs	r2, #2
 8009b36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b3a:	2112      	movs	r1, #18
 8009b3c:	f7ff bf86 	b.w	8009a4c <std>
 8009b40:	20000890 	.word	0x20000890
 8009b44:	20000758 	.word	0x20000758
 8009b48:	08009ab9 	.word	0x08009ab9

08009b4c <__sfp_lock_acquire>:
 8009b4c:	4801      	ldr	r0, [pc, #4]	; (8009b54 <__sfp_lock_acquire+0x8>)
 8009b4e:	f000 b920 	b.w	8009d92 <__retarget_lock_acquire_recursive>
 8009b52:	bf00      	nop
 8009b54:	20000899 	.word	0x20000899

08009b58 <__sfp_lock_release>:
 8009b58:	4801      	ldr	r0, [pc, #4]	; (8009b60 <__sfp_lock_release+0x8>)
 8009b5a:	f000 b91b 	b.w	8009d94 <__retarget_lock_release_recursive>
 8009b5e:	bf00      	nop
 8009b60:	20000899 	.word	0x20000899

08009b64 <__sinit>:
 8009b64:	b510      	push	{r4, lr}
 8009b66:	4604      	mov	r4, r0
 8009b68:	f7ff fff0 	bl	8009b4c <__sfp_lock_acquire>
 8009b6c:	6a23      	ldr	r3, [r4, #32]
 8009b6e:	b11b      	cbz	r3, 8009b78 <__sinit+0x14>
 8009b70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b74:	f7ff bff0 	b.w	8009b58 <__sfp_lock_release>
 8009b78:	4b04      	ldr	r3, [pc, #16]	; (8009b8c <__sinit+0x28>)
 8009b7a:	6223      	str	r3, [r4, #32]
 8009b7c:	4b04      	ldr	r3, [pc, #16]	; (8009b90 <__sinit+0x2c>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d1f5      	bne.n	8009b70 <__sinit+0xc>
 8009b84:	f7ff ffc4 	bl	8009b10 <global_stdio_init.part.0>
 8009b88:	e7f2      	b.n	8009b70 <__sinit+0xc>
 8009b8a:	bf00      	nop
 8009b8c:	08009ad1 	.word	0x08009ad1
 8009b90:	20000890 	.word	0x20000890

08009b94 <_fwalk_sglue>:
 8009b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b98:	4607      	mov	r7, r0
 8009b9a:	4688      	mov	r8, r1
 8009b9c:	4614      	mov	r4, r2
 8009b9e:	2600      	movs	r6, #0
 8009ba0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009ba4:	f1b9 0901 	subs.w	r9, r9, #1
 8009ba8:	d505      	bpl.n	8009bb6 <_fwalk_sglue+0x22>
 8009baa:	6824      	ldr	r4, [r4, #0]
 8009bac:	2c00      	cmp	r4, #0
 8009bae:	d1f7      	bne.n	8009ba0 <_fwalk_sglue+0xc>
 8009bb0:	4630      	mov	r0, r6
 8009bb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bb6:	89ab      	ldrh	r3, [r5, #12]
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	d907      	bls.n	8009bcc <_fwalk_sglue+0x38>
 8009bbc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009bc0:	3301      	adds	r3, #1
 8009bc2:	d003      	beq.n	8009bcc <_fwalk_sglue+0x38>
 8009bc4:	4629      	mov	r1, r5
 8009bc6:	4638      	mov	r0, r7
 8009bc8:	47c0      	blx	r8
 8009bca:	4306      	orrs	r6, r0
 8009bcc:	3568      	adds	r5, #104	; 0x68
 8009bce:	e7e9      	b.n	8009ba4 <_fwalk_sglue+0x10>

08009bd0 <siprintf>:
 8009bd0:	b40e      	push	{r1, r2, r3}
 8009bd2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009bd6:	b500      	push	{lr}
 8009bd8:	b09c      	sub	sp, #112	; 0x70
 8009bda:	ab1d      	add	r3, sp, #116	; 0x74
 8009bdc:	9002      	str	r0, [sp, #8]
 8009bde:	9006      	str	r0, [sp, #24]
 8009be0:	9107      	str	r1, [sp, #28]
 8009be2:	9104      	str	r1, [sp, #16]
 8009be4:	4808      	ldr	r0, [pc, #32]	; (8009c08 <siprintf+0x38>)
 8009be6:	4909      	ldr	r1, [pc, #36]	; (8009c0c <siprintf+0x3c>)
 8009be8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bec:	9105      	str	r1, [sp, #20]
 8009bee:	6800      	ldr	r0, [r0, #0]
 8009bf0:	a902      	add	r1, sp, #8
 8009bf2:	9301      	str	r3, [sp, #4]
 8009bf4:	f002 fbe0 	bl	800c3b8 <_svfiprintf_r>
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	9b02      	ldr	r3, [sp, #8]
 8009bfc:	701a      	strb	r2, [r3, #0]
 8009bfe:	b01c      	add	sp, #112	; 0x70
 8009c00:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c04:	b003      	add	sp, #12
 8009c06:	4770      	bx	lr
 8009c08:	200000b0 	.word	0x200000b0
 8009c0c:	ffff0208 	.word	0xffff0208

08009c10 <__sread>:
 8009c10:	b510      	push	{r4, lr}
 8009c12:	460c      	mov	r4, r1
 8009c14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c18:	f000 f86c 	bl	8009cf4 <_read_r>
 8009c1c:	2800      	cmp	r0, #0
 8009c1e:	bfab      	itete	ge
 8009c20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009c22:	89a3      	ldrhlt	r3, [r4, #12]
 8009c24:	181b      	addge	r3, r3, r0
 8009c26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009c2a:	bfac      	ite	ge
 8009c2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009c2e:	81a3      	strhlt	r3, [r4, #12]
 8009c30:	bd10      	pop	{r4, pc}

08009c32 <__swrite>:
 8009c32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c36:	461f      	mov	r7, r3
 8009c38:	898b      	ldrh	r3, [r1, #12]
 8009c3a:	4605      	mov	r5, r0
 8009c3c:	05db      	lsls	r3, r3, #23
 8009c3e:	460c      	mov	r4, r1
 8009c40:	4616      	mov	r6, r2
 8009c42:	d505      	bpl.n	8009c50 <__swrite+0x1e>
 8009c44:	2302      	movs	r3, #2
 8009c46:	2200      	movs	r2, #0
 8009c48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c4c:	f000 f840 	bl	8009cd0 <_lseek_r>
 8009c50:	89a3      	ldrh	r3, [r4, #12]
 8009c52:	4632      	mov	r2, r6
 8009c54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c58:	81a3      	strh	r3, [r4, #12]
 8009c5a:	4628      	mov	r0, r5
 8009c5c:	463b      	mov	r3, r7
 8009c5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c66:	f000 b857 	b.w	8009d18 <_write_r>

08009c6a <__sseek>:
 8009c6a:	b510      	push	{r4, lr}
 8009c6c:	460c      	mov	r4, r1
 8009c6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c72:	f000 f82d 	bl	8009cd0 <_lseek_r>
 8009c76:	1c43      	adds	r3, r0, #1
 8009c78:	89a3      	ldrh	r3, [r4, #12]
 8009c7a:	bf15      	itete	ne
 8009c7c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009c7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009c82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009c86:	81a3      	strheq	r3, [r4, #12]
 8009c88:	bf18      	it	ne
 8009c8a:	81a3      	strhne	r3, [r4, #12]
 8009c8c:	bd10      	pop	{r4, pc}

08009c8e <__sclose>:
 8009c8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c92:	f000 b80d 	b.w	8009cb0 <_close_r>

08009c96 <memset>:
 8009c96:	4603      	mov	r3, r0
 8009c98:	4402      	add	r2, r0
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d100      	bne.n	8009ca0 <memset+0xa>
 8009c9e:	4770      	bx	lr
 8009ca0:	f803 1b01 	strb.w	r1, [r3], #1
 8009ca4:	e7f9      	b.n	8009c9a <memset+0x4>
	...

08009ca8 <_localeconv_r>:
 8009ca8:	4800      	ldr	r0, [pc, #0]	; (8009cac <_localeconv_r+0x4>)
 8009caa:	4770      	bx	lr
 8009cac:	200001a4 	.word	0x200001a4

08009cb0 <_close_r>:
 8009cb0:	b538      	push	{r3, r4, r5, lr}
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	4d05      	ldr	r5, [pc, #20]	; (8009ccc <_close_r+0x1c>)
 8009cb6:	4604      	mov	r4, r0
 8009cb8:	4608      	mov	r0, r1
 8009cba:	602b      	str	r3, [r5, #0]
 8009cbc:	f7fa ff68 	bl	8004b90 <_close>
 8009cc0:	1c43      	adds	r3, r0, #1
 8009cc2:	d102      	bne.n	8009cca <_close_r+0x1a>
 8009cc4:	682b      	ldr	r3, [r5, #0]
 8009cc6:	b103      	cbz	r3, 8009cca <_close_r+0x1a>
 8009cc8:	6023      	str	r3, [r4, #0]
 8009cca:	bd38      	pop	{r3, r4, r5, pc}
 8009ccc:	20000894 	.word	0x20000894

08009cd0 <_lseek_r>:
 8009cd0:	b538      	push	{r3, r4, r5, lr}
 8009cd2:	4604      	mov	r4, r0
 8009cd4:	4608      	mov	r0, r1
 8009cd6:	4611      	mov	r1, r2
 8009cd8:	2200      	movs	r2, #0
 8009cda:	4d05      	ldr	r5, [pc, #20]	; (8009cf0 <_lseek_r+0x20>)
 8009cdc:	602a      	str	r2, [r5, #0]
 8009cde:	461a      	mov	r2, r3
 8009ce0:	f7fa ff7a 	bl	8004bd8 <_lseek>
 8009ce4:	1c43      	adds	r3, r0, #1
 8009ce6:	d102      	bne.n	8009cee <_lseek_r+0x1e>
 8009ce8:	682b      	ldr	r3, [r5, #0]
 8009cea:	b103      	cbz	r3, 8009cee <_lseek_r+0x1e>
 8009cec:	6023      	str	r3, [r4, #0]
 8009cee:	bd38      	pop	{r3, r4, r5, pc}
 8009cf0:	20000894 	.word	0x20000894

08009cf4 <_read_r>:
 8009cf4:	b538      	push	{r3, r4, r5, lr}
 8009cf6:	4604      	mov	r4, r0
 8009cf8:	4608      	mov	r0, r1
 8009cfa:	4611      	mov	r1, r2
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	4d05      	ldr	r5, [pc, #20]	; (8009d14 <_read_r+0x20>)
 8009d00:	602a      	str	r2, [r5, #0]
 8009d02:	461a      	mov	r2, r3
 8009d04:	f7fa ff0b 	bl	8004b1e <_read>
 8009d08:	1c43      	adds	r3, r0, #1
 8009d0a:	d102      	bne.n	8009d12 <_read_r+0x1e>
 8009d0c:	682b      	ldr	r3, [r5, #0]
 8009d0e:	b103      	cbz	r3, 8009d12 <_read_r+0x1e>
 8009d10:	6023      	str	r3, [r4, #0]
 8009d12:	bd38      	pop	{r3, r4, r5, pc}
 8009d14:	20000894 	.word	0x20000894

08009d18 <_write_r>:
 8009d18:	b538      	push	{r3, r4, r5, lr}
 8009d1a:	4604      	mov	r4, r0
 8009d1c:	4608      	mov	r0, r1
 8009d1e:	4611      	mov	r1, r2
 8009d20:	2200      	movs	r2, #0
 8009d22:	4d05      	ldr	r5, [pc, #20]	; (8009d38 <_write_r+0x20>)
 8009d24:	602a      	str	r2, [r5, #0]
 8009d26:	461a      	mov	r2, r3
 8009d28:	f7fa ff16 	bl	8004b58 <_write>
 8009d2c:	1c43      	adds	r3, r0, #1
 8009d2e:	d102      	bne.n	8009d36 <_write_r+0x1e>
 8009d30:	682b      	ldr	r3, [r5, #0]
 8009d32:	b103      	cbz	r3, 8009d36 <_write_r+0x1e>
 8009d34:	6023      	str	r3, [r4, #0]
 8009d36:	bd38      	pop	{r3, r4, r5, pc}
 8009d38:	20000894 	.word	0x20000894

08009d3c <__errno>:
 8009d3c:	4b01      	ldr	r3, [pc, #4]	; (8009d44 <__errno+0x8>)
 8009d3e:	6818      	ldr	r0, [r3, #0]
 8009d40:	4770      	bx	lr
 8009d42:	bf00      	nop
 8009d44:	200000b0 	.word	0x200000b0

08009d48 <__libc_init_array>:
 8009d48:	b570      	push	{r4, r5, r6, lr}
 8009d4a:	2600      	movs	r6, #0
 8009d4c:	4d0c      	ldr	r5, [pc, #48]	; (8009d80 <__libc_init_array+0x38>)
 8009d4e:	4c0d      	ldr	r4, [pc, #52]	; (8009d84 <__libc_init_array+0x3c>)
 8009d50:	1b64      	subs	r4, r4, r5
 8009d52:	10a4      	asrs	r4, r4, #2
 8009d54:	42a6      	cmp	r6, r4
 8009d56:	d109      	bne.n	8009d6c <__libc_init_array+0x24>
 8009d58:	f003 ff1c 	bl	800db94 <_init>
 8009d5c:	2600      	movs	r6, #0
 8009d5e:	4d0a      	ldr	r5, [pc, #40]	; (8009d88 <__libc_init_array+0x40>)
 8009d60:	4c0a      	ldr	r4, [pc, #40]	; (8009d8c <__libc_init_array+0x44>)
 8009d62:	1b64      	subs	r4, r4, r5
 8009d64:	10a4      	asrs	r4, r4, #2
 8009d66:	42a6      	cmp	r6, r4
 8009d68:	d105      	bne.n	8009d76 <__libc_init_array+0x2e>
 8009d6a:	bd70      	pop	{r4, r5, r6, pc}
 8009d6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d70:	4798      	blx	r3
 8009d72:	3601      	adds	r6, #1
 8009d74:	e7ee      	b.n	8009d54 <__libc_init_array+0xc>
 8009d76:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d7a:	4798      	blx	r3
 8009d7c:	3601      	adds	r6, #1
 8009d7e:	e7f2      	b.n	8009d66 <__libc_init_array+0x1e>
 8009d80:	0800e358 	.word	0x0800e358
 8009d84:	0800e358 	.word	0x0800e358
 8009d88:	0800e358 	.word	0x0800e358
 8009d8c:	0800e35c 	.word	0x0800e35c

08009d90 <__retarget_lock_init_recursive>:
 8009d90:	4770      	bx	lr

08009d92 <__retarget_lock_acquire_recursive>:
 8009d92:	4770      	bx	lr

08009d94 <__retarget_lock_release_recursive>:
 8009d94:	4770      	bx	lr

08009d96 <memchr>:
 8009d96:	4603      	mov	r3, r0
 8009d98:	b510      	push	{r4, lr}
 8009d9a:	b2c9      	uxtb	r1, r1
 8009d9c:	4402      	add	r2, r0
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	4618      	mov	r0, r3
 8009da2:	d101      	bne.n	8009da8 <memchr+0x12>
 8009da4:	2000      	movs	r0, #0
 8009da6:	e003      	b.n	8009db0 <memchr+0x1a>
 8009da8:	7804      	ldrb	r4, [r0, #0]
 8009daa:	3301      	adds	r3, #1
 8009dac:	428c      	cmp	r4, r1
 8009dae:	d1f6      	bne.n	8009d9e <memchr+0x8>
 8009db0:	bd10      	pop	{r4, pc}
	...

08009db4 <nanf>:
 8009db4:	4800      	ldr	r0, [pc, #0]	; (8009db8 <nanf+0x4>)
 8009db6:	4770      	bx	lr
 8009db8:	7fc00000 	.word	0x7fc00000

08009dbc <quorem>:
 8009dbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dc0:	6903      	ldr	r3, [r0, #16]
 8009dc2:	690c      	ldr	r4, [r1, #16]
 8009dc4:	4607      	mov	r7, r0
 8009dc6:	42a3      	cmp	r3, r4
 8009dc8:	db7f      	blt.n	8009eca <quorem+0x10e>
 8009dca:	3c01      	subs	r4, #1
 8009dcc:	f100 0514 	add.w	r5, r0, #20
 8009dd0:	f101 0814 	add.w	r8, r1, #20
 8009dd4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009dd8:	9301      	str	r3, [sp, #4]
 8009dda:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009dde:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009de2:	3301      	adds	r3, #1
 8009de4:	429a      	cmp	r2, r3
 8009de6:	fbb2 f6f3 	udiv	r6, r2, r3
 8009dea:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009dee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009df2:	d331      	bcc.n	8009e58 <quorem+0x9c>
 8009df4:	f04f 0e00 	mov.w	lr, #0
 8009df8:	4640      	mov	r0, r8
 8009dfa:	46ac      	mov	ip, r5
 8009dfc:	46f2      	mov	sl, lr
 8009dfe:	f850 2b04 	ldr.w	r2, [r0], #4
 8009e02:	b293      	uxth	r3, r2
 8009e04:	fb06 e303 	mla	r3, r6, r3, lr
 8009e08:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009e0c:	0c1a      	lsrs	r2, r3, #16
 8009e0e:	b29b      	uxth	r3, r3
 8009e10:	fb06 220e 	mla	r2, r6, lr, r2
 8009e14:	ebaa 0303 	sub.w	r3, sl, r3
 8009e18:	f8dc a000 	ldr.w	sl, [ip]
 8009e1c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009e20:	fa1f fa8a 	uxth.w	sl, sl
 8009e24:	4453      	add	r3, sl
 8009e26:	f8dc a000 	ldr.w	sl, [ip]
 8009e2a:	b292      	uxth	r2, r2
 8009e2c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009e30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e34:	b29b      	uxth	r3, r3
 8009e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e3a:	4581      	cmp	r9, r0
 8009e3c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009e40:	f84c 3b04 	str.w	r3, [ip], #4
 8009e44:	d2db      	bcs.n	8009dfe <quorem+0x42>
 8009e46:	f855 300b 	ldr.w	r3, [r5, fp]
 8009e4a:	b92b      	cbnz	r3, 8009e58 <quorem+0x9c>
 8009e4c:	9b01      	ldr	r3, [sp, #4]
 8009e4e:	3b04      	subs	r3, #4
 8009e50:	429d      	cmp	r5, r3
 8009e52:	461a      	mov	r2, r3
 8009e54:	d32d      	bcc.n	8009eb2 <quorem+0xf6>
 8009e56:	613c      	str	r4, [r7, #16]
 8009e58:	4638      	mov	r0, r7
 8009e5a:	f001 f9dd 	bl	800b218 <__mcmp>
 8009e5e:	2800      	cmp	r0, #0
 8009e60:	db23      	blt.n	8009eaa <quorem+0xee>
 8009e62:	4629      	mov	r1, r5
 8009e64:	2000      	movs	r0, #0
 8009e66:	3601      	adds	r6, #1
 8009e68:	f858 2b04 	ldr.w	r2, [r8], #4
 8009e6c:	f8d1 c000 	ldr.w	ip, [r1]
 8009e70:	b293      	uxth	r3, r2
 8009e72:	1ac3      	subs	r3, r0, r3
 8009e74:	0c12      	lsrs	r2, r2, #16
 8009e76:	fa1f f08c 	uxth.w	r0, ip
 8009e7a:	4403      	add	r3, r0
 8009e7c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009e80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e84:	b29b      	uxth	r3, r3
 8009e86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e8a:	45c1      	cmp	r9, r8
 8009e8c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009e90:	f841 3b04 	str.w	r3, [r1], #4
 8009e94:	d2e8      	bcs.n	8009e68 <quorem+0xac>
 8009e96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e9e:	b922      	cbnz	r2, 8009eaa <quorem+0xee>
 8009ea0:	3b04      	subs	r3, #4
 8009ea2:	429d      	cmp	r5, r3
 8009ea4:	461a      	mov	r2, r3
 8009ea6:	d30a      	bcc.n	8009ebe <quorem+0x102>
 8009ea8:	613c      	str	r4, [r7, #16]
 8009eaa:	4630      	mov	r0, r6
 8009eac:	b003      	add	sp, #12
 8009eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eb2:	6812      	ldr	r2, [r2, #0]
 8009eb4:	3b04      	subs	r3, #4
 8009eb6:	2a00      	cmp	r2, #0
 8009eb8:	d1cd      	bne.n	8009e56 <quorem+0x9a>
 8009eba:	3c01      	subs	r4, #1
 8009ebc:	e7c8      	b.n	8009e50 <quorem+0x94>
 8009ebe:	6812      	ldr	r2, [r2, #0]
 8009ec0:	3b04      	subs	r3, #4
 8009ec2:	2a00      	cmp	r2, #0
 8009ec4:	d1f0      	bne.n	8009ea8 <quorem+0xec>
 8009ec6:	3c01      	subs	r4, #1
 8009ec8:	e7eb      	b.n	8009ea2 <quorem+0xe6>
 8009eca:	2000      	movs	r0, #0
 8009ecc:	e7ee      	b.n	8009eac <quorem+0xf0>
	...

08009ed0 <_dtoa_r>:
 8009ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ed4:	4616      	mov	r6, r2
 8009ed6:	461f      	mov	r7, r3
 8009ed8:	69c4      	ldr	r4, [r0, #28]
 8009eda:	b099      	sub	sp, #100	; 0x64
 8009edc:	4605      	mov	r5, r0
 8009ede:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009ee2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8009ee6:	b974      	cbnz	r4, 8009f06 <_dtoa_r+0x36>
 8009ee8:	2010      	movs	r0, #16
 8009eea:	f000 fe1d 	bl	800ab28 <malloc>
 8009eee:	4602      	mov	r2, r0
 8009ef0:	61e8      	str	r0, [r5, #28]
 8009ef2:	b920      	cbnz	r0, 8009efe <_dtoa_r+0x2e>
 8009ef4:	21ef      	movs	r1, #239	; 0xef
 8009ef6:	4bac      	ldr	r3, [pc, #688]	; (800a1a8 <_dtoa_r+0x2d8>)
 8009ef8:	48ac      	ldr	r0, [pc, #688]	; (800a1ac <_dtoa_r+0x2dc>)
 8009efa:	f002 fc55 	bl	800c7a8 <__assert_func>
 8009efe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009f02:	6004      	str	r4, [r0, #0]
 8009f04:	60c4      	str	r4, [r0, #12]
 8009f06:	69eb      	ldr	r3, [r5, #28]
 8009f08:	6819      	ldr	r1, [r3, #0]
 8009f0a:	b151      	cbz	r1, 8009f22 <_dtoa_r+0x52>
 8009f0c:	685a      	ldr	r2, [r3, #4]
 8009f0e:	2301      	movs	r3, #1
 8009f10:	4093      	lsls	r3, r2
 8009f12:	604a      	str	r2, [r1, #4]
 8009f14:	608b      	str	r3, [r1, #8]
 8009f16:	4628      	mov	r0, r5
 8009f18:	f000 fefa 	bl	800ad10 <_Bfree>
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	69eb      	ldr	r3, [r5, #28]
 8009f20:	601a      	str	r2, [r3, #0]
 8009f22:	1e3b      	subs	r3, r7, #0
 8009f24:	bfaf      	iteee	ge
 8009f26:	2300      	movge	r3, #0
 8009f28:	2201      	movlt	r2, #1
 8009f2a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009f2e:	9305      	strlt	r3, [sp, #20]
 8009f30:	bfa8      	it	ge
 8009f32:	f8c8 3000 	strge.w	r3, [r8]
 8009f36:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8009f3a:	4b9d      	ldr	r3, [pc, #628]	; (800a1b0 <_dtoa_r+0x2e0>)
 8009f3c:	bfb8      	it	lt
 8009f3e:	f8c8 2000 	strlt.w	r2, [r8]
 8009f42:	ea33 0309 	bics.w	r3, r3, r9
 8009f46:	d119      	bne.n	8009f7c <_dtoa_r+0xac>
 8009f48:	f242 730f 	movw	r3, #9999	; 0x270f
 8009f4c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009f4e:	6013      	str	r3, [r2, #0]
 8009f50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009f54:	4333      	orrs	r3, r6
 8009f56:	f000 8589 	beq.w	800aa6c <_dtoa_r+0xb9c>
 8009f5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009f5c:	b953      	cbnz	r3, 8009f74 <_dtoa_r+0xa4>
 8009f5e:	4b95      	ldr	r3, [pc, #596]	; (800a1b4 <_dtoa_r+0x2e4>)
 8009f60:	e023      	b.n	8009faa <_dtoa_r+0xda>
 8009f62:	4b95      	ldr	r3, [pc, #596]	; (800a1b8 <_dtoa_r+0x2e8>)
 8009f64:	9303      	str	r3, [sp, #12]
 8009f66:	3308      	adds	r3, #8
 8009f68:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009f6a:	6013      	str	r3, [r2, #0]
 8009f6c:	9803      	ldr	r0, [sp, #12]
 8009f6e:	b019      	add	sp, #100	; 0x64
 8009f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f74:	4b8f      	ldr	r3, [pc, #572]	; (800a1b4 <_dtoa_r+0x2e4>)
 8009f76:	9303      	str	r3, [sp, #12]
 8009f78:	3303      	adds	r3, #3
 8009f7a:	e7f5      	b.n	8009f68 <_dtoa_r+0x98>
 8009f7c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009f80:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8009f84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009f88:	2200      	movs	r2, #0
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	f7f6 fd0c 	bl	80009a8 <__aeabi_dcmpeq>
 8009f90:	4680      	mov	r8, r0
 8009f92:	b160      	cbz	r0, 8009fae <_dtoa_r+0xde>
 8009f94:	2301      	movs	r3, #1
 8009f96:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009f98:	6013      	str	r3, [r2, #0]
 8009f9a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	f000 8562 	beq.w	800aa66 <_dtoa_r+0xb96>
 8009fa2:	4b86      	ldr	r3, [pc, #536]	; (800a1bc <_dtoa_r+0x2ec>)
 8009fa4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009fa6:	6013      	str	r3, [r2, #0]
 8009fa8:	3b01      	subs	r3, #1
 8009faa:	9303      	str	r3, [sp, #12]
 8009fac:	e7de      	b.n	8009f6c <_dtoa_r+0x9c>
 8009fae:	ab16      	add	r3, sp, #88	; 0x58
 8009fb0:	9301      	str	r3, [sp, #4]
 8009fb2:	ab17      	add	r3, sp, #92	; 0x5c
 8009fb4:	9300      	str	r3, [sp, #0]
 8009fb6:	4628      	mov	r0, r5
 8009fb8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009fbc:	f001 fa3c 	bl	800b438 <__d2b>
 8009fc0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009fc4:	4682      	mov	sl, r0
 8009fc6:	2c00      	cmp	r4, #0
 8009fc8:	d07e      	beq.n	800a0c8 <_dtoa_r+0x1f8>
 8009fca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009fce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fd0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8009fd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009fd8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009fdc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009fe0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8009fe4:	4619      	mov	r1, r3
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	4b75      	ldr	r3, [pc, #468]	; (800a1c0 <_dtoa_r+0x2f0>)
 8009fea:	f7f6 f8bd 	bl	8000168 <__aeabi_dsub>
 8009fee:	a368      	add	r3, pc, #416	; (adr r3, 800a190 <_dtoa_r+0x2c0>)
 8009ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff4:	f7f6 fa70 	bl	80004d8 <__aeabi_dmul>
 8009ff8:	a367      	add	r3, pc, #412	; (adr r3, 800a198 <_dtoa_r+0x2c8>)
 8009ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ffe:	f7f6 f8b5 	bl	800016c <__adddf3>
 800a002:	4606      	mov	r6, r0
 800a004:	4620      	mov	r0, r4
 800a006:	460f      	mov	r7, r1
 800a008:	f7f6 f9fc 	bl	8000404 <__aeabi_i2d>
 800a00c:	a364      	add	r3, pc, #400	; (adr r3, 800a1a0 <_dtoa_r+0x2d0>)
 800a00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a012:	f7f6 fa61 	bl	80004d8 <__aeabi_dmul>
 800a016:	4602      	mov	r2, r0
 800a018:	460b      	mov	r3, r1
 800a01a:	4630      	mov	r0, r6
 800a01c:	4639      	mov	r1, r7
 800a01e:	f7f6 f8a5 	bl	800016c <__adddf3>
 800a022:	4606      	mov	r6, r0
 800a024:	460f      	mov	r7, r1
 800a026:	f7f6 fd07 	bl	8000a38 <__aeabi_d2iz>
 800a02a:	2200      	movs	r2, #0
 800a02c:	4683      	mov	fp, r0
 800a02e:	2300      	movs	r3, #0
 800a030:	4630      	mov	r0, r6
 800a032:	4639      	mov	r1, r7
 800a034:	f7f6 fcc2 	bl	80009bc <__aeabi_dcmplt>
 800a038:	b148      	cbz	r0, 800a04e <_dtoa_r+0x17e>
 800a03a:	4658      	mov	r0, fp
 800a03c:	f7f6 f9e2 	bl	8000404 <__aeabi_i2d>
 800a040:	4632      	mov	r2, r6
 800a042:	463b      	mov	r3, r7
 800a044:	f7f6 fcb0 	bl	80009a8 <__aeabi_dcmpeq>
 800a048:	b908      	cbnz	r0, 800a04e <_dtoa_r+0x17e>
 800a04a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a04e:	f1bb 0f16 	cmp.w	fp, #22
 800a052:	d857      	bhi.n	800a104 <_dtoa_r+0x234>
 800a054:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a058:	4b5a      	ldr	r3, [pc, #360]	; (800a1c4 <_dtoa_r+0x2f4>)
 800a05a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a062:	f7f6 fcab 	bl	80009bc <__aeabi_dcmplt>
 800a066:	2800      	cmp	r0, #0
 800a068:	d04e      	beq.n	800a108 <_dtoa_r+0x238>
 800a06a:	2300      	movs	r3, #0
 800a06c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a070:	930f      	str	r3, [sp, #60]	; 0x3c
 800a072:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a074:	1b1b      	subs	r3, r3, r4
 800a076:	1e5a      	subs	r2, r3, #1
 800a078:	bf46      	itte	mi
 800a07a:	f1c3 0901 	rsbmi	r9, r3, #1
 800a07e:	2300      	movmi	r3, #0
 800a080:	f04f 0900 	movpl.w	r9, #0
 800a084:	9209      	str	r2, [sp, #36]	; 0x24
 800a086:	bf48      	it	mi
 800a088:	9309      	strmi	r3, [sp, #36]	; 0x24
 800a08a:	f1bb 0f00 	cmp.w	fp, #0
 800a08e:	db3d      	blt.n	800a10c <_dtoa_r+0x23c>
 800a090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a092:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800a096:	445b      	add	r3, fp
 800a098:	9309      	str	r3, [sp, #36]	; 0x24
 800a09a:	2300      	movs	r3, #0
 800a09c:	930a      	str	r3, [sp, #40]	; 0x28
 800a09e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a0a0:	2b09      	cmp	r3, #9
 800a0a2:	d867      	bhi.n	800a174 <_dtoa_r+0x2a4>
 800a0a4:	2b05      	cmp	r3, #5
 800a0a6:	bfc4      	itt	gt
 800a0a8:	3b04      	subgt	r3, #4
 800a0aa:	9322      	strgt	r3, [sp, #136]	; 0x88
 800a0ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a0ae:	bfc8      	it	gt
 800a0b0:	2400      	movgt	r4, #0
 800a0b2:	f1a3 0302 	sub.w	r3, r3, #2
 800a0b6:	bfd8      	it	le
 800a0b8:	2401      	movle	r4, #1
 800a0ba:	2b03      	cmp	r3, #3
 800a0bc:	f200 8086 	bhi.w	800a1cc <_dtoa_r+0x2fc>
 800a0c0:	e8df f003 	tbb	[pc, r3]
 800a0c4:	5637392c 	.word	0x5637392c
 800a0c8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800a0cc:	441c      	add	r4, r3
 800a0ce:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800a0d2:	2b20      	cmp	r3, #32
 800a0d4:	bfc1      	itttt	gt
 800a0d6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a0da:	fa09 f903 	lslgt.w	r9, r9, r3
 800a0de:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800a0e2:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a0e6:	bfd6      	itet	le
 800a0e8:	f1c3 0320 	rsble	r3, r3, #32
 800a0ec:	ea49 0003 	orrgt.w	r0, r9, r3
 800a0f0:	fa06 f003 	lslle.w	r0, r6, r3
 800a0f4:	f7f6 f976 	bl	80003e4 <__aeabi_ui2d>
 800a0f8:	2201      	movs	r2, #1
 800a0fa:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a0fe:	3c01      	subs	r4, #1
 800a100:	9213      	str	r2, [sp, #76]	; 0x4c
 800a102:	e76f      	b.n	8009fe4 <_dtoa_r+0x114>
 800a104:	2301      	movs	r3, #1
 800a106:	e7b3      	b.n	800a070 <_dtoa_r+0x1a0>
 800a108:	900f      	str	r0, [sp, #60]	; 0x3c
 800a10a:	e7b2      	b.n	800a072 <_dtoa_r+0x1a2>
 800a10c:	f1cb 0300 	rsb	r3, fp, #0
 800a110:	930a      	str	r3, [sp, #40]	; 0x28
 800a112:	2300      	movs	r3, #0
 800a114:	eba9 090b 	sub.w	r9, r9, fp
 800a118:	930e      	str	r3, [sp, #56]	; 0x38
 800a11a:	e7c0      	b.n	800a09e <_dtoa_r+0x1ce>
 800a11c:	2300      	movs	r3, #0
 800a11e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a120:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a122:	2b00      	cmp	r3, #0
 800a124:	dc55      	bgt.n	800a1d2 <_dtoa_r+0x302>
 800a126:	2301      	movs	r3, #1
 800a128:	461a      	mov	r2, r3
 800a12a:	9306      	str	r3, [sp, #24]
 800a12c:	9308      	str	r3, [sp, #32]
 800a12e:	9223      	str	r2, [sp, #140]	; 0x8c
 800a130:	e00b      	b.n	800a14a <_dtoa_r+0x27a>
 800a132:	2301      	movs	r3, #1
 800a134:	e7f3      	b.n	800a11e <_dtoa_r+0x24e>
 800a136:	2300      	movs	r3, #0
 800a138:	930b      	str	r3, [sp, #44]	; 0x2c
 800a13a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a13c:	445b      	add	r3, fp
 800a13e:	9306      	str	r3, [sp, #24]
 800a140:	3301      	adds	r3, #1
 800a142:	2b01      	cmp	r3, #1
 800a144:	9308      	str	r3, [sp, #32]
 800a146:	bfb8      	it	lt
 800a148:	2301      	movlt	r3, #1
 800a14a:	2100      	movs	r1, #0
 800a14c:	2204      	movs	r2, #4
 800a14e:	69e8      	ldr	r0, [r5, #28]
 800a150:	f102 0614 	add.w	r6, r2, #20
 800a154:	429e      	cmp	r6, r3
 800a156:	d940      	bls.n	800a1da <_dtoa_r+0x30a>
 800a158:	6041      	str	r1, [r0, #4]
 800a15a:	4628      	mov	r0, r5
 800a15c:	f000 fd98 	bl	800ac90 <_Balloc>
 800a160:	9003      	str	r0, [sp, #12]
 800a162:	2800      	cmp	r0, #0
 800a164:	d13c      	bne.n	800a1e0 <_dtoa_r+0x310>
 800a166:	4602      	mov	r2, r0
 800a168:	f240 11af 	movw	r1, #431	; 0x1af
 800a16c:	4b16      	ldr	r3, [pc, #88]	; (800a1c8 <_dtoa_r+0x2f8>)
 800a16e:	e6c3      	b.n	8009ef8 <_dtoa_r+0x28>
 800a170:	2301      	movs	r3, #1
 800a172:	e7e1      	b.n	800a138 <_dtoa_r+0x268>
 800a174:	2401      	movs	r4, #1
 800a176:	2300      	movs	r3, #0
 800a178:	940b      	str	r4, [sp, #44]	; 0x2c
 800a17a:	9322      	str	r3, [sp, #136]	; 0x88
 800a17c:	f04f 33ff 	mov.w	r3, #4294967295
 800a180:	2200      	movs	r2, #0
 800a182:	9306      	str	r3, [sp, #24]
 800a184:	9308      	str	r3, [sp, #32]
 800a186:	2312      	movs	r3, #18
 800a188:	e7d1      	b.n	800a12e <_dtoa_r+0x25e>
 800a18a:	bf00      	nop
 800a18c:	f3af 8000 	nop.w
 800a190:	636f4361 	.word	0x636f4361
 800a194:	3fd287a7 	.word	0x3fd287a7
 800a198:	8b60c8b3 	.word	0x8b60c8b3
 800a19c:	3fc68a28 	.word	0x3fc68a28
 800a1a0:	509f79fb 	.word	0x509f79fb
 800a1a4:	3fd34413 	.word	0x3fd34413
 800a1a8:	0800df04 	.word	0x0800df04
 800a1ac:	0800df1b 	.word	0x0800df1b
 800a1b0:	7ff00000 	.word	0x7ff00000
 800a1b4:	0800df00 	.word	0x0800df00
 800a1b8:	0800def7 	.word	0x0800def7
 800a1bc:	0800decf 	.word	0x0800decf
 800a1c0:	3ff80000 	.word	0x3ff80000
 800a1c4:	0800e008 	.word	0x0800e008
 800a1c8:	0800df73 	.word	0x0800df73
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	930b      	str	r3, [sp, #44]	; 0x2c
 800a1d0:	e7d4      	b.n	800a17c <_dtoa_r+0x2ac>
 800a1d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a1d4:	9306      	str	r3, [sp, #24]
 800a1d6:	9308      	str	r3, [sp, #32]
 800a1d8:	e7b7      	b.n	800a14a <_dtoa_r+0x27a>
 800a1da:	3101      	adds	r1, #1
 800a1dc:	0052      	lsls	r2, r2, #1
 800a1de:	e7b7      	b.n	800a150 <_dtoa_r+0x280>
 800a1e0:	69eb      	ldr	r3, [r5, #28]
 800a1e2:	9a03      	ldr	r2, [sp, #12]
 800a1e4:	601a      	str	r2, [r3, #0]
 800a1e6:	9b08      	ldr	r3, [sp, #32]
 800a1e8:	2b0e      	cmp	r3, #14
 800a1ea:	f200 80a8 	bhi.w	800a33e <_dtoa_r+0x46e>
 800a1ee:	2c00      	cmp	r4, #0
 800a1f0:	f000 80a5 	beq.w	800a33e <_dtoa_r+0x46e>
 800a1f4:	f1bb 0f00 	cmp.w	fp, #0
 800a1f8:	dd34      	ble.n	800a264 <_dtoa_r+0x394>
 800a1fa:	4b9a      	ldr	r3, [pc, #616]	; (800a464 <_dtoa_r+0x594>)
 800a1fc:	f00b 020f 	and.w	r2, fp, #15
 800a200:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a204:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a208:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a20c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a210:	ea4f 142b 	mov.w	r4, fp, asr #4
 800a214:	d016      	beq.n	800a244 <_dtoa_r+0x374>
 800a216:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a21a:	4b93      	ldr	r3, [pc, #588]	; (800a468 <_dtoa_r+0x598>)
 800a21c:	2703      	movs	r7, #3
 800a21e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a222:	f7f6 fa83 	bl	800072c <__aeabi_ddiv>
 800a226:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a22a:	f004 040f 	and.w	r4, r4, #15
 800a22e:	4e8e      	ldr	r6, [pc, #568]	; (800a468 <_dtoa_r+0x598>)
 800a230:	b954      	cbnz	r4, 800a248 <_dtoa_r+0x378>
 800a232:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a236:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a23a:	f7f6 fa77 	bl	800072c <__aeabi_ddiv>
 800a23e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a242:	e029      	b.n	800a298 <_dtoa_r+0x3c8>
 800a244:	2702      	movs	r7, #2
 800a246:	e7f2      	b.n	800a22e <_dtoa_r+0x35e>
 800a248:	07e1      	lsls	r1, r4, #31
 800a24a:	d508      	bpl.n	800a25e <_dtoa_r+0x38e>
 800a24c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a250:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a254:	f7f6 f940 	bl	80004d8 <__aeabi_dmul>
 800a258:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a25c:	3701      	adds	r7, #1
 800a25e:	1064      	asrs	r4, r4, #1
 800a260:	3608      	adds	r6, #8
 800a262:	e7e5      	b.n	800a230 <_dtoa_r+0x360>
 800a264:	f000 80a5 	beq.w	800a3b2 <_dtoa_r+0x4e2>
 800a268:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a26c:	f1cb 0400 	rsb	r4, fp, #0
 800a270:	4b7c      	ldr	r3, [pc, #496]	; (800a464 <_dtoa_r+0x594>)
 800a272:	f004 020f 	and.w	r2, r4, #15
 800a276:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a27e:	f7f6 f92b 	bl	80004d8 <__aeabi_dmul>
 800a282:	2702      	movs	r7, #2
 800a284:	2300      	movs	r3, #0
 800a286:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a28a:	4e77      	ldr	r6, [pc, #476]	; (800a468 <_dtoa_r+0x598>)
 800a28c:	1124      	asrs	r4, r4, #4
 800a28e:	2c00      	cmp	r4, #0
 800a290:	f040 8084 	bne.w	800a39c <_dtoa_r+0x4cc>
 800a294:	2b00      	cmp	r3, #0
 800a296:	d1d2      	bne.n	800a23e <_dtoa_r+0x36e>
 800a298:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a29c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a2a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	f000 8087 	beq.w	800a3b6 <_dtoa_r+0x4e6>
 800a2a8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	4b6f      	ldr	r3, [pc, #444]	; (800a46c <_dtoa_r+0x59c>)
 800a2b0:	f7f6 fb84 	bl	80009bc <__aeabi_dcmplt>
 800a2b4:	2800      	cmp	r0, #0
 800a2b6:	d07e      	beq.n	800a3b6 <_dtoa_r+0x4e6>
 800a2b8:	9b08      	ldr	r3, [sp, #32]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d07b      	beq.n	800a3b6 <_dtoa_r+0x4e6>
 800a2be:	9b06      	ldr	r3, [sp, #24]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	dd38      	ble.n	800a336 <_dtoa_r+0x466>
 800a2c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	4b69      	ldr	r3, [pc, #420]	; (800a470 <_dtoa_r+0x5a0>)
 800a2cc:	f7f6 f904 	bl	80004d8 <__aeabi_dmul>
 800a2d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a2d4:	9c06      	ldr	r4, [sp, #24]
 800a2d6:	f10b 38ff 	add.w	r8, fp, #4294967295
 800a2da:	3701      	adds	r7, #1
 800a2dc:	4638      	mov	r0, r7
 800a2de:	f7f6 f891 	bl	8000404 <__aeabi_i2d>
 800a2e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2e6:	f7f6 f8f7 	bl	80004d8 <__aeabi_dmul>
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	4b61      	ldr	r3, [pc, #388]	; (800a474 <_dtoa_r+0x5a4>)
 800a2ee:	f7f5 ff3d 	bl	800016c <__adddf3>
 800a2f2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a2f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a2fa:	9611      	str	r6, [sp, #68]	; 0x44
 800a2fc:	2c00      	cmp	r4, #0
 800a2fe:	d15d      	bne.n	800a3bc <_dtoa_r+0x4ec>
 800a300:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a304:	2200      	movs	r2, #0
 800a306:	4b5c      	ldr	r3, [pc, #368]	; (800a478 <_dtoa_r+0x5a8>)
 800a308:	f7f5 ff2e 	bl	8000168 <__aeabi_dsub>
 800a30c:	4602      	mov	r2, r0
 800a30e:	460b      	mov	r3, r1
 800a310:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a314:	4633      	mov	r3, r6
 800a316:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a318:	f7f6 fb6e 	bl	80009f8 <__aeabi_dcmpgt>
 800a31c:	2800      	cmp	r0, #0
 800a31e:	f040 8295 	bne.w	800a84c <_dtoa_r+0x97c>
 800a322:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a326:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a328:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a32c:	f7f6 fb46 	bl	80009bc <__aeabi_dcmplt>
 800a330:	2800      	cmp	r0, #0
 800a332:	f040 8289 	bne.w	800a848 <_dtoa_r+0x978>
 800a336:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800a33a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a33e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a340:	2b00      	cmp	r3, #0
 800a342:	f2c0 8151 	blt.w	800a5e8 <_dtoa_r+0x718>
 800a346:	f1bb 0f0e 	cmp.w	fp, #14
 800a34a:	f300 814d 	bgt.w	800a5e8 <_dtoa_r+0x718>
 800a34e:	4b45      	ldr	r3, [pc, #276]	; (800a464 <_dtoa_r+0x594>)
 800a350:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a354:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a358:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800a35c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a35e:	2b00      	cmp	r3, #0
 800a360:	f280 80da 	bge.w	800a518 <_dtoa_r+0x648>
 800a364:	9b08      	ldr	r3, [sp, #32]
 800a366:	2b00      	cmp	r3, #0
 800a368:	f300 80d6 	bgt.w	800a518 <_dtoa_r+0x648>
 800a36c:	f040 826b 	bne.w	800a846 <_dtoa_r+0x976>
 800a370:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a374:	2200      	movs	r2, #0
 800a376:	4b40      	ldr	r3, [pc, #256]	; (800a478 <_dtoa_r+0x5a8>)
 800a378:	f7f6 f8ae 	bl	80004d8 <__aeabi_dmul>
 800a37c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a380:	f7f6 fb30 	bl	80009e4 <__aeabi_dcmpge>
 800a384:	9c08      	ldr	r4, [sp, #32]
 800a386:	4626      	mov	r6, r4
 800a388:	2800      	cmp	r0, #0
 800a38a:	f040 8241 	bne.w	800a810 <_dtoa_r+0x940>
 800a38e:	2331      	movs	r3, #49	; 0x31
 800a390:	9f03      	ldr	r7, [sp, #12]
 800a392:	f10b 0b01 	add.w	fp, fp, #1
 800a396:	f807 3b01 	strb.w	r3, [r7], #1
 800a39a:	e23d      	b.n	800a818 <_dtoa_r+0x948>
 800a39c:	07e2      	lsls	r2, r4, #31
 800a39e:	d505      	bpl.n	800a3ac <_dtoa_r+0x4dc>
 800a3a0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a3a4:	f7f6 f898 	bl	80004d8 <__aeabi_dmul>
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	3701      	adds	r7, #1
 800a3ac:	1064      	asrs	r4, r4, #1
 800a3ae:	3608      	adds	r6, #8
 800a3b0:	e76d      	b.n	800a28e <_dtoa_r+0x3be>
 800a3b2:	2702      	movs	r7, #2
 800a3b4:	e770      	b.n	800a298 <_dtoa_r+0x3c8>
 800a3b6:	46d8      	mov	r8, fp
 800a3b8:	9c08      	ldr	r4, [sp, #32]
 800a3ba:	e78f      	b.n	800a2dc <_dtoa_r+0x40c>
 800a3bc:	9903      	ldr	r1, [sp, #12]
 800a3be:	4b29      	ldr	r3, [pc, #164]	; (800a464 <_dtoa_r+0x594>)
 800a3c0:	4421      	add	r1, r4
 800a3c2:	9112      	str	r1, [sp, #72]	; 0x48
 800a3c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a3c6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a3ca:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a3ce:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a3d2:	2900      	cmp	r1, #0
 800a3d4:	d054      	beq.n	800a480 <_dtoa_r+0x5b0>
 800a3d6:	2000      	movs	r0, #0
 800a3d8:	4928      	ldr	r1, [pc, #160]	; (800a47c <_dtoa_r+0x5ac>)
 800a3da:	f7f6 f9a7 	bl	800072c <__aeabi_ddiv>
 800a3de:	463b      	mov	r3, r7
 800a3e0:	4632      	mov	r2, r6
 800a3e2:	f7f5 fec1 	bl	8000168 <__aeabi_dsub>
 800a3e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a3ea:	9f03      	ldr	r7, [sp, #12]
 800a3ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3f0:	f7f6 fb22 	bl	8000a38 <__aeabi_d2iz>
 800a3f4:	4604      	mov	r4, r0
 800a3f6:	f7f6 f805 	bl	8000404 <__aeabi_i2d>
 800a3fa:	4602      	mov	r2, r0
 800a3fc:	460b      	mov	r3, r1
 800a3fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a402:	f7f5 feb1 	bl	8000168 <__aeabi_dsub>
 800a406:	4602      	mov	r2, r0
 800a408:	460b      	mov	r3, r1
 800a40a:	3430      	adds	r4, #48	; 0x30
 800a40c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a410:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a414:	f807 4b01 	strb.w	r4, [r7], #1
 800a418:	f7f6 fad0 	bl	80009bc <__aeabi_dcmplt>
 800a41c:	2800      	cmp	r0, #0
 800a41e:	d173      	bne.n	800a508 <_dtoa_r+0x638>
 800a420:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a424:	2000      	movs	r0, #0
 800a426:	4911      	ldr	r1, [pc, #68]	; (800a46c <_dtoa_r+0x59c>)
 800a428:	f7f5 fe9e 	bl	8000168 <__aeabi_dsub>
 800a42c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a430:	f7f6 fac4 	bl	80009bc <__aeabi_dcmplt>
 800a434:	2800      	cmp	r0, #0
 800a436:	f040 80b6 	bne.w	800a5a6 <_dtoa_r+0x6d6>
 800a43a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a43c:	429f      	cmp	r7, r3
 800a43e:	f43f af7a 	beq.w	800a336 <_dtoa_r+0x466>
 800a442:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a446:	2200      	movs	r2, #0
 800a448:	4b09      	ldr	r3, [pc, #36]	; (800a470 <_dtoa_r+0x5a0>)
 800a44a:	f7f6 f845 	bl	80004d8 <__aeabi_dmul>
 800a44e:	2200      	movs	r2, #0
 800a450:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a454:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a458:	4b05      	ldr	r3, [pc, #20]	; (800a470 <_dtoa_r+0x5a0>)
 800a45a:	f7f6 f83d 	bl	80004d8 <__aeabi_dmul>
 800a45e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a462:	e7c3      	b.n	800a3ec <_dtoa_r+0x51c>
 800a464:	0800e008 	.word	0x0800e008
 800a468:	0800dfe0 	.word	0x0800dfe0
 800a46c:	3ff00000 	.word	0x3ff00000
 800a470:	40240000 	.word	0x40240000
 800a474:	401c0000 	.word	0x401c0000
 800a478:	40140000 	.word	0x40140000
 800a47c:	3fe00000 	.word	0x3fe00000
 800a480:	4630      	mov	r0, r6
 800a482:	4639      	mov	r1, r7
 800a484:	f7f6 f828 	bl	80004d8 <__aeabi_dmul>
 800a488:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a48a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a48e:	9c03      	ldr	r4, [sp, #12]
 800a490:	9314      	str	r3, [sp, #80]	; 0x50
 800a492:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a496:	f7f6 facf 	bl	8000a38 <__aeabi_d2iz>
 800a49a:	9015      	str	r0, [sp, #84]	; 0x54
 800a49c:	f7f5 ffb2 	bl	8000404 <__aeabi_i2d>
 800a4a0:	4602      	mov	r2, r0
 800a4a2:	460b      	mov	r3, r1
 800a4a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a4a8:	f7f5 fe5e 	bl	8000168 <__aeabi_dsub>
 800a4ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a4ae:	4606      	mov	r6, r0
 800a4b0:	3330      	adds	r3, #48	; 0x30
 800a4b2:	f804 3b01 	strb.w	r3, [r4], #1
 800a4b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a4b8:	460f      	mov	r7, r1
 800a4ba:	429c      	cmp	r4, r3
 800a4bc:	f04f 0200 	mov.w	r2, #0
 800a4c0:	d124      	bne.n	800a50c <_dtoa_r+0x63c>
 800a4c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a4c6:	4baf      	ldr	r3, [pc, #700]	; (800a784 <_dtoa_r+0x8b4>)
 800a4c8:	f7f5 fe50 	bl	800016c <__adddf3>
 800a4cc:	4602      	mov	r2, r0
 800a4ce:	460b      	mov	r3, r1
 800a4d0:	4630      	mov	r0, r6
 800a4d2:	4639      	mov	r1, r7
 800a4d4:	f7f6 fa90 	bl	80009f8 <__aeabi_dcmpgt>
 800a4d8:	2800      	cmp	r0, #0
 800a4da:	d163      	bne.n	800a5a4 <_dtoa_r+0x6d4>
 800a4dc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a4e0:	2000      	movs	r0, #0
 800a4e2:	49a8      	ldr	r1, [pc, #672]	; (800a784 <_dtoa_r+0x8b4>)
 800a4e4:	f7f5 fe40 	bl	8000168 <__aeabi_dsub>
 800a4e8:	4602      	mov	r2, r0
 800a4ea:	460b      	mov	r3, r1
 800a4ec:	4630      	mov	r0, r6
 800a4ee:	4639      	mov	r1, r7
 800a4f0:	f7f6 fa64 	bl	80009bc <__aeabi_dcmplt>
 800a4f4:	2800      	cmp	r0, #0
 800a4f6:	f43f af1e 	beq.w	800a336 <_dtoa_r+0x466>
 800a4fa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a4fc:	1e7b      	subs	r3, r7, #1
 800a4fe:	9314      	str	r3, [sp, #80]	; 0x50
 800a500:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800a504:	2b30      	cmp	r3, #48	; 0x30
 800a506:	d0f8      	beq.n	800a4fa <_dtoa_r+0x62a>
 800a508:	46c3      	mov	fp, r8
 800a50a:	e03b      	b.n	800a584 <_dtoa_r+0x6b4>
 800a50c:	4b9e      	ldr	r3, [pc, #632]	; (800a788 <_dtoa_r+0x8b8>)
 800a50e:	f7f5 ffe3 	bl	80004d8 <__aeabi_dmul>
 800a512:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a516:	e7bc      	b.n	800a492 <_dtoa_r+0x5c2>
 800a518:	9f03      	ldr	r7, [sp, #12]
 800a51a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a51e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a522:	4640      	mov	r0, r8
 800a524:	4649      	mov	r1, r9
 800a526:	f7f6 f901 	bl	800072c <__aeabi_ddiv>
 800a52a:	f7f6 fa85 	bl	8000a38 <__aeabi_d2iz>
 800a52e:	4604      	mov	r4, r0
 800a530:	f7f5 ff68 	bl	8000404 <__aeabi_i2d>
 800a534:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a538:	f7f5 ffce 	bl	80004d8 <__aeabi_dmul>
 800a53c:	4602      	mov	r2, r0
 800a53e:	460b      	mov	r3, r1
 800a540:	4640      	mov	r0, r8
 800a542:	4649      	mov	r1, r9
 800a544:	f7f5 fe10 	bl	8000168 <__aeabi_dsub>
 800a548:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800a54c:	f807 6b01 	strb.w	r6, [r7], #1
 800a550:	9e03      	ldr	r6, [sp, #12]
 800a552:	f8dd c020 	ldr.w	ip, [sp, #32]
 800a556:	1bbe      	subs	r6, r7, r6
 800a558:	45b4      	cmp	ip, r6
 800a55a:	4602      	mov	r2, r0
 800a55c:	460b      	mov	r3, r1
 800a55e:	d136      	bne.n	800a5ce <_dtoa_r+0x6fe>
 800a560:	f7f5 fe04 	bl	800016c <__adddf3>
 800a564:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a568:	4680      	mov	r8, r0
 800a56a:	4689      	mov	r9, r1
 800a56c:	f7f6 fa44 	bl	80009f8 <__aeabi_dcmpgt>
 800a570:	bb58      	cbnz	r0, 800a5ca <_dtoa_r+0x6fa>
 800a572:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a576:	4640      	mov	r0, r8
 800a578:	4649      	mov	r1, r9
 800a57a:	f7f6 fa15 	bl	80009a8 <__aeabi_dcmpeq>
 800a57e:	b108      	cbz	r0, 800a584 <_dtoa_r+0x6b4>
 800a580:	07e3      	lsls	r3, r4, #31
 800a582:	d422      	bmi.n	800a5ca <_dtoa_r+0x6fa>
 800a584:	4651      	mov	r1, sl
 800a586:	4628      	mov	r0, r5
 800a588:	f000 fbc2 	bl	800ad10 <_Bfree>
 800a58c:	2300      	movs	r3, #0
 800a58e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a590:	703b      	strb	r3, [r7, #0]
 800a592:	f10b 0301 	add.w	r3, fp, #1
 800a596:	6013      	str	r3, [r2, #0]
 800a598:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	f43f ace6 	beq.w	8009f6c <_dtoa_r+0x9c>
 800a5a0:	601f      	str	r7, [r3, #0]
 800a5a2:	e4e3      	b.n	8009f6c <_dtoa_r+0x9c>
 800a5a4:	4627      	mov	r7, r4
 800a5a6:	463b      	mov	r3, r7
 800a5a8:	461f      	mov	r7, r3
 800a5aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a5ae:	2a39      	cmp	r2, #57	; 0x39
 800a5b0:	d107      	bne.n	800a5c2 <_dtoa_r+0x6f2>
 800a5b2:	9a03      	ldr	r2, [sp, #12]
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d1f7      	bne.n	800a5a8 <_dtoa_r+0x6d8>
 800a5b8:	2230      	movs	r2, #48	; 0x30
 800a5ba:	9903      	ldr	r1, [sp, #12]
 800a5bc:	f108 0801 	add.w	r8, r8, #1
 800a5c0:	700a      	strb	r2, [r1, #0]
 800a5c2:	781a      	ldrb	r2, [r3, #0]
 800a5c4:	3201      	adds	r2, #1
 800a5c6:	701a      	strb	r2, [r3, #0]
 800a5c8:	e79e      	b.n	800a508 <_dtoa_r+0x638>
 800a5ca:	46d8      	mov	r8, fp
 800a5cc:	e7eb      	b.n	800a5a6 <_dtoa_r+0x6d6>
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	4b6d      	ldr	r3, [pc, #436]	; (800a788 <_dtoa_r+0x8b8>)
 800a5d2:	f7f5 ff81 	bl	80004d8 <__aeabi_dmul>
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	2300      	movs	r3, #0
 800a5da:	4680      	mov	r8, r0
 800a5dc:	4689      	mov	r9, r1
 800a5de:	f7f6 f9e3 	bl	80009a8 <__aeabi_dcmpeq>
 800a5e2:	2800      	cmp	r0, #0
 800a5e4:	d09b      	beq.n	800a51e <_dtoa_r+0x64e>
 800a5e6:	e7cd      	b.n	800a584 <_dtoa_r+0x6b4>
 800a5e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a5ea:	2a00      	cmp	r2, #0
 800a5ec:	f000 80c4 	beq.w	800a778 <_dtoa_r+0x8a8>
 800a5f0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a5f2:	2a01      	cmp	r2, #1
 800a5f4:	f300 80a8 	bgt.w	800a748 <_dtoa_r+0x878>
 800a5f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a5fa:	2a00      	cmp	r2, #0
 800a5fc:	f000 80a0 	beq.w	800a740 <_dtoa_r+0x870>
 800a600:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a604:	464f      	mov	r7, r9
 800a606:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a608:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a60a:	2101      	movs	r1, #1
 800a60c:	441a      	add	r2, r3
 800a60e:	4628      	mov	r0, r5
 800a610:	4499      	add	r9, r3
 800a612:	9209      	str	r2, [sp, #36]	; 0x24
 800a614:	f000 fc7c 	bl	800af10 <__i2b>
 800a618:	4606      	mov	r6, r0
 800a61a:	b15f      	cbz	r7, 800a634 <_dtoa_r+0x764>
 800a61c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a61e:	2b00      	cmp	r3, #0
 800a620:	dd08      	ble.n	800a634 <_dtoa_r+0x764>
 800a622:	42bb      	cmp	r3, r7
 800a624:	bfa8      	it	ge
 800a626:	463b      	movge	r3, r7
 800a628:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a62a:	eba9 0903 	sub.w	r9, r9, r3
 800a62e:	1aff      	subs	r7, r7, r3
 800a630:	1ad3      	subs	r3, r2, r3
 800a632:	9309      	str	r3, [sp, #36]	; 0x24
 800a634:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a636:	b1f3      	cbz	r3, 800a676 <_dtoa_r+0x7a6>
 800a638:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	f000 80a0 	beq.w	800a780 <_dtoa_r+0x8b0>
 800a640:	2c00      	cmp	r4, #0
 800a642:	dd10      	ble.n	800a666 <_dtoa_r+0x796>
 800a644:	4631      	mov	r1, r6
 800a646:	4622      	mov	r2, r4
 800a648:	4628      	mov	r0, r5
 800a64a:	f000 fd1f 	bl	800b08c <__pow5mult>
 800a64e:	4652      	mov	r2, sl
 800a650:	4601      	mov	r1, r0
 800a652:	4606      	mov	r6, r0
 800a654:	4628      	mov	r0, r5
 800a656:	f000 fc71 	bl	800af3c <__multiply>
 800a65a:	4680      	mov	r8, r0
 800a65c:	4651      	mov	r1, sl
 800a65e:	4628      	mov	r0, r5
 800a660:	f000 fb56 	bl	800ad10 <_Bfree>
 800a664:	46c2      	mov	sl, r8
 800a666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a668:	1b1a      	subs	r2, r3, r4
 800a66a:	d004      	beq.n	800a676 <_dtoa_r+0x7a6>
 800a66c:	4651      	mov	r1, sl
 800a66e:	4628      	mov	r0, r5
 800a670:	f000 fd0c 	bl	800b08c <__pow5mult>
 800a674:	4682      	mov	sl, r0
 800a676:	2101      	movs	r1, #1
 800a678:	4628      	mov	r0, r5
 800a67a:	f000 fc49 	bl	800af10 <__i2b>
 800a67e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a680:	4604      	mov	r4, r0
 800a682:	2b00      	cmp	r3, #0
 800a684:	f340 8082 	ble.w	800a78c <_dtoa_r+0x8bc>
 800a688:	461a      	mov	r2, r3
 800a68a:	4601      	mov	r1, r0
 800a68c:	4628      	mov	r0, r5
 800a68e:	f000 fcfd 	bl	800b08c <__pow5mult>
 800a692:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a694:	4604      	mov	r4, r0
 800a696:	2b01      	cmp	r3, #1
 800a698:	dd7b      	ble.n	800a792 <_dtoa_r+0x8c2>
 800a69a:	f04f 0800 	mov.w	r8, #0
 800a69e:	6923      	ldr	r3, [r4, #16]
 800a6a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a6a4:	6918      	ldr	r0, [r3, #16]
 800a6a6:	f000 fbe5 	bl	800ae74 <__hi0bits>
 800a6aa:	f1c0 0020 	rsb	r0, r0, #32
 800a6ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6b0:	4418      	add	r0, r3
 800a6b2:	f010 001f 	ands.w	r0, r0, #31
 800a6b6:	f000 8092 	beq.w	800a7de <_dtoa_r+0x90e>
 800a6ba:	f1c0 0320 	rsb	r3, r0, #32
 800a6be:	2b04      	cmp	r3, #4
 800a6c0:	f340 8085 	ble.w	800a7ce <_dtoa_r+0x8fe>
 800a6c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6c6:	f1c0 001c 	rsb	r0, r0, #28
 800a6ca:	4403      	add	r3, r0
 800a6cc:	4481      	add	r9, r0
 800a6ce:	4407      	add	r7, r0
 800a6d0:	9309      	str	r3, [sp, #36]	; 0x24
 800a6d2:	f1b9 0f00 	cmp.w	r9, #0
 800a6d6:	dd05      	ble.n	800a6e4 <_dtoa_r+0x814>
 800a6d8:	4651      	mov	r1, sl
 800a6da:	464a      	mov	r2, r9
 800a6dc:	4628      	mov	r0, r5
 800a6de:	f000 fd2f 	bl	800b140 <__lshift>
 800a6e2:	4682      	mov	sl, r0
 800a6e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	dd05      	ble.n	800a6f6 <_dtoa_r+0x826>
 800a6ea:	4621      	mov	r1, r4
 800a6ec:	461a      	mov	r2, r3
 800a6ee:	4628      	mov	r0, r5
 800a6f0:	f000 fd26 	bl	800b140 <__lshift>
 800a6f4:	4604      	mov	r4, r0
 800a6f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d072      	beq.n	800a7e2 <_dtoa_r+0x912>
 800a6fc:	4621      	mov	r1, r4
 800a6fe:	4650      	mov	r0, sl
 800a700:	f000 fd8a 	bl	800b218 <__mcmp>
 800a704:	2800      	cmp	r0, #0
 800a706:	da6c      	bge.n	800a7e2 <_dtoa_r+0x912>
 800a708:	2300      	movs	r3, #0
 800a70a:	4651      	mov	r1, sl
 800a70c:	220a      	movs	r2, #10
 800a70e:	4628      	mov	r0, r5
 800a710:	f000 fb20 	bl	800ad54 <__multadd>
 800a714:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a716:	4682      	mov	sl, r0
 800a718:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	f000 81ac 	beq.w	800aa7a <_dtoa_r+0xbaa>
 800a722:	2300      	movs	r3, #0
 800a724:	4631      	mov	r1, r6
 800a726:	220a      	movs	r2, #10
 800a728:	4628      	mov	r0, r5
 800a72a:	f000 fb13 	bl	800ad54 <__multadd>
 800a72e:	9b06      	ldr	r3, [sp, #24]
 800a730:	4606      	mov	r6, r0
 800a732:	2b00      	cmp	r3, #0
 800a734:	f300 8093 	bgt.w	800a85e <_dtoa_r+0x98e>
 800a738:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a73a:	2b02      	cmp	r3, #2
 800a73c:	dc59      	bgt.n	800a7f2 <_dtoa_r+0x922>
 800a73e:	e08e      	b.n	800a85e <_dtoa_r+0x98e>
 800a740:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a742:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a746:	e75d      	b.n	800a604 <_dtoa_r+0x734>
 800a748:	9b08      	ldr	r3, [sp, #32]
 800a74a:	1e5c      	subs	r4, r3, #1
 800a74c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a74e:	42a3      	cmp	r3, r4
 800a750:	bfbf      	itttt	lt
 800a752:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a754:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800a756:	1ae3      	sublt	r3, r4, r3
 800a758:	18d2      	addlt	r2, r2, r3
 800a75a:	bfa8      	it	ge
 800a75c:	1b1c      	subge	r4, r3, r4
 800a75e:	9b08      	ldr	r3, [sp, #32]
 800a760:	bfbe      	ittt	lt
 800a762:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a764:	920e      	strlt	r2, [sp, #56]	; 0x38
 800a766:	2400      	movlt	r4, #0
 800a768:	2b00      	cmp	r3, #0
 800a76a:	bfb5      	itete	lt
 800a76c:	eba9 0703 	sublt.w	r7, r9, r3
 800a770:	464f      	movge	r7, r9
 800a772:	2300      	movlt	r3, #0
 800a774:	9b08      	ldrge	r3, [sp, #32]
 800a776:	e747      	b.n	800a608 <_dtoa_r+0x738>
 800a778:	464f      	mov	r7, r9
 800a77a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a77c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a77e:	e74c      	b.n	800a61a <_dtoa_r+0x74a>
 800a780:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a782:	e773      	b.n	800a66c <_dtoa_r+0x79c>
 800a784:	3fe00000 	.word	0x3fe00000
 800a788:	40240000 	.word	0x40240000
 800a78c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a78e:	2b01      	cmp	r3, #1
 800a790:	dc18      	bgt.n	800a7c4 <_dtoa_r+0x8f4>
 800a792:	9b04      	ldr	r3, [sp, #16]
 800a794:	b9b3      	cbnz	r3, 800a7c4 <_dtoa_r+0x8f4>
 800a796:	9b05      	ldr	r3, [sp, #20]
 800a798:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a79c:	b993      	cbnz	r3, 800a7c4 <_dtoa_r+0x8f4>
 800a79e:	9b05      	ldr	r3, [sp, #20]
 800a7a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a7a4:	0d1b      	lsrs	r3, r3, #20
 800a7a6:	051b      	lsls	r3, r3, #20
 800a7a8:	b17b      	cbz	r3, 800a7ca <_dtoa_r+0x8fa>
 800a7aa:	f04f 0801 	mov.w	r8, #1
 800a7ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7b0:	f109 0901 	add.w	r9, r9, #1
 800a7b4:	3301      	adds	r3, #1
 800a7b6:	9309      	str	r3, [sp, #36]	; 0x24
 800a7b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	f47f af6f 	bne.w	800a69e <_dtoa_r+0x7ce>
 800a7c0:	2001      	movs	r0, #1
 800a7c2:	e774      	b.n	800a6ae <_dtoa_r+0x7de>
 800a7c4:	f04f 0800 	mov.w	r8, #0
 800a7c8:	e7f6      	b.n	800a7b8 <_dtoa_r+0x8e8>
 800a7ca:	4698      	mov	r8, r3
 800a7cc:	e7f4      	b.n	800a7b8 <_dtoa_r+0x8e8>
 800a7ce:	d080      	beq.n	800a6d2 <_dtoa_r+0x802>
 800a7d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7d2:	331c      	adds	r3, #28
 800a7d4:	441a      	add	r2, r3
 800a7d6:	4499      	add	r9, r3
 800a7d8:	441f      	add	r7, r3
 800a7da:	9209      	str	r2, [sp, #36]	; 0x24
 800a7dc:	e779      	b.n	800a6d2 <_dtoa_r+0x802>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	e7f6      	b.n	800a7d0 <_dtoa_r+0x900>
 800a7e2:	9b08      	ldr	r3, [sp, #32]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	dc34      	bgt.n	800a852 <_dtoa_r+0x982>
 800a7e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a7ea:	2b02      	cmp	r3, #2
 800a7ec:	dd31      	ble.n	800a852 <_dtoa_r+0x982>
 800a7ee:	9b08      	ldr	r3, [sp, #32]
 800a7f0:	9306      	str	r3, [sp, #24]
 800a7f2:	9b06      	ldr	r3, [sp, #24]
 800a7f4:	b963      	cbnz	r3, 800a810 <_dtoa_r+0x940>
 800a7f6:	4621      	mov	r1, r4
 800a7f8:	2205      	movs	r2, #5
 800a7fa:	4628      	mov	r0, r5
 800a7fc:	f000 faaa 	bl	800ad54 <__multadd>
 800a800:	4601      	mov	r1, r0
 800a802:	4604      	mov	r4, r0
 800a804:	4650      	mov	r0, sl
 800a806:	f000 fd07 	bl	800b218 <__mcmp>
 800a80a:	2800      	cmp	r0, #0
 800a80c:	f73f adbf 	bgt.w	800a38e <_dtoa_r+0x4be>
 800a810:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a812:	9f03      	ldr	r7, [sp, #12]
 800a814:	ea6f 0b03 	mvn.w	fp, r3
 800a818:	f04f 0800 	mov.w	r8, #0
 800a81c:	4621      	mov	r1, r4
 800a81e:	4628      	mov	r0, r5
 800a820:	f000 fa76 	bl	800ad10 <_Bfree>
 800a824:	2e00      	cmp	r6, #0
 800a826:	f43f aead 	beq.w	800a584 <_dtoa_r+0x6b4>
 800a82a:	f1b8 0f00 	cmp.w	r8, #0
 800a82e:	d005      	beq.n	800a83c <_dtoa_r+0x96c>
 800a830:	45b0      	cmp	r8, r6
 800a832:	d003      	beq.n	800a83c <_dtoa_r+0x96c>
 800a834:	4641      	mov	r1, r8
 800a836:	4628      	mov	r0, r5
 800a838:	f000 fa6a 	bl	800ad10 <_Bfree>
 800a83c:	4631      	mov	r1, r6
 800a83e:	4628      	mov	r0, r5
 800a840:	f000 fa66 	bl	800ad10 <_Bfree>
 800a844:	e69e      	b.n	800a584 <_dtoa_r+0x6b4>
 800a846:	2400      	movs	r4, #0
 800a848:	4626      	mov	r6, r4
 800a84a:	e7e1      	b.n	800a810 <_dtoa_r+0x940>
 800a84c:	46c3      	mov	fp, r8
 800a84e:	4626      	mov	r6, r4
 800a850:	e59d      	b.n	800a38e <_dtoa_r+0x4be>
 800a852:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a854:	2b00      	cmp	r3, #0
 800a856:	f000 80c8 	beq.w	800a9ea <_dtoa_r+0xb1a>
 800a85a:	9b08      	ldr	r3, [sp, #32]
 800a85c:	9306      	str	r3, [sp, #24]
 800a85e:	2f00      	cmp	r7, #0
 800a860:	dd05      	ble.n	800a86e <_dtoa_r+0x99e>
 800a862:	4631      	mov	r1, r6
 800a864:	463a      	mov	r2, r7
 800a866:	4628      	mov	r0, r5
 800a868:	f000 fc6a 	bl	800b140 <__lshift>
 800a86c:	4606      	mov	r6, r0
 800a86e:	f1b8 0f00 	cmp.w	r8, #0
 800a872:	d05b      	beq.n	800a92c <_dtoa_r+0xa5c>
 800a874:	4628      	mov	r0, r5
 800a876:	6871      	ldr	r1, [r6, #4]
 800a878:	f000 fa0a 	bl	800ac90 <_Balloc>
 800a87c:	4607      	mov	r7, r0
 800a87e:	b928      	cbnz	r0, 800a88c <_dtoa_r+0x9bc>
 800a880:	4602      	mov	r2, r0
 800a882:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a886:	4b81      	ldr	r3, [pc, #516]	; (800aa8c <_dtoa_r+0xbbc>)
 800a888:	f7ff bb36 	b.w	8009ef8 <_dtoa_r+0x28>
 800a88c:	6932      	ldr	r2, [r6, #16]
 800a88e:	f106 010c 	add.w	r1, r6, #12
 800a892:	3202      	adds	r2, #2
 800a894:	0092      	lsls	r2, r2, #2
 800a896:	300c      	adds	r0, #12
 800a898:	f001 ff72 	bl	800c780 <memcpy>
 800a89c:	2201      	movs	r2, #1
 800a89e:	4639      	mov	r1, r7
 800a8a0:	4628      	mov	r0, r5
 800a8a2:	f000 fc4d 	bl	800b140 <__lshift>
 800a8a6:	46b0      	mov	r8, r6
 800a8a8:	4606      	mov	r6, r0
 800a8aa:	9b03      	ldr	r3, [sp, #12]
 800a8ac:	9a03      	ldr	r2, [sp, #12]
 800a8ae:	3301      	adds	r3, #1
 800a8b0:	9308      	str	r3, [sp, #32]
 800a8b2:	9b06      	ldr	r3, [sp, #24]
 800a8b4:	4413      	add	r3, r2
 800a8b6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8b8:	9b04      	ldr	r3, [sp, #16]
 800a8ba:	f003 0301 	and.w	r3, r3, #1
 800a8be:	930a      	str	r3, [sp, #40]	; 0x28
 800a8c0:	9b08      	ldr	r3, [sp, #32]
 800a8c2:	4621      	mov	r1, r4
 800a8c4:	3b01      	subs	r3, #1
 800a8c6:	4650      	mov	r0, sl
 800a8c8:	9304      	str	r3, [sp, #16]
 800a8ca:	f7ff fa77 	bl	8009dbc <quorem>
 800a8ce:	4641      	mov	r1, r8
 800a8d0:	9006      	str	r0, [sp, #24]
 800a8d2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a8d6:	4650      	mov	r0, sl
 800a8d8:	f000 fc9e 	bl	800b218 <__mcmp>
 800a8dc:	4632      	mov	r2, r6
 800a8de:	9009      	str	r0, [sp, #36]	; 0x24
 800a8e0:	4621      	mov	r1, r4
 800a8e2:	4628      	mov	r0, r5
 800a8e4:	f000 fcb4 	bl	800b250 <__mdiff>
 800a8e8:	68c2      	ldr	r2, [r0, #12]
 800a8ea:	4607      	mov	r7, r0
 800a8ec:	bb02      	cbnz	r2, 800a930 <_dtoa_r+0xa60>
 800a8ee:	4601      	mov	r1, r0
 800a8f0:	4650      	mov	r0, sl
 800a8f2:	f000 fc91 	bl	800b218 <__mcmp>
 800a8f6:	4602      	mov	r2, r0
 800a8f8:	4639      	mov	r1, r7
 800a8fa:	4628      	mov	r0, r5
 800a8fc:	920c      	str	r2, [sp, #48]	; 0x30
 800a8fe:	f000 fa07 	bl	800ad10 <_Bfree>
 800a902:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a904:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a906:	9f08      	ldr	r7, [sp, #32]
 800a908:	ea43 0102 	orr.w	r1, r3, r2
 800a90c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a90e:	4319      	orrs	r1, r3
 800a910:	d110      	bne.n	800a934 <_dtoa_r+0xa64>
 800a912:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a916:	d029      	beq.n	800a96c <_dtoa_r+0xa9c>
 800a918:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	dd02      	ble.n	800a924 <_dtoa_r+0xa54>
 800a91e:	9b06      	ldr	r3, [sp, #24]
 800a920:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a924:	9b04      	ldr	r3, [sp, #16]
 800a926:	f883 9000 	strb.w	r9, [r3]
 800a92a:	e777      	b.n	800a81c <_dtoa_r+0x94c>
 800a92c:	4630      	mov	r0, r6
 800a92e:	e7ba      	b.n	800a8a6 <_dtoa_r+0x9d6>
 800a930:	2201      	movs	r2, #1
 800a932:	e7e1      	b.n	800a8f8 <_dtoa_r+0xa28>
 800a934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a936:	2b00      	cmp	r3, #0
 800a938:	db04      	blt.n	800a944 <_dtoa_r+0xa74>
 800a93a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a93c:	430b      	orrs	r3, r1
 800a93e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a940:	430b      	orrs	r3, r1
 800a942:	d120      	bne.n	800a986 <_dtoa_r+0xab6>
 800a944:	2a00      	cmp	r2, #0
 800a946:	dded      	ble.n	800a924 <_dtoa_r+0xa54>
 800a948:	4651      	mov	r1, sl
 800a94a:	2201      	movs	r2, #1
 800a94c:	4628      	mov	r0, r5
 800a94e:	f000 fbf7 	bl	800b140 <__lshift>
 800a952:	4621      	mov	r1, r4
 800a954:	4682      	mov	sl, r0
 800a956:	f000 fc5f 	bl	800b218 <__mcmp>
 800a95a:	2800      	cmp	r0, #0
 800a95c:	dc03      	bgt.n	800a966 <_dtoa_r+0xa96>
 800a95e:	d1e1      	bne.n	800a924 <_dtoa_r+0xa54>
 800a960:	f019 0f01 	tst.w	r9, #1
 800a964:	d0de      	beq.n	800a924 <_dtoa_r+0xa54>
 800a966:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a96a:	d1d8      	bne.n	800a91e <_dtoa_r+0xa4e>
 800a96c:	2339      	movs	r3, #57	; 0x39
 800a96e:	9a04      	ldr	r2, [sp, #16]
 800a970:	7013      	strb	r3, [r2, #0]
 800a972:	463b      	mov	r3, r7
 800a974:	461f      	mov	r7, r3
 800a976:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800a97a:	3b01      	subs	r3, #1
 800a97c:	2a39      	cmp	r2, #57	; 0x39
 800a97e:	d06b      	beq.n	800aa58 <_dtoa_r+0xb88>
 800a980:	3201      	adds	r2, #1
 800a982:	701a      	strb	r2, [r3, #0]
 800a984:	e74a      	b.n	800a81c <_dtoa_r+0x94c>
 800a986:	2a00      	cmp	r2, #0
 800a988:	dd07      	ble.n	800a99a <_dtoa_r+0xaca>
 800a98a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a98e:	d0ed      	beq.n	800a96c <_dtoa_r+0xa9c>
 800a990:	9a04      	ldr	r2, [sp, #16]
 800a992:	f109 0301 	add.w	r3, r9, #1
 800a996:	7013      	strb	r3, [r2, #0]
 800a998:	e740      	b.n	800a81c <_dtoa_r+0x94c>
 800a99a:	9b08      	ldr	r3, [sp, #32]
 800a99c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a99e:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a9a2:	4293      	cmp	r3, r2
 800a9a4:	d042      	beq.n	800aa2c <_dtoa_r+0xb5c>
 800a9a6:	4651      	mov	r1, sl
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	220a      	movs	r2, #10
 800a9ac:	4628      	mov	r0, r5
 800a9ae:	f000 f9d1 	bl	800ad54 <__multadd>
 800a9b2:	45b0      	cmp	r8, r6
 800a9b4:	4682      	mov	sl, r0
 800a9b6:	f04f 0300 	mov.w	r3, #0
 800a9ba:	f04f 020a 	mov.w	r2, #10
 800a9be:	4641      	mov	r1, r8
 800a9c0:	4628      	mov	r0, r5
 800a9c2:	d107      	bne.n	800a9d4 <_dtoa_r+0xb04>
 800a9c4:	f000 f9c6 	bl	800ad54 <__multadd>
 800a9c8:	4680      	mov	r8, r0
 800a9ca:	4606      	mov	r6, r0
 800a9cc:	9b08      	ldr	r3, [sp, #32]
 800a9ce:	3301      	adds	r3, #1
 800a9d0:	9308      	str	r3, [sp, #32]
 800a9d2:	e775      	b.n	800a8c0 <_dtoa_r+0x9f0>
 800a9d4:	f000 f9be 	bl	800ad54 <__multadd>
 800a9d8:	4631      	mov	r1, r6
 800a9da:	4680      	mov	r8, r0
 800a9dc:	2300      	movs	r3, #0
 800a9de:	220a      	movs	r2, #10
 800a9e0:	4628      	mov	r0, r5
 800a9e2:	f000 f9b7 	bl	800ad54 <__multadd>
 800a9e6:	4606      	mov	r6, r0
 800a9e8:	e7f0      	b.n	800a9cc <_dtoa_r+0xafc>
 800a9ea:	9b08      	ldr	r3, [sp, #32]
 800a9ec:	9306      	str	r3, [sp, #24]
 800a9ee:	9f03      	ldr	r7, [sp, #12]
 800a9f0:	4621      	mov	r1, r4
 800a9f2:	4650      	mov	r0, sl
 800a9f4:	f7ff f9e2 	bl	8009dbc <quorem>
 800a9f8:	9b03      	ldr	r3, [sp, #12]
 800a9fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a9fe:	f807 9b01 	strb.w	r9, [r7], #1
 800aa02:	1afa      	subs	r2, r7, r3
 800aa04:	9b06      	ldr	r3, [sp, #24]
 800aa06:	4293      	cmp	r3, r2
 800aa08:	dd07      	ble.n	800aa1a <_dtoa_r+0xb4a>
 800aa0a:	4651      	mov	r1, sl
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	220a      	movs	r2, #10
 800aa10:	4628      	mov	r0, r5
 800aa12:	f000 f99f 	bl	800ad54 <__multadd>
 800aa16:	4682      	mov	sl, r0
 800aa18:	e7ea      	b.n	800a9f0 <_dtoa_r+0xb20>
 800aa1a:	9b06      	ldr	r3, [sp, #24]
 800aa1c:	f04f 0800 	mov.w	r8, #0
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	bfcc      	ite	gt
 800aa24:	461f      	movgt	r7, r3
 800aa26:	2701      	movle	r7, #1
 800aa28:	9b03      	ldr	r3, [sp, #12]
 800aa2a:	441f      	add	r7, r3
 800aa2c:	4651      	mov	r1, sl
 800aa2e:	2201      	movs	r2, #1
 800aa30:	4628      	mov	r0, r5
 800aa32:	f000 fb85 	bl	800b140 <__lshift>
 800aa36:	4621      	mov	r1, r4
 800aa38:	4682      	mov	sl, r0
 800aa3a:	f000 fbed 	bl	800b218 <__mcmp>
 800aa3e:	2800      	cmp	r0, #0
 800aa40:	dc97      	bgt.n	800a972 <_dtoa_r+0xaa2>
 800aa42:	d102      	bne.n	800aa4a <_dtoa_r+0xb7a>
 800aa44:	f019 0f01 	tst.w	r9, #1
 800aa48:	d193      	bne.n	800a972 <_dtoa_r+0xaa2>
 800aa4a:	463b      	mov	r3, r7
 800aa4c:	461f      	mov	r7, r3
 800aa4e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa52:	2a30      	cmp	r2, #48	; 0x30
 800aa54:	d0fa      	beq.n	800aa4c <_dtoa_r+0xb7c>
 800aa56:	e6e1      	b.n	800a81c <_dtoa_r+0x94c>
 800aa58:	9a03      	ldr	r2, [sp, #12]
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	d18a      	bne.n	800a974 <_dtoa_r+0xaa4>
 800aa5e:	2331      	movs	r3, #49	; 0x31
 800aa60:	f10b 0b01 	add.w	fp, fp, #1
 800aa64:	e797      	b.n	800a996 <_dtoa_r+0xac6>
 800aa66:	4b0a      	ldr	r3, [pc, #40]	; (800aa90 <_dtoa_r+0xbc0>)
 800aa68:	f7ff ba9f 	b.w	8009faa <_dtoa_r+0xda>
 800aa6c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	f47f aa77 	bne.w	8009f62 <_dtoa_r+0x92>
 800aa74:	4b07      	ldr	r3, [pc, #28]	; (800aa94 <_dtoa_r+0xbc4>)
 800aa76:	f7ff ba98 	b.w	8009faa <_dtoa_r+0xda>
 800aa7a:	9b06      	ldr	r3, [sp, #24]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	dcb6      	bgt.n	800a9ee <_dtoa_r+0xb1e>
 800aa80:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aa82:	2b02      	cmp	r3, #2
 800aa84:	f73f aeb5 	bgt.w	800a7f2 <_dtoa_r+0x922>
 800aa88:	e7b1      	b.n	800a9ee <_dtoa_r+0xb1e>
 800aa8a:	bf00      	nop
 800aa8c:	0800df73 	.word	0x0800df73
 800aa90:	0800dece 	.word	0x0800dece
 800aa94:	0800def7 	.word	0x0800def7

0800aa98 <_free_r>:
 800aa98:	b538      	push	{r3, r4, r5, lr}
 800aa9a:	4605      	mov	r5, r0
 800aa9c:	2900      	cmp	r1, #0
 800aa9e:	d040      	beq.n	800ab22 <_free_r+0x8a>
 800aaa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aaa4:	1f0c      	subs	r4, r1, #4
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	bfb8      	it	lt
 800aaaa:	18e4      	addlt	r4, r4, r3
 800aaac:	f000 f8e4 	bl	800ac78 <__malloc_lock>
 800aab0:	4a1c      	ldr	r2, [pc, #112]	; (800ab24 <_free_r+0x8c>)
 800aab2:	6813      	ldr	r3, [r2, #0]
 800aab4:	b933      	cbnz	r3, 800aac4 <_free_r+0x2c>
 800aab6:	6063      	str	r3, [r4, #4]
 800aab8:	6014      	str	r4, [r2, #0]
 800aaba:	4628      	mov	r0, r5
 800aabc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aac0:	f000 b8e0 	b.w	800ac84 <__malloc_unlock>
 800aac4:	42a3      	cmp	r3, r4
 800aac6:	d908      	bls.n	800aada <_free_r+0x42>
 800aac8:	6820      	ldr	r0, [r4, #0]
 800aaca:	1821      	adds	r1, r4, r0
 800aacc:	428b      	cmp	r3, r1
 800aace:	bf01      	itttt	eq
 800aad0:	6819      	ldreq	r1, [r3, #0]
 800aad2:	685b      	ldreq	r3, [r3, #4]
 800aad4:	1809      	addeq	r1, r1, r0
 800aad6:	6021      	streq	r1, [r4, #0]
 800aad8:	e7ed      	b.n	800aab6 <_free_r+0x1e>
 800aada:	461a      	mov	r2, r3
 800aadc:	685b      	ldr	r3, [r3, #4]
 800aade:	b10b      	cbz	r3, 800aae4 <_free_r+0x4c>
 800aae0:	42a3      	cmp	r3, r4
 800aae2:	d9fa      	bls.n	800aada <_free_r+0x42>
 800aae4:	6811      	ldr	r1, [r2, #0]
 800aae6:	1850      	adds	r0, r2, r1
 800aae8:	42a0      	cmp	r0, r4
 800aaea:	d10b      	bne.n	800ab04 <_free_r+0x6c>
 800aaec:	6820      	ldr	r0, [r4, #0]
 800aaee:	4401      	add	r1, r0
 800aaf0:	1850      	adds	r0, r2, r1
 800aaf2:	4283      	cmp	r3, r0
 800aaf4:	6011      	str	r1, [r2, #0]
 800aaf6:	d1e0      	bne.n	800aaba <_free_r+0x22>
 800aaf8:	6818      	ldr	r0, [r3, #0]
 800aafa:	685b      	ldr	r3, [r3, #4]
 800aafc:	4408      	add	r0, r1
 800aafe:	6010      	str	r0, [r2, #0]
 800ab00:	6053      	str	r3, [r2, #4]
 800ab02:	e7da      	b.n	800aaba <_free_r+0x22>
 800ab04:	d902      	bls.n	800ab0c <_free_r+0x74>
 800ab06:	230c      	movs	r3, #12
 800ab08:	602b      	str	r3, [r5, #0]
 800ab0a:	e7d6      	b.n	800aaba <_free_r+0x22>
 800ab0c:	6820      	ldr	r0, [r4, #0]
 800ab0e:	1821      	adds	r1, r4, r0
 800ab10:	428b      	cmp	r3, r1
 800ab12:	bf01      	itttt	eq
 800ab14:	6819      	ldreq	r1, [r3, #0]
 800ab16:	685b      	ldreq	r3, [r3, #4]
 800ab18:	1809      	addeq	r1, r1, r0
 800ab1a:	6021      	streq	r1, [r4, #0]
 800ab1c:	6063      	str	r3, [r4, #4]
 800ab1e:	6054      	str	r4, [r2, #4]
 800ab20:	e7cb      	b.n	800aaba <_free_r+0x22>
 800ab22:	bd38      	pop	{r3, r4, r5, pc}
 800ab24:	2000089c 	.word	0x2000089c

0800ab28 <malloc>:
 800ab28:	4b02      	ldr	r3, [pc, #8]	; (800ab34 <malloc+0xc>)
 800ab2a:	4601      	mov	r1, r0
 800ab2c:	6818      	ldr	r0, [r3, #0]
 800ab2e:	f000 b823 	b.w	800ab78 <_malloc_r>
 800ab32:	bf00      	nop
 800ab34:	200000b0 	.word	0x200000b0

0800ab38 <sbrk_aligned>:
 800ab38:	b570      	push	{r4, r5, r6, lr}
 800ab3a:	4e0e      	ldr	r6, [pc, #56]	; (800ab74 <sbrk_aligned+0x3c>)
 800ab3c:	460c      	mov	r4, r1
 800ab3e:	6831      	ldr	r1, [r6, #0]
 800ab40:	4605      	mov	r5, r0
 800ab42:	b911      	cbnz	r1, 800ab4a <sbrk_aligned+0x12>
 800ab44:	f001 fe0c 	bl	800c760 <_sbrk_r>
 800ab48:	6030      	str	r0, [r6, #0]
 800ab4a:	4621      	mov	r1, r4
 800ab4c:	4628      	mov	r0, r5
 800ab4e:	f001 fe07 	bl	800c760 <_sbrk_r>
 800ab52:	1c43      	adds	r3, r0, #1
 800ab54:	d00a      	beq.n	800ab6c <sbrk_aligned+0x34>
 800ab56:	1cc4      	adds	r4, r0, #3
 800ab58:	f024 0403 	bic.w	r4, r4, #3
 800ab5c:	42a0      	cmp	r0, r4
 800ab5e:	d007      	beq.n	800ab70 <sbrk_aligned+0x38>
 800ab60:	1a21      	subs	r1, r4, r0
 800ab62:	4628      	mov	r0, r5
 800ab64:	f001 fdfc 	bl	800c760 <_sbrk_r>
 800ab68:	3001      	adds	r0, #1
 800ab6a:	d101      	bne.n	800ab70 <sbrk_aligned+0x38>
 800ab6c:	f04f 34ff 	mov.w	r4, #4294967295
 800ab70:	4620      	mov	r0, r4
 800ab72:	bd70      	pop	{r4, r5, r6, pc}
 800ab74:	200008a0 	.word	0x200008a0

0800ab78 <_malloc_r>:
 800ab78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab7c:	1ccd      	adds	r5, r1, #3
 800ab7e:	f025 0503 	bic.w	r5, r5, #3
 800ab82:	3508      	adds	r5, #8
 800ab84:	2d0c      	cmp	r5, #12
 800ab86:	bf38      	it	cc
 800ab88:	250c      	movcc	r5, #12
 800ab8a:	2d00      	cmp	r5, #0
 800ab8c:	4607      	mov	r7, r0
 800ab8e:	db01      	blt.n	800ab94 <_malloc_r+0x1c>
 800ab90:	42a9      	cmp	r1, r5
 800ab92:	d905      	bls.n	800aba0 <_malloc_r+0x28>
 800ab94:	230c      	movs	r3, #12
 800ab96:	2600      	movs	r6, #0
 800ab98:	603b      	str	r3, [r7, #0]
 800ab9a:	4630      	mov	r0, r6
 800ab9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aba0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ac74 <_malloc_r+0xfc>
 800aba4:	f000 f868 	bl	800ac78 <__malloc_lock>
 800aba8:	f8d8 3000 	ldr.w	r3, [r8]
 800abac:	461c      	mov	r4, r3
 800abae:	bb5c      	cbnz	r4, 800ac08 <_malloc_r+0x90>
 800abb0:	4629      	mov	r1, r5
 800abb2:	4638      	mov	r0, r7
 800abb4:	f7ff ffc0 	bl	800ab38 <sbrk_aligned>
 800abb8:	1c43      	adds	r3, r0, #1
 800abba:	4604      	mov	r4, r0
 800abbc:	d155      	bne.n	800ac6a <_malloc_r+0xf2>
 800abbe:	f8d8 4000 	ldr.w	r4, [r8]
 800abc2:	4626      	mov	r6, r4
 800abc4:	2e00      	cmp	r6, #0
 800abc6:	d145      	bne.n	800ac54 <_malloc_r+0xdc>
 800abc8:	2c00      	cmp	r4, #0
 800abca:	d048      	beq.n	800ac5e <_malloc_r+0xe6>
 800abcc:	6823      	ldr	r3, [r4, #0]
 800abce:	4631      	mov	r1, r6
 800abd0:	4638      	mov	r0, r7
 800abd2:	eb04 0903 	add.w	r9, r4, r3
 800abd6:	f001 fdc3 	bl	800c760 <_sbrk_r>
 800abda:	4581      	cmp	r9, r0
 800abdc:	d13f      	bne.n	800ac5e <_malloc_r+0xe6>
 800abde:	6821      	ldr	r1, [r4, #0]
 800abe0:	4638      	mov	r0, r7
 800abe2:	1a6d      	subs	r5, r5, r1
 800abe4:	4629      	mov	r1, r5
 800abe6:	f7ff ffa7 	bl	800ab38 <sbrk_aligned>
 800abea:	3001      	adds	r0, #1
 800abec:	d037      	beq.n	800ac5e <_malloc_r+0xe6>
 800abee:	6823      	ldr	r3, [r4, #0]
 800abf0:	442b      	add	r3, r5
 800abf2:	6023      	str	r3, [r4, #0]
 800abf4:	f8d8 3000 	ldr.w	r3, [r8]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d038      	beq.n	800ac6e <_malloc_r+0xf6>
 800abfc:	685a      	ldr	r2, [r3, #4]
 800abfe:	42a2      	cmp	r2, r4
 800ac00:	d12b      	bne.n	800ac5a <_malloc_r+0xe2>
 800ac02:	2200      	movs	r2, #0
 800ac04:	605a      	str	r2, [r3, #4]
 800ac06:	e00f      	b.n	800ac28 <_malloc_r+0xb0>
 800ac08:	6822      	ldr	r2, [r4, #0]
 800ac0a:	1b52      	subs	r2, r2, r5
 800ac0c:	d41f      	bmi.n	800ac4e <_malloc_r+0xd6>
 800ac0e:	2a0b      	cmp	r2, #11
 800ac10:	d917      	bls.n	800ac42 <_malloc_r+0xca>
 800ac12:	1961      	adds	r1, r4, r5
 800ac14:	42a3      	cmp	r3, r4
 800ac16:	6025      	str	r5, [r4, #0]
 800ac18:	bf18      	it	ne
 800ac1a:	6059      	strne	r1, [r3, #4]
 800ac1c:	6863      	ldr	r3, [r4, #4]
 800ac1e:	bf08      	it	eq
 800ac20:	f8c8 1000 	streq.w	r1, [r8]
 800ac24:	5162      	str	r2, [r4, r5]
 800ac26:	604b      	str	r3, [r1, #4]
 800ac28:	4638      	mov	r0, r7
 800ac2a:	f104 060b 	add.w	r6, r4, #11
 800ac2e:	f000 f829 	bl	800ac84 <__malloc_unlock>
 800ac32:	f026 0607 	bic.w	r6, r6, #7
 800ac36:	1d23      	adds	r3, r4, #4
 800ac38:	1af2      	subs	r2, r6, r3
 800ac3a:	d0ae      	beq.n	800ab9a <_malloc_r+0x22>
 800ac3c:	1b9b      	subs	r3, r3, r6
 800ac3e:	50a3      	str	r3, [r4, r2]
 800ac40:	e7ab      	b.n	800ab9a <_malloc_r+0x22>
 800ac42:	42a3      	cmp	r3, r4
 800ac44:	6862      	ldr	r2, [r4, #4]
 800ac46:	d1dd      	bne.n	800ac04 <_malloc_r+0x8c>
 800ac48:	f8c8 2000 	str.w	r2, [r8]
 800ac4c:	e7ec      	b.n	800ac28 <_malloc_r+0xb0>
 800ac4e:	4623      	mov	r3, r4
 800ac50:	6864      	ldr	r4, [r4, #4]
 800ac52:	e7ac      	b.n	800abae <_malloc_r+0x36>
 800ac54:	4634      	mov	r4, r6
 800ac56:	6876      	ldr	r6, [r6, #4]
 800ac58:	e7b4      	b.n	800abc4 <_malloc_r+0x4c>
 800ac5a:	4613      	mov	r3, r2
 800ac5c:	e7cc      	b.n	800abf8 <_malloc_r+0x80>
 800ac5e:	230c      	movs	r3, #12
 800ac60:	4638      	mov	r0, r7
 800ac62:	603b      	str	r3, [r7, #0]
 800ac64:	f000 f80e 	bl	800ac84 <__malloc_unlock>
 800ac68:	e797      	b.n	800ab9a <_malloc_r+0x22>
 800ac6a:	6025      	str	r5, [r4, #0]
 800ac6c:	e7dc      	b.n	800ac28 <_malloc_r+0xb0>
 800ac6e:	605b      	str	r3, [r3, #4]
 800ac70:	deff      	udf	#255	; 0xff
 800ac72:	bf00      	nop
 800ac74:	2000089c 	.word	0x2000089c

0800ac78 <__malloc_lock>:
 800ac78:	4801      	ldr	r0, [pc, #4]	; (800ac80 <__malloc_lock+0x8>)
 800ac7a:	f7ff b88a 	b.w	8009d92 <__retarget_lock_acquire_recursive>
 800ac7e:	bf00      	nop
 800ac80:	20000898 	.word	0x20000898

0800ac84 <__malloc_unlock>:
 800ac84:	4801      	ldr	r0, [pc, #4]	; (800ac8c <__malloc_unlock+0x8>)
 800ac86:	f7ff b885 	b.w	8009d94 <__retarget_lock_release_recursive>
 800ac8a:	bf00      	nop
 800ac8c:	20000898 	.word	0x20000898

0800ac90 <_Balloc>:
 800ac90:	b570      	push	{r4, r5, r6, lr}
 800ac92:	69c6      	ldr	r6, [r0, #28]
 800ac94:	4604      	mov	r4, r0
 800ac96:	460d      	mov	r5, r1
 800ac98:	b976      	cbnz	r6, 800acb8 <_Balloc+0x28>
 800ac9a:	2010      	movs	r0, #16
 800ac9c:	f7ff ff44 	bl	800ab28 <malloc>
 800aca0:	4602      	mov	r2, r0
 800aca2:	61e0      	str	r0, [r4, #28]
 800aca4:	b920      	cbnz	r0, 800acb0 <_Balloc+0x20>
 800aca6:	216b      	movs	r1, #107	; 0x6b
 800aca8:	4b17      	ldr	r3, [pc, #92]	; (800ad08 <_Balloc+0x78>)
 800acaa:	4818      	ldr	r0, [pc, #96]	; (800ad0c <_Balloc+0x7c>)
 800acac:	f001 fd7c 	bl	800c7a8 <__assert_func>
 800acb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800acb4:	6006      	str	r6, [r0, #0]
 800acb6:	60c6      	str	r6, [r0, #12]
 800acb8:	69e6      	ldr	r6, [r4, #28]
 800acba:	68f3      	ldr	r3, [r6, #12]
 800acbc:	b183      	cbz	r3, 800ace0 <_Balloc+0x50>
 800acbe:	69e3      	ldr	r3, [r4, #28]
 800acc0:	68db      	ldr	r3, [r3, #12]
 800acc2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800acc6:	b9b8      	cbnz	r0, 800acf8 <_Balloc+0x68>
 800acc8:	2101      	movs	r1, #1
 800acca:	fa01 f605 	lsl.w	r6, r1, r5
 800acce:	1d72      	adds	r2, r6, #5
 800acd0:	4620      	mov	r0, r4
 800acd2:	0092      	lsls	r2, r2, #2
 800acd4:	f001 fd86 	bl	800c7e4 <_calloc_r>
 800acd8:	b160      	cbz	r0, 800acf4 <_Balloc+0x64>
 800acda:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800acde:	e00e      	b.n	800acfe <_Balloc+0x6e>
 800ace0:	2221      	movs	r2, #33	; 0x21
 800ace2:	2104      	movs	r1, #4
 800ace4:	4620      	mov	r0, r4
 800ace6:	f001 fd7d 	bl	800c7e4 <_calloc_r>
 800acea:	69e3      	ldr	r3, [r4, #28]
 800acec:	60f0      	str	r0, [r6, #12]
 800acee:	68db      	ldr	r3, [r3, #12]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d1e4      	bne.n	800acbe <_Balloc+0x2e>
 800acf4:	2000      	movs	r0, #0
 800acf6:	bd70      	pop	{r4, r5, r6, pc}
 800acf8:	6802      	ldr	r2, [r0, #0]
 800acfa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800acfe:	2300      	movs	r3, #0
 800ad00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ad04:	e7f7      	b.n	800acf6 <_Balloc+0x66>
 800ad06:	bf00      	nop
 800ad08:	0800df04 	.word	0x0800df04
 800ad0c:	0800df84 	.word	0x0800df84

0800ad10 <_Bfree>:
 800ad10:	b570      	push	{r4, r5, r6, lr}
 800ad12:	69c6      	ldr	r6, [r0, #28]
 800ad14:	4605      	mov	r5, r0
 800ad16:	460c      	mov	r4, r1
 800ad18:	b976      	cbnz	r6, 800ad38 <_Bfree+0x28>
 800ad1a:	2010      	movs	r0, #16
 800ad1c:	f7ff ff04 	bl	800ab28 <malloc>
 800ad20:	4602      	mov	r2, r0
 800ad22:	61e8      	str	r0, [r5, #28]
 800ad24:	b920      	cbnz	r0, 800ad30 <_Bfree+0x20>
 800ad26:	218f      	movs	r1, #143	; 0x8f
 800ad28:	4b08      	ldr	r3, [pc, #32]	; (800ad4c <_Bfree+0x3c>)
 800ad2a:	4809      	ldr	r0, [pc, #36]	; (800ad50 <_Bfree+0x40>)
 800ad2c:	f001 fd3c 	bl	800c7a8 <__assert_func>
 800ad30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ad34:	6006      	str	r6, [r0, #0]
 800ad36:	60c6      	str	r6, [r0, #12]
 800ad38:	b13c      	cbz	r4, 800ad4a <_Bfree+0x3a>
 800ad3a:	69eb      	ldr	r3, [r5, #28]
 800ad3c:	6862      	ldr	r2, [r4, #4]
 800ad3e:	68db      	ldr	r3, [r3, #12]
 800ad40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ad44:	6021      	str	r1, [r4, #0]
 800ad46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ad4a:	bd70      	pop	{r4, r5, r6, pc}
 800ad4c:	0800df04 	.word	0x0800df04
 800ad50:	0800df84 	.word	0x0800df84

0800ad54 <__multadd>:
 800ad54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad58:	4607      	mov	r7, r0
 800ad5a:	460c      	mov	r4, r1
 800ad5c:	461e      	mov	r6, r3
 800ad5e:	2000      	movs	r0, #0
 800ad60:	690d      	ldr	r5, [r1, #16]
 800ad62:	f101 0c14 	add.w	ip, r1, #20
 800ad66:	f8dc 3000 	ldr.w	r3, [ip]
 800ad6a:	3001      	adds	r0, #1
 800ad6c:	b299      	uxth	r1, r3
 800ad6e:	fb02 6101 	mla	r1, r2, r1, r6
 800ad72:	0c1e      	lsrs	r6, r3, #16
 800ad74:	0c0b      	lsrs	r3, r1, #16
 800ad76:	fb02 3306 	mla	r3, r2, r6, r3
 800ad7a:	b289      	uxth	r1, r1
 800ad7c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ad80:	4285      	cmp	r5, r0
 800ad82:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ad86:	f84c 1b04 	str.w	r1, [ip], #4
 800ad8a:	dcec      	bgt.n	800ad66 <__multadd+0x12>
 800ad8c:	b30e      	cbz	r6, 800add2 <__multadd+0x7e>
 800ad8e:	68a3      	ldr	r3, [r4, #8]
 800ad90:	42ab      	cmp	r3, r5
 800ad92:	dc19      	bgt.n	800adc8 <__multadd+0x74>
 800ad94:	6861      	ldr	r1, [r4, #4]
 800ad96:	4638      	mov	r0, r7
 800ad98:	3101      	adds	r1, #1
 800ad9a:	f7ff ff79 	bl	800ac90 <_Balloc>
 800ad9e:	4680      	mov	r8, r0
 800ada0:	b928      	cbnz	r0, 800adae <__multadd+0x5a>
 800ada2:	4602      	mov	r2, r0
 800ada4:	21ba      	movs	r1, #186	; 0xba
 800ada6:	4b0c      	ldr	r3, [pc, #48]	; (800add8 <__multadd+0x84>)
 800ada8:	480c      	ldr	r0, [pc, #48]	; (800addc <__multadd+0x88>)
 800adaa:	f001 fcfd 	bl	800c7a8 <__assert_func>
 800adae:	6922      	ldr	r2, [r4, #16]
 800adb0:	f104 010c 	add.w	r1, r4, #12
 800adb4:	3202      	adds	r2, #2
 800adb6:	0092      	lsls	r2, r2, #2
 800adb8:	300c      	adds	r0, #12
 800adba:	f001 fce1 	bl	800c780 <memcpy>
 800adbe:	4621      	mov	r1, r4
 800adc0:	4638      	mov	r0, r7
 800adc2:	f7ff ffa5 	bl	800ad10 <_Bfree>
 800adc6:	4644      	mov	r4, r8
 800adc8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800adcc:	3501      	adds	r5, #1
 800adce:	615e      	str	r6, [r3, #20]
 800add0:	6125      	str	r5, [r4, #16]
 800add2:	4620      	mov	r0, r4
 800add4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800add8:	0800df73 	.word	0x0800df73
 800addc:	0800df84 	.word	0x0800df84

0800ade0 <__s2b>:
 800ade0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ade4:	4615      	mov	r5, r2
 800ade6:	2209      	movs	r2, #9
 800ade8:	461f      	mov	r7, r3
 800adea:	3308      	adds	r3, #8
 800adec:	460c      	mov	r4, r1
 800adee:	fb93 f3f2 	sdiv	r3, r3, r2
 800adf2:	4606      	mov	r6, r0
 800adf4:	2201      	movs	r2, #1
 800adf6:	2100      	movs	r1, #0
 800adf8:	429a      	cmp	r2, r3
 800adfa:	db09      	blt.n	800ae10 <__s2b+0x30>
 800adfc:	4630      	mov	r0, r6
 800adfe:	f7ff ff47 	bl	800ac90 <_Balloc>
 800ae02:	b940      	cbnz	r0, 800ae16 <__s2b+0x36>
 800ae04:	4602      	mov	r2, r0
 800ae06:	21d3      	movs	r1, #211	; 0xd3
 800ae08:	4b18      	ldr	r3, [pc, #96]	; (800ae6c <__s2b+0x8c>)
 800ae0a:	4819      	ldr	r0, [pc, #100]	; (800ae70 <__s2b+0x90>)
 800ae0c:	f001 fccc 	bl	800c7a8 <__assert_func>
 800ae10:	0052      	lsls	r2, r2, #1
 800ae12:	3101      	adds	r1, #1
 800ae14:	e7f0      	b.n	800adf8 <__s2b+0x18>
 800ae16:	9b08      	ldr	r3, [sp, #32]
 800ae18:	2d09      	cmp	r5, #9
 800ae1a:	6143      	str	r3, [r0, #20]
 800ae1c:	f04f 0301 	mov.w	r3, #1
 800ae20:	6103      	str	r3, [r0, #16]
 800ae22:	dd16      	ble.n	800ae52 <__s2b+0x72>
 800ae24:	f104 0909 	add.w	r9, r4, #9
 800ae28:	46c8      	mov	r8, r9
 800ae2a:	442c      	add	r4, r5
 800ae2c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ae30:	4601      	mov	r1, r0
 800ae32:	220a      	movs	r2, #10
 800ae34:	4630      	mov	r0, r6
 800ae36:	3b30      	subs	r3, #48	; 0x30
 800ae38:	f7ff ff8c 	bl	800ad54 <__multadd>
 800ae3c:	45a0      	cmp	r8, r4
 800ae3e:	d1f5      	bne.n	800ae2c <__s2b+0x4c>
 800ae40:	f1a5 0408 	sub.w	r4, r5, #8
 800ae44:	444c      	add	r4, r9
 800ae46:	1b2d      	subs	r5, r5, r4
 800ae48:	1963      	adds	r3, r4, r5
 800ae4a:	42bb      	cmp	r3, r7
 800ae4c:	db04      	blt.n	800ae58 <__s2b+0x78>
 800ae4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae52:	2509      	movs	r5, #9
 800ae54:	340a      	adds	r4, #10
 800ae56:	e7f6      	b.n	800ae46 <__s2b+0x66>
 800ae58:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ae5c:	4601      	mov	r1, r0
 800ae5e:	220a      	movs	r2, #10
 800ae60:	4630      	mov	r0, r6
 800ae62:	3b30      	subs	r3, #48	; 0x30
 800ae64:	f7ff ff76 	bl	800ad54 <__multadd>
 800ae68:	e7ee      	b.n	800ae48 <__s2b+0x68>
 800ae6a:	bf00      	nop
 800ae6c:	0800df73 	.word	0x0800df73
 800ae70:	0800df84 	.word	0x0800df84

0800ae74 <__hi0bits>:
 800ae74:	0c02      	lsrs	r2, r0, #16
 800ae76:	0412      	lsls	r2, r2, #16
 800ae78:	4603      	mov	r3, r0
 800ae7a:	b9ca      	cbnz	r2, 800aeb0 <__hi0bits+0x3c>
 800ae7c:	0403      	lsls	r3, r0, #16
 800ae7e:	2010      	movs	r0, #16
 800ae80:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ae84:	bf04      	itt	eq
 800ae86:	021b      	lsleq	r3, r3, #8
 800ae88:	3008      	addeq	r0, #8
 800ae8a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ae8e:	bf04      	itt	eq
 800ae90:	011b      	lsleq	r3, r3, #4
 800ae92:	3004      	addeq	r0, #4
 800ae94:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ae98:	bf04      	itt	eq
 800ae9a:	009b      	lsleq	r3, r3, #2
 800ae9c:	3002      	addeq	r0, #2
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	db05      	blt.n	800aeae <__hi0bits+0x3a>
 800aea2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800aea6:	f100 0001 	add.w	r0, r0, #1
 800aeaa:	bf08      	it	eq
 800aeac:	2020      	moveq	r0, #32
 800aeae:	4770      	bx	lr
 800aeb0:	2000      	movs	r0, #0
 800aeb2:	e7e5      	b.n	800ae80 <__hi0bits+0xc>

0800aeb4 <__lo0bits>:
 800aeb4:	6803      	ldr	r3, [r0, #0]
 800aeb6:	4602      	mov	r2, r0
 800aeb8:	f013 0007 	ands.w	r0, r3, #7
 800aebc:	d00b      	beq.n	800aed6 <__lo0bits+0x22>
 800aebe:	07d9      	lsls	r1, r3, #31
 800aec0:	d421      	bmi.n	800af06 <__lo0bits+0x52>
 800aec2:	0798      	lsls	r0, r3, #30
 800aec4:	bf49      	itett	mi
 800aec6:	085b      	lsrmi	r3, r3, #1
 800aec8:	089b      	lsrpl	r3, r3, #2
 800aeca:	2001      	movmi	r0, #1
 800aecc:	6013      	strmi	r3, [r2, #0]
 800aece:	bf5c      	itt	pl
 800aed0:	2002      	movpl	r0, #2
 800aed2:	6013      	strpl	r3, [r2, #0]
 800aed4:	4770      	bx	lr
 800aed6:	b299      	uxth	r1, r3
 800aed8:	b909      	cbnz	r1, 800aede <__lo0bits+0x2a>
 800aeda:	2010      	movs	r0, #16
 800aedc:	0c1b      	lsrs	r3, r3, #16
 800aede:	b2d9      	uxtb	r1, r3
 800aee0:	b909      	cbnz	r1, 800aee6 <__lo0bits+0x32>
 800aee2:	3008      	adds	r0, #8
 800aee4:	0a1b      	lsrs	r3, r3, #8
 800aee6:	0719      	lsls	r1, r3, #28
 800aee8:	bf04      	itt	eq
 800aeea:	091b      	lsreq	r3, r3, #4
 800aeec:	3004      	addeq	r0, #4
 800aeee:	0799      	lsls	r1, r3, #30
 800aef0:	bf04      	itt	eq
 800aef2:	089b      	lsreq	r3, r3, #2
 800aef4:	3002      	addeq	r0, #2
 800aef6:	07d9      	lsls	r1, r3, #31
 800aef8:	d403      	bmi.n	800af02 <__lo0bits+0x4e>
 800aefa:	085b      	lsrs	r3, r3, #1
 800aefc:	f100 0001 	add.w	r0, r0, #1
 800af00:	d003      	beq.n	800af0a <__lo0bits+0x56>
 800af02:	6013      	str	r3, [r2, #0]
 800af04:	4770      	bx	lr
 800af06:	2000      	movs	r0, #0
 800af08:	4770      	bx	lr
 800af0a:	2020      	movs	r0, #32
 800af0c:	4770      	bx	lr
	...

0800af10 <__i2b>:
 800af10:	b510      	push	{r4, lr}
 800af12:	460c      	mov	r4, r1
 800af14:	2101      	movs	r1, #1
 800af16:	f7ff febb 	bl	800ac90 <_Balloc>
 800af1a:	4602      	mov	r2, r0
 800af1c:	b928      	cbnz	r0, 800af2a <__i2b+0x1a>
 800af1e:	f240 1145 	movw	r1, #325	; 0x145
 800af22:	4b04      	ldr	r3, [pc, #16]	; (800af34 <__i2b+0x24>)
 800af24:	4804      	ldr	r0, [pc, #16]	; (800af38 <__i2b+0x28>)
 800af26:	f001 fc3f 	bl	800c7a8 <__assert_func>
 800af2a:	2301      	movs	r3, #1
 800af2c:	6144      	str	r4, [r0, #20]
 800af2e:	6103      	str	r3, [r0, #16]
 800af30:	bd10      	pop	{r4, pc}
 800af32:	bf00      	nop
 800af34:	0800df73 	.word	0x0800df73
 800af38:	0800df84 	.word	0x0800df84

0800af3c <__multiply>:
 800af3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af40:	4691      	mov	r9, r2
 800af42:	690a      	ldr	r2, [r1, #16]
 800af44:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800af48:	460c      	mov	r4, r1
 800af4a:	429a      	cmp	r2, r3
 800af4c:	bfbe      	ittt	lt
 800af4e:	460b      	movlt	r3, r1
 800af50:	464c      	movlt	r4, r9
 800af52:	4699      	movlt	r9, r3
 800af54:	6927      	ldr	r7, [r4, #16]
 800af56:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800af5a:	68a3      	ldr	r3, [r4, #8]
 800af5c:	6861      	ldr	r1, [r4, #4]
 800af5e:	eb07 060a 	add.w	r6, r7, sl
 800af62:	42b3      	cmp	r3, r6
 800af64:	b085      	sub	sp, #20
 800af66:	bfb8      	it	lt
 800af68:	3101      	addlt	r1, #1
 800af6a:	f7ff fe91 	bl	800ac90 <_Balloc>
 800af6e:	b930      	cbnz	r0, 800af7e <__multiply+0x42>
 800af70:	4602      	mov	r2, r0
 800af72:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800af76:	4b43      	ldr	r3, [pc, #268]	; (800b084 <__multiply+0x148>)
 800af78:	4843      	ldr	r0, [pc, #268]	; (800b088 <__multiply+0x14c>)
 800af7a:	f001 fc15 	bl	800c7a8 <__assert_func>
 800af7e:	f100 0514 	add.w	r5, r0, #20
 800af82:	462b      	mov	r3, r5
 800af84:	2200      	movs	r2, #0
 800af86:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800af8a:	4543      	cmp	r3, r8
 800af8c:	d321      	bcc.n	800afd2 <__multiply+0x96>
 800af8e:	f104 0314 	add.w	r3, r4, #20
 800af92:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800af96:	f109 0314 	add.w	r3, r9, #20
 800af9a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800af9e:	9202      	str	r2, [sp, #8]
 800afa0:	1b3a      	subs	r2, r7, r4
 800afa2:	3a15      	subs	r2, #21
 800afa4:	f022 0203 	bic.w	r2, r2, #3
 800afa8:	3204      	adds	r2, #4
 800afaa:	f104 0115 	add.w	r1, r4, #21
 800afae:	428f      	cmp	r7, r1
 800afb0:	bf38      	it	cc
 800afb2:	2204      	movcc	r2, #4
 800afb4:	9201      	str	r2, [sp, #4]
 800afb6:	9a02      	ldr	r2, [sp, #8]
 800afb8:	9303      	str	r3, [sp, #12]
 800afba:	429a      	cmp	r2, r3
 800afbc:	d80c      	bhi.n	800afd8 <__multiply+0x9c>
 800afbe:	2e00      	cmp	r6, #0
 800afc0:	dd03      	ble.n	800afca <__multiply+0x8e>
 800afc2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d05a      	beq.n	800b080 <__multiply+0x144>
 800afca:	6106      	str	r6, [r0, #16]
 800afcc:	b005      	add	sp, #20
 800afce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afd2:	f843 2b04 	str.w	r2, [r3], #4
 800afd6:	e7d8      	b.n	800af8a <__multiply+0x4e>
 800afd8:	f8b3 a000 	ldrh.w	sl, [r3]
 800afdc:	f1ba 0f00 	cmp.w	sl, #0
 800afe0:	d023      	beq.n	800b02a <__multiply+0xee>
 800afe2:	46a9      	mov	r9, r5
 800afe4:	f04f 0c00 	mov.w	ip, #0
 800afe8:	f104 0e14 	add.w	lr, r4, #20
 800afec:	f85e 2b04 	ldr.w	r2, [lr], #4
 800aff0:	f8d9 1000 	ldr.w	r1, [r9]
 800aff4:	fa1f fb82 	uxth.w	fp, r2
 800aff8:	b289      	uxth	r1, r1
 800affa:	fb0a 110b 	mla	r1, sl, fp, r1
 800affe:	4461      	add	r1, ip
 800b000:	f8d9 c000 	ldr.w	ip, [r9]
 800b004:	0c12      	lsrs	r2, r2, #16
 800b006:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800b00a:	fb0a c202 	mla	r2, sl, r2, ip
 800b00e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b012:	b289      	uxth	r1, r1
 800b014:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b018:	4577      	cmp	r7, lr
 800b01a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b01e:	f849 1b04 	str.w	r1, [r9], #4
 800b022:	d8e3      	bhi.n	800afec <__multiply+0xb0>
 800b024:	9a01      	ldr	r2, [sp, #4]
 800b026:	f845 c002 	str.w	ip, [r5, r2]
 800b02a:	9a03      	ldr	r2, [sp, #12]
 800b02c:	3304      	adds	r3, #4
 800b02e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b032:	f1b9 0f00 	cmp.w	r9, #0
 800b036:	d021      	beq.n	800b07c <__multiply+0x140>
 800b038:	46ae      	mov	lr, r5
 800b03a:	f04f 0a00 	mov.w	sl, #0
 800b03e:	6829      	ldr	r1, [r5, #0]
 800b040:	f104 0c14 	add.w	ip, r4, #20
 800b044:	f8bc b000 	ldrh.w	fp, [ip]
 800b048:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b04c:	b289      	uxth	r1, r1
 800b04e:	fb09 220b 	mla	r2, r9, fp, r2
 800b052:	4452      	add	r2, sl
 800b054:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b058:	f84e 1b04 	str.w	r1, [lr], #4
 800b05c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b060:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b064:	f8be 1000 	ldrh.w	r1, [lr]
 800b068:	4567      	cmp	r7, ip
 800b06a:	fb09 110a 	mla	r1, r9, sl, r1
 800b06e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b072:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b076:	d8e5      	bhi.n	800b044 <__multiply+0x108>
 800b078:	9a01      	ldr	r2, [sp, #4]
 800b07a:	50a9      	str	r1, [r5, r2]
 800b07c:	3504      	adds	r5, #4
 800b07e:	e79a      	b.n	800afb6 <__multiply+0x7a>
 800b080:	3e01      	subs	r6, #1
 800b082:	e79c      	b.n	800afbe <__multiply+0x82>
 800b084:	0800df73 	.word	0x0800df73
 800b088:	0800df84 	.word	0x0800df84

0800b08c <__pow5mult>:
 800b08c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b090:	4615      	mov	r5, r2
 800b092:	f012 0203 	ands.w	r2, r2, #3
 800b096:	4606      	mov	r6, r0
 800b098:	460f      	mov	r7, r1
 800b09a:	d007      	beq.n	800b0ac <__pow5mult+0x20>
 800b09c:	4c25      	ldr	r4, [pc, #148]	; (800b134 <__pow5mult+0xa8>)
 800b09e:	3a01      	subs	r2, #1
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b0a6:	f7ff fe55 	bl	800ad54 <__multadd>
 800b0aa:	4607      	mov	r7, r0
 800b0ac:	10ad      	asrs	r5, r5, #2
 800b0ae:	d03d      	beq.n	800b12c <__pow5mult+0xa0>
 800b0b0:	69f4      	ldr	r4, [r6, #28]
 800b0b2:	b97c      	cbnz	r4, 800b0d4 <__pow5mult+0x48>
 800b0b4:	2010      	movs	r0, #16
 800b0b6:	f7ff fd37 	bl	800ab28 <malloc>
 800b0ba:	4602      	mov	r2, r0
 800b0bc:	61f0      	str	r0, [r6, #28]
 800b0be:	b928      	cbnz	r0, 800b0cc <__pow5mult+0x40>
 800b0c0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b0c4:	4b1c      	ldr	r3, [pc, #112]	; (800b138 <__pow5mult+0xac>)
 800b0c6:	481d      	ldr	r0, [pc, #116]	; (800b13c <__pow5mult+0xb0>)
 800b0c8:	f001 fb6e 	bl	800c7a8 <__assert_func>
 800b0cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b0d0:	6004      	str	r4, [r0, #0]
 800b0d2:	60c4      	str	r4, [r0, #12]
 800b0d4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b0d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b0dc:	b94c      	cbnz	r4, 800b0f2 <__pow5mult+0x66>
 800b0de:	f240 2171 	movw	r1, #625	; 0x271
 800b0e2:	4630      	mov	r0, r6
 800b0e4:	f7ff ff14 	bl	800af10 <__i2b>
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	4604      	mov	r4, r0
 800b0ec:	f8c8 0008 	str.w	r0, [r8, #8]
 800b0f0:	6003      	str	r3, [r0, #0]
 800b0f2:	f04f 0900 	mov.w	r9, #0
 800b0f6:	07eb      	lsls	r3, r5, #31
 800b0f8:	d50a      	bpl.n	800b110 <__pow5mult+0x84>
 800b0fa:	4639      	mov	r1, r7
 800b0fc:	4622      	mov	r2, r4
 800b0fe:	4630      	mov	r0, r6
 800b100:	f7ff ff1c 	bl	800af3c <__multiply>
 800b104:	4680      	mov	r8, r0
 800b106:	4639      	mov	r1, r7
 800b108:	4630      	mov	r0, r6
 800b10a:	f7ff fe01 	bl	800ad10 <_Bfree>
 800b10e:	4647      	mov	r7, r8
 800b110:	106d      	asrs	r5, r5, #1
 800b112:	d00b      	beq.n	800b12c <__pow5mult+0xa0>
 800b114:	6820      	ldr	r0, [r4, #0]
 800b116:	b938      	cbnz	r0, 800b128 <__pow5mult+0x9c>
 800b118:	4622      	mov	r2, r4
 800b11a:	4621      	mov	r1, r4
 800b11c:	4630      	mov	r0, r6
 800b11e:	f7ff ff0d 	bl	800af3c <__multiply>
 800b122:	6020      	str	r0, [r4, #0]
 800b124:	f8c0 9000 	str.w	r9, [r0]
 800b128:	4604      	mov	r4, r0
 800b12a:	e7e4      	b.n	800b0f6 <__pow5mult+0x6a>
 800b12c:	4638      	mov	r0, r7
 800b12e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b132:	bf00      	nop
 800b134:	0800e0d0 	.word	0x0800e0d0
 800b138:	0800df04 	.word	0x0800df04
 800b13c:	0800df84 	.word	0x0800df84

0800b140 <__lshift>:
 800b140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b144:	460c      	mov	r4, r1
 800b146:	4607      	mov	r7, r0
 800b148:	4691      	mov	r9, r2
 800b14a:	6923      	ldr	r3, [r4, #16]
 800b14c:	6849      	ldr	r1, [r1, #4]
 800b14e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b152:	68a3      	ldr	r3, [r4, #8]
 800b154:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b158:	f108 0601 	add.w	r6, r8, #1
 800b15c:	42b3      	cmp	r3, r6
 800b15e:	db0b      	blt.n	800b178 <__lshift+0x38>
 800b160:	4638      	mov	r0, r7
 800b162:	f7ff fd95 	bl	800ac90 <_Balloc>
 800b166:	4605      	mov	r5, r0
 800b168:	b948      	cbnz	r0, 800b17e <__lshift+0x3e>
 800b16a:	4602      	mov	r2, r0
 800b16c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b170:	4b27      	ldr	r3, [pc, #156]	; (800b210 <__lshift+0xd0>)
 800b172:	4828      	ldr	r0, [pc, #160]	; (800b214 <__lshift+0xd4>)
 800b174:	f001 fb18 	bl	800c7a8 <__assert_func>
 800b178:	3101      	adds	r1, #1
 800b17a:	005b      	lsls	r3, r3, #1
 800b17c:	e7ee      	b.n	800b15c <__lshift+0x1c>
 800b17e:	2300      	movs	r3, #0
 800b180:	f100 0114 	add.w	r1, r0, #20
 800b184:	f100 0210 	add.w	r2, r0, #16
 800b188:	4618      	mov	r0, r3
 800b18a:	4553      	cmp	r3, sl
 800b18c:	db33      	blt.n	800b1f6 <__lshift+0xb6>
 800b18e:	6920      	ldr	r0, [r4, #16]
 800b190:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b194:	f104 0314 	add.w	r3, r4, #20
 800b198:	f019 091f 	ands.w	r9, r9, #31
 800b19c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b1a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b1a4:	d02b      	beq.n	800b1fe <__lshift+0xbe>
 800b1a6:	468a      	mov	sl, r1
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	f1c9 0e20 	rsb	lr, r9, #32
 800b1ae:	6818      	ldr	r0, [r3, #0]
 800b1b0:	fa00 f009 	lsl.w	r0, r0, r9
 800b1b4:	4310      	orrs	r0, r2
 800b1b6:	f84a 0b04 	str.w	r0, [sl], #4
 800b1ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1be:	459c      	cmp	ip, r3
 800b1c0:	fa22 f20e 	lsr.w	r2, r2, lr
 800b1c4:	d8f3      	bhi.n	800b1ae <__lshift+0x6e>
 800b1c6:	ebac 0304 	sub.w	r3, ip, r4
 800b1ca:	3b15      	subs	r3, #21
 800b1cc:	f023 0303 	bic.w	r3, r3, #3
 800b1d0:	3304      	adds	r3, #4
 800b1d2:	f104 0015 	add.w	r0, r4, #21
 800b1d6:	4584      	cmp	ip, r0
 800b1d8:	bf38      	it	cc
 800b1da:	2304      	movcc	r3, #4
 800b1dc:	50ca      	str	r2, [r1, r3]
 800b1de:	b10a      	cbz	r2, 800b1e4 <__lshift+0xa4>
 800b1e0:	f108 0602 	add.w	r6, r8, #2
 800b1e4:	3e01      	subs	r6, #1
 800b1e6:	4638      	mov	r0, r7
 800b1e8:	4621      	mov	r1, r4
 800b1ea:	612e      	str	r6, [r5, #16]
 800b1ec:	f7ff fd90 	bl	800ad10 <_Bfree>
 800b1f0:	4628      	mov	r0, r5
 800b1f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1f6:	f842 0f04 	str.w	r0, [r2, #4]!
 800b1fa:	3301      	adds	r3, #1
 800b1fc:	e7c5      	b.n	800b18a <__lshift+0x4a>
 800b1fe:	3904      	subs	r1, #4
 800b200:	f853 2b04 	ldr.w	r2, [r3], #4
 800b204:	459c      	cmp	ip, r3
 800b206:	f841 2f04 	str.w	r2, [r1, #4]!
 800b20a:	d8f9      	bhi.n	800b200 <__lshift+0xc0>
 800b20c:	e7ea      	b.n	800b1e4 <__lshift+0xa4>
 800b20e:	bf00      	nop
 800b210:	0800df73 	.word	0x0800df73
 800b214:	0800df84 	.word	0x0800df84

0800b218 <__mcmp>:
 800b218:	4603      	mov	r3, r0
 800b21a:	690a      	ldr	r2, [r1, #16]
 800b21c:	6900      	ldr	r0, [r0, #16]
 800b21e:	b530      	push	{r4, r5, lr}
 800b220:	1a80      	subs	r0, r0, r2
 800b222:	d10d      	bne.n	800b240 <__mcmp+0x28>
 800b224:	3314      	adds	r3, #20
 800b226:	3114      	adds	r1, #20
 800b228:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b22c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b230:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b234:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b238:	4295      	cmp	r5, r2
 800b23a:	d002      	beq.n	800b242 <__mcmp+0x2a>
 800b23c:	d304      	bcc.n	800b248 <__mcmp+0x30>
 800b23e:	2001      	movs	r0, #1
 800b240:	bd30      	pop	{r4, r5, pc}
 800b242:	42a3      	cmp	r3, r4
 800b244:	d3f4      	bcc.n	800b230 <__mcmp+0x18>
 800b246:	e7fb      	b.n	800b240 <__mcmp+0x28>
 800b248:	f04f 30ff 	mov.w	r0, #4294967295
 800b24c:	e7f8      	b.n	800b240 <__mcmp+0x28>
	...

0800b250 <__mdiff>:
 800b250:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b254:	460d      	mov	r5, r1
 800b256:	4607      	mov	r7, r0
 800b258:	4611      	mov	r1, r2
 800b25a:	4628      	mov	r0, r5
 800b25c:	4614      	mov	r4, r2
 800b25e:	f7ff ffdb 	bl	800b218 <__mcmp>
 800b262:	1e06      	subs	r6, r0, #0
 800b264:	d111      	bne.n	800b28a <__mdiff+0x3a>
 800b266:	4631      	mov	r1, r6
 800b268:	4638      	mov	r0, r7
 800b26a:	f7ff fd11 	bl	800ac90 <_Balloc>
 800b26e:	4602      	mov	r2, r0
 800b270:	b928      	cbnz	r0, 800b27e <__mdiff+0x2e>
 800b272:	f240 2137 	movw	r1, #567	; 0x237
 800b276:	4b3a      	ldr	r3, [pc, #232]	; (800b360 <__mdiff+0x110>)
 800b278:	483a      	ldr	r0, [pc, #232]	; (800b364 <__mdiff+0x114>)
 800b27a:	f001 fa95 	bl	800c7a8 <__assert_func>
 800b27e:	2301      	movs	r3, #1
 800b280:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b284:	4610      	mov	r0, r2
 800b286:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b28a:	bfa4      	itt	ge
 800b28c:	4623      	movge	r3, r4
 800b28e:	462c      	movge	r4, r5
 800b290:	4638      	mov	r0, r7
 800b292:	6861      	ldr	r1, [r4, #4]
 800b294:	bfa6      	itte	ge
 800b296:	461d      	movge	r5, r3
 800b298:	2600      	movge	r6, #0
 800b29a:	2601      	movlt	r6, #1
 800b29c:	f7ff fcf8 	bl	800ac90 <_Balloc>
 800b2a0:	4602      	mov	r2, r0
 800b2a2:	b918      	cbnz	r0, 800b2ac <__mdiff+0x5c>
 800b2a4:	f240 2145 	movw	r1, #581	; 0x245
 800b2a8:	4b2d      	ldr	r3, [pc, #180]	; (800b360 <__mdiff+0x110>)
 800b2aa:	e7e5      	b.n	800b278 <__mdiff+0x28>
 800b2ac:	f102 0814 	add.w	r8, r2, #20
 800b2b0:	46c2      	mov	sl, r8
 800b2b2:	f04f 0c00 	mov.w	ip, #0
 800b2b6:	6927      	ldr	r7, [r4, #16]
 800b2b8:	60c6      	str	r6, [r0, #12]
 800b2ba:	692e      	ldr	r6, [r5, #16]
 800b2bc:	f104 0014 	add.w	r0, r4, #20
 800b2c0:	f105 0914 	add.w	r9, r5, #20
 800b2c4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800b2c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b2cc:	3410      	adds	r4, #16
 800b2ce:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800b2d2:	f859 3b04 	ldr.w	r3, [r9], #4
 800b2d6:	fa1f f18b 	uxth.w	r1, fp
 800b2da:	4461      	add	r1, ip
 800b2dc:	fa1f fc83 	uxth.w	ip, r3
 800b2e0:	0c1b      	lsrs	r3, r3, #16
 800b2e2:	eba1 010c 	sub.w	r1, r1, ip
 800b2e6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b2ea:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b2ee:	b289      	uxth	r1, r1
 800b2f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800b2f4:	454e      	cmp	r6, r9
 800b2f6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b2fa:	f84a 1b04 	str.w	r1, [sl], #4
 800b2fe:	d8e6      	bhi.n	800b2ce <__mdiff+0x7e>
 800b300:	1b73      	subs	r3, r6, r5
 800b302:	3b15      	subs	r3, #21
 800b304:	f023 0303 	bic.w	r3, r3, #3
 800b308:	3515      	adds	r5, #21
 800b30a:	3304      	adds	r3, #4
 800b30c:	42ae      	cmp	r6, r5
 800b30e:	bf38      	it	cc
 800b310:	2304      	movcc	r3, #4
 800b312:	4418      	add	r0, r3
 800b314:	4443      	add	r3, r8
 800b316:	461e      	mov	r6, r3
 800b318:	4605      	mov	r5, r0
 800b31a:	4575      	cmp	r5, lr
 800b31c:	d30e      	bcc.n	800b33c <__mdiff+0xec>
 800b31e:	f10e 0103 	add.w	r1, lr, #3
 800b322:	1a09      	subs	r1, r1, r0
 800b324:	f021 0103 	bic.w	r1, r1, #3
 800b328:	3803      	subs	r0, #3
 800b32a:	4586      	cmp	lr, r0
 800b32c:	bf38      	it	cc
 800b32e:	2100      	movcc	r1, #0
 800b330:	440b      	add	r3, r1
 800b332:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b336:	b189      	cbz	r1, 800b35c <__mdiff+0x10c>
 800b338:	6117      	str	r7, [r2, #16]
 800b33a:	e7a3      	b.n	800b284 <__mdiff+0x34>
 800b33c:	f855 8b04 	ldr.w	r8, [r5], #4
 800b340:	fa1f f188 	uxth.w	r1, r8
 800b344:	4461      	add	r1, ip
 800b346:	140c      	asrs	r4, r1, #16
 800b348:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b34c:	b289      	uxth	r1, r1
 800b34e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b352:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800b356:	f846 1b04 	str.w	r1, [r6], #4
 800b35a:	e7de      	b.n	800b31a <__mdiff+0xca>
 800b35c:	3f01      	subs	r7, #1
 800b35e:	e7e8      	b.n	800b332 <__mdiff+0xe2>
 800b360:	0800df73 	.word	0x0800df73
 800b364:	0800df84 	.word	0x0800df84

0800b368 <__ulp>:
 800b368:	4b0e      	ldr	r3, [pc, #56]	; (800b3a4 <__ulp+0x3c>)
 800b36a:	400b      	ands	r3, r1
 800b36c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b370:	2b00      	cmp	r3, #0
 800b372:	dc08      	bgt.n	800b386 <__ulp+0x1e>
 800b374:	425b      	negs	r3, r3
 800b376:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b37a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b37e:	da04      	bge.n	800b38a <__ulp+0x22>
 800b380:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b384:	4113      	asrs	r3, r2
 800b386:	2200      	movs	r2, #0
 800b388:	e008      	b.n	800b39c <__ulp+0x34>
 800b38a:	f1a2 0314 	sub.w	r3, r2, #20
 800b38e:	2b1e      	cmp	r3, #30
 800b390:	bfd6      	itet	le
 800b392:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b396:	2201      	movgt	r2, #1
 800b398:	40da      	lsrle	r2, r3
 800b39a:	2300      	movs	r3, #0
 800b39c:	4619      	mov	r1, r3
 800b39e:	4610      	mov	r0, r2
 800b3a0:	4770      	bx	lr
 800b3a2:	bf00      	nop
 800b3a4:	7ff00000 	.word	0x7ff00000

0800b3a8 <__b2d>:
 800b3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3aa:	6905      	ldr	r5, [r0, #16]
 800b3ac:	f100 0714 	add.w	r7, r0, #20
 800b3b0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b3b4:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b3b8:	1f2e      	subs	r6, r5, #4
 800b3ba:	4620      	mov	r0, r4
 800b3bc:	f7ff fd5a 	bl	800ae74 <__hi0bits>
 800b3c0:	f1c0 0220 	rsb	r2, r0, #32
 800b3c4:	280a      	cmp	r0, #10
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	f8df c068 	ldr.w	ip, [pc, #104]	; 800b434 <__b2d+0x8c>
 800b3cc:	600a      	str	r2, [r1, #0]
 800b3ce:	dc12      	bgt.n	800b3f6 <__b2d+0x4e>
 800b3d0:	f1c0 0e0b 	rsb	lr, r0, #11
 800b3d4:	fa24 f20e 	lsr.w	r2, r4, lr
 800b3d8:	42b7      	cmp	r7, r6
 800b3da:	ea42 010c 	orr.w	r1, r2, ip
 800b3de:	bf2c      	ite	cs
 800b3e0:	2200      	movcs	r2, #0
 800b3e2:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800b3e6:	3315      	adds	r3, #21
 800b3e8:	fa04 f303 	lsl.w	r3, r4, r3
 800b3ec:	fa22 f20e 	lsr.w	r2, r2, lr
 800b3f0:	431a      	orrs	r2, r3
 800b3f2:	4610      	mov	r0, r2
 800b3f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3f6:	42b7      	cmp	r7, r6
 800b3f8:	bf2e      	itee	cs
 800b3fa:	2200      	movcs	r2, #0
 800b3fc:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800b400:	f1a5 0608 	subcc.w	r6, r5, #8
 800b404:	3b0b      	subs	r3, #11
 800b406:	d012      	beq.n	800b42e <__b2d+0x86>
 800b408:	f1c3 0520 	rsb	r5, r3, #32
 800b40c:	fa22 f105 	lsr.w	r1, r2, r5
 800b410:	409c      	lsls	r4, r3
 800b412:	430c      	orrs	r4, r1
 800b414:	42be      	cmp	r6, r7
 800b416:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800b41a:	bf94      	ite	ls
 800b41c:	2400      	movls	r4, #0
 800b41e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b422:	409a      	lsls	r2, r3
 800b424:	40ec      	lsrs	r4, r5
 800b426:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b42a:	4322      	orrs	r2, r4
 800b42c:	e7e1      	b.n	800b3f2 <__b2d+0x4a>
 800b42e:	ea44 010c 	orr.w	r1, r4, ip
 800b432:	e7de      	b.n	800b3f2 <__b2d+0x4a>
 800b434:	3ff00000 	.word	0x3ff00000

0800b438 <__d2b>:
 800b438:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b43a:	2101      	movs	r1, #1
 800b43c:	4617      	mov	r7, r2
 800b43e:	461c      	mov	r4, r3
 800b440:	9e08      	ldr	r6, [sp, #32]
 800b442:	f7ff fc25 	bl	800ac90 <_Balloc>
 800b446:	4605      	mov	r5, r0
 800b448:	b930      	cbnz	r0, 800b458 <__d2b+0x20>
 800b44a:	4602      	mov	r2, r0
 800b44c:	f240 310f 	movw	r1, #783	; 0x30f
 800b450:	4b22      	ldr	r3, [pc, #136]	; (800b4dc <__d2b+0xa4>)
 800b452:	4823      	ldr	r0, [pc, #140]	; (800b4e0 <__d2b+0xa8>)
 800b454:	f001 f9a8 	bl	800c7a8 <__assert_func>
 800b458:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800b45c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800b460:	bb24      	cbnz	r4, 800b4ac <__d2b+0x74>
 800b462:	2f00      	cmp	r7, #0
 800b464:	9301      	str	r3, [sp, #4]
 800b466:	d026      	beq.n	800b4b6 <__d2b+0x7e>
 800b468:	4668      	mov	r0, sp
 800b46a:	9700      	str	r7, [sp, #0]
 800b46c:	f7ff fd22 	bl	800aeb4 <__lo0bits>
 800b470:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b474:	b1e8      	cbz	r0, 800b4b2 <__d2b+0x7a>
 800b476:	f1c0 0320 	rsb	r3, r0, #32
 800b47a:	fa02 f303 	lsl.w	r3, r2, r3
 800b47e:	430b      	orrs	r3, r1
 800b480:	40c2      	lsrs	r2, r0
 800b482:	616b      	str	r3, [r5, #20]
 800b484:	9201      	str	r2, [sp, #4]
 800b486:	9b01      	ldr	r3, [sp, #4]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	bf14      	ite	ne
 800b48c:	2102      	movne	r1, #2
 800b48e:	2101      	moveq	r1, #1
 800b490:	61ab      	str	r3, [r5, #24]
 800b492:	6129      	str	r1, [r5, #16]
 800b494:	b1bc      	cbz	r4, 800b4c6 <__d2b+0x8e>
 800b496:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b49a:	4404      	add	r4, r0
 800b49c:	6034      	str	r4, [r6, #0]
 800b49e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b4a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4a4:	6018      	str	r0, [r3, #0]
 800b4a6:	4628      	mov	r0, r5
 800b4a8:	b003      	add	sp, #12
 800b4aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b4b0:	e7d7      	b.n	800b462 <__d2b+0x2a>
 800b4b2:	6169      	str	r1, [r5, #20]
 800b4b4:	e7e7      	b.n	800b486 <__d2b+0x4e>
 800b4b6:	a801      	add	r0, sp, #4
 800b4b8:	f7ff fcfc 	bl	800aeb4 <__lo0bits>
 800b4bc:	9b01      	ldr	r3, [sp, #4]
 800b4be:	2101      	movs	r1, #1
 800b4c0:	616b      	str	r3, [r5, #20]
 800b4c2:	3020      	adds	r0, #32
 800b4c4:	e7e5      	b.n	800b492 <__d2b+0x5a>
 800b4c6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b4ca:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800b4ce:	6030      	str	r0, [r6, #0]
 800b4d0:	6918      	ldr	r0, [r3, #16]
 800b4d2:	f7ff fccf 	bl	800ae74 <__hi0bits>
 800b4d6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b4da:	e7e2      	b.n	800b4a2 <__d2b+0x6a>
 800b4dc:	0800df73 	.word	0x0800df73
 800b4e0:	0800df84 	.word	0x0800df84

0800b4e4 <__ratio>:
 800b4e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4e8:	4688      	mov	r8, r1
 800b4ea:	4669      	mov	r1, sp
 800b4ec:	4681      	mov	r9, r0
 800b4ee:	f7ff ff5b 	bl	800b3a8 <__b2d>
 800b4f2:	460f      	mov	r7, r1
 800b4f4:	4604      	mov	r4, r0
 800b4f6:	460d      	mov	r5, r1
 800b4f8:	4640      	mov	r0, r8
 800b4fa:	a901      	add	r1, sp, #4
 800b4fc:	f7ff ff54 	bl	800b3a8 <__b2d>
 800b500:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b504:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b508:	468b      	mov	fp, r1
 800b50a:	eba3 0c02 	sub.w	ip, r3, r2
 800b50e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b512:	1a9b      	subs	r3, r3, r2
 800b514:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b518:	2b00      	cmp	r3, #0
 800b51a:	bfd5      	itete	le
 800b51c:	460a      	movle	r2, r1
 800b51e:	462a      	movgt	r2, r5
 800b520:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b524:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b528:	bfd8      	it	le
 800b52a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b52e:	465b      	mov	r3, fp
 800b530:	4602      	mov	r2, r0
 800b532:	4639      	mov	r1, r7
 800b534:	4620      	mov	r0, r4
 800b536:	f7f5 f8f9 	bl	800072c <__aeabi_ddiv>
 800b53a:	b003      	add	sp, #12
 800b53c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b540 <__copybits>:
 800b540:	3901      	subs	r1, #1
 800b542:	b570      	push	{r4, r5, r6, lr}
 800b544:	1149      	asrs	r1, r1, #5
 800b546:	6914      	ldr	r4, [r2, #16]
 800b548:	3101      	adds	r1, #1
 800b54a:	f102 0314 	add.w	r3, r2, #20
 800b54e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b552:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b556:	1f05      	subs	r5, r0, #4
 800b558:	42a3      	cmp	r3, r4
 800b55a:	d30c      	bcc.n	800b576 <__copybits+0x36>
 800b55c:	1aa3      	subs	r3, r4, r2
 800b55e:	3b11      	subs	r3, #17
 800b560:	f023 0303 	bic.w	r3, r3, #3
 800b564:	3211      	adds	r2, #17
 800b566:	42a2      	cmp	r2, r4
 800b568:	bf88      	it	hi
 800b56a:	2300      	movhi	r3, #0
 800b56c:	4418      	add	r0, r3
 800b56e:	2300      	movs	r3, #0
 800b570:	4288      	cmp	r0, r1
 800b572:	d305      	bcc.n	800b580 <__copybits+0x40>
 800b574:	bd70      	pop	{r4, r5, r6, pc}
 800b576:	f853 6b04 	ldr.w	r6, [r3], #4
 800b57a:	f845 6f04 	str.w	r6, [r5, #4]!
 800b57e:	e7eb      	b.n	800b558 <__copybits+0x18>
 800b580:	f840 3b04 	str.w	r3, [r0], #4
 800b584:	e7f4      	b.n	800b570 <__copybits+0x30>

0800b586 <__any_on>:
 800b586:	f100 0214 	add.w	r2, r0, #20
 800b58a:	6900      	ldr	r0, [r0, #16]
 800b58c:	114b      	asrs	r3, r1, #5
 800b58e:	4298      	cmp	r0, r3
 800b590:	b510      	push	{r4, lr}
 800b592:	db11      	blt.n	800b5b8 <__any_on+0x32>
 800b594:	dd0a      	ble.n	800b5ac <__any_on+0x26>
 800b596:	f011 011f 	ands.w	r1, r1, #31
 800b59a:	d007      	beq.n	800b5ac <__any_on+0x26>
 800b59c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b5a0:	fa24 f001 	lsr.w	r0, r4, r1
 800b5a4:	fa00 f101 	lsl.w	r1, r0, r1
 800b5a8:	428c      	cmp	r4, r1
 800b5aa:	d10b      	bne.n	800b5c4 <__any_on+0x3e>
 800b5ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b5b0:	4293      	cmp	r3, r2
 800b5b2:	d803      	bhi.n	800b5bc <__any_on+0x36>
 800b5b4:	2000      	movs	r0, #0
 800b5b6:	bd10      	pop	{r4, pc}
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	e7f7      	b.n	800b5ac <__any_on+0x26>
 800b5bc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b5c0:	2900      	cmp	r1, #0
 800b5c2:	d0f5      	beq.n	800b5b0 <__any_on+0x2a>
 800b5c4:	2001      	movs	r0, #1
 800b5c6:	e7f6      	b.n	800b5b6 <__any_on+0x30>

0800b5c8 <sulp>:
 800b5c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5cc:	460f      	mov	r7, r1
 800b5ce:	4690      	mov	r8, r2
 800b5d0:	f7ff feca 	bl	800b368 <__ulp>
 800b5d4:	4604      	mov	r4, r0
 800b5d6:	460d      	mov	r5, r1
 800b5d8:	f1b8 0f00 	cmp.w	r8, #0
 800b5dc:	d011      	beq.n	800b602 <sulp+0x3a>
 800b5de:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800b5e2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	dd0b      	ble.n	800b602 <sulp+0x3a>
 800b5ea:	2400      	movs	r4, #0
 800b5ec:	051b      	lsls	r3, r3, #20
 800b5ee:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b5f2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b5f6:	4622      	mov	r2, r4
 800b5f8:	462b      	mov	r3, r5
 800b5fa:	f7f4 ff6d 	bl	80004d8 <__aeabi_dmul>
 800b5fe:	4604      	mov	r4, r0
 800b600:	460d      	mov	r5, r1
 800b602:	4620      	mov	r0, r4
 800b604:	4629      	mov	r1, r5
 800b606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b60a:	0000      	movs	r0, r0
 800b60c:	0000      	movs	r0, r0
	...

0800b610 <_strtod_l>:
 800b610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b614:	b09f      	sub	sp, #124	; 0x7c
 800b616:	9217      	str	r2, [sp, #92]	; 0x5c
 800b618:	2200      	movs	r2, #0
 800b61a:	4604      	mov	r4, r0
 800b61c:	921a      	str	r2, [sp, #104]	; 0x68
 800b61e:	460d      	mov	r5, r1
 800b620:	f04f 0800 	mov.w	r8, #0
 800b624:	f04f 0900 	mov.w	r9, #0
 800b628:	460a      	mov	r2, r1
 800b62a:	9219      	str	r2, [sp, #100]	; 0x64
 800b62c:	7811      	ldrb	r1, [r2, #0]
 800b62e:	292b      	cmp	r1, #43	; 0x2b
 800b630:	d04a      	beq.n	800b6c8 <_strtod_l+0xb8>
 800b632:	d838      	bhi.n	800b6a6 <_strtod_l+0x96>
 800b634:	290d      	cmp	r1, #13
 800b636:	d832      	bhi.n	800b69e <_strtod_l+0x8e>
 800b638:	2908      	cmp	r1, #8
 800b63a:	d832      	bhi.n	800b6a2 <_strtod_l+0x92>
 800b63c:	2900      	cmp	r1, #0
 800b63e:	d03b      	beq.n	800b6b8 <_strtod_l+0xa8>
 800b640:	2200      	movs	r2, #0
 800b642:	920e      	str	r2, [sp, #56]	; 0x38
 800b644:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800b646:	7832      	ldrb	r2, [r6, #0]
 800b648:	2a30      	cmp	r2, #48	; 0x30
 800b64a:	f040 80b2 	bne.w	800b7b2 <_strtod_l+0x1a2>
 800b64e:	7872      	ldrb	r2, [r6, #1]
 800b650:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800b654:	2a58      	cmp	r2, #88	; 0x58
 800b656:	d16e      	bne.n	800b736 <_strtod_l+0x126>
 800b658:	9302      	str	r3, [sp, #8]
 800b65a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b65c:	4620      	mov	r0, r4
 800b65e:	9301      	str	r3, [sp, #4]
 800b660:	ab1a      	add	r3, sp, #104	; 0x68
 800b662:	9300      	str	r3, [sp, #0]
 800b664:	4a8c      	ldr	r2, [pc, #560]	; (800b898 <_strtod_l+0x288>)
 800b666:	ab1b      	add	r3, sp, #108	; 0x6c
 800b668:	a919      	add	r1, sp, #100	; 0x64
 800b66a:	f001 f937 	bl	800c8dc <__gethex>
 800b66e:	f010 070f 	ands.w	r7, r0, #15
 800b672:	4605      	mov	r5, r0
 800b674:	d005      	beq.n	800b682 <_strtod_l+0x72>
 800b676:	2f06      	cmp	r7, #6
 800b678:	d128      	bne.n	800b6cc <_strtod_l+0xbc>
 800b67a:	2300      	movs	r3, #0
 800b67c:	3601      	adds	r6, #1
 800b67e:	9619      	str	r6, [sp, #100]	; 0x64
 800b680:	930e      	str	r3, [sp, #56]	; 0x38
 800b682:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b684:	2b00      	cmp	r3, #0
 800b686:	f040 85a0 	bne.w	800c1ca <_strtod_l+0xbba>
 800b68a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b68c:	b1cb      	cbz	r3, 800b6c2 <_strtod_l+0xb2>
 800b68e:	4642      	mov	r2, r8
 800b690:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b694:	4610      	mov	r0, r2
 800b696:	4619      	mov	r1, r3
 800b698:	b01f      	add	sp, #124	; 0x7c
 800b69a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b69e:	2920      	cmp	r1, #32
 800b6a0:	d1ce      	bne.n	800b640 <_strtod_l+0x30>
 800b6a2:	3201      	adds	r2, #1
 800b6a4:	e7c1      	b.n	800b62a <_strtod_l+0x1a>
 800b6a6:	292d      	cmp	r1, #45	; 0x2d
 800b6a8:	d1ca      	bne.n	800b640 <_strtod_l+0x30>
 800b6aa:	2101      	movs	r1, #1
 800b6ac:	910e      	str	r1, [sp, #56]	; 0x38
 800b6ae:	1c51      	adds	r1, r2, #1
 800b6b0:	9119      	str	r1, [sp, #100]	; 0x64
 800b6b2:	7852      	ldrb	r2, [r2, #1]
 800b6b4:	2a00      	cmp	r2, #0
 800b6b6:	d1c5      	bne.n	800b644 <_strtod_l+0x34>
 800b6b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b6ba:	9519      	str	r5, [sp, #100]	; 0x64
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	f040 8582 	bne.w	800c1c6 <_strtod_l+0xbb6>
 800b6c2:	4642      	mov	r2, r8
 800b6c4:	464b      	mov	r3, r9
 800b6c6:	e7e5      	b.n	800b694 <_strtod_l+0x84>
 800b6c8:	2100      	movs	r1, #0
 800b6ca:	e7ef      	b.n	800b6ac <_strtod_l+0x9c>
 800b6cc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b6ce:	b13a      	cbz	r2, 800b6e0 <_strtod_l+0xd0>
 800b6d0:	2135      	movs	r1, #53	; 0x35
 800b6d2:	a81c      	add	r0, sp, #112	; 0x70
 800b6d4:	f7ff ff34 	bl	800b540 <__copybits>
 800b6d8:	4620      	mov	r0, r4
 800b6da:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b6dc:	f7ff fb18 	bl	800ad10 <_Bfree>
 800b6e0:	3f01      	subs	r7, #1
 800b6e2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b6e4:	2f04      	cmp	r7, #4
 800b6e6:	d806      	bhi.n	800b6f6 <_strtod_l+0xe6>
 800b6e8:	e8df f007 	tbb	[pc, r7]
 800b6ec:	201d0314 	.word	0x201d0314
 800b6f0:	14          	.byte	0x14
 800b6f1:	00          	.byte	0x00
 800b6f2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800b6f6:	05e9      	lsls	r1, r5, #23
 800b6f8:	bf48      	it	mi
 800b6fa:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800b6fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b702:	0d1b      	lsrs	r3, r3, #20
 800b704:	051b      	lsls	r3, r3, #20
 800b706:	2b00      	cmp	r3, #0
 800b708:	d1bb      	bne.n	800b682 <_strtod_l+0x72>
 800b70a:	f7fe fb17 	bl	8009d3c <__errno>
 800b70e:	2322      	movs	r3, #34	; 0x22
 800b710:	6003      	str	r3, [r0, #0]
 800b712:	e7b6      	b.n	800b682 <_strtod_l+0x72>
 800b714:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b718:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800b71c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b720:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800b724:	e7e7      	b.n	800b6f6 <_strtod_l+0xe6>
 800b726:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800b89c <_strtod_l+0x28c>
 800b72a:	e7e4      	b.n	800b6f6 <_strtod_l+0xe6>
 800b72c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800b730:	f04f 38ff 	mov.w	r8, #4294967295
 800b734:	e7df      	b.n	800b6f6 <_strtod_l+0xe6>
 800b736:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b738:	1c5a      	adds	r2, r3, #1
 800b73a:	9219      	str	r2, [sp, #100]	; 0x64
 800b73c:	785b      	ldrb	r3, [r3, #1]
 800b73e:	2b30      	cmp	r3, #48	; 0x30
 800b740:	d0f9      	beq.n	800b736 <_strtod_l+0x126>
 800b742:	2b00      	cmp	r3, #0
 800b744:	d09d      	beq.n	800b682 <_strtod_l+0x72>
 800b746:	2301      	movs	r3, #1
 800b748:	f04f 0a00 	mov.w	sl, #0
 800b74c:	220a      	movs	r2, #10
 800b74e:	46d3      	mov	fp, sl
 800b750:	9305      	str	r3, [sp, #20]
 800b752:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b754:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 800b758:	930b      	str	r3, [sp, #44]	; 0x2c
 800b75a:	9819      	ldr	r0, [sp, #100]	; 0x64
 800b75c:	7806      	ldrb	r6, [r0, #0]
 800b75e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b762:	b2d9      	uxtb	r1, r3
 800b764:	2909      	cmp	r1, #9
 800b766:	d926      	bls.n	800b7b6 <_strtod_l+0x1a6>
 800b768:	2201      	movs	r2, #1
 800b76a:	494d      	ldr	r1, [pc, #308]	; (800b8a0 <_strtod_l+0x290>)
 800b76c:	f000 ffe6 	bl	800c73c <strncmp>
 800b770:	2800      	cmp	r0, #0
 800b772:	d030      	beq.n	800b7d6 <_strtod_l+0x1c6>
 800b774:	2000      	movs	r0, #0
 800b776:	4632      	mov	r2, r6
 800b778:	4603      	mov	r3, r0
 800b77a:	465e      	mov	r6, fp
 800b77c:	9008      	str	r0, [sp, #32]
 800b77e:	2a65      	cmp	r2, #101	; 0x65
 800b780:	d001      	beq.n	800b786 <_strtod_l+0x176>
 800b782:	2a45      	cmp	r2, #69	; 0x45
 800b784:	d113      	bne.n	800b7ae <_strtod_l+0x19e>
 800b786:	b91e      	cbnz	r6, 800b790 <_strtod_l+0x180>
 800b788:	9a05      	ldr	r2, [sp, #20]
 800b78a:	4302      	orrs	r2, r0
 800b78c:	d094      	beq.n	800b6b8 <_strtod_l+0xa8>
 800b78e:	2600      	movs	r6, #0
 800b790:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800b792:	1c6a      	adds	r2, r5, #1
 800b794:	9219      	str	r2, [sp, #100]	; 0x64
 800b796:	786a      	ldrb	r2, [r5, #1]
 800b798:	2a2b      	cmp	r2, #43	; 0x2b
 800b79a:	d074      	beq.n	800b886 <_strtod_l+0x276>
 800b79c:	2a2d      	cmp	r2, #45	; 0x2d
 800b79e:	d078      	beq.n	800b892 <_strtod_l+0x282>
 800b7a0:	f04f 0c00 	mov.w	ip, #0
 800b7a4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b7a8:	2909      	cmp	r1, #9
 800b7aa:	d97f      	bls.n	800b8ac <_strtod_l+0x29c>
 800b7ac:	9519      	str	r5, [sp, #100]	; 0x64
 800b7ae:	2700      	movs	r7, #0
 800b7b0:	e09e      	b.n	800b8f0 <_strtod_l+0x2e0>
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	e7c8      	b.n	800b748 <_strtod_l+0x138>
 800b7b6:	f1bb 0f08 	cmp.w	fp, #8
 800b7ba:	bfd8      	it	le
 800b7bc:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800b7be:	f100 0001 	add.w	r0, r0, #1
 800b7c2:	bfd6      	itet	le
 800b7c4:	fb02 3301 	mlale	r3, r2, r1, r3
 800b7c8:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800b7cc:	930a      	strle	r3, [sp, #40]	; 0x28
 800b7ce:	f10b 0b01 	add.w	fp, fp, #1
 800b7d2:	9019      	str	r0, [sp, #100]	; 0x64
 800b7d4:	e7c1      	b.n	800b75a <_strtod_l+0x14a>
 800b7d6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b7d8:	1c5a      	adds	r2, r3, #1
 800b7da:	9219      	str	r2, [sp, #100]	; 0x64
 800b7dc:	785a      	ldrb	r2, [r3, #1]
 800b7de:	f1bb 0f00 	cmp.w	fp, #0
 800b7e2:	d037      	beq.n	800b854 <_strtod_l+0x244>
 800b7e4:	465e      	mov	r6, fp
 800b7e6:	9008      	str	r0, [sp, #32]
 800b7e8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b7ec:	2b09      	cmp	r3, #9
 800b7ee:	d912      	bls.n	800b816 <_strtod_l+0x206>
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	e7c4      	b.n	800b77e <_strtod_l+0x16e>
 800b7f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b7f6:	3001      	adds	r0, #1
 800b7f8:	1c5a      	adds	r2, r3, #1
 800b7fa:	9219      	str	r2, [sp, #100]	; 0x64
 800b7fc:	785a      	ldrb	r2, [r3, #1]
 800b7fe:	2a30      	cmp	r2, #48	; 0x30
 800b800:	d0f8      	beq.n	800b7f4 <_strtod_l+0x1e4>
 800b802:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b806:	2b08      	cmp	r3, #8
 800b808:	f200 84e4 	bhi.w	800c1d4 <_strtod_l+0xbc4>
 800b80c:	9008      	str	r0, [sp, #32]
 800b80e:	2000      	movs	r0, #0
 800b810:	4606      	mov	r6, r0
 800b812:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b814:	930b      	str	r3, [sp, #44]	; 0x2c
 800b816:	3a30      	subs	r2, #48	; 0x30
 800b818:	f100 0301 	add.w	r3, r0, #1
 800b81c:	d014      	beq.n	800b848 <_strtod_l+0x238>
 800b81e:	9908      	ldr	r1, [sp, #32]
 800b820:	eb00 0c06 	add.w	ip, r0, r6
 800b824:	4419      	add	r1, r3
 800b826:	9108      	str	r1, [sp, #32]
 800b828:	4633      	mov	r3, r6
 800b82a:	210a      	movs	r1, #10
 800b82c:	4563      	cmp	r3, ip
 800b82e:	d113      	bne.n	800b858 <_strtod_l+0x248>
 800b830:	1833      	adds	r3, r6, r0
 800b832:	2b08      	cmp	r3, #8
 800b834:	f106 0601 	add.w	r6, r6, #1
 800b838:	4406      	add	r6, r0
 800b83a:	dc1a      	bgt.n	800b872 <_strtod_l+0x262>
 800b83c:	230a      	movs	r3, #10
 800b83e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b840:	fb03 2301 	mla	r3, r3, r1, r2
 800b844:	930a      	str	r3, [sp, #40]	; 0x28
 800b846:	2300      	movs	r3, #0
 800b848:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b84a:	4618      	mov	r0, r3
 800b84c:	1c51      	adds	r1, r2, #1
 800b84e:	9119      	str	r1, [sp, #100]	; 0x64
 800b850:	7852      	ldrb	r2, [r2, #1]
 800b852:	e7c9      	b.n	800b7e8 <_strtod_l+0x1d8>
 800b854:	4658      	mov	r0, fp
 800b856:	e7d2      	b.n	800b7fe <_strtod_l+0x1ee>
 800b858:	2b08      	cmp	r3, #8
 800b85a:	f103 0301 	add.w	r3, r3, #1
 800b85e:	dc03      	bgt.n	800b868 <_strtod_l+0x258>
 800b860:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800b862:	434f      	muls	r7, r1
 800b864:	970a      	str	r7, [sp, #40]	; 0x28
 800b866:	e7e1      	b.n	800b82c <_strtod_l+0x21c>
 800b868:	2b10      	cmp	r3, #16
 800b86a:	bfd8      	it	le
 800b86c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800b870:	e7dc      	b.n	800b82c <_strtod_l+0x21c>
 800b872:	2e10      	cmp	r6, #16
 800b874:	bfdc      	itt	le
 800b876:	230a      	movle	r3, #10
 800b878:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800b87c:	e7e3      	b.n	800b846 <_strtod_l+0x236>
 800b87e:	2300      	movs	r3, #0
 800b880:	9308      	str	r3, [sp, #32]
 800b882:	2301      	movs	r3, #1
 800b884:	e780      	b.n	800b788 <_strtod_l+0x178>
 800b886:	f04f 0c00 	mov.w	ip, #0
 800b88a:	1caa      	adds	r2, r5, #2
 800b88c:	9219      	str	r2, [sp, #100]	; 0x64
 800b88e:	78aa      	ldrb	r2, [r5, #2]
 800b890:	e788      	b.n	800b7a4 <_strtod_l+0x194>
 800b892:	f04f 0c01 	mov.w	ip, #1
 800b896:	e7f8      	b.n	800b88a <_strtod_l+0x27a>
 800b898:	0800e0e0 	.word	0x0800e0e0
 800b89c:	7ff00000 	.word	0x7ff00000
 800b8a0:	0800e0dc 	.word	0x0800e0dc
 800b8a4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b8a6:	1c51      	adds	r1, r2, #1
 800b8a8:	9119      	str	r1, [sp, #100]	; 0x64
 800b8aa:	7852      	ldrb	r2, [r2, #1]
 800b8ac:	2a30      	cmp	r2, #48	; 0x30
 800b8ae:	d0f9      	beq.n	800b8a4 <_strtod_l+0x294>
 800b8b0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b8b4:	2908      	cmp	r1, #8
 800b8b6:	f63f af7a 	bhi.w	800b7ae <_strtod_l+0x19e>
 800b8ba:	3a30      	subs	r2, #48	; 0x30
 800b8bc:	9209      	str	r2, [sp, #36]	; 0x24
 800b8be:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b8c0:	920c      	str	r2, [sp, #48]	; 0x30
 800b8c2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b8c4:	1c57      	adds	r7, r2, #1
 800b8c6:	9719      	str	r7, [sp, #100]	; 0x64
 800b8c8:	7852      	ldrb	r2, [r2, #1]
 800b8ca:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b8ce:	f1be 0f09 	cmp.w	lr, #9
 800b8d2:	d938      	bls.n	800b946 <_strtod_l+0x336>
 800b8d4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b8d6:	1a7f      	subs	r7, r7, r1
 800b8d8:	2f08      	cmp	r7, #8
 800b8da:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800b8de:	dc03      	bgt.n	800b8e8 <_strtod_l+0x2d8>
 800b8e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b8e2:	428f      	cmp	r7, r1
 800b8e4:	bfa8      	it	ge
 800b8e6:	460f      	movge	r7, r1
 800b8e8:	f1bc 0f00 	cmp.w	ip, #0
 800b8ec:	d000      	beq.n	800b8f0 <_strtod_l+0x2e0>
 800b8ee:	427f      	negs	r7, r7
 800b8f0:	2e00      	cmp	r6, #0
 800b8f2:	d14f      	bne.n	800b994 <_strtod_l+0x384>
 800b8f4:	9905      	ldr	r1, [sp, #20]
 800b8f6:	4301      	orrs	r1, r0
 800b8f8:	f47f aec3 	bne.w	800b682 <_strtod_l+0x72>
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	f47f aedb 	bne.w	800b6b8 <_strtod_l+0xa8>
 800b902:	2a69      	cmp	r2, #105	; 0x69
 800b904:	d029      	beq.n	800b95a <_strtod_l+0x34a>
 800b906:	dc26      	bgt.n	800b956 <_strtod_l+0x346>
 800b908:	2a49      	cmp	r2, #73	; 0x49
 800b90a:	d026      	beq.n	800b95a <_strtod_l+0x34a>
 800b90c:	2a4e      	cmp	r2, #78	; 0x4e
 800b90e:	f47f aed3 	bne.w	800b6b8 <_strtod_l+0xa8>
 800b912:	499a      	ldr	r1, [pc, #616]	; (800bb7c <_strtod_l+0x56c>)
 800b914:	a819      	add	r0, sp, #100	; 0x64
 800b916:	f001 fa23 	bl	800cd60 <__match>
 800b91a:	2800      	cmp	r0, #0
 800b91c:	f43f aecc 	beq.w	800b6b8 <_strtod_l+0xa8>
 800b920:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b922:	781b      	ldrb	r3, [r3, #0]
 800b924:	2b28      	cmp	r3, #40	; 0x28
 800b926:	d12f      	bne.n	800b988 <_strtod_l+0x378>
 800b928:	4995      	ldr	r1, [pc, #596]	; (800bb80 <_strtod_l+0x570>)
 800b92a:	aa1c      	add	r2, sp, #112	; 0x70
 800b92c:	a819      	add	r0, sp, #100	; 0x64
 800b92e:	f001 fa2b 	bl	800cd88 <__hexnan>
 800b932:	2805      	cmp	r0, #5
 800b934:	d128      	bne.n	800b988 <_strtod_l+0x378>
 800b936:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b938:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800b93c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800b940:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800b944:	e69d      	b.n	800b682 <_strtod_l+0x72>
 800b946:	210a      	movs	r1, #10
 800b948:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b94a:	fb01 2107 	mla	r1, r1, r7, r2
 800b94e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800b952:	9209      	str	r2, [sp, #36]	; 0x24
 800b954:	e7b5      	b.n	800b8c2 <_strtod_l+0x2b2>
 800b956:	2a6e      	cmp	r2, #110	; 0x6e
 800b958:	e7d9      	b.n	800b90e <_strtod_l+0x2fe>
 800b95a:	498a      	ldr	r1, [pc, #552]	; (800bb84 <_strtod_l+0x574>)
 800b95c:	a819      	add	r0, sp, #100	; 0x64
 800b95e:	f001 f9ff 	bl	800cd60 <__match>
 800b962:	2800      	cmp	r0, #0
 800b964:	f43f aea8 	beq.w	800b6b8 <_strtod_l+0xa8>
 800b968:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b96a:	4987      	ldr	r1, [pc, #540]	; (800bb88 <_strtod_l+0x578>)
 800b96c:	3b01      	subs	r3, #1
 800b96e:	a819      	add	r0, sp, #100	; 0x64
 800b970:	9319      	str	r3, [sp, #100]	; 0x64
 800b972:	f001 f9f5 	bl	800cd60 <__match>
 800b976:	b910      	cbnz	r0, 800b97e <_strtod_l+0x36e>
 800b978:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b97a:	3301      	adds	r3, #1
 800b97c:	9319      	str	r3, [sp, #100]	; 0x64
 800b97e:	f04f 0800 	mov.w	r8, #0
 800b982:	f8df 9208 	ldr.w	r9, [pc, #520]	; 800bb8c <_strtod_l+0x57c>
 800b986:	e67c      	b.n	800b682 <_strtod_l+0x72>
 800b988:	4881      	ldr	r0, [pc, #516]	; (800bb90 <_strtod_l+0x580>)
 800b98a:	f000 ff07 	bl	800c79c <nan>
 800b98e:	4680      	mov	r8, r0
 800b990:	4689      	mov	r9, r1
 800b992:	e676      	b.n	800b682 <_strtod_l+0x72>
 800b994:	9b08      	ldr	r3, [sp, #32]
 800b996:	f1bb 0f00 	cmp.w	fp, #0
 800b99a:	bf08      	it	eq
 800b99c:	46b3      	moveq	fp, r6
 800b99e:	1afb      	subs	r3, r7, r3
 800b9a0:	2e10      	cmp	r6, #16
 800b9a2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b9a4:	4635      	mov	r5, r6
 800b9a6:	9309      	str	r3, [sp, #36]	; 0x24
 800b9a8:	bfa8      	it	ge
 800b9aa:	2510      	movge	r5, #16
 800b9ac:	f7f4 fd1a 	bl	80003e4 <__aeabi_ui2d>
 800b9b0:	2e09      	cmp	r6, #9
 800b9b2:	4680      	mov	r8, r0
 800b9b4:	4689      	mov	r9, r1
 800b9b6:	dd13      	ble.n	800b9e0 <_strtod_l+0x3d0>
 800b9b8:	4b76      	ldr	r3, [pc, #472]	; (800bb94 <_strtod_l+0x584>)
 800b9ba:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b9be:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b9c2:	f7f4 fd89 	bl	80004d8 <__aeabi_dmul>
 800b9c6:	4680      	mov	r8, r0
 800b9c8:	4650      	mov	r0, sl
 800b9ca:	4689      	mov	r9, r1
 800b9cc:	f7f4 fd0a 	bl	80003e4 <__aeabi_ui2d>
 800b9d0:	4602      	mov	r2, r0
 800b9d2:	460b      	mov	r3, r1
 800b9d4:	4640      	mov	r0, r8
 800b9d6:	4649      	mov	r1, r9
 800b9d8:	f7f4 fbc8 	bl	800016c <__adddf3>
 800b9dc:	4680      	mov	r8, r0
 800b9de:	4689      	mov	r9, r1
 800b9e0:	2e0f      	cmp	r6, #15
 800b9e2:	dc36      	bgt.n	800ba52 <_strtod_l+0x442>
 800b9e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	f43f ae4b 	beq.w	800b682 <_strtod_l+0x72>
 800b9ec:	dd22      	ble.n	800ba34 <_strtod_l+0x424>
 800b9ee:	2b16      	cmp	r3, #22
 800b9f0:	dc09      	bgt.n	800ba06 <_strtod_l+0x3f6>
 800b9f2:	4968      	ldr	r1, [pc, #416]	; (800bb94 <_strtod_l+0x584>)
 800b9f4:	4642      	mov	r2, r8
 800b9f6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b9fa:	464b      	mov	r3, r9
 800b9fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba00:	f7f4 fd6a 	bl	80004d8 <__aeabi_dmul>
 800ba04:	e7c3      	b.n	800b98e <_strtod_l+0x37e>
 800ba06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba08:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800ba0c:	4293      	cmp	r3, r2
 800ba0e:	db20      	blt.n	800ba52 <_strtod_l+0x442>
 800ba10:	4c60      	ldr	r4, [pc, #384]	; (800bb94 <_strtod_l+0x584>)
 800ba12:	f1c6 060f 	rsb	r6, r6, #15
 800ba16:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800ba1a:	4642      	mov	r2, r8
 800ba1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba20:	464b      	mov	r3, r9
 800ba22:	f7f4 fd59 	bl	80004d8 <__aeabi_dmul>
 800ba26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba28:	1b9e      	subs	r6, r3, r6
 800ba2a:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800ba2e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ba32:	e7e5      	b.n	800ba00 <_strtod_l+0x3f0>
 800ba34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba36:	3316      	adds	r3, #22
 800ba38:	db0b      	blt.n	800ba52 <_strtod_l+0x442>
 800ba3a:	9b08      	ldr	r3, [sp, #32]
 800ba3c:	4640      	mov	r0, r8
 800ba3e:	1bdf      	subs	r7, r3, r7
 800ba40:	4b54      	ldr	r3, [pc, #336]	; (800bb94 <_strtod_l+0x584>)
 800ba42:	4649      	mov	r1, r9
 800ba44:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800ba48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba4c:	f7f4 fe6e 	bl	800072c <__aeabi_ddiv>
 800ba50:	e79d      	b.n	800b98e <_strtod_l+0x37e>
 800ba52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba54:	1b75      	subs	r5, r6, r5
 800ba56:	441d      	add	r5, r3
 800ba58:	2d00      	cmp	r5, #0
 800ba5a:	dd70      	ble.n	800bb3e <_strtod_l+0x52e>
 800ba5c:	f015 030f 	ands.w	r3, r5, #15
 800ba60:	d00a      	beq.n	800ba78 <_strtod_l+0x468>
 800ba62:	494c      	ldr	r1, [pc, #304]	; (800bb94 <_strtod_l+0x584>)
 800ba64:	4642      	mov	r2, r8
 800ba66:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ba6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba6e:	464b      	mov	r3, r9
 800ba70:	f7f4 fd32 	bl	80004d8 <__aeabi_dmul>
 800ba74:	4680      	mov	r8, r0
 800ba76:	4689      	mov	r9, r1
 800ba78:	f035 050f 	bics.w	r5, r5, #15
 800ba7c:	d04d      	beq.n	800bb1a <_strtod_l+0x50a>
 800ba7e:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800ba82:	dd22      	ble.n	800baca <_strtod_l+0x4ba>
 800ba84:	2600      	movs	r6, #0
 800ba86:	46b3      	mov	fp, r6
 800ba88:	960b      	str	r6, [sp, #44]	; 0x2c
 800ba8a:	9608      	str	r6, [sp, #32]
 800ba8c:	2322      	movs	r3, #34	; 0x22
 800ba8e:	f04f 0800 	mov.w	r8, #0
 800ba92:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 800bb8c <_strtod_l+0x57c>
 800ba96:	6023      	str	r3, [r4, #0]
 800ba98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	f43f adf1 	beq.w	800b682 <_strtod_l+0x72>
 800baa0:	4620      	mov	r0, r4
 800baa2:	991a      	ldr	r1, [sp, #104]	; 0x68
 800baa4:	f7ff f934 	bl	800ad10 <_Bfree>
 800baa8:	4620      	mov	r0, r4
 800baaa:	9908      	ldr	r1, [sp, #32]
 800baac:	f7ff f930 	bl	800ad10 <_Bfree>
 800bab0:	4659      	mov	r1, fp
 800bab2:	4620      	mov	r0, r4
 800bab4:	f7ff f92c 	bl	800ad10 <_Bfree>
 800bab8:	4620      	mov	r0, r4
 800baba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800babc:	f7ff f928 	bl	800ad10 <_Bfree>
 800bac0:	4631      	mov	r1, r6
 800bac2:	4620      	mov	r0, r4
 800bac4:	f7ff f924 	bl	800ad10 <_Bfree>
 800bac8:	e5db      	b.n	800b682 <_strtod_l+0x72>
 800baca:	4b33      	ldr	r3, [pc, #204]	; (800bb98 <_strtod_l+0x588>)
 800bacc:	4640      	mov	r0, r8
 800bace:	9305      	str	r3, [sp, #20]
 800bad0:	2300      	movs	r3, #0
 800bad2:	4649      	mov	r1, r9
 800bad4:	469a      	mov	sl, r3
 800bad6:	112d      	asrs	r5, r5, #4
 800bad8:	2d01      	cmp	r5, #1
 800bada:	dc21      	bgt.n	800bb20 <_strtod_l+0x510>
 800badc:	b10b      	cbz	r3, 800bae2 <_strtod_l+0x4d2>
 800bade:	4680      	mov	r8, r0
 800bae0:	4689      	mov	r9, r1
 800bae2:	492d      	ldr	r1, [pc, #180]	; (800bb98 <_strtod_l+0x588>)
 800bae4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800bae8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800baec:	4642      	mov	r2, r8
 800baee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800baf2:	464b      	mov	r3, r9
 800baf4:	f7f4 fcf0 	bl	80004d8 <__aeabi_dmul>
 800baf8:	4b24      	ldr	r3, [pc, #144]	; (800bb8c <_strtod_l+0x57c>)
 800bafa:	460a      	mov	r2, r1
 800bafc:	400b      	ands	r3, r1
 800bafe:	4927      	ldr	r1, [pc, #156]	; (800bb9c <_strtod_l+0x58c>)
 800bb00:	4680      	mov	r8, r0
 800bb02:	428b      	cmp	r3, r1
 800bb04:	d8be      	bhi.n	800ba84 <_strtod_l+0x474>
 800bb06:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800bb0a:	428b      	cmp	r3, r1
 800bb0c:	bf86      	itte	hi
 800bb0e:	f04f 38ff 	movhi.w	r8, #4294967295
 800bb12:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800bba0 <_strtod_l+0x590>
 800bb16:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	9305      	str	r3, [sp, #20]
 800bb1e:	e07b      	b.n	800bc18 <_strtod_l+0x608>
 800bb20:	07ea      	lsls	r2, r5, #31
 800bb22:	d505      	bpl.n	800bb30 <_strtod_l+0x520>
 800bb24:	9b05      	ldr	r3, [sp, #20]
 800bb26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb2a:	f7f4 fcd5 	bl	80004d8 <__aeabi_dmul>
 800bb2e:	2301      	movs	r3, #1
 800bb30:	9a05      	ldr	r2, [sp, #20]
 800bb32:	f10a 0a01 	add.w	sl, sl, #1
 800bb36:	3208      	adds	r2, #8
 800bb38:	106d      	asrs	r5, r5, #1
 800bb3a:	9205      	str	r2, [sp, #20]
 800bb3c:	e7cc      	b.n	800bad8 <_strtod_l+0x4c8>
 800bb3e:	d0ec      	beq.n	800bb1a <_strtod_l+0x50a>
 800bb40:	426d      	negs	r5, r5
 800bb42:	f015 020f 	ands.w	r2, r5, #15
 800bb46:	d00a      	beq.n	800bb5e <_strtod_l+0x54e>
 800bb48:	4b12      	ldr	r3, [pc, #72]	; (800bb94 <_strtod_l+0x584>)
 800bb4a:	4640      	mov	r0, r8
 800bb4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb50:	4649      	mov	r1, r9
 800bb52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb56:	f7f4 fde9 	bl	800072c <__aeabi_ddiv>
 800bb5a:	4680      	mov	r8, r0
 800bb5c:	4689      	mov	r9, r1
 800bb5e:	112d      	asrs	r5, r5, #4
 800bb60:	d0db      	beq.n	800bb1a <_strtod_l+0x50a>
 800bb62:	2d1f      	cmp	r5, #31
 800bb64:	dd1e      	ble.n	800bba4 <_strtod_l+0x594>
 800bb66:	2600      	movs	r6, #0
 800bb68:	46b3      	mov	fp, r6
 800bb6a:	960b      	str	r6, [sp, #44]	; 0x2c
 800bb6c:	9608      	str	r6, [sp, #32]
 800bb6e:	2322      	movs	r3, #34	; 0x22
 800bb70:	f04f 0800 	mov.w	r8, #0
 800bb74:	f04f 0900 	mov.w	r9, #0
 800bb78:	6023      	str	r3, [r4, #0]
 800bb7a:	e78d      	b.n	800ba98 <_strtod_l+0x488>
 800bb7c:	0800decb 	.word	0x0800decb
 800bb80:	0800e0f4 	.word	0x0800e0f4
 800bb84:	0800dec3 	.word	0x0800dec3
 800bb88:	0800defa 	.word	0x0800defa
 800bb8c:	7ff00000 	.word	0x7ff00000
 800bb90:	0800e285 	.word	0x0800e285
 800bb94:	0800e008 	.word	0x0800e008
 800bb98:	0800dfe0 	.word	0x0800dfe0
 800bb9c:	7ca00000 	.word	0x7ca00000
 800bba0:	7fefffff 	.word	0x7fefffff
 800bba4:	f015 0310 	ands.w	r3, r5, #16
 800bba8:	bf18      	it	ne
 800bbaa:	236a      	movne	r3, #106	; 0x6a
 800bbac:	4640      	mov	r0, r8
 800bbae:	9305      	str	r3, [sp, #20]
 800bbb0:	4649      	mov	r1, r9
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 800be80 <_strtod_l+0x870>
 800bbb8:	07ea      	lsls	r2, r5, #31
 800bbba:	d504      	bpl.n	800bbc6 <_strtod_l+0x5b6>
 800bbbc:	e9da 2300 	ldrd	r2, r3, [sl]
 800bbc0:	f7f4 fc8a 	bl	80004d8 <__aeabi_dmul>
 800bbc4:	2301      	movs	r3, #1
 800bbc6:	106d      	asrs	r5, r5, #1
 800bbc8:	f10a 0a08 	add.w	sl, sl, #8
 800bbcc:	d1f4      	bne.n	800bbb8 <_strtod_l+0x5a8>
 800bbce:	b10b      	cbz	r3, 800bbd4 <_strtod_l+0x5c4>
 800bbd0:	4680      	mov	r8, r0
 800bbd2:	4689      	mov	r9, r1
 800bbd4:	9b05      	ldr	r3, [sp, #20]
 800bbd6:	b1bb      	cbz	r3, 800bc08 <_strtod_l+0x5f8>
 800bbd8:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800bbdc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	4649      	mov	r1, r9
 800bbe4:	dd10      	ble.n	800bc08 <_strtod_l+0x5f8>
 800bbe6:	2b1f      	cmp	r3, #31
 800bbe8:	f340 8128 	ble.w	800be3c <_strtod_l+0x82c>
 800bbec:	2b34      	cmp	r3, #52	; 0x34
 800bbee:	bfd8      	it	le
 800bbf0:	f04f 33ff 	movle.w	r3, #4294967295
 800bbf4:	f04f 0800 	mov.w	r8, #0
 800bbf8:	bfcf      	iteee	gt
 800bbfa:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800bbfe:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800bc02:	4093      	lslle	r3, r2
 800bc04:	ea03 0901 	andle.w	r9, r3, r1
 800bc08:	2200      	movs	r2, #0
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	4640      	mov	r0, r8
 800bc0e:	4649      	mov	r1, r9
 800bc10:	f7f4 feca 	bl	80009a8 <__aeabi_dcmpeq>
 800bc14:	2800      	cmp	r0, #0
 800bc16:	d1a6      	bne.n	800bb66 <_strtod_l+0x556>
 800bc18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc1a:	465a      	mov	r2, fp
 800bc1c:	9300      	str	r3, [sp, #0]
 800bc1e:	4620      	mov	r0, r4
 800bc20:	4633      	mov	r3, r6
 800bc22:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bc24:	f7ff f8dc 	bl	800ade0 <__s2b>
 800bc28:	900b      	str	r0, [sp, #44]	; 0x2c
 800bc2a:	2800      	cmp	r0, #0
 800bc2c:	f43f af2a 	beq.w	800ba84 <_strtod_l+0x474>
 800bc30:	2600      	movs	r6, #0
 800bc32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc34:	9b08      	ldr	r3, [sp, #32]
 800bc36:	2a00      	cmp	r2, #0
 800bc38:	eba3 0307 	sub.w	r3, r3, r7
 800bc3c:	bfa8      	it	ge
 800bc3e:	2300      	movge	r3, #0
 800bc40:	46b3      	mov	fp, r6
 800bc42:	9312      	str	r3, [sp, #72]	; 0x48
 800bc44:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bc48:	9316      	str	r3, [sp, #88]	; 0x58
 800bc4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc4c:	4620      	mov	r0, r4
 800bc4e:	6859      	ldr	r1, [r3, #4]
 800bc50:	f7ff f81e 	bl	800ac90 <_Balloc>
 800bc54:	9008      	str	r0, [sp, #32]
 800bc56:	2800      	cmp	r0, #0
 800bc58:	f43f af18 	beq.w	800ba8c <_strtod_l+0x47c>
 800bc5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc5e:	300c      	adds	r0, #12
 800bc60:	691a      	ldr	r2, [r3, #16]
 800bc62:	f103 010c 	add.w	r1, r3, #12
 800bc66:	3202      	adds	r2, #2
 800bc68:	0092      	lsls	r2, r2, #2
 800bc6a:	f000 fd89 	bl	800c780 <memcpy>
 800bc6e:	ab1c      	add	r3, sp, #112	; 0x70
 800bc70:	9301      	str	r3, [sp, #4]
 800bc72:	ab1b      	add	r3, sp, #108	; 0x6c
 800bc74:	9300      	str	r3, [sp, #0]
 800bc76:	4642      	mov	r2, r8
 800bc78:	464b      	mov	r3, r9
 800bc7a:	4620      	mov	r0, r4
 800bc7c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800bc80:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800bc84:	f7ff fbd8 	bl	800b438 <__d2b>
 800bc88:	901a      	str	r0, [sp, #104]	; 0x68
 800bc8a:	2800      	cmp	r0, #0
 800bc8c:	f43f aefe 	beq.w	800ba8c <_strtod_l+0x47c>
 800bc90:	2101      	movs	r1, #1
 800bc92:	4620      	mov	r0, r4
 800bc94:	f7ff f93c 	bl	800af10 <__i2b>
 800bc98:	4683      	mov	fp, r0
 800bc9a:	2800      	cmp	r0, #0
 800bc9c:	f43f aef6 	beq.w	800ba8c <_strtod_l+0x47c>
 800bca0:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800bca2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800bca4:	2f00      	cmp	r7, #0
 800bca6:	bfab      	itete	ge
 800bca8:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 800bcaa:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800bcac:	eb07 0a03 	addge.w	sl, r7, r3
 800bcb0:	1bdd      	sublt	r5, r3, r7
 800bcb2:	9b05      	ldr	r3, [sp, #20]
 800bcb4:	bfa8      	it	ge
 800bcb6:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800bcb8:	eba7 0703 	sub.w	r7, r7, r3
 800bcbc:	4417      	add	r7, r2
 800bcbe:	4b71      	ldr	r3, [pc, #452]	; (800be84 <_strtod_l+0x874>)
 800bcc0:	f107 37ff 	add.w	r7, r7, #4294967295
 800bcc4:	bfb8      	it	lt
 800bcc6:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 800bcca:	429f      	cmp	r7, r3
 800bccc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800bcd0:	f280 80c7 	bge.w	800be62 <_strtod_l+0x852>
 800bcd4:	1bdb      	subs	r3, r3, r7
 800bcd6:	2b1f      	cmp	r3, #31
 800bcd8:	f04f 0101 	mov.w	r1, #1
 800bcdc:	eba2 0203 	sub.w	r2, r2, r3
 800bce0:	f300 80b3 	bgt.w	800be4a <_strtod_l+0x83a>
 800bce4:	fa01 f303 	lsl.w	r3, r1, r3
 800bce8:	9313      	str	r3, [sp, #76]	; 0x4c
 800bcea:	2300      	movs	r3, #0
 800bcec:	9310      	str	r3, [sp, #64]	; 0x40
 800bcee:	eb0a 0702 	add.w	r7, sl, r2
 800bcf2:	9b05      	ldr	r3, [sp, #20]
 800bcf4:	45ba      	cmp	sl, r7
 800bcf6:	4415      	add	r5, r2
 800bcf8:	441d      	add	r5, r3
 800bcfa:	4653      	mov	r3, sl
 800bcfc:	bfa8      	it	ge
 800bcfe:	463b      	movge	r3, r7
 800bd00:	42ab      	cmp	r3, r5
 800bd02:	bfa8      	it	ge
 800bd04:	462b      	movge	r3, r5
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	bfc2      	ittt	gt
 800bd0a:	1aff      	subgt	r7, r7, r3
 800bd0c:	1aed      	subgt	r5, r5, r3
 800bd0e:	ebaa 0a03 	subgt.w	sl, sl, r3
 800bd12:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	dd17      	ble.n	800bd48 <_strtod_l+0x738>
 800bd18:	4659      	mov	r1, fp
 800bd1a:	461a      	mov	r2, r3
 800bd1c:	4620      	mov	r0, r4
 800bd1e:	f7ff f9b5 	bl	800b08c <__pow5mult>
 800bd22:	4683      	mov	fp, r0
 800bd24:	2800      	cmp	r0, #0
 800bd26:	f43f aeb1 	beq.w	800ba8c <_strtod_l+0x47c>
 800bd2a:	4601      	mov	r1, r0
 800bd2c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800bd2e:	4620      	mov	r0, r4
 800bd30:	f7ff f904 	bl	800af3c <__multiply>
 800bd34:	900a      	str	r0, [sp, #40]	; 0x28
 800bd36:	2800      	cmp	r0, #0
 800bd38:	f43f aea8 	beq.w	800ba8c <_strtod_l+0x47c>
 800bd3c:	4620      	mov	r0, r4
 800bd3e:	991a      	ldr	r1, [sp, #104]	; 0x68
 800bd40:	f7fe ffe6 	bl	800ad10 <_Bfree>
 800bd44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd46:	931a      	str	r3, [sp, #104]	; 0x68
 800bd48:	2f00      	cmp	r7, #0
 800bd4a:	f300 808f 	bgt.w	800be6c <_strtod_l+0x85c>
 800bd4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	dd08      	ble.n	800bd66 <_strtod_l+0x756>
 800bd54:	4620      	mov	r0, r4
 800bd56:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bd58:	9908      	ldr	r1, [sp, #32]
 800bd5a:	f7ff f997 	bl	800b08c <__pow5mult>
 800bd5e:	9008      	str	r0, [sp, #32]
 800bd60:	2800      	cmp	r0, #0
 800bd62:	f43f ae93 	beq.w	800ba8c <_strtod_l+0x47c>
 800bd66:	2d00      	cmp	r5, #0
 800bd68:	dd08      	ble.n	800bd7c <_strtod_l+0x76c>
 800bd6a:	462a      	mov	r2, r5
 800bd6c:	4620      	mov	r0, r4
 800bd6e:	9908      	ldr	r1, [sp, #32]
 800bd70:	f7ff f9e6 	bl	800b140 <__lshift>
 800bd74:	9008      	str	r0, [sp, #32]
 800bd76:	2800      	cmp	r0, #0
 800bd78:	f43f ae88 	beq.w	800ba8c <_strtod_l+0x47c>
 800bd7c:	f1ba 0f00 	cmp.w	sl, #0
 800bd80:	dd08      	ble.n	800bd94 <_strtod_l+0x784>
 800bd82:	4659      	mov	r1, fp
 800bd84:	4652      	mov	r2, sl
 800bd86:	4620      	mov	r0, r4
 800bd88:	f7ff f9da 	bl	800b140 <__lshift>
 800bd8c:	4683      	mov	fp, r0
 800bd8e:	2800      	cmp	r0, #0
 800bd90:	f43f ae7c 	beq.w	800ba8c <_strtod_l+0x47c>
 800bd94:	4620      	mov	r0, r4
 800bd96:	9a08      	ldr	r2, [sp, #32]
 800bd98:	991a      	ldr	r1, [sp, #104]	; 0x68
 800bd9a:	f7ff fa59 	bl	800b250 <__mdiff>
 800bd9e:	4606      	mov	r6, r0
 800bda0:	2800      	cmp	r0, #0
 800bda2:	f43f ae73 	beq.w	800ba8c <_strtod_l+0x47c>
 800bda6:	2500      	movs	r5, #0
 800bda8:	68c3      	ldr	r3, [r0, #12]
 800bdaa:	4659      	mov	r1, fp
 800bdac:	60c5      	str	r5, [r0, #12]
 800bdae:	930a      	str	r3, [sp, #40]	; 0x28
 800bdb0:	f7ff fa32 	bl	800b218 <__mcmp>
 800bdb4:	42a8      	cmp	r0, r5
 800bdb6:	da6b      	bge.n	800be90 <_strtod_l+0x880>
 800bdb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdba:	ea53 0308 	orrs.w	r3, r3, r8
 800bdbe:	f040 808f 	bne.w	800bee0 <_strtod_l+0x8d0>
 800bdc2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	f040 808a 	bne.w	800bee0 <_strtod_l+0x8d0>
 800bdcc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bdd0:	0d1b      	lsrs	r3, r3, #20
 800bdd2:	051b      	lsls	r3, r3, #20
 800bdd4:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800bdd8:	f240 8082 	bls.w	800bee0 <_strtod_l+0x8d0>
 800bddc:	6973      	ldr	r3, [r6, #20]
 800bdde:	b913      	cbnz	r3, 800bde6 <_strtod_l+0x7d6>
 800bde0:	6933      	ldr	r3, [r6, #16]
 800bde2:	2b01      	cmp	r3, #1
 800bde4:	dd7c      	ble.n	800bee0 <_strtod_l+0x8d0>
 800bde6:	4631      	mov	r1, r6
 800bde8:	2201      	movs	r2, #1
 800bdea:	4620      	mov	r0, r4
 800bdec:	f7ff f9a8 	bl	800b140 <__lshift>
 800bdf0:	4659      	mov	r1, fp
 800bdf2:	4606      	mov	r6, r0
 800bdf4:	f7ff fa10 	bl	800b218 <__mcmp>
 800bdf8:	2800      	cmp	r0, #0
 800bdfa:	dd71      	ble.n	800bee0 <_strtod_l+0x8d0>
 800bdfc:	9905      	ldr	r1, [sp, #20]
 800bdfe:	464b      	mov	r3, r9
 800be00:	4a21      	ldr	r2, [pc, #132]	; (800be88 <_strtod_l+0x878>)
 800be02:	2900      	cmp	r1, #0
 800be04:	f000 808d 	beq.w	800bf22 <_strtod_l+0x912>
 800be08:	ea02 0109 	and.w	r1, r2, r9
 800be0c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800be10:	f300 8087 	bgt.w	800bf22 <_strtod_l+0x912>
 800be14:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800be18:	f77f aea9 	ble.w	800bb6e <_strtod_l+0x55e>
 800be1c:	4640      	mov	r0, r8
 800be1e:	4649      	mov	r1, r9
 800be20:	4b1a      	ldr	r3, [pc, #104]	; (800be8c <_strtod_l+0x87c>)
 800be22:	2200      	movs	r2, #0
 800be24:	f7f4 fb58 	bl	80004d8 <__aeabi_dmul>
 800be28:	4b17      	ldr	r3, [pc, #92]	; (800be88 <_strtod_l+0x878>)
 800be2a:	4680      	mov	r8, r0
 800be2c:	400b      	ands	r3, r1
 800be2e:	4689      	mov	r9, r1
 800be30:	2b00      	cmp	r3, #0
 800be32:	f47f ae35 	bne.w	800baa0 <_strtod_l+0x490>
 800be36:	2322      	movs	r3, #34	; 0x22
 800be38:	6023      	str	r3, [r4, #0]
 800be3a:	e631      	b.n	800baa0 <_strtod_l+0x490>
 800be3c:	f04f 32ff 	mov.w	r2, #4294967295
 800be40:	fa02 f303 	lsl.w	r3, r2, r3
 800be44:	ea03 0808 	and.w	r8, r3, r8
 800be48:	e6de      	b.n	800bc08 <_strtod_l+0x5f8>
 800be4a:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 800be4e:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 800be52:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 800be56:	37e2      	adds	r7, #226	; 0xe2
 800be58:	fa01 f307 	lsl.w	r3, r1, r7
 800be5c:	9310      	str	r3, [sp, #64]	; 0x40
 800be5e:	9113      	str	r1, [sp, #76]	; 0x4c
 800be60:	e745      	b.n	800bcee <_strtod_l+0x6de>
 800be62:	2300      	movs	r3, #0
 800be64:	9310      	str	r3, [sp, #64]	; 0x40
 800be66:	2301      	movs	r3, #1
 800be68:	9313      	str	r3, [sp, #76]	; 0x4c
 800be6a:	e740      	b.n	800bcee <_strtod_l+0x6de>
 800be6c:	463a      	mov	r2, r7
 800be6e:	4620      	mov	r0, r4
 800be70:	991a      	ldr	r1, [sp, #104]	; 0x68
 800be72:	f7ff f965 	bl	800b140 <__lshift>
 800be76:	901a      	str	r0, [sp, #104]	; 0x68
 800be78:	2800      	cmp	r0, #0
 800be7a:	f47f af68 	bne.w	800bd4e <_strtod_l+0x73e>
 800be7e:	e605      	b.n	800ba8c <_strtod_l+0x47c>
 800be80:	0800e108 	.word	0x0800e108
 800be84:	fffffc02 	.word	0xfffffc02
 800be88:	7ff00000 	.word	0x7ff00000
 800be8c:	39500000 	.word	0x39500000
 800be90:	46ca      	mov	sl, r9
 800be92:	d165      	bne.n	800bf60 <_strtod_l+0x950>
 800be94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800be96:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800be9a:	b352      	cbz	r2, 800bef2 <_strtod_l+0x8e2>
 800be9c:	4a9e      	ldr	r2, [pc, #632]	; (800c118 <_strtod_l+0xb08>)
 800be9e:	4293      	cmp	r3, r2
 800bea0:	d12a      	bne.n	800bef8 <_strtod_l+0x8e8>
 800bea2:	9b05      	ldr	r3, [sp, #20]
 800bea4:	4641      	mov	r1, r8
 800bea6:	b1fb      	cbz	r3, 800bee8 <_strtod_l+0x8d8>
 800bea8:	4b9c      	ldr	r3, [pc, #624]	; (800c11c <_strtod_l+0xb0c>)
 800beaa:	f04f 32ff 	mov.w	r2, #4294967295
 800beae:	ea09 0303 	and.w	r3, r9, r3
 800beb2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800beb6:	d81a      	bhi.n	800beee <_strtod_l+0x8de>
 800beb8:	0d1b      	lsrs	r3, r3, #20
 800beba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bebe:	fa02 f303 	lsl.w	r3, r2, r3
 800bec2:	4299      	cmp	r1, r3
 800bec4:	d118      	bne.n	800bef8 <_strtod_l+0x8e8>
 800bec6:	4b96      	ldr	r3, [pc, #600]	; (800c120 <_strtod_l+0xb10>)
 800bec8:	459a      	cmp	sl, r3
 800beca:	d102      	bne.n	800bed2 <_strtod_l+0x8c2>
 800becc:	3101      	adds	r1, #1
 800bece:	f43f addd 	beq.w	800ba8c <_strtod_l+0x47c>
 800bed2:	f04f 0800 	mov.w	r8, #0
 800bed6:	4b91      	ldr	r3, [pc, #580]	; (800c11c <_strtod_l+0xb0c>)
 800bed8:	ea0a 0303 	and.w	r3, sl, r3
 800bedc:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800bee0:	9b05      	ldr	r3, [sp, #20]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d19a      	bne.n	800be1c <_strtod_l+0x80c>
 800bee6:	e5db      	b.n	800baa0 <_strtod_l+0x490>
 800bee8:	f04f 33ff 	mov.w	r3, #4294967295
 800beec:	e7e9      	b.n	800bec2 <_strtod_l+0x8b2>
 800beee:	4613      	mov	r3, r2
 800bef0:	e7e7      	b.n	800bec2 <_strtod_l+0x8b2>
 800bef2:	ea53 0308 	orrs.w	r3, r3, r8
 800bef6:	d081      	beq.n	800bdfc <_strtod_l+0x7ec>
 800bef8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800befa:	b1e3      	cbz	r3, 800bf36 <_strtod_l+0x926>
 800befc:	ea13 0f0a 	tst.w	r3, sl
 800bf00:	d0ee      	beq.n	800bee0 <_strtod_l+0x8d0>
 800bf02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf04:	4640      	mov	r0, r8
 800bf06:	4649      	mov	r1, r9
 800bf08:	9a05      	ldr	r2, [sp, #20]
 800bf0a:	b1c3      	cbz	r3, 800bf3e <_strtod_l+0x92e>
 800bf0c:	f7ff fb5c 	bl	800b5c8 <sulp>
 800bf10:	4602      	mov	r2, r0
 800bf12:	460b      	mov	r3, r1
 800bf14:	980c      	ldr	r0, [sp, #48]	; 0x30
 800bf16:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bf18:	f7f4 f928 	bl	800016c <__adddf3>
 800bf1c:	4680      	mov	r8, r0
 800bf1e:	4689      	mov	r9, r1
 800bf20:	e7de      	b.n	800bee0 <_strtod_l+0x8d0>
 800bf22:	4013      	ands	r3, r2
 800bf24:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800bf28:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800bf2c:	f04f 38ff 	mov.w	r8, #4294967295
 800bf30:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800bf34:	e7d4      	b.n	800bee0 <_strtod_l+0x8d0>
 800bf36:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bf38:	ea13 0f08 	tst.w	r3, r8
 800bf3c:	e7e0      	b.n	800bf00 <_strtod_l+0x8f0>
 800bf3e:	f7ff fb43 	bl	800b5c8 <sulp>
 800bf42:	4602      	mov	r2, r0
 800bf44:	460b      	mov	r3, r1
 800bf46:	980c      	ldr	r0, [sp, #48]	; 0x30
 800bf48:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bf4a:	f7f4 f90d 	bl	8000168 <__aeabi_dsub>
 800bf4e:	2200      	movs	r2, #0
 800bf50:	2300      	movs	r3, #0
 800bf52:	4680      	mov	r8, r0
 800bf54:	4689      	mov	r9, r1
 800bf56:	f7f4 fd27 	bl	80009a8 <__aeabi_dcmpeq>
 800bf5a:	2800      	cmp	r0, #0
 800bf5c:	d0c0      	beq.n	800bee0 <_strtod_l+0x8d0>
 800bf5e:	e606      	b.n	800bb6e <_strtod_l+0x55e>
 800bf60:	4659      	mov	r1, fp
 800bf62:	4630      	mov	r0, r6
 800bf64:	f7ff fabe 	bl	800b4e4 <__ratio>
 800bf68:	4602      	mov	r2, r0
 800bf6a:	460b      	mov	r3, r1
 800bf6c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800bf70:	2200      	movs	r2, #0
 800bf72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bf76:	f7f4 fd2b 	bl	80009d0 <__aeabi_dcmple>
 800bf7a:	2800      	cmp	r0, #0
 800bf7c:	d06f      	beq.n	800c05e <_strtod_l+0xa4e>
 800bf7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d17c      	bne.n	800c07e <_strtod_l+0xa6e>
 800bf84:	f1b8 0f00 	cmp.w	r8, #0
 800bf88:	d159      	bne.n	800c03e <_strtod_l+0xa2e>
 800bf8a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d17b      	bne.n	800c08a <_strtod_l+0xa7a>
 800bf92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bf96:	2200      	movs	r2, #0
 800bf98:	4b62      	ldr	r3, [pc, #392]	; (800c124 <_strtod_l+0xb14>)
 800bf9a:	f7f4 fd0f 	bl	80009bc <__aeabi_dcmplt>
 800bf9e:	2800      	cmp	r0, #0
 800bfa0:	d15a      	bne.n	800c058 <_strtod_l+0xa48>
 800bfa2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	4b5f      	ldr	r3, [pc, #380]	; (800c128 <_strtod_l+0xb18>)
 800bfaa:	f7f4 fa95 	bl	80004d8 <__aeabi_dmul>
 800bfae:	4605      	mov	r5, r0
 800bfb0:	460f      	mov	r7, r1
 800bfb2:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800bfb6:	9506      	str	r5, [sp, #24]
 800bfb8:	9307      	str	r3, [sp, #28]
 800bfba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bfbe:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800bfc2:	4b56      	ldr	r3, [pc, #344]	; (800c11c <_strtod_l+0xb0c>)
 800bfc4:	4a55      	ldr	r2, [pc, #340]	; (800c11c <_strtod_l+0xb0c>)
 800bfc6:	ea0a 0303 	and.w	r3, sl, r3
 800bfca:	9313      	str	r3, [sp, #76]	; 0x4c
 800bfcc:	4b57      	ldr	r3, [pc, #348]	; (800c12c <_strtod_l+0xb1c>)
 800bfce:	ea0a 0202 	and.w	r2, sl, r2
 800bfd2:	429a      	cmp	r2, r3
 800bfd4:	f040 80b0 	bne.w	800c138 <_strtod_l+0xb28>
 800bfd8:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800bfdc:	4640      	mov	r0, r8
 800bfde:	4649      	mov	r1, r9
 800bfe0:	f7ff f9c2 	bl	800b368 <__ulp>
 800bfe4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bfe8:	f7f4 fa76 	bl	80004d8 <__aeabi_dmul>
 800bfec:	4642      	mov	r2, r8
 800bfee:	464b      	mov	r3, r9
 800bff0:	f7f4 f8bc 	bl	800016c <__adddf3>
 800bff4:	f8df a124 	ldr.w	sl, [pc, #292]	; 800c11c <_strtod_l+0xb0c>
 800bff8:	4a4d      	ldr	r2, [pc, #308]	; (800c130 <_strtod_l+0xb20>)
 800bffa:	ea01 0a0a 	and.w	sl, r1, sl
 800bffe:	4592      	cmp	sl, r2
 800c000:	4680      	mov	r8, r0
 800c002:	d948      	bls.n	800c096 <_strtod_l+0xa86>
 800c004:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c006:	4b46      	ldr	r3, [pc, #280]	; (800c120 <_strtod_l+0xb10>)
 800c008:	429a      	cmp	r2, r3
 800c00a:	d103      	bne.n	800c014 <_strtod_l+0xa04>
 800c00c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c00e:	3301      	adds	r3, #1
 800c010:	f43f ad3c 	beq.w	800ba8c <_strtod_l+0x47c>
 800c014:	f04f 38ff 	mov.w	r8, #4294967295
 800c018:	f8df 9104 	ldr.w	r9, [pc, #260]	; 800c120 <_strtod_l+0xb10>
 800c01c:	4620      	mov	r0, r4
 800c01e:	991a      	ldr	r1, [sp, #104]	; 0x68
 800c020:	f7fe fe76 	bl	800ad10 <_Bfree>
 800c024:	4620      	mov	r0, r4
 800c026:	9908      	ldr	r1, [sp, #32]
 800c028:	f7fe fe72 	bl	800ad10 <_Bfree>
 800c02c:	4659      	mov	r1, fp
 800c02e:	4620      	mov	r0, r4
 800c030:	f7fe fe6e 	bl	800ad10 <_Bfree>
 800c034:	4631      	mov	r1, r6
 800c036:	4620      	mov	r0, r4
 800c038:	f7fe fe6a 	bl	800ad10 <_Bfree>
 800c03c:	e605      	b.n	800bc4a <_strtod_l+0x63a>
 800c03e:	f1b8 0f01 	cmp.w	r8, #1
 800c042:	d103      	bne.n	800c04c <_strtod_l+0xa3c>
 800c044:	f1b9 0f00 	cmp.w	r9, #0
 800c048:	f43f ad91 	beq.w	800bb6e <_strtod_l+0x55e>
 800c04c:	2200      	movs	r2, #0
 800c04e:	4b39      	ldr	r3, [pc, #228]	; (800c134 <_strtod_l+0xb24>)
 800c050:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c052:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c056:	e016      	b.n	800c086 <_strtod_l+0xa76>
 800c058:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c05a:	4f33      	ldr	r7, [pc, #204]	; (800c128 <_strtod_l+0xb18>)
 800c05c:	e7a9      	b.n	800bfb2 <_strtod_l+0x9a2>
 800c05e:	4b32      	ldr	r3, [pc, #200]	; (800c128 <_strtod_l+0xb18>)
 800c060:	2200      	movs	r2, #0
 800c062:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c066:	f7f4 fa37 	bl	80004d8 <__aeabi_dmul>
 800c06a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c06c:	4605      	mov	r5, r0
 800c06e:	460f      	mov	r7, r1
 800c070:	2b00      	cmp	r3, #0
 800c072:	d09e      	beq.n	800bfb2 <_strtod_l+0x9a2>
 800c074:	4602      	mov	r2, r0
 800c076:	460b      	mov	r3, r1
 800c078:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c07c:	e79d      	b.n	800bfba <_strtod_l+0x9aa>
 800c07e:	2200      	movs	r2, #0
 800c080:	4b28      	ldr	r3, [pc, #160]	; (800c124 <_strtod_l+0xb14>)
 800c082:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c086:	4f27      	ldr	r7, [pc, #156]	; (800c124 <_strtod_l+0xb14>)
 800c088:	e797      	b.n	800bfba <_strtod_l+0x9aa>
 800c08a:	2200      	movs	r2, #0
 800c08c:	4b29      	ldr	r3, [pc, #164]	; (800c134 <_strtod_l+0xb24>)
 800c08e:	4645      	mov	r5, r8
 800c090:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c094:	e7f7      	b.n	800c086 <_strtod_l+0xa76>
 800c096:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 800c09a:	9b05      	ldr	r3, [sp, #20]
 800c09c:	46ca      	mov	sl, r9
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d1bc      	bne.n	800c01c <_strtod_l+0xa0c>
 800c0a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c0a6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c0a8:	0d1b      	lsrs	r3, r3, #20
 800c0aa:	051b      	lsls	r3, r3, #20
 800c0ac:	429a      	cmp	r2, r3
 800c0ae:	d1b5      	bne.n	800c01c <_strtod_l+0xa0c>
 800c0b0:	4628      	mov	r0, r5
 800c0b2:	4639      	mov	r1, r7
 800c0b4:	f7f5 f872 	bl	800119c <__aeabi_d2lz>
 800c0b8:	f7f4 f9e0 	bl	800047c <__aeabi_l2d>
 800c0bc:	4602      	mov	r2, r0
 800c0be:	460b      	mov	r3, r1
 800c0c0:	4628      	mov	r0, r5
 800c0c2:	4639      	mov	r1, r7
 800c0c4:	f7f4 f850 	bl	8000168 <__aeabi_dsub>
 800c0c8:	460b      	mov	r3, r1
 800c0ca:	4602      	mov	r2, r0
 800c0cc:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 800c0d0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800c0d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0d6:	ea4a 0a08 	orr.w	sl, sl, r8
 800c0da:	ea5a 0a03 	orrs.w	sl, sl, r3
 800c0de:	d06c      	beq.n	800c1ba <_strtod_l+0xbaa>
 800c0e0:	a309      	add	r3, pc, #36	; (adr r3, 800c108 <_strtod_l+0xaf8>)
 800c0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e6:	f7f4 fc69 	bl	80009bc <__aeabi_dcmplt>
 800c0ea:	2800      	cmp	r0, #0
 800c0ec:	f47f acd8 	bne.w	800baa0 <_strtod_l+0x490>
 800c0f0:	a307      	add	r3, pc, #28	; (adr r3, 800c110 <_strtod_l+0xb00>)
 800c0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c0fa:	f7f4 fc7d 	bl	80009f8 <__aeabi_dcmpgt>
 800c0fe:	2800      	cmp	r0, #0
 800c100:	d08c      	beq.n	800c01c <_strtod_l+0xa0c>
 800c102:	e4cd      	b.n	800baa0 <_strtod_l+0x490>
 800c104:	f3af 8000 	nop.w
 800c108:	94a03595 	.word	0x94a03595
 800c10c:	3fdfffff 	.word	0x3fdfffff
 800c110:	35afe535 	.word	0x35afe535
 800c114:	3fe00000 	.word	0x3fe00000
 800c118:	000fffff 	.word	0x000fffff
 800c11c:	7ff00000 	.word	0x7ff00000
 800c120:	7fefffff 	.word	0x7fefffff
 800c124:	3ff00000 	.word	0x3ff00000
 800c128:	3fe00000 	.word	0x3fe00000
 800c12c:	7fe00000 	.word	0x7fe00000
 800c130:	7c9fffff 	.word	0x7c9fffff
 800c134:	bff00000 	.word	0xbff00000
 800c138:	9b05      	ldr	r3, [sp, #20]
 800c13a:	b333      	cbz	r3, 800c18a <_strtod_l+0xb7a>
 800c13c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c13e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c142:	d822      	bhi.n	800c18a <_strtod_l+0xb7a>
 800c144:	a328      	add	r3, pc, #160	; (adr r3, 800c1e8 <_strtod_l+0xbd8>)
 800c146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c14a:	4628      	mov	r0, r5
 800c14c:	4639      	mov	r1, r7
 800c14e:	f7f4 fc3f 	bl	80009d0 <__aeabi_dcmple>
 800c152:	b1a0      	cbz	r0, 800c17e <_strtod_l+0xb6e>
 800c154:	4639      	mov	r1, r7
 800c156:	4628      	mov	r0, r5
 800c158:	f7f4 fc96 	bl	8000a88 <__aeabi_d2uiz>
 800c15c:	2801      	cmp	r0, #1
 800c15e:	bf38      	it	cc
 800c160:	2001      	movcc	r0, #1
 800c162:	f7f4 f93f 	bl	80003e4 <__aeabi_ui2d>
 800c166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c168:	4605      	mov	r5, r0
 800c16a:	460f      	mov	r7, r1
 800c16c:	bb03      	cbnz	r3, 800c1b0 <_strtod_l+0xba0>
 800c16e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c172:	9014      	str	r0, [sp, #80]	; 0x50
 800c174:	9315      	str	r3, [sp, #84]	; 0x54
 800c176:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c17a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800c17e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c180:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c182:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c186:	1a9b      	subs	r3, r3, r2
 800c188:	9311      	str	r3, [sp, #68]	; 0x44
 800c18a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c18c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c18e:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800c192:	f7ff f8e9 	bl	800b368 <__ulp>
 800c196:	4602      	mov	r2, r0
 800c198:	460b      	mov	r3, r1
 800c19a:	4640      	mov	r0, r8
 800c19c:	4649      	mov	r1, r9
 800c19e:	f7f4 f99b 	bl	80004d8 <__aeabi_dmul>
 800c1a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c1a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c1a6:	f7f3 ffe1 	bl	800016c <__adddf3>
 800c1aa:	4680      	mov	r8, r0
 800c1ac:	4689      	mov	r9, r1
 800c1ae:	e774      	b.n	800c09a <_strtod_l+0xa8a>
 800c1b0:	4602      	mov	r2, r0
 800c1b2:	460b      	mov	r3, r1
 800c1b4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800c1b8:	e7dd      	b.n	800c176 <_strtod_l+0xb66>
 800c1ba:	a30d      	add	r3, pc, #52	; (adr r3, 800c1f0 <_strtod_l+0xbe0>)
 800c1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1c0:	f7f4 fbfc 	bl	80009bc <__aeabi_dcmplt>
 800c1c4:	e79b      	b.n	800c0fe <_strtod_l+0xaee>
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	930e      	str	r3, [sp, #56]	; 0x38
 800c1ca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c1cc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c1ce:	6013      	str	r3, [r2, #0]
 800c1d0:	f7ff ba5b 	b.w	800b68a <_strtod_l+0x7a>
 800c1d4:	2a65      	cmp	r2, #101	; 0x65
 800c1d6:	f43f ab52 	beq.w	800b87e <_strtod_l+0x26e>
 800c1da:	2a45      	cmp	r2, #69	; 0x45
 800c1dc:	f43f ab4f 	beq.w	800b87e <_strtod_l+0x26e>
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	f7ff bb87 	b.w	800b8f4 <_strtod_l+0x2e4>
 800c1e6:	bf00      	nop
 800c1e8:	ffc00000 	.word	0xffc00000
 800c1ec:	41dfffff 	.word	0x41dfffff
 800c1f0:	94a03595 	.word	0x94a03595
 800c1f4:	3fcfffff 	.word	0x3fcfffff

0800c1f8 <_strtod_r>:
 800c1f8:	4b01      	ldr	r3, [pc, #4]	; (800c200 <_strtod_r+0x8>)
 800c1fa:	f7ff ba09 	b.w	800b610 <_strtod_l>
 800c1fe:	bf00      	nop
 800c200:	200000b4 	.word	0x200000b4

0800c204 <_strtol_l.constprop.0>:
 800c204:	2b01      	cmp	r3, #1
 800c206:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c20a:	4686      	mov	lr, r0
 800c20c:	4690      	mov	r8, r2
 800c20e:	d001      	beq.n	800c214 <_strtol_l.constprop.0+0x10>
 800c210:	2b24      	cmp	r3, #36	; 0x24
 800c212:	d906      	bls.n	800c222 <_strtol_l.constprop.0+0x1e>
 800c214:	f7fd fd92 	bl	8009d3c <__errno>
 800c218:	2316      	movs	r3, #22
 800c21a:	6003      	str	r3, [r0, #0]
 800c21c:	2000      	movs	r0, #0
 800c21e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c222:	460d      	mov	r5, r1
 800c224:	4835      	ldr	r0, [pc, #212]	; (800c2fc <_strtol_l.constprop.0+0xf8>)
 800c226:	462a      	mov	r2, r5
 800c228:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c22c:	5d06      	ldrb	r6, [r0, r4]
 800c22e:	f016 0608 	ands.w	r6, r6, #8
 800c232:	d1f8      	bne.n	800c226 <_strtol_l.constprop.0+0x22>
 800c234:	2c2d      	cmp	r4, #45	; 0x2d
 800c236:	d12e      	bne.n	800c296 <_strtol_l.constprop.0+0x92>
 800c238:	2601      	movs	r6, #1
 800c23a:	782c      	ldrb	r4, [r5, #0]
 800c23c:	1c95      	adds	r5, r2, #2
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d057      	beq.n	800c2f2 <_strtol_l.constprop.0+0xee>
 800c242:	2b10      	cmp	r3, #16
 800c244:	d109      	bne.n	800c25a <_strtol_l.constprop.0+0x56>
 800c246:	2c30      	cmp	r4, #48	; 0x30
 800c248:	d107      	bne.n	800c25a <_strtol_l.constprop.0+0x56>
 800c24a:	782a      	ldrb	r2, [r5, #0]
 800c24c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800c250:	2a58      	cmp	r2, #88	; 0x58
 800c252:	d149      	bne.n	800c2e8 <_strtol_l.constprop.0+0xe4>
 800c254:	2310      	movs	r3, #16
 800c256:	786c      	ldrb	r4, [r5, #1]
 800c258:	3502      	adds	r5, #2
 800c25a:	2200      	movs	r2, #0
 800c25c:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 800c260:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c264:	fbbc f9f3 	udiv	r9, ip, r3
 800c268:	4610      	mov	r0, r2
 800c26a:	fb03 ca19 	mls	sl, r3, r9, ip
 800c26e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800c272:	2f09      	cmp	r7, #9
 800c274:	d814      	bhi.n	800c2a0 <_strtol_l.constprop.0+0x9c>
 800c276:	463c      	mov	r4, r7
 800c278:	42a3      	cmp	r3, r4
 800c27a:	dd20      	ble.n	800c2be <_strtol_l.constprop.0+0xba>
 800c27c:	1c57      	adds	r7, r2, #1
 800c27e:	d007      	beq.n	800c290 <_strtol_l.constprop.0+0x8c>
 800c280:	4581      	cmp	r9, r0
 800c282:	d319      	bcc.n	800c2b8 <_strtol_l.constprop.0+0xb4>
 800c284:	d101      	bne.n	800c28a <_strtol_l.constprop.0+0x86>
 800c286:	45a2      	cmp	sl, r4
 800c288:	db16      	blt.n	800c2b8 <_strtol_l.constprop.0+0xb4>
 800c28a:	2201      	movs	r2, #1
 800c28c:	fb00 4003 	mla	r0, r0, r3, r4
 800c290:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c294:	e7eb      	b.n	800c26e <_strtol_l.constprop.0+0x6a>
 800c296:	2c2b      	cmp	r4, #43	; 0x2b
 800c298:	bf04      	itt	eq
 800c29a:	782c      	ldrbeq	r4, [r5, #0]
 800c29c:	1c95      	addeq	r5, r2, #2
 800c29e:	e7ce      	b.n	800c23e <_strtol_l.constprop.0+0x3a>
 800c2a0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800c2a4:	2f19      	cmp	r7, #25
 800c2a6:	d801      	bhi.n	800c2ac <_strtol_l.constprop.0+0xa8>
 800c2a8:	3c37      	subs	r4, #55	; 0x37
 800c2aa:	e7e5      	b.n	800c278 <_strtol_l.constprop.0+0x74>
 800c2ac:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800c2b0:	2f19      	cmp	r7, #25
 800c2b2:	d804      	bhi.n	800c2be <_strtol_l.constprop.0+0xba>
 800c2b4:	3c57      	subs	r4, #87	; 0x57
 800c2b6:	e7df      	b.n	800c278 <_strtol_l.constprop.0+0x74>
 800c2b8:	f04f 32ff 	mov.w	r2, #4294967295
 800c2bc:	e7e8      	b.n	800c290 <_strtol_l.constprop.0+0x8c>
 800c2be:	1c53      	adds	r3, r2, #1
 800c2c0:	d108      	bne.n	800c2d4 <_strtol_l.constprop.0+0xd0>
 800c2c2:	2322      	movs	r3, #34	; 0x22
 800c2c4:	4660      	mov	r0, ip
 800c2c6:	f8ce 3000 	str.w	r3, [lr]
 800c2ca:	f1b8 0f00 	cmp.w	r8, #0
 800c2ce:	d0a6      	beq.n	800c21e <_strtol_l.constprop.0+0x1a>
 800c2d0:	1e69      	subs	r1, r5, #1
 800c2d2:	e006      	b.n	800c2e2 <_strtol_l.constprop.0+0xde>
 800c2d4:	b106      	cbz	r6, 800c2d8 <_strtol_l.constprop.0+0xd4>
 800c2d6:	4240      	negs	r0, r0
 800c2d8:	f1b8 0f00 	cmp.w	r8, #0
 800c2dc:	d09f      	beq.n	800c21e <_strtol_l.constprop.0+0x1a>
 800c2de:	2a00      	cmp	r2, #0
 800c2e0:	d1f6      	bne.n	800c2d0 <_strtol_l.constprop.0+0xcc>
 800c2e2:	f8c8 1000 	str.w	r1, [r8]
 800c2e6:	e79a      	b.n	800c21e <_strtol_l.constprop.0+0x1a>
 800c2e8:	2430      	movs	r4, #48	; 0x30
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d1b5      	bne.n	800c25a <_strtol_l.constprop.0+0x56>
 800c2ee:	2308      	movs	r3, #8
 800c2f0:	e7b3      	b.n	800c25a <_strtol_l.constprop.0+0x56>
 800c2f2:	2c30      	cmp	r4, #48	; 0x30
 800c2f4:	d0a9      	beq.n	800c24a <_strtol_l.constprop.0+0x46>
 800c2f6:	230a      	movs	r3, #10
 800c2f8:	e7af      	b.n	800c25a <_strtol_l.constprop.0+0x56>
 800c2fa:	bf00      	nop
 800c2fc:	0800e131 	.word	0x0800e131

0800c300 <_strtol_r>:
 800c300:	f7ff bf80 	b.w	800c204 <_strtol_l.constprop.0>

0800c304 <__ssputs_r>:
 800c304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c308:	461f      	mov	r7, r3
 800c30a:	688e      	ldr	r6, [r1, #8]
 800c30c:	4682      	mov	sl, r0
 800c30e:	42be      	cmp	r6, r7
 800c310:	460c      	mov	r4, r1
 800c312:	4690      	mov	r8, r2
 800c314:	680b      	ldr	r3, [r1, #0]
 800c316:	d82c      	bhi.n	800c372 <__ssputs_r+0x6e>
 800c318:	898a      	ldrh	r2, [r1, #12]
 800c31a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c31e:	d026      	beq.n	800c36e <__ssputs_r+0x6a>
 800c320:	6965      	ldr	r5, [r4, #20]
 800c322:	6909      	ldr	r1, [r1, #16]
 800c324:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c328:	eba3 0901 	sub.w	r9, r3, r1
 800c32c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c330:	1c7b      	adds	r3, r7, #1
 800c332:	444b      	add	r3, r9
 800c334:	106d      	asrs	r5, r5, #1
 800c336:	429d      	cmp	r5, r3
 800c338:	bf38      	it	cc
 800c33a:	461d      	movcc	r5, r3
 800c33c:	0553      	lsls	r3, r2, #21
 800c33e:	d527      	bpl.n	800c390 <__ssputs_r+0x8c>
 800c340:	4629      	mov	r1, r5
 800c342:	f7fe fc19 	bl	800ab78 <_malloc_r>
 800c346:	4606      	mov	r6, r0
 800c348:	b360      	cbz	r0, 800c3a4 <__ssputs_r+0xa0>
 800c34a:	464a      	mov	r2, r9
 800c34c:	6921      	ldr	r1, [r4, #16]
 800c34e:	f000 fa17 	bl	800c780 <memcpy>
 800c352:	89a3      	ldrh	r3, [r4, #12]
 800c354:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c35c:	81a3      	strh	r3, [r4, #12]
 800c35e:	6126      	str	r6, [r4, #16]
 800c360:	444e      	add	r6, r9
 800c362:	6026      	str	r6, [r4, #0]
 800c364:	463e      	mov	r6, r7
 800c366:	6165      	str	r5, [r4, #20]
 800c368:	eba5 0509 	sub.w	r5, r5, r9
 800c36c:	60a5      	str	r5, [r4, #8]
 800c36e:	42be      	cmp	r6, r7
 800c370:	d900      	bls.n	800c374 <__ssputs_r+0x70>
 800c372:	463e      	mov	r6, r7
 800c374:	4632      	mov	r2, r6
 800c376:	4641      	mov	r1, r8
 800c378:	6820      	ldr	r0, [r4, #0]
 800c37a:	f000 f9c5 	bl	800c708 <memmove>
 800c37e:	2000      	movs	r0, #0
 800c380:	68a3      	ldr	r3, [r4, #8]
 800c382:	1b9b      	subs	r3, r3, r6
 800c384:	60a3      	str	r3, [r4, #8]
 800c386:	6823      	ldr	r3, [r4, #0]
 800c388:	4433      	add	r3, r6
 800c38a:	6023      	str	r3, [r4, #0]
 800c38c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c390:	462a      	mov	r2, r5
 800c392:	f000 fda6 	bl	800cee2 <_realloc_r>
 800c396:	4606      	mov	r6, r0
 800c398:	2800      	cmp	r0, #0
 800c39a:	d1e0      	bne.n	800c35e <__ssputs_r+0x5a>
 800c39c:	4650      	mov	r0, sl
 800c39e:	6921      	ldr	r1, [r4, #16]
 800c3a0:	f7fe fb7a 	bl	800aa98 <_free_r>
 800c3a4:	230c      	movs	r3, #12
 800c3a6:	f8ca 3000 	str.w	r3, [sl]
 800c3aa:	89a3      	ldrh	r3, [r4, #12]
 800c3ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c3b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3b4:	81a3      	strh	r3, [r4, #12]
 800c3b6:	e7e9      	b.n	800c38c <__ssputs_r+0x88>

0800c3b8 <_svfiprintf_r>:
 800c3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3bc:	4698      	mov	r8, r3
 800c3be:	898b      	ldrh	r3, [r1, #12]
 800c3c0:	4607      	mov	r7, r0
 800c3c2:	061b      	lsls	r3, r3, #24
 800c3c4:	460d      	mov	r5, r1
 800c3c6:	4614      	mov	r4, r2
 800c3c8:	b09d      	sub	sp, #116	; 0x74
 800c3ca:	d50e      	bpl.n	800c3ea <_svfiprintf_r+0x32>
 800c3cc:	690b      	ldr	r3, [r1, #16]
 800c3ce:	b963      	cbnz	r3, 800c3ea <_svfiprintf_r+0x32>
 800c3d0:	2140      	movs	r1, #64	; 0x40
 800c3d2:	f7fe fbd1 	bl	800ab78 <_malloc_r>
 800c3d6:	6028      	str	r0, [r5, #0]
 800c3d8:	6128      	str	r0, [r5, #16]
 800c3da:	b920      	cbnz	r0, 800c3e6 <_svfiprintf_r+0x2e>
 800c3dc:	230c      	movs	r3, #12
 800c3de:	603b      	str	r3, [r7, #0]
 800c3e0:	f04f 30ff 	mov.w	r0, #4294967295
 800c3e4:	e0d0      	b.n	800c588 <_svfiprintf_r+0x1d0>
 800c3e6:	2340      	movs	r3, #64	; 0x40
 800c3e8:	616b      	str	r3, [r5, #20]
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	9309      	str	r3, [sp, #36]	; 0x24
 800c3ee:	2320      	movs	r3, #32
 800c3f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c3f4:	2330      	movs	r3, #48	; 0x30
 800c3f6:	f04f 0901 	mov.w	r9, #1
 800c3fa:	f8cd 800c 	str.w	r8, [sp, #12]
 800c3fe:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800c5a0 <_svfiprintf_r+0x1e8>
 800c402:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c406:	4623      	mov	r3, r4
 800c408:	469a      	mov	sl, r3
 800c40a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c40e:	b10a      	cbz	r2, 800c414 <_svfiprintf_r+0x5c>
 800c410:	2a25      	cmp	r2, #37	; 0x25
 800c412:	d1f9      	bne.n	800c408 <_svfiprintf_r+0x50>
 800c414:	ebba 0b04 	subs.w	fp, sl, r4
 800c418:	d00b      	beq.n	800c432 <_svfiprintf_r+0x7a>
 800c41a:	465b      	mov	r3, fp
 800c41c:	4622      	mov	r2, r4
 800c41e:	4629      	mov	r1, r5
 800c420:	4638      	mov	r0, r7
 800c422:	f7ff ff6f 	bl	800c304 <__ssputs_r>
 800c426:	3001      	adds	r0, #1
 800c428:	f000 80a9 	beq.w	800c57e <_svfiprintf_r+0x1c6>
 800c42c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c42e:	445a      	add	r2, fp
 800c430:	9209      	str	r2, [sp, #36]	; 0x24
 800c432:	f89a 3000 	ldrb.w	r3, [sl]
 800c436:	2b00      	cmp	r3, #0
 800c438:	f000 80a1 	beq.w	800c57e <_svfiprintf_r+0x1c6>
 800c43c:	2300      	movs	r3, #0
 800c43e:	f04f 32ff 	mov.w	r2, #4294967295
 800c442:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c446:	f10a 0a01 	add.w	sl, sl, #1
 800c44a:	9304      	str	r3, [sp, #16]
 800c44c:	9307      	str	r3, [sp, #28]
 800c44e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c452:	931a      	str	r3, [sp, #104]	; 0x68
 800c454:	4654      	mov	r4, sl
 800c456:	2205      	movs	r2, #5
 800c458:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c45c:	4850      	ldr	r0, [pc, #320]	; (800c5a0 <_svfiprintf_r+0x1e8>)
 800c45e:	f7fd fc9a 	bl	8009d96 <memchr>
 800c462:	9a04      	ldr	r2, [sp, #16]
 800c464:	b9d8      	cbnz	r0, 800c49e <_svfiprintf_r+0xe6>
 800c466:	06d0      	lsls	r0, r2, #27
 800c468:	bf44      	itt	mi
 800c46a:	2320      	movmi	r3, #32
 800c46c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c470:	0711      	lsls	r1, r2, #28
 800c472:	bf44      	itt	mi
 800c474:	232b      	movmi	r3, #43	; 0x2b
 800c476:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c47a:	f89a 3000 	ldrb.w	r3, [sl]
 800c47e:	2b2a      	cmp	r3, #42	; 0x2a
 800c480:	d015      	beq.n	800c4ae <_svfiprintf_r+0xf6>
 800c482:	4654      	mov	r4, sl
 800c484:	2000      	movs	r0, #0
 800c486:	f04f 0c0a 	mov.w	ip, #10
 800c48a:	9a07      	ldr	r2, [sp, #28]
 800c48c:	4621      	mov	r1, r4
 800c48e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c492:	3b30      	subs	r3, #48	; 0x30
 800c494:	2b09      	cmp	r3, #9
 800c496:	d94d      	bls.n	800c534 <_svfiprintf_r+0x17c>
 800c498:	b1b0      	cbz	r0, 800c4c8 <_svfiprintf_r+0x110>
 800c49a:	9207      	str	r2, [sp, #28]
 800c49c:	e014      	b.n	800c4c8 <_svfiprintf_r+0x110>
 800c49e:	eba0 0308 	sub.w	r3, r0, r8
 800c4a2:	fa09 f303 	lsl.w	r3, r9, r3
 800c4a6:	4313      	orrs	r3, r2
 800c4a8:	46a2      	mov	sl, r4
 800c4aa:	9304      	str	r3, [sp, #16]
 800c4ac:	e7d2      	b.n	800c454 <_svfiprintf_r+0x9c>
 800c4ae:	9b03      	ldr	r3, [sp, #12]
 800c4b0:	1d19      	adds	r1, r3, #4
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	9103      	str	r1, [sp, #12]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	bfbb      	ittet	lt
 800c4ba:	425b      	neglt	r3, r3
 800c4bc:	f042 0202 	orrlt.w	r2, r2, #2
 800c4c0:	9307      	strge	r3, [sp, #28]
 800c4c2:	9307      	strlt	r3, [sp, #28]
 800c4c4:	bfb8      	it	lt
 800c4c6:	9204      	strlt	r2, [sp, #16]
 800c4c8:	7823      	ldrb	r3, [r4, #0]
 800c4ca:	2b2e      	cmp	r3, #46	; 0x2e
 800c4cc:	d10c      	bne.n	800c4e8 <_svfiprintf_r+0x130>
 800c4ce:	7863      	ldrb	r3, [r4, #1]
 800c4d0:	2b2a      	cmp	r3, #42	; 0x2a
 800c4d2:	d134      	bne.n	800c53e <_svfiprintf_r+0x186>
 800c4d4:	9b03      	ldr	r3, [sp, #12]
 800c4d6:	3402      	adds	r4, #2
 800c4d8:	1d1a      	adds	r2, r3, #4
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	9203      	str	r2, [sp, #12]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	bfb8      	it	lt
 800c4e2:	f04f 33ff 	movlt.w	r3, #4294967295
 800c4e6:	9305      	str	r3, [sp, #20]
 800c4e8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800c5a4 <_svfiprintf_r+0x1ec>
 800c4ec:	2203      	movs	r2, #3
 800c4ee:	4650      	mov	r0, sl
 800c4f0:	7821      	ldrb	r1, [r4, #0]
 800c4f2:	f7fd fc50 	bl	8009d96 <memchr>
 800c4f6:	b138      	cbz	r0, 800c508 <_svfiprintf_r+0x150>
 800c4f8:	2240      	movs	r2, #64	; 0x40
 800c4fa:	9b04      	ldr	r3, [sp, #16]
 800c4fc:	eba0 000a 	sub.w	r0, r0, sl
 800c500:	4082      	lsls	r2, r0
 800c502:	4313      	orrs	r3, r2
 800c504:	3401      	adds	r4, #1
 800c506:	9304      	str	r3, [sp, #16]
 800c508:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c50c:	2206      	movs	r2, #6
 800c50e:	4826      	ldr	r0, [pc, #152]	; (800c5a8 <_svfiprintf_r+0x1f0>)
 800c510:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c514:	f7fd fc3f 	bl	8009d96 <memchr>
 800c518:	2800      	cmp	r0, #0
 800c51a:	d038      	beq.n	800c58e <_svfiprintf_r+0x1d6>
 800c51c:	4b23      	ldr	r3, [pc, #140]	; (800c5ac <_svfiprintf_r+0x1f4>)
 800c51e:	bb1b      	cbnz	r3, 800c568 <_svfiprintf_r+0x1b0>
 800c520:	9b03      	ldr	r3, [sp, #12]
 800c522:	3307      	adds	r3, #7
 800c524:	f023 0307 	bic.w	r3, r3, #7
 800c528:	3308      	adds	r3, #8
 800c52a:	9303      	str	r3, [sp, #12]
 800c52c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c52e:	4433      	add	r3, r6
 800c530:	9309      	str	r3, [sp, #36]	; 0x24
 800c532:	e768      	b.n	800c406 <_svfiprintf_r+0x4e>
 800c534:	460c      	mov	r4, r1
 800c536:	2001      	movs	r0, #1
 800c538:	fb0c 3202 	mla	r2, ip, r2, r3
 800c53c:	e7a6      	b.n	800c48c <_svfiprintf_r+0xd4>
 800c53e:	2300      	movs	r3, #0
 800c540:	f04f 0c0a 	mov.w	ip, #10
 800c544:	4619      	mov	r1, r3
 800c546:	3401      	adds	r4, #1
 800c548:	9305      	str	r3, [sp, #20]
 800c54a:	4620      	mov	r0, r4
 800c54c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c550:	3a30      	subs	r2, #48	; 0x30
 800c552:	2a09      	cmp	r2, #9
 800c554:	d903      	bls.n	800c55e <_svfiprintf_r+0x1a6>
 800c556:	2b00      	cmp	r3, #0
 800c558:	d0c6      	beq.n	800c4e8 <_svfiprintf_r+0x130>
 800c55a:	9105      	str	r1, [sp, #20]
 800c55c:	e7c4      	b.n	800c4e8 <_svfiprintf_r+0x130>
 800c55e:	4604      	mov	r4, r0
 800c560:	2301      	movs	r3, #1
 800c562:	fb0c 2101 	mla	r1, ip, r1, r2
 800c566:	e7f0      	b.n	800c54a <_svfiprintf_r+0x192>
 800c568:	ab03      	add	r3, sp, #12
 800c56a:	9300      	str	r3, [sp, #0]
 800c56c:	462a      	mov	r2, r5
 800c56e:	4638      	mov	r0, r7
 800c570:	4b0f      	ldr	r3, [pc, #60]	; (800c5b0 <_svfiprintf_r+0x1f8>)
 800c572:	a904      	add	r1, sp, #16
 800c574:	f7fc fc9a 	bl	8008eac <_printf_float>
 800c578:	1c42      	adds	r2, r0, #1
 800c57a:	4606      	mov	r6, r0
 800c57c:	d1d6      	bne.n	800c52c <_svfiprintf_r+0x174>
 800c57e:	89ab      	ldrh	r3, [r5, #12]
 800c580:	065b      	lsls	r3, r3, #25
 800c582:	f53f af2d 	bmi.w	800c3e0 <_svfiprintf_r+0x28>
 800c586:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c588:	b01d      	add	sp, #116	; 0x74
 800c58a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c58e:	ab03      	add	r3, sp, #12
 800c590:	9300      	str	r3, [sp, #0]
 800c592:	462a      	mov	r2, r5
 800c594:	4638      	mov	r0, r7
 800c596:	4b06      	ldr	r3, [pc, #24]	; (800c5b0 <_svfiprintf_r+0x1f8>)
 800c598:	a904      	add	r1, sp, #16
 800c59a:	f7fc ff27 	bl	80093ec <_printf_i>
 800c59e:	e7eb      	b.n	800c578 <_svfiprintf_r+0x1c0>
 800c5a0:	0800e231 	.word	0x0800e231
 800c5a4:	0800e237 	.word	0x0800e237
 800c5a8:	0800e23b 	.word	0x0800e23b
 800c5ac:	08008ead 	.word	0x08008ead
 800c5b0:	0800c305 	.word	0x0800c305

0800c5b4 <__sflush_r>:
 800c5b4:	898a      	ldrh	r2, [r1, #12]
 800c5b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5b8:	4605      	mov	r5, r0
 800c5ba:	0710      	lsls	r0, r2, #28
 800c5bc:	460c      	mov	r4, r1
 800c5be:	d457      	bmi.n	800c670 <__sflush_r+0xbc>
 800c5c0:	684b      	ldr	r3, [r1, #4]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	dc04      	bgt.n	800c5d0 <__sflush_r+0x1c>
 800c5c6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	dc01      	bgt.n	800c5d0 <__sflush_r+0x1c>
 800c5cc:	2000      	movs	r0, #0
 800c5ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c5d2:	2e00      	cmp	r6, #0
 800c5d4:	d0fa      	beq.n	800c5cc <__sflush_r+0x18>
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c5dc:	682f      	ldr	r7, [r5, #0]
 800c5de:	6a21      	ldr	r1, [r4, #32]
 800c5e0:	602b      	str	r3, [r5, #0]
 800c5e2:	d032      	beq.n	800c64a <__sflush_r+0x96>
 800c5e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c5e6:	89a3      	ldrh	r3, [r4, #12]
 800c5e8:	075a      	lsls	r2, r3, #29
 800c5ea:	d505      	bpl.n	800c5f8 <__sflush_r+0x44>
 800c5ec:	6863      	ldr	r3, [r4, #4]
 800c5ee:	1ac0      	subs	r0, r0, r3
 800c5f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c5f2:	b10b      	cbz	r3, 800c5f8 <__sflush_r+0x44>
 800c5f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c5f6:	1ac0      	subs	r0, r0, r3
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	4602      	mov	r2, r0
 800c5fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c5fe:	4628      	mov	r0, r5
 800c600:	6a21      	ldr	r1, [r4, #32]
 800c602:	47b0      	blx	r6
 800c604:	1c43      	adds	r3, r0, #1
 800c606:	89a3      	ldrh	r3, [r4, #12]
 800c608:	d106      	bne.n	800c618 <__sflush_r+0x64>
 800c60a:	6829      	ldr	r1, [r5, #0]
 800c60c:	291d      	cmp	r1, #29
 800c60e:	d82b      	bhi.n	800c668 <__sflush_r+0xb4>
 800c610:	4a28      	ldr	r2, [pc, #160]	; (800c6b4 <__sflush_r+0x100>)
 800c612:	410a      	asrs	r2, r1
 800c614:	07d6      	lsls	r6, r2, #31
 800c616:	d427      	bmi.n	800c668 <__sflush_r+0xb4>
 800c618:	2200      	movs	r2, #0
 800c61a:	6062      	str	r2, [r4, #4]
 800c61c:	6922      	ldr	r2, [r4, #16]
 800c61e:	04d9      	lsls	r1, r3, #19
 800c620:	6022      	str	r2, [r4, #0]
 800c622:	d504      	bpl.n	800c62e <__sflush_r+0x7a>
 800c624:	1c42      	adds	r2, r0, #1
 800c626:	d101      	bne.n	800c62c <__sflush_r+0x78>
 800c628:	682b      	ldr	r3, [r5, #0]
 800c62a:	b903      	cbnz	r3, 800c62e <__sflush_r+0x7a>
 800c62c:	6560      	str	r0, [r4, #84]	; 0x54
 800c62e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c630:	602f      	str	r7, [r5, #0]
 800c632:	2900      	cmp	r1, #0
 800c634:	d0ca      	beq.n	800c5cc <__sflush_r+0x18>
 800c636:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c63a:	4299      	cmp	r1, r3
 800c63c:	d002      	beq.n	800c644 <__sflush_r+0x90>
 800c63e:	4628      	mov	r0, r5
 800c640:	f7fe fa2a 	bl	800aa98 <_free_r>
 800c644:	2000      	movs	r0, #0
 800c646:	6360      	str	r0, [r4, #52]	; 0x34
 800c648:	e7c1      	b.n	800c5ce <__sflush_r+0x1a>
 800c64a:	2301      	movs	r3, #1
 800c64c:	4628      	mov	r0, r5
 800c64e:	47b0      	blx	r6
 800c650:	1c41      	adds	r1, r0, #1
 800c652:	d1c8      	bne.n	800c5e6 <__sflush_r+0x32>
 800c654:	682b      	ldr	r3, [r5, #0]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d0c5      	beq.n	800c5e6 <__sflush_r+0x32>
 800c65a:	2b1d      	cmp	r3, #29
 800c65c:	d001      	beq.n	800c662 <__sflush_r+0xae>
 800c65e:	2b16      	cmp	r3, #22
 800c660:	d101      	bne.n	800c666 <__sflush_r+0xb2>
 800c662:	602f      	str	r7, [r5, #0]
 800c664:	e7b2      	b.n	800c5cc <__sflush_r+0x18>
 800c666:	89a3      	ldrh	r3, [r4, #12]
 800c668:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c66c:	81a3      	strh	r3, [r4, #12]
 800c66e:	e7ae      	b.n	800c5ce <__sflush_r+0x1a>
 800c670:	690f      	ldr	r7, [r1, #16]
 800c672:	2f00      	cmp	r7, #0
 800c674:	d0aa      	beq.n	800c5cc <__sflush_r+0x18>
 800c676:	0793      	lsls	r3, r2, #30
 800c678:	bf18      	it	ne
 800c67a:	2300      	movne	r3, #0
 800c67c:	680e      	ldr	r6, [r1, #0]
 800c67e:	bf08      	it	eq
 800c680:	694b      	ldreq	r3, [r1, #20]
 800c682:	1bf6      	subs	r6, r6, r7
 800c684:	600f      	str	r7, [r1, #0]
 800c686:	608b      	str	r3, [r1, #8]
 800c688:	2e00      	cmp	r6, #0
 800c68a:	dd9f      	ble.n	800c5cc <__sflush_r+0x18>
 800c68c:	4633      	mov	r3, r6
 800c68e:	463a      	mov	r2, r7
 800c690:	4628      	mov	r0, r5
 800c692:	6a21      	ldr	r1, [r4, #32]
 800c694:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800c698:	47e0      	blx	ip
 800c69a:	2800      	cmp	r0, #0
 800c69c:	dc06      	bgt.n	800c6ac <__sflush_r+0xf8>
 800c69e:	89a3      	ldrh	r3, [r4, #12]
 800c6a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c6a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6a8:	81a3      	strh	r3, [r4, #12]
 800c6aa:	e790      	b.n	800c5ce <__sflush_r+0x1a>
 800c6ac:	4407      	add	r7, r0
 800c6ae:	1a36      	subs	r6, r6, r0
 800c6b0:	e7ea      	b.n	800c688 <__sflush_r+0xd4>
 800c6b2:	bf00      	nop
 800c6b4:	dfbffffe 	.word	0xdfbffffe

0800c6b8 <_fflush_r>:
 800c6b8:	b538      	push	{r3, r4, r5, lr}
 800c6ba:	690b      	ldr	r3, [r1, #16]
 800c6bc:	4605      	mov	r5, r0
 800c6be:	460c      	mov	r4, r1
 800c6c0:	b913      	cbnz	r3, 800c6c8 <_fflush_r+0x10>
 800c6c2:	2500      	movs	r5, #0
 800c6c4:	4628      	mov	r0, r5
 800c6c6:	bd38      	pop	{r3, r4, r5, pc}
 800c6c8:	b118      	cbz	r0, 800c6d2 <_fflush_r+0x1a>
 800c6ca:	6a03      	ldr	r3, [r0, #32]
 800c6cc:	b90b      	cbnz	r3, 800c6d2 <_fflush_r+0x1a>
 800c6ce:	f7fd fa49 	bl	8009b64 <__sinit>
 800c6d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d0f3      	beq.n	800c6c2 <_fflush_r+0xa>
 800c6da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c6dc:	07d0      	lsls	r0, r2, #31
 800c6de:	d404      	bmi.n	800c6ea <_fflush_r+0x32>
 800c6e0:	0599      	lsls	r1, r3, #22
 800c6e2:	d402      	bmi.n	800c6ea <_fflush_r+0x32>
 800c6e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c6e6:	f7fd fb54 	bl	8009d92 <__retarget_lock_acquire_recursive>
 800c6ea:	4628      	mov	r0, r5
 800c6ec:	4621      	mov	r1, r4
 800c6ee:	f7ff ff61 	bl	800c5b4 <__sflush_r>
 800c6f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c6f4:	4605      	mov	r5, r0
 800c6f6:	07da      	lsls	r2, r3, #31
 800c6f8:	d4e4      	bmi.n	800c6c4 <_fflush_r+0xc>
 800c6fa:	89a3      	ldrh	r3, [r4, #12]
 800c6fc:	059b      	lsls	r3, r3, #22
 800c6fe:	d4e1      	bmi.n	800c6c4 <_fflush_r+0xc>
 800c700:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c702:	f7fd fb47 	bl	8009d94 <__retarget_lock_release_recursive>
 800c706:	e7dd      	b.n	800c6c4 <_fflush_r+0xc>

0800c708 <memmove>:
 800c708:	4288      	cmp	r0, r1
 800c70a:	b510      	push	{r4, lr}
 800c70c:	eb01 0402 	add.w	r4, r1, r2
 800c710:	d902      	bls.n	800c718 <memmove+0x10>
 800c712:	4284      	cmp	r4, r0
 800c714:	4623      	mov	r3, r4
 800c716:	d807      	bhi.n	800c728 <memmove+0x20>
 800c718:	1e43      	subs	r3, r0, #1
 800c71a:	42a1      	cmp	r1, r4
 800c71c:	d008      	beq.n	800c730 <memmove+0x28>
 800c71e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c722:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c726:	e7f8      	b.n	800c71a <memmove+0x12>
 800c728:	4601      	mov	r1, r0
 800c72a:	4402      	add	r2, r0
 800c72c:	428a      	cmp	r2, r1
 800c72e:	d100      	bne.n	800c732 <memmove+0x2a>
 800c730:	bd10      	pop	{r4, pc}
 800c732:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c736:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c73a:	e7f7      	b.n	800c72c <memmove+0x24>

0800c73c <strncmp>:
 800c73c:	b510      	push	{r4, lr}
 800c73e:	b16a      	cbz	r2, 800c75c <strncmp+0x20>
 800c740:	3901      	subs	r1, #1
 800c742:	1884      	adds	r4, r0, r2
 800c744:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c748:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c74c:	429a      	cmp	r2, r3
 800c74e:	d103      	bne.n	800c758 <strncmp+0x1c>
 800c750:	42a0      	cmp	r0, r4
 800c752:	d001      	beq.n	800c758 <strncmp+0x1c>
 800c754:	2a00      	cmp	r2, #0
 800c756:	d1f5      	bne.n	800c744 <strncmp+0x8>
 800c758:	1ad0      	subs	r0, r2, r3
 800c75a:	bd10      	pop	{r4, pc}
 800c75c:	4610      	mov	r0, r2
 800c75e:	e7fc      	b.n	800c75a <strncmp+0x1e>

0800c760 <_sbrk_r>:
 800c760:	b538      	push	{r3, r4, r5, lr}
 800c762:	2300      	movs	r3, #0
 800c764:	4d05      	ldr	r5, [pc, #20]	; (800c77c <_sbrk_r+0x1c>)
 800c766:	4604      	mov	r4, r0
 800c768:	4608      	mov	r0, r1
 800c76a:	602b      	str	r3, [r5, #0]
 800c76c:	f7f8 fa40 	bl	8004bf0 <_sbrk>
 800c770:	1c43      	adds	r3, r0, #1
 800c772:	d102      	bne.n	800c77a <_sbrk_r+0x1a>
 800c774:	682b      	ldr	r3, [r5, #0]
 800c776:	b103      	cbz	r3, 800c77a <_sbrk_r+0x1a>
 800c778:	6023      	str	r3, [r4, #0]
 800c77a:	bd38      	pop	{r3, r4, r5, pc}
 800c77c:	20000894 	.word	0x20000894

0800c780 <memcpy>:
 800c780:	440a      	add	r2, r1
 800c782:	4291      	cmp	r1, r2
 800c784:	f100 33ff 	add.w	r3, r0, #4294967295
 800c788:	d100      	bne.n	800c78c <memcpy+0xc>
 800c78a:	4770      	bx	lr
 800c78c:	b510      	push	{r4, lr}
 800c78e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c792:	4291      	cmp	r1, r2
 800c794:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c798:	d1f9      	bne.n	800c78e <memcpy+0xe>
 800c79a:	bd10      	pop	{r4, pc}

0800c79c <nan>:
 800c79c:	2000      	movs	r0, #0
 800c79e:	4901      	ldr	r1, [pc, #4]	; (800c7a4 <nan+0x8>)
 800c7a0:	4770      	bx	lr
 800c7a2:	bf00      	nop
 800c7a4:	7ff80000 	.word	0x7ff80000

0800c7a8 <__assert_func>:
 800c7a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c7aa:	4614      	mov	r4, r2
 800c7ac:	461a      	mov	r2, r3
 800c7ae:	4b09      	ldr	r3, [pc, #36]	; (800c7d4 <__assert_func+0x2c>)
 800c7b0:	4605      	mov	r5, r0
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	68d8      	ldr	r0, [r3, #12]
 800c7b6:	b14c      	cbz	r4, 800c7cc <__assert_func+0x24>
 800c7b8:	4b07      	ldr	r3, [pc, #28]	; (800c7d8 <__assert_func+0x30>)
 800c7ba:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c7be:	9100      	str	r1, [sp, #0]
 800c7c0:	462b      	mov	r3, r5
 800c7c2:	4906      	ldr	r1, [pc, #24]	; (800c7dc <__assert_func+0x34>)
 800c7c4:	f000 fbca 	bl	800cf5c <fiprintf>
 800c7c8:	f000 fbda 	bl	800cf80 <abort>
 800c7cc:	4b04      	ldr	r3, [pc, #16]	; (800c7e0 <__assert_func+0x38>)
 800c7ce:	461c      	mov	r4, r3
 800c7d0:	e7f3      	b.n	800c7ba <__assert_func+0x12>
 800c7d2:	bf00      	nop
 800c7d4:	200000b0 	.word	0x200000b0
 800c7d8:	0800e24a 	.word	0x0800e24a
 800c7dc:	0800e257 	.word	0x0800e257
 800c7e0:	0800e285 	.word	0x0800e285

0800c7e4 <_calloc_r>:
 800c7e4:	b570      	push	{r4, r5, r6, lr}
 800c7e6:	fba1 5402 	umull	r5, r4, r1, r2
 800c7ea:	b934      	cbnz	r4, 800c7fa <_calloc_r+0x16>
 800c7ec:	4629      	mov	r1, r5
 800c7ee:	f7fe f9c3 	bl	800ab78 <_malloc_r>
 800c7f2:	4606      	mov	r6, r0
 800c7f4:	b928      	cbnz	r0, 800c802 <_calloc_r+0x1e>
 800c7f6:	4630      	mov	r0, r6
 800c7f8:	bd70      	pop	{r4, r5, r6, pc}
 800c7fa:	220c      	movs	r2, #12
 800c7fc:	2600      	movs	r6, #0
 800c7fe:	6002      	str	r2, [r0, #0]
 800c800:	e7f9      	b.n	800c7f6 <_calloc_r+0x12>
 800c802:	462a      	mov	r2, r5
 800c804:	4621      	mov	r1, r4
 800c806:	f7fd fa46 	bl	8009c96 <memset>
 800c80a:	e7f4      	b.n	800c7f6 <_calloc_r+0x12>

0800c80c <rshift>:
 800c80c:	6903      	ldr	r3, [r0, #16]
 800c80e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c812:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c816:	f100 0414 	add.w	r4, r0, #20
 800c81a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c81e:	dd46      	ble.n	800c8ae <rshift+0xa2>
 800c820:	f011 011f 	ands.w	r1, r1, #31
 800c824:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c828:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c82c:	d10c      	bne.n	800c848 <rshift+0x3c>
 800c82e:	4629      	mov	r1, r5
 800c830:	f100 0710 	add.w	r7, r0, #16
 800c834:	42b1      	cmp	r1, r6
 800c836:	d335      	bcc.n	800c8a4 <rshift+0x98>
 800c838:	1a9b      	subs	r3, r3, r2
 800c83a:	009b      	lsls	r3, r3, #2
 800c83c:	1eea      	subs	r2, r5, #3
 800c83e:	4296      	cmp	r6, r2
 800c840:	bf38      	it	cc
 800c842:	2300      	movcc	r3, #0
 800c844:	4423      	add	r3, r4
 800c846:	e015      	b.n	800c874 <rshift+0x68>
 800c848:	46a1      	mov	r9, r4
 800c84a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c84e:	f1c1 0820 	rsb	r8, r1, #32
 800c852:	40cf      	lsrs	r7, r1
 800c854:	f105 0e04 	add.w	lr, r5, #4
 800c858:	4576      	cmp	r6, lr
 800c85a:	46f4      	mov	ip, lr
 800c85c:	d816      	bhi.n	800c88c <rshift+0x80>
 800c85e:	1a9a      	subs	r2, r3, r2
 800c860:	0092      	lsls	r2, r2, #2
 800c862:	3a04      	subs	r2, #4
 800c864:	3501      	adds	r5, #1
 800c866:	42ae      	cmp	r6, r5
 800c868:	bf38      	it	cc
 800c86a:	2200      	movcc	r2, #0
 800c86c:	18a3      	adds	r3, r4, r2
 800c86e:	50a7      	str	r7, [r4, r2]
 800c870:	b107      	cbz	r7, 800c874 <rshift+0x68>
 800c872:	3304      	adds	r3, #4
 800c874:	42a3      	cmp	r3, r4
 800c876:	eba3 0204 	sub.w	r2, r3, r4
 800c87a:	bf08      	it	eq
 800c87c:	2300      	moveq	r3, #0
 800c87e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c882:	6102      	str	r2, [r0, #16]
 800c884:	bf08      	it	eq
 800c886:	6143      	streq	r3, [r0, #20]
 800c888:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c88c:	f8dc c000 	ldr.w	ip, [ip]
 800c890:	fa0c fc08 	lsl.w	ip, ip, r8
 800c894:	ea4c 0707 	orr.w	r7, ip, r7
 800c898:	f849 7b04 	str.w	r7, [r9], #4
 800c89c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c8a0:	40cf      	lsrs	r7, r1
 800c8a2:	e7d9      	b.n	800c858 <rshift+0x4c>
 800c8a4:	f851 cb04 	ldr.w	ip, [r1], #4
 800c8a8:	f847 cf04 	str.w	ip, [r7, #4]!
 800c8ac:	e7c2      	b.n	800c834 <rshift+0x28>
 800c8ae:	4623      	mov	r3, r4
 800c8b0:	e7e0      	b.n	800c874 <rshift+0x68>

0800c8b2 <__hexdig_fun>:
 800c8b2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c8b6:	2b09      	cmp	r3, #9
 800c8b8:	d802      	bhi.n	800c8c0 <__hexdig_fun+0xe>
 800c8ba:	3820      	subs	r0, #32
 800c8bc:	b2c0      	uxtb	r0, r0
 800c8be:	4770      	bx	lr
 800c8c0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c8c4:	2b05      	cmp	r3, #5
 800c8c6:	d801      	bhi.n	800c8cc <__hexdig_fun+0x1a>
 800c8c8:	3847      	subs	r0, #71	; 0x47
 800c8ca:	e7f7      	b.n	800c8bc <__hexdig_fun+0xa>
 800c8cc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c8d0:	2b05      	cmp	r3, #5
 800c8d2:	d801      	bhi.n	800c8d8 <__hexdig_fun+0x26>
 800c8d4:	3827      	subs	r0, #39	; 0x27
 800c8d6:	e7f1      	b.n	800c8bc <__hexdig_fun+0xa>
 800c8d8:	2000      	movs	r0, #0
 800c8da:	4770      	bx	lr

0800c8dc <__gethex>:
 800c8dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8e0:	4681      	mov	r9, r0
 800c8e2:	468a      	mov	sl, r1
 800c8e4:	4617      	mov	r7, r2
 800c8e6:	680a      	ldr	r2, [r1, #0]
 800c8e8:	b085      	sub	sp, #20
 800c8ea:	f102 0b02 	add.w	fp, r2, #2
 800c8ee:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c8f2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c8f6:	9302      	str	r3, [sp, #8]
 800c8f8:	32fe      	adds	r2, #254	; 0xfe
 800c8fa:	eb02 030b 	add.w	r3, r2, fp
 800c8fe:	46d8      	mov	r8, fp
 800c900:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800c904:	9301      	str	r3, [sp, #4]
 800c906:	2830      	cmp	r0, #48	; 0x30
 800c908:	d0f7      	beq.n	800c8fa <__gethex+0x1e>
 800c90a:	f7ff ffd2 	bl	800c8b2 <__hexdig_fun>
 800c90e:	4604      	mov	r4, r0
 800c910:	2800      	cmp	r0, #0
 800c912:	d138      	bne.n	800c986 <__gethex+0xaa>
 800c914:	2201      	movs	r2, #1
 800c916:	4640      	mov	r0, r8
 800c918:	49a7      	ldr	r1, [pc, #668]	; (800cbb8 <__gethex+0x2dc>)
 800c91a:	f7ff ff0f 	bl	800c73c <strncmp>
 800c91e:	4606      	mov	r6, r0
 800c920:	2800      	cmp	r0, #0
 800c922:	d169      	bne.n	800c9f8 <__gethex+0x11c>
 800c924:	f898 0001 	ldrb.w	r0, [r8, #1]
 800c928:	465d      	mov	r5, fp
 800c92a:	f7ff ffc2 	bl	800c8b2 <__hexdig_fun>
 800c92e:	2800      	cmp	r0, #0
 800c930:	d064      	beq.n	800c9fc <__gethex+0x120>
 800c932:	465a      	mov	r2, fp
 800c934:	7810      	ldrb	r0, [r2, #0]
 800c936:	4690      	mov	r8, r2
 800c938:	2830      	cmp	r0, #48	; 0x30
 800c93a:	f102 0201 	add.w	r2, r2, #1
 800c93e:	d0f9      	beq.n	800c934 <__gethex+0x58>
 800c940:	f7ff ffb7 	bl	800c8b2 <__hexdig_fun>
 800c944:	2301      	movs	r3, #1
 800c946:	fab0 f480 	clz	r4, r0
 800c94a:	465e      	mov	r6, fp
 800c94c:	0964      	lsrs	r4, r4, #5
 800c94e:	9301      	str	r3, [sp, #4]
 800c950:	4642      	mov	r2, r8
 800c952:	4615      	mov	r5, r2
 800c954:	7828      	ldrb	r0, [r5, #0]
 800c956:	3201      	adds	r2, #1
 800c958:	f7ff ffab 	bl	800c8b2 <__hexdig_fun>
 800c95c:	2800      	cmp	r0, #0
 800c95e:	d1f8      	bne.n	800c952 <__gethex+0x76>
 800c960:	2201      	movs	r2, #1
 800c962:	4628      	mov	r0, r5
 800c964:	4994      	ldr	r1, [pc, #592]	; (800cbb8 <__gethex+0x2dc>)
 800c966:	f7ff fee9 	bl	800c73c <strncmp>
 800c96a:	b978      	cbnz	r0, 800c98c <__gethex+0xb0>
 800c96c:	b946      	cbnz	r6, 800c980 <__gethex+0xa4>
 800c96e:	1c6e      	adds	r6, r5, #1
 800c970:	4632      	mov	r2, r6
 800c972:	4615      	mov	r5, r2
 800c974:	7828      	ldrb	r0, [r5, #0]
 800c976:	3201      	adds	r2, #1
 800c978:	f7ff ff9b 	bl	800c8b2 <__hexdig_fun>
 800c97c:	2800      	cmp	r0, #0
 800c97e:	d1f8      	bne.n	800c972 <__gethex+0x96>
 800c980:	1b73      	subs	r3, r6, r5
 800c982:	009e      	lsls	r6, r3, #2
 800c984:	e004      	b.n	800c990 <__gethex+0xb4>
 800c986:	2400      	movs	r4, #0
 800c988:	4626      	mov	r6, r4
 800c98a:	e7e1      	b.n	800c950 <__gethex+0x74>
 800c98c:	2e00      	cmp	r6, #0
 800c98e:	d1f7      	bne.n	800c980 <__gethex+0xa4>
 800c990:	782b      	ldrb	r3, [r5, #0]
 800c992:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c996:	2b50      	cmp	r3, #80	; 0x50
 800c998:	d13d      	bne.n	800ca16 <__gethex+0x13a>
 800c99a:	786b      	ldrb	r3, [r5, #1]
 800c99c:	2b2b      	cmp	r3, #43	; 0x2b
 800c99e:	d02f      	beq.n	800ca00 <__gethex+0x124>
 800c9a0:	2b2d      	cmp	r3, #45	; 0x2d
 800c9a2:	d031      	beq.n	800ca08 <__gethex+0x12c>
 800c9a4:	f04f 0b00 	mov.w	fp, #0
 800c9a8:	1c69      	adds	r1, r5, #1
 800c9aa:	7808      	ldrb	r0, [r1, #0]
 800c9ac:	f7ff ff81 	bl	800c8b2 <__hexdig_fun>
 800c9b0:	1e42      	subs	r2, r0, #1
 800c9b2:	b2d2      	uxtb	r2, r2
 800c9b4:	2a18      	cmp	r2, #24
 800c9b6:	d82e      	bhi.n	800ca16 <__gethex+0x13a>
 800c9b8:	f1a0 0210 	sub.w	r2, r0, #16
 800c9bc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c9c0:	f7ff ff77 	bl	800c8b2 <__hexdig_fun>
 800c9c4:	f100 3cff 	add.w	ip, r0, #4294967295
 800c9c8:	fa5f fc8c 	uxtb.w	ip, ip
 800c9cc:	f1bc 0f18 	cmp.w	ip, #24
 800c9d0:	d91d      	bls.n	800ca0e <__gethex+0x132>
 800c9d2:	f1bb 0f00 	cmp.w	fp, #0
 800c9d6:	d000      	beq.n	800c9da <__gethex+0xfe>
 800c9d8:	4252      	negs	r2, r2
 800c9da:	4416      	add	r6, r2
 800c9dc:	f8ca 1000 	str.w	r1, [sl]
 800c9e0:	b1dc      	cbz	r4, 800ca1a <__gethex+0x13e>
 800c9e2:	9b01      	ldr	r3, [sp, #4]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	bf14      	ite	ne
 800c9e8:	f04f 0800 	movne.w	r8, #0
 800c9ec:	f04f 0806 	moveq.w	r8, #6
 800c9f0:	4640      	mov	r0, r8
 800c9f2:	b005      	add	sp, #20
 800c9f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9f8:	4645      	mov	r5, r8
 800c9fa:	4626      	mov	r6, r4
 800c9fc:	2401      	movs	r4, #1
 800c9fe:	e7c7      	b.n	800c990 <__gethex+0xb4>
 800ca00:	f04f 0b00 	mov.w	fp, #0
 800ca04:	1ca9      	adds	r1, r5, #2
 800ca06:	e7d0      	b.n	800c9aa <__gethex+0xce>
 800ca08:	f04f 0b01 	mov.w	fp, #1
 800ca0c:	e7fa      	b.n	800ca04 <__gethex+0x128>
 800ca0e:	230a      	movs	r3, #10
 800ca10:	fb03 0002 	mla	r0, r3, r2, r0
 800ca14:	e7d0      	b.n	800c9b8 <__gethex+0xdc>
 800ca16:	4629      	mov	r1, r5
 800ca18:	e7e0      	b.n	800c9dc <__gethex+0x100>
 800ca1a:	4621      	mov	r1, r4
 800ca1c:	eba5 0308 	sub.w	r3, r5, r8
 800ca20:	3b01      	subs	r3, #1
 800ca22:	2b07      	cmp	r3, #7
 800ca24:	dc0a      	bgt.n	800ca3c <__gethex+0x160>
 800ca26:	4648      	mov	r0, r9
 800ca28:	f7fe f932 	bl	800ac90 <_Balloc>
 800ca2c:	4604      	mov	r4, r0
 800ca2e:	b940      	cbnz	r0, 800ca42 <__gethex+0x166>
 800ca30:	4602      	mov	r2, r0
 800ca32:	21e4      	movs	r1, #228	; 0xe4
 800ca34:	4b61      	ldr	r3, [pc, #388]	; (800cbbc <__gethex+0x2e0>)
 800ca36:	4862      	ldr	r0, [pc, #392]	; (800cbc0 <__gethex+0x2e4>)
 800ca38:	f7ff feb6 	bl	800c7a8 <__assert_func>
 800ca3c:	3101      	adds	r1, #1
 800ca3e:	105b      	asrs	r3, r3, #1
 800ca40:	e7ef      	b.n	800ca22 <__gethex+0x146>
 800ca42:	2300      	movs	r3, #0
 800ca44:	469b      	mov	fp, r3
 800ca46:	f100 0a14 	add.w	sl, r0, #20
 800ca4a:	f8cd a004 	str.w	sl, [sp, #4]
 800ca4e:	45a8      	cmp	r8, r5
 800ca50:	d344      	bcc.n	800cadc <__gethex+0x200>
 800ca52:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ca56:	4658      	mov	r0, fp
 800ca58:	f848 bb04 	str.w	fp, [r8], #4
 800ca5c:	eba8 080a 	sub.w	r8, r8, sl
 800ca60:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800ca64:	6122      	str	r2, [r4, #16]
 800ca66:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800ca6a:	f7fe fa03 	bl	800ae74 <__hi0bits>
 800ca6e:	683d      	ldr	r5, [r7, #0]
 800ca70:	eba8 0800 	sub.w	r8, r8, r0
 800ca74:	45a8      	cmp	r8, r5
 800ca76:	dd59      	ble.n	800cb2c <__gethex+0x250>
 800ca78:	eba8 0805 	sub.w	r8, r8, r5
 800ca7c:	4641      	mov	r1, r8
 800ca7e:	4620      	mov	r0, r4
 800ca80:	f7fe fd81 	bl	800b586 <__any_on>
 800ca84:	4683      	mov	fp, r0
 800ca86:	b1b8      	cbz	r0, 800cab8 <__gethex+0x1dc>
 800ca88:	f04f 0b01 	mov.w	fp, #1
 800ca8c:	f108 33ff 	add.w	r3, r8, #4294967295
 800ca90:	1159      	asrs	r1, r3, #5
 800ca92:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ca96:	f003 021f 	and.w	r2, r3, #31
 800ca9a:	fa0b f202 	lsl.w	r2, fp, r2
 800ca9e:	420a      	tst	r2, r1
 800caa0:	d00a      	beq.n	800cab8 <__gethex+0x1dc>
 800caa2:	455b      	cmp	r3, fp
 800caa4:	dd06      	ble.n	800cab4 <__gethex+0x1d8>
 800caa6:	4620      	mov	r0, r4
 800caa8:	f1a8 0102 	sub.w	r1, r8, #2
 800caac:	f7fe fd6b 	bl	800b586 <__any_on>
 800cab0:	2800      	cmp	r0, #0
 800cab2:	d138      	bne.n	800cb26 <__gethex+0x24a>
 800cab4:	f04f 0b02 	mov.w	fp, #2
 800cab8:	4641      	mov	r1, r8
 800caba:	4620      	mov	r0, r4
 800cabc:	f7ff fea6 	bl	800c80c <rshift>
 800cac0:	4446      	add	r6, r8
 800cac2:	68bb      	ldr	r3, [r7, #8]
 800cac4:	42b3      	cmp	r3, r6
 800cac6:	da41      	bge.n	800cb4c <__gethex+0x270>
 800cac8:	4621      	mov	r1, r4
 800caca:	4648      	mov	r0, r9
 800cacc:	f7fe f920 	bl	800ad10 <_Bfree>
 800cad0:	2300      	movs	r3, #0
 800cad2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cad4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800cad8:	6013      	str	r3, [r2, #0]
 800cada:	e789      	b.n	800c9f0 <__gethex+0x114>
 800cadc:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800cae0:	2a2e      	cmp	r2, #46	; 0x2e
 800cae2:	d014      	beq.n	800cb0e <__gethex+0x232>
 800cae4:	2b20      	cmp	r3, #32
 800cae6:	d106      	bne.n	800caf6 <__gethex+0x21a>
 800cae8:	9b01      	ldr	r3, [sp, #4]
 800caea:	f843 bb04 	str.w	fp, [r3], #4
 800caee:	f04f 0b00 	mov.w	fp, #0
 800caf2:	9301      	str	r3, [sp, #4]
 800caf4:	465b      	mov	r3, fp
 800caf6:	7828      	ldrb	r0, [r5, #0]
 800caf8:	9303      	str	r3, [sp, #12]
 800cafa:	f7ff feda 	bl	800c8b2 <__hexdig_fun>
 800cafe:	9b03      	ldr	r3, [sp, #12]
 800cb00:	f000 000f 	and.w	r0, r0, #15
 800cb04:	4098      	lsls	r0, r3
 800cb06:	ea4b 0b00 	orr.w	fp, fp, r0
 800cb0a:	3304      	adds	r3, #4
 800cb0c:	e79f      	b.n	800ca4e <__gethex+0x172>
 800cb0e:	45a8      	cmp	r8, r5
 800cb10:	d8e8      	bhi.n	800cae4 <__gethex+0x208>
 800cb12:	2201      	movs	r2, #1
 800cb14:	4628      	mov	r0, r5
 800cb16:	4928      	ldr	r1, [pc, #160]	; (800cbb8 <__gethex+0x2dc>)
 800cb18:	9303      	str	r3, [sp, #12]
 800cb1a:	f7ff fe0f 	bl	800c73c <strncmp>
 800cb1e:	9b03      	ldr	r3, [sp, #12]
 800cb20:	2800      	cmp	r0, #0
 800cb22:	d1df      	bne.n	800cae4 <__gethex+0x208>
 800cb24:	e793      	b.n	800ca4e <__gethex+0x172>
 800cb26:	f04f 0b03 	mov.w	fp, #3
 800cb2a:	e7c5      	b.n	800cab8 <__gethex+0x1dc>
 800cb2c:	da0b      	bge.n	800cb46 <__gethex+0x26a>
 800cb2e:	eba5 0808 	sub.w	r8, r5, r8
 800cb32:	4621      	mov	r1, r4
 800cb34:	4642      	mov	r2, r8
 800cb36:	4648      	mov	r0, r9
 800cb38:	f7fe fb02 	bl	800b140 <__lshift>
 800cb3c:	4604      	mov	r4, r0
 800cb3e:	eba6 0608 	sub.w	r6, r6, r8
 800cb42:	f100 0a14 	add.w	sl, r0, #20
 800cb46:	f04f 0b00 	mov.w	fp, #0
 800cb4a:	e7ba      	b.n	800cac2 <__gethex+0x1e6>
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	42b3      	cmp	r3, r6
 800cb50:	dd74      	ble.n	800cc3c <__gethex+0x360>
 800cb52:	1b9e      	subs	r6, r3, r6
 800cb54:	42b5      	cmp	r5, r6
 800cb56:	dc35      	bgt.n	800cbc4 <__gethex+0x2e8>
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	2b02      	cmp	r3, #2
 800cb5c:	d023      	beq.n	800cba6 <__gethex+0x2ca>
 800cb5e:	2b03      	cmp	r3, #3
 800cb60:	d025      	beq.n	800cbae <__gethex+0x2d2>
 800cb62:	2b01      	cmp	r3, #1
 800cb64:	d115      	bne.n	800cb92 <__gethex+0x2b6>
 800cb66:	42b5      	cmp	r5, r6
 800cb68:	d113      	bne.n	800cb92 <__gethex+0x2b6>
 800cb6a:	2d01      	cmp	r5, #1
 800cb6c:	d10b      	bne.n	800cb86 <__gethex+0x2aa>
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	9a02      	ldr	r2, [sp, #8]
 800cb72:	f04f 0862 	mov.w	r8, #98	; 0x62
 800cb76:	6013      	str	r3, [r2, #0]
 800cb78:	2301      	movs	r3, #1
 800cb7a:	6123      	str	r3, [r4, #16]
 800cb7c:	f8ca 3000 	str.w	r3, [sl]
 800cb80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cb82:	601c      	str	r4, [r3, #0]
 800cb84:	e734      	b.n	800c9f0 <__gethex+0x114>
 800cb86:	4620      	mov	r0, r4
 800cb88:	1e69      	subs	r1, r5, #1
 800cb8a:	f7fe fcfc 	bl	800b586 <__any_on>
 800cb8e:	2800      	cmp	r0, #0
 800cb90:	d1ed      	bne.n	800cb6e <__gethex+0x292>
 800cb92:	4621      	mov	r1, r4
 800cb94:	4648      	mov	r0, r9
 800cb96:	f7fe f8bb 	bl	800ad10 <_Bfree>
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cb9e:	f04f 0850 	mov.w	r8, #80	; 0x50
 800cba2:	6013      	str	r3, [r2, #0]
 800cba4:	e724      	b.n	800c9f0 <__gethex+0x114>
 800cba6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d1f2      	bne.n	800cb92 <__gethex+0x2b6>
 800cbac:	e7df      	b.n	800cb6e <__gethex+0x292>
 800cbae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d1dc      	bne.n	800cb6e <__gethex+0x292>
 800cbb4:	e7ed      	b.n	800cb92 <__gethex+0x2b6>
 800cbb6:	bf00      	nop
 800cbb8:	0800e0dc 	.word	0x0800e0dc
 800cbbc:	0800df73 	.word	0x0800df73
 800cbc0:	0800e286 	.word	0x0800e286
 800cbc4:	f106 38ff 	add.w	r8, r6, #4294967295
 800cbc8:	f1bb 0f00 	cmp.w	fp, #0
 800cbcc:	d133      	bne.n	800cc36 <__gethex+0x35a>
 800cbce:	f1b8 0f00 	cmp.w	r8, #0
 800cbd2:	d004      	beq.n	800cbde <__gethex+0x302>
 800cbd4:	4641      	mov	r1, r8
 800cbd6:	4620      	mov	r0, r4
 800cbd8:	f7fe fcd5 	bl	800b586 <__any_on>
 800cbdc:	4683      	mov	fp, r0
 800cbde:	2301      	movs	r3, #1
 800cbe0:	ea4f 1268 	mov.w	r2, r8, asr #5
 800cbe4:	f008 081f 	and.w	r8, r8, #31
 800cbe8:	fa03 f308 	lsl.w	r3, r3, r8
 800cbec:	f04f 0802 	mov.w	r8, #2
 800cbf0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800cbf4:	4631      	mov	r1, r6
 800cbf6:	4213      	tst	r3, r2
 800cbf8:	4620      	mov	r0, r4
 800cbfa:	bf18      	it	ne
 800cbfc:	f04b 0b02 	orrne.w	fp, fp, #2
 800cc00:	1bad      	subs	r5, r5, r6
 800cc02:	f7ff fe03 	bl	800c80c <rshift>
 800cc06:	687e      	ldr	r6, [r7, #4]
 800cc08:	f1bb 0f00 	cmp.w	fp, #0
 800cc0c:	d04a      	beq.n	800cca4 <__gethex+0x3c8>
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	2b02      	cmp	r3, #2
 800cc12:	d016      	beq.n	800cc42 <__gethex+0x366>
 800cc14:	2b03      	cmp	r3, #3
 800cc16:	d018      	beq.n	800cc4a <__gethex+0x36e>
 800cc18:	2b01      	cmp	r3, #1
 800cc1a:	d109      	bne.n	800cc30 <__gethex+0x354>
 800cc1c:	f01b 0f02 	tst.w	fp, #2
 800cc20:	d006      	beq.n	800cc30 <__gethex+0x354>
 800cc22:	f8da 3000 	ldr.w	r3, [sl]
 800cc26:	ea4b 0b03 	orr.w	fp, fp, r3
 800cc2a:	f01b 0f01 	tst.w	fp, #1
 800cc2e:	d10f      	bne.n	800cc50 <__gethex+0x374>
 800cc30:	f048 0810 	orr.w	r8, r8, #16
 800cc34:	e036      	b.n	800cca4 <__gethex+0x3c8>
 800cc36:	f04f 0b01 	mov.w	fp, #1
 800cc3a:	e7d0      	b.n	800cbde <__gethex+0x302>
 800cc3c:	f04f 0801 	mov.w	r8, #1
 800cc40:	e7e2      	b.n	800cc08 <__gethex+0x32c>
 800cc42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cc44:	f1c3 0301 	rsb	r3, r3, #1
 800cc48:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d0ef      	beq.n	800cc30 <__gethex+0x354>
 800cc50:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cc54:	f104 0214 	add.w	r2, r4, #20
 800cc58:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800cc5c:	9301      	str	r3, [sp, #4]
 800cc5e:	2300      	movs	r3, #0
 800cc60:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800cc64:	4694      	mov	ip, r2
 800cc66:	f852 1b04 	ldr.w	r1, [r2], #4
 800cc6a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800cc6e:	d01e      	beq.n	800ccae <__gethex+0x3d2>
 800cc70:	3101      	adds	r1, #1
 800cc72:	f8cc 1000 	str.w	r1, [ip]
 800cc76:	f1b8 0f02 	cmp.w	r8, #2
 800cc7a:	f104 0214 	add.w	r2, r4, #20
 800cc7e:	d13d      	bne.n	800ccfc <__gethex+0x420>
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	3b01      	subs	r3, #1
 800cc84:	42ab      	cmp	r3, r5
 800cc86:	d10b      	bne.n	800cca0 <__gethex+0x3c4>
 800cc88:	2301      	movs	r3, #1
 800cc8a:	1169      	asrs	r1, r5, #5
 800cc8c:	f005 051f 	and.w	r5, r5, #31
 800cc90:	fa03 f505 	lsl.w	r5, r3, r5
 800cc94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cc98:	421d      	tst	r5, r3
 800cc9a:	bf18      	it	ne
 800cc9c:	f04f 0801 	movne.w	r8, #1
 800cca0:	f048 0820 	orr.w	r8, r8, #32
 800cca4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cca6:	601c      	str	r4, [r3, #0]
 800cca8:	9b02      	ldr	r3, [sp, #8]
 800ccaa:	601e      	str	r6, [r3, #0]
 800ccac:	e6a0      	b.n	800c9f0 <__gethex+0x114>
 800ccae:	4290      	cmp	r0, r2
 800ccb0:	f842 3c04 	str.w	r3, [r2, #-4]
 800ccb4:	d8d6      	bhi.n	800cc64 <__gethex+0x388>
 800ccb6:	68a2      	ldr	r2, [r4, #8]
 800ccb8:	4593      	cmp	fp, r2
 800ccba:	db17      	blt.n	800ccec <__gethex+0x410>
 800ccbc:	6861      	ldr	r1, [r4, #4]
 800ccbe:	4648      	mov	r0, r9
 800ccc0:	3101      	adds	r1, #1
 800ccc2:	f7fd ffe5 	bl	800ac90 <_Balloc>
 800ccc6:	4682      	mov	sl, r0
 800ccc8:	b918      	cbnz	r0, 800ccd2 <__gethex+0x3f6>
 800ccca:	4602      	mov	r2, r0
 800cccc:	2184      	movs	r1, #132	; 0x84
 800ccce:	4b1a      	ldr	r3, [pc, #104]	; (800cd38 <__gethex+0x45c>)
 800ccd0:	e6b1      	b.n	800ca36 <__gethex+0x15a>
 800ccd2:	6922      	ldr	r2, [r4, #16]
 800ccd4:	f104 010c 	add.w	r1, r4, #12
 800ccd8:	3202      	adds	r2, #2
 800ccda:	0092      	lsls	r2, r2, #2
 800ccdc:	300c      	adds	r0, #12
 800ccde:	f7ff fd4f 	bl	800c780 <memcpy>
 800cce2:	4621      	mov	r1, r4
 800cce4:	4648      	mov	r0, r9
 800cce6:	f7fe f813 	bl	800ad10 <_Bfree>
 800ccea:	4654      	mov	r4, sl
 800ccec:	6922      	ldr	r2, [r4, #16]
 800ccee:	1c51      	adds	r1, r2, #1
 800ccf0:	6121      	str	r1, [r4, #16]
 800ccf2:	2101      	movs	r1, #1
 800ccf4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ccf8:	6151      	str	r1, [r2, #20]
 800ccfa:	e7bc      	b.n	800cc76 <__gethex+0x39a>
 800ccfc:	6921      	ldr	r1, [r4, #16]
 800ccfe:	4559      	cmp	r1, fp
 800cd00:	dd0b      	ble.n	800cd1a <__gethex+0x43e>
 800cd02:	2101      	movs	r1, #1
 800cd04:	4620      	mov	r0, r4
 800cd06:	f7ff fd81 	bl	800c80c <rshift>
 800cd0a:	68bb      	ldr	r3, [r7, #8]
 800cd0c:	3601      	adds	r6, #1
 800cd0e:	42b3      	cmp	r3, r6
 800cd10:	f6ff aeda 	blt.w	800cac8 <__gethex+0x1ec>
 800cd14:	f04f 0801 	mov.w	r8, #1
 800cd18:	e7c2      	b.n	800cca0 <__gethex+0x3c4>
 800cd1a:	f015 051f 	ands.w	r5, r5, #31
 800cd1e:	d0f9      	beq.n	800cd14 <__gethex+0x438>
 800cd20:	9b01      	ldr	r3, [sp, #4]
 800cd22:	f1c5 0520 	rsb	r5, r5, #32
 800cd26:	441a      	add	r2, r3
 800cd28:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800cd2c:	f7fe f8a2 	bl	800ae74 <__hi0bits>
 800cd30:	42a8      	cmp	r0, r5
 800cd32:	dbe6      	blt.n	800cd02 <__gethex+0x426>
 800cd34:	e7ee      	b.n	800cd14 <__gethex+0x438>
 800cd36:	bf00      	nop
 800cd38:	0800df73 	.word	0x0800df73

0800cd3c <L_shift>:
 800cd3c:	f1c2 0208 	rsb	r2, r2, #8
 800cd40:	0092      	lsls	r2, r2, #2
 800cd42:	b570      	push	{r4, r5, r6, lr}
 800cd44:	f1c2 0620 	rsb	r6, r2, #32
 800cd48:	6843      	ldr	r3, [r0, #4]
 800cd4a:	6804      	ldr	r4, [r0, #0]
 800cd4c:	fa03 f506 	lsl.w	r5, r3, r6
 800cd50:	432c      	orrs	r4, r5
 800cd52:	40d3      	lsrs	r3, r2
 800cd54:	6004      	str	r4, [r0, #0]
 800cd56:	f840 3f04 	str.w	r3, [r0, #4]!
 800cd5a:	4288      	cmp	r0, r1
 800cd5c:	d3f4      	bcc.n	800cd48 <L_shift+0xc>
 800cd5e:	bd70      	pop	{r4, r5, r6, pc}

0800cd60 <__match>:
 800cd60:	b530      	push	{r4, r5, lr}
 800cd62:	6803      	ldr	r3, [r0, #0]
 800cd64:	3301      	adds	r3, #1
 800cd66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd6a:	b914      	cbnz	r4, 800cd72 <__match+0x12>
 800cd6c:	6003      	str	r3, [r0, #0]
 800cd6e:	2001      	movs	r0, #1
 800cd70:	bd30      	pop	{r4, r5, pc}
 800cd72:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd76:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800cd7a:	2d19      	cmp	r5, #25
 800cd7c:	bf98      	it	ls
 800cd7e:	3220      	addls	r2, #32
 800cd80:	42a2      	cmp	r2, r4
 800cd82:	d0f0      	beq.n	800cd66 <__match+0x6>
 800cd84:	2000      	movs	r0, #0
 800cd86:	e7f3      	b.n	800cd70 <__match+0x10>

0800cd88 <__hexnan>:
 800cd88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd8c:	2500      	movs	r5, #0
 800cd8e:	680b      	ldr	r3, [r1, #0]
 800cd90:	4682      	mov	sl, r0
 800cd92:	115e      	asrs	r6, r3, #5
 800cd94:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cd98:	f013 031f 	ands.w	r3, r3, #31
 800cd9c:	bf18      	it	ne
 800cd9e:	3604      	addne	r6, #4
 800cda0:	1f37      	subs	r7, r6, #4
 800cda2:	4690      	mov	r8, r2
 800cda4:	46b9      	mov	r9, r7
 800cda6:	463c      	mov	r4, r7
 800cda8:	46ab      	mov	fp, r5
 800cdaa:	b087      	sub	sp, #28
 800cdac:	6801      	ldr	r1, [r0, #0]
 800cdae:	9301      	str	r3, [sp, #4]
 800cdb0:	f846 5c04 	str.w	r5, [r6, #-4]
 800cdb4:	9502      	str	r5, [sp, #8]
 800cdb6:	784a      	ldrb	r2, [r1, #1]
 800cdb8:	1c4b      	adds	r3, r1, #1
 800cdba:	9303      	str	r3, [sp, #12]
 800cdbc:	b342      	cbz	r2, 800ce10 <__hexnan+0x88>
 800cdbe:	4610      	mov	r0, r2
 800cdc0:	9105      	str	r1, [sp, #20]
 800cdc2:	9204      	str	r2, [sp, #16]
 800cdc4:	f7ff fd75 	bl	800c8b2 <__hexdig_fun>
 800cdc8:	2800      	cmp	r0, #0
 800cdca:	d14f      	bne.n	800ce6c <__hexnan+0xe4>
 800cdcc:	9a04      	ldr	r2, [sp, #16]
 800cdce:	9905      	ldr	r1, [sp, #20]
 800cdd0:	2a20      	cmp	r2, #32
 800cdd2:	d818      	bhi.n	800ce06 <__hexnan+0x7e>
 800cdd4:	9b02      	ldr	r3, [sp, #8]
 800cdd6:	459b      	cmp	fp, r3
 800cdd8:	dd13      	ble.n	800ce02 <__hexnan+0x7a>
 800cdda:	454c      	cmp	r4, r9
 800cddc:	d206      	bcs.n	800cdec <__hexnan+0x64>
 800cdde:	2d07      	cmp	r5, #7
 800cde0:	dc04      	bgt.n	800cdec <__hexnan+0x64>
 800cde2:	462a      	mov	r2, r5
 800cde4:	4649      	mov	r1, r9
 800cde6:	4620      	mov	r0, r4
 800cde8:	f7ff ffa8 	bl	800cd3c <L_shift>
 800cdec:	4544      	cmp	r4, r8
 800cdee:	d950      	bls.n	800ce92 <__hexnan+0x10a>
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	f1a4 0904 	sub.w	r9, r4, #4
 800cdf6:	f844 3c04 	str.w	r3, [r4, #-4]
 800cdfa:	461d      	mov	r5, r3
 800cdfc:	464c      	mov	r4, r9
 800cdfe:	f8cd b008 	str.w	fp, [sp, #8]
 800ce02:	9903      	ldr	r1, [sp, #12]
 800ce04:	e7d7      	b.n	800cdb6 <__hexnan+0x2e>
 800ce06:	2a29      	cmp	r2, #41	; 0x29
 800ce08:	d155      	bne.n	800ceb6 <__hexnan+0x12e>
 800ce0a:	3102      	adds	r1, #2
 800ce0c:	f8ca 1000 	str.w	r1, [sl]
 800ce10:	f1bb 0f00 	cmp.w	fp, #0
 800ce14:	d04f      	beq.n	800ceb6 <__hexnan+0x12e>
 800ce16:	454c      	cmp	r4, r9
 800ce18:	d206      	bcs.n	800ce28 <__hexnan+0xa0>
 800ce1a:	2d07      	cmp	r5, #7
 800ce1c:	dc04      	bgt.n	800ce28 <__hexnan+0xa0>
 800ce1e:	462a      	mov	r2, r5
 800ce20:	4649      	mov	r1, r9
 800ce22:	4620      	mov	r0, r4
 800ce24:	f7ff ff8a 	bl	800cd3c <L_shift>
 800ce28:	4544      	cmp	r4, r8
 800ce2a:	d934      	bls.n	800ce96 <__hexnan+0x10e>
 800ce2c:	4623      	mov	r3, r4
 800ce2e:	f1a8 0204 	sub.w	r2, r8, #4
 800ce32:	f853 1b04 	ldr.w	r1, [r3], #4
 800ce36:	429f      	cmp	r7, r3
 800ce38:	f842 1f04 	str.w	r1, [r2, #4]!
 800ce3c:	d2f9      	bcs.n	800ce32 <__hexnan+0xaa>
 800ce3e:	1b3b      	subs	r3, r7, r4
 800ce40:	f023 0303 	bic.w	r3, r3, #3
 800ce44:	3304      	adds	r3, #4
 800ce46:	3e03      	subs	r6, #3
 800ce48:	3401      	adds	r4, #1
 800ce4a:	42a6      	cmp	r6, r4
 800ce4c:	bf38      	it	cc
 800ce4e:	2304      	movcc	r3, #4
 800ce50:	2200      	movs	r2, #0
 800ce52:	4443      	add	r3, r8
 800ce54:	f843 2b04 	str.w	r2, [r3], #4
 800ce58:	429f      	cmp	r7, r3
 800ce5a:	d2fb      	bcs.n	800ce54 <__hexnan+0xcc>
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	b91b      	cbnz	r3, 800ce68 <__hexnan+0xe0>
 800ce60:	4547      	cmp	r7, r8
 800ce62:	d126      	bne.n	800ceb2 <__hexnan+0x12a>
 800ce64:	2301      	movs	r3, #1
 800ce66:	603b      	str	r3, [r7, #0]
 800ce68:	2005      	movs	r0, #5
 800ce6a:	e025      	b.n	800ceb8 <__hexnan+0x130>
 800ce6c:	3501      	adds	r5, #1
 800ce6e:	2d08      	cmp	r5, #8
 800ce70:	f10b 0b01 	add.w	fp, fp, #1
 800ce74:	dd06      	ble.n	800ce84 <__hexnan+0xfc>
 800ce76:	4544      	cmp	r4, r8
 800ce78:	d9c3      	bls.n	800ce02 <__hexnan+0x7a>
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	2501      	movs	r5, #1
 800ce7e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ce82:	3c04      	subs	r4, #4
 800ce84:	6822      	ldr	r2, [r4, #0]
 800ce86:	f000 000f 	and.w	r0, r0, #15
 800ce8a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ce8e:	6020      	str	r0, [r4, #0]
 800ce90:	e7b7      	b.n	800ce02 <__hexnan+0x7a>
 800ce92:	2508      	movs	r5, #8
 800ce94:	e7b5      	b.n	800ce02 <__hexnan+0x7a>
 800ce96:	9b01      	ldr	r3, [sp, #4]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d0df      	beq.n	800ce5c <__hexnan+0xd4>
 800ce9c:	f04f 32ff 	mov.w	r2, #4294967295
 800cea0:	f1c3 0320 	rsb	r3, r3, #32
 800cea4:	40da      	lsrs	r2, r3
 800cea6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ceaa:	4013      	ands	r3, r2
 800ceac:	f846 3c04 	str.w	r3, [r6, #-4]
 800ceb0:	e7d4      	b.n	800ce5c <__hexnan+0xd4>
 800ceb2:	3f04      	subs	r7, #4
 800ceb4:	e7d2      	b.n	800ce5c <__hexnan+0xd4>
 800ceb6:	2004      	movs	r0, #4
 800ceb8:	b007      	add	sp, #28
 800ceba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cebe <__ascii_mbtowc>:
 800cebe:	b082      	sub	sp, #8
 800cec0:	b901      	cbnz	r1, 800cec4 <__ascii_mbtowc+0x6>
 800cec2:	a901      	add	r1, sp, #4
 800cec4:	b142      	cbz	r2, 800ced8 <__ascii_mbtowc+0x1a>
 800cec6:	b14b      	cbz	r3, 800cedc <__ascii_mbtowc+0x1e>
 800cec8:	7813      	ldrb	r3, [r2, #0]
 800ceca:	600b      	str	r3, [r1, #0]
 800cecc:	7812      	ldrb	r2, [r2, #0]
 800cece:	1e10      	subs	r0, r2, #0
 800ced0:	bf18      	it	ne
 800ced2:	2001      	movne	r0, #1
 800ced4:	b002      	add	sp, #8
 800ced6:	4770      	bx	lr
 800ced8:	4610      	mov	r0, r2
 800ceda:	e7fb      	b.n	800ced4 <__ascii_mbtowc+0x16>
 800cedc:	f06f 0001 	mvn.w	r0, #1
 800cee0:	e7f8      	b.n	800ced4 <__ascii_mbtowc+0x16>

0800cee2 <_realloc_r>:
 800cee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cee6:	4680      	mov	r8, r0
 800cee8:	4614      	mov	r4, r2
 800ceea:	460e      	mov	r6, r1
 800ceec:	b921      	cbnz	r1, 800cef8 <_realloc_r+0x16>
 800ceee:	4611      	mov	r1, r2
 800cef0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cef4:	f7fd be40 	b.w	800ab78 <_malloc_r>
 800cef8:	b92a      	cbnz	r2, 800cf06 <_realloc_r+0x24>
 800cefa:	f7fd fdcd 	bl	800aa98 <_free_r>
 800cefe:	4625      	mov	r5, r4
 800cf00:	4628      	mov	r0, r5
 800cf02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf06:	f000 f842 	bl	800cf8e <_malloc_usable_size_r>
 800cf0a:	4284      	cmp	r4, r0
 800cf0c:	4607      	mov	r7, r0
 800cf0e:	d802      	bhi.n	800cf16 <_realloc_r+0x34>
 800cf10:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cf14:	d812      	bhi.n	800cf3c <_realloc_r+0x5a>
 800cf16:	4621      	mov	r1, r4
 800cf18:	4640      	mov	r0, r8
 800cf1a:	f7fd fe2d 	bl	800ab78 <_malloc_r>
 800cf1e:	4605      	mov	r5, r0
 800cf20:	2800      	cmp	r0, #0
 800cf22:	d0ed      	beq.n	800cf00 <_realloc_r+0x1e>
 800cf24:	42bc      	cmp	r4, r7
 800cf26:	4622      	mov	r2, r4
 800cf28:	4631      	mov	r1, r6
 800cf2a:	bf28      	it	cs
 800cf2c:	463a      	movcs	r2, r7
 800cf2e:	f7ff fc27 	bl	800c780 <memcpy>
 800cf32:	4631      	mov	r1, r6
 800cf34:	4640      	mov	r0, r8
 800cf36:	f7fd fdaf 	bl	800aa98 <_free_r>
 800cf3a:	e7e1      	b.n	800cf00 <_realloc_r+0x1e>
 800cf3c:	4635      	mov	r5, r6
 800cf3e:	e7df      	b.n	800cf00 <_realloc_r+0x1e>

0800cf40 <__ascii_wctomb>:
 800cf40:	4603      	mov	r3, r0
 800cf42:	4608      	mov	r0, r1
 800cf44:	b141      	cbz	r1, 800cf58 <__ascii_wctomb+0x18>
 800cf46:	2aff      	cmp	r2, #255	; 0xff
 800cf48:	d904      	bls.n	800cf54 <__ascii_wctomb+0x14>
 800cf4a:	228a      	movs	r2, #138	; 0x8a
 800cf4c:	f04f 30ff 	mov.w	r0, #4294967295
 800cf50:	601a      	str	r2, [r3, #0]
 800cf52:	4770      	bx	lr
 800cf54:	2001      	movs	r0, #1
 800cf56:	700a      	strb	r2, [r1, #0]
 800cf58:	4770      	bx	lr
	...

0800cf5c <fiprintf>:
 800cf5c:	b40e      	push	{r1, r2, r3}
 800cf5e:	b503      	push	{r0, r1, lr}
 800cf60:	4601      	mov	r1, r0
 800cf62:	ab03      	add	r3, sp, #12
 800cf64:	4805      	ldr	r0, [pc, #20]	; (800cf7c <fiprintf+0x20>)
 800cf66:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf6a:	6800      	ldr	r0, [r0, #0]
 800cf6c:	9301      	str	r3, [sp, #4]
 800cf6e:	f000 f83d 	bl	800cfec <_vfiprintf_r>
 800cf72:	b002      	add	sp, #8
 800cf74:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf78:	b003      	add	sp, #12
 800cf7a:	4770      	bx	lr
 800cf7c:	200000b0 	.word	0x200000b0

0800cf80 <abort>:
 800cf80:	2006      	movs	r0, #6
 800cf82:	b508      	push	{r3, lr}
 800cf84:	f000 fa0a 	bl	800d39c <raise>
 800cf88:	2001      	movs	r0, #1
 800cf8a:	f7f7 fdbe 	bl	8004b0a <_exit>

0800cf8e <_malloc_usable_size_r>:
 800cf8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf92:	1f18      	subs	r0, r3, #4
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	bfbc      	itt	lt
 800cf98:	580b      	ldrlt	r3, [r1, r0]
 800cf9a:	18c0      	addlt	r0, r0, r3
 800cf9c:	4770      	bx	lr

0800cf9e <__sfputc_r>:
 800cf9e:	6893      	ldr	r3, [r2, #8]
 800cfa0:	b410      	push	{r4}
 800cfa2:	3b01      	subs	r3, #1
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	6093      	str	r3, [r2, #8]
 800cfa8:	da07      	bge.n	800cfba <__sfputc_r+0x1c>
 800cfaa:	6994      	ldr	r4, [r2, #24]
 800cfac:	42a3      	cmp	r3, r4
 800cfae:	db01      	blt.n	800cfb4 <__sfputc_r+0x16>
 800cfb0:	290a      	cmp	r1, #10
 800cfb2:	d102      	bne.n	800cfba <__sfputc_r+0x1c>
 800cfb4:	bc10      	pop	{r4}
 800cfb6:	f000 b933 	b.w	800d220 <__swbuf_r>
 800cfba:	6813      	ldr	r3, [r2, #0]
 800cfbc:	1c58      	adds	r0, r3, #1
 800cfbe:	6010      	str	r0, [r2, #0]
 800cfc0:	7019      	strb	r1, [r3, #0]
 800cfc2:	4608      	mov	r0, r1
 800cfc4:	bc10      	pop	{r4}
 800cfc6:	4770      	bx	lr

0800cfc8 <__sfputs_r>:
 800cfc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfca:	4606      	mov	r6, r0
 800cfcc:	460f      	mov	r7, r1
 800cfce:	4614      	mov	r4, r2
 800cfd0:	18d5      	adds	r5, r2, r3
 800cfd2:	42ac      	cmp	r4, r5
 800cfd4:	d101      	bne.n	800cfda <__sfputs_r+0x12>
 800cfd6:	2000      	movs	r0, #0
 800cfd8:	e007      	b.n	800cfea <__sfputs_r+0x22>
 800cfda:	463a      	mov	r2, r7
 800cfdc:	4630      	mov	r0, r6
 800cfde:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfe2:	f7ff ffdc 	bl	800cf9e <__sfputc_r>
 800cfe6:	1c43      	adds	r3, r0, #1
 800cfe8:	d1f3      	bne.n	800cfd2 <__sfputs_r+0xa>
 800cfea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cfec <_vfiprintf_r>:
 800cfec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cff0:	460d      	mov	r5, r1
 800cff2:	4614      	mov	r4, r2
 800cff4:	4698      	mov	r8, r3
 800cff6:	4606      	mov	r6, r0
 800cff8:	b09d      	sub	sp, #116	; 0x74
 800cffa:	b118      	cbz	r0, 800d004 <_vfiprintf_r+0x18>
 800cffc:	6a03      	ldr	r3, [r0, #32]
 800cffe:	b90b      	cbnz	r3, 800d004 <_vfiprintf_r+0x18>
 800d000:	f7fc fdb0 	bl	8009b64 <__sinit>
 800d004:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d006:	07d9      	lsls	r1, r3, #31
 800d008:	d405      	bmi.n	800d016 <_vfiprintf_r+0x2a>
 800d00a:	89ab      	ldrh	r3, [r5, #12]
 800d00c:	059a      	lsls	r2, r3, #22
 800d00e:	d402      	bmi.n	800d016 <_vfiprintf_r+0x2a>
 800d010:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d012:	f7fc febe 	bl	8009d92 <__retarget_lock_acquire_recursive>
 800d016:	89ab      	ldrh	r3, [r5, #12]
 800d018:	071b      	lsls	r3, r3, #28
 800d01a:	d501      	bpl.n	800d020 <_vfiprintf_r+0x34>
 800d01c:	692b      	ldr	r3, [r5, #16]
 800d01e:	b99b      	cbnz	r3, 800d048 <_vfiprintf_r+0x5c>
 800d020:	4629      	mov	r1, r5
 800d022:	4630      	mov	r0, r6
 800d024:	f000 f93a 	bl	800d29c <__swsetup_r>
 800d028:	b170      	cbz	r0, 800d048 <_vfiprintf_r+0x5c>
 800d02a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d02c:	07dc      	lsls	r4, r3, #31
 800d02e:	d504      	bpl.n	800d03a <_vfiprintf_r+0x4e>
 800d030:	f04f 30ff 	mov.w	r0, #4294967295
 800d034:	b01d      	add	sp, #116	; 0x74
 800d036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d03a:	89ab      	ldrh	r3, [r5, #12]
 800d03c:	0598      	lsls	r0, r3, #22
 800d03e:	d4f7      	bmi.n	800d030 <_vfiprintf_r+0x44>
 800d040:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d042:	f7fc fea7 	bl	8009d94 <__retarget_lock_release_recursive>
 800d046:	e7f3      	b.n	800d030 <_vfiprintf_r+0x44>
 800d048:	2300      	movs	r3, #0
 800d04a:	9309      	str	r3, [sp, #36]	; 0x24
 800d04c:	2320      	movs	r3, #32
 800d04e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d052:	2330      	movs	r3, #48	; 0x30
 800d054:	f04f 0901 	mov.w	r9, #1
 800d058:	f8cd 800c 	str.w	r8, [sp, #12]
 800d05c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800d20c <_vfiprintf_r+0x220>
 800d060:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d064:	4623      	mov	r3, r4
 800d066:	469a      	mov	sl, r3
 800d068:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d06c:	b10a      	cbz	r2, 800d072 <_vfiprintf_r+0x86>
 800d06e:	2a25      	cmp	r2, #37	; 0x25
 800d070:	d1f9      	bne.n	800d066 <_vfiprintf_r+0x7a>
 800d072:	ebba 0b04 	subs.w	fp, sl, r4
 800d076:	d00b      	beq.n	800d090 <_vfiprintf_r+0xa4>
 800d078:	465b      	mov	r3, fp
 800d07a:	4622      	mov	r2, r4
 800d07c:	4629      	mov	r1, r5
 800d07e:	4630      	mov	r0, r6
 800d080:	f7ff ffa2 	bl	800cfc8 <__sfputs_r>
 800d084:	3001      	adds	r0, #1
 800d086:	f000 80a9 	beq.w	800d1dc <_vfiprintf_r+0x1f0>
 800d08a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d08c:	445a      	add	r2, fp
 800d08e:	9209      	str	r2, [sp, #36]	; 0x24
 800d090:	f89a 3000 	ldrb.w	r3, [sl]
 800d094:	2b00      	cmp	r3, #0
 800d096:	f000 80a1 	beq.w	800d1dc <_vfiprintf_r+0x1f0>
 800d09a:	2300      	movs	r3, #0
 800d09c:	f04f 32ff 	mov.w	r2, #4294967295
 800d0a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d0a4:	f10a 0a01 	add.w	sl, sl, #1
 800d0a8:	9304      	str	r3, [sp, #16]
 800d0aa:	9307      	str	r3, [sp, #28]
 800d0ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d0b0:	931a      	str	r3, [sp, #104]	; 0x68
 800d0b2:	4654      	mov	r4, sl
 800d0b4:	2205      	movs	r2, #5
 800d0b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0ba:	4854      	ldr	r0, [pc, #336]	; (800d20c <_vfiprintf_r+0x220>)
 800d0bc:	f7fc fe6b 	bl	8009d96 <memchr>
 800d0c0:	9a04      	ldr	r2, [sp, #16]
 800d0c2:	b9d8      	cbnz	r0, 800d0fc <_vfiprintf_r+0x110>
 800d0c4:	06d1      	lsls	r1, r2, #27
 800d0c6:	bf44      	itt	mi
 800d0c8:	2320      	movmi	r3, #32
 800d0ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0ce:	0713      	lsls	r3, r2, #28
 800d0d0:	bf44      	itt	mi
 800d0d2:	232b      	movmi	r3, #43	; 0x2b
 800d0d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0d8:	f89a 3000 	ldrb.w	r3, [sl]
 800d0dc:	2b2a      	cmp	r3, #42	; 0x2a
 800d0de:	d015      	beq.n	800d10c <_vfiprintf_r+0x120>
 800d0e0:	4654      	mov	r4, sl
 800d0e2:	2000      	movs	r0, #0
 800d0e4:	f04f 0c0a 	mov.w	ip, #10
 800d0e8:	9a07      	ldr	r2, [sp, #28]
 800d0ea:	4621      	mov	r1, r4
 800d0ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0f0:	3b30      	subs	r3, #48	; 0x30
 800d0f2:	2b09      	cmp	r3, #9
 800d0f4:	d94d      	bls.n	800d192 <_vfiprintf_r+0x1a6>
 800d0f6:	b1b0      	cbz	r0, 800d126 <_vfiprintf_r+0x13a>
 800d0f8:	9207      	str	r2, [sp, #28]
 800d0fa:	e014      	b.n	800d126 <_vfiprintf_r+0x13a>
 800d0fc:	eba0 0308 	sub.w	r3, r0, r8
 800d100:	fa09 f303 	lsl.w	r3, r9, r3
 800d104:	4313      	orrs	r3, r2
 800d106:	46a2      	mov	sl, r4
 800d108:	9304      	str	r3, [sp, #16]
 800d10a:	e7d2      	b.n	800d0b2 <_vfiprintf_r+0xc6>
 800d10c:	9b03      	ldr	r3, [sp, #12]
 800d10e:	1d19      	adds	r1, r3, #4
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	9103      	str	r1, [sp, #12]
 800d114:	2b00      	cmp	r3, #0
 800d116:	bfbb      	ittet	lt
 800d118:	425b      	neglt	r3, r3
 800d11a:	f042 0202 	orrlt.w	r2, r2, #2
 800d11e:	9307      	strge	r3, [sp, #28]
 800d120:	9307      	strlt	r3, [sp, #28]
 800d122:	bfb8      	it	lt
 800d124:	9204      	strlt	r2, [sp, #16]
 800d126:	7823      	ldrb	r3, [r4, #0]
 800d128:	2b2e      	cmp	r3, #46	; 0x2e
 800d12a:	d10c      	bne.n	800d146 <_vfiprintf_r+0x15a>
 800d12c:	7863      	ldrb	r3, [r4, #1]
 800d12e:	2b2a      	cmp	r3, #42	; 0x2a
 800d130:	d134      	bne.n	800d19c <_vfiprintf_r+0x1b0>
 800d132:	9b03      	ldr	r3, [sp, #12]
 800d134:	3402      	adds	r4, #2
 800d136:	1d1a      	adds	r2, r3, #4
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	9203      	str	r2, [sp, #12]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	bfb8      	it	lt
 800d140:	f04f 33ff 	movlt.w	r3, #4294967295
 800d144:	9305      	str	r3, [sp, #20]
 800d146:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d210 <_vfiprintf_r+0x224>
 800d14a:	2203      	movs	r2, #3
 800d14c:	4650      	mov	r0, sl
 800d14e:	7821      	ldrb	r1, [r4, #0]
 800d150:	f7fc fe21 	bl	8009d96 <memchr>
 800d154:	b138      	cbz	r0, 800d166 <_vfiprintf_r+0x17a>
 800d156:	2240      	movs	r2, #64	; 0x40
 800d158:	9b04      	ldr	r3, [sp, #16]
 800d15a:	eba0 000a 	sub.w	r0, r0, sl
 800d15e:	4082      	lsls	r2, r0
 800d160:	4313      	orrs	r3, r2
 800d162:	3401      	adds	r4, #1
 800d164:	9304      	str	r3, [sp, #16]
 800d166:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d16a:	2206      	movs	r2, #6
 800d16c:	4829      	ldr	r0, [pc, #164]	; (800d214 <_vfiprintf_r+0x228>)
 800d16e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d172:	f7fc fe10 	bl	8009d96 <memchr>
 800d176:	2800      	cmp	r0, #0
 800d178:	d03f      	beq.n	800d1fa <_vfiprintf_r+0x20e>
 800d17a:	4b27      	ldr	r3, [pc, #156]	; (800d218 <_vfiprintf_r+0x22c>)
 800d17c:	bb1b      	cbnz	r3, 800d1c6 <_vfiprintf_r+0x1da>
 800d17e:	9b03      	ldr	r3, [sp, #12]
 800d180:	3307      	adds	r3, #7
 800d182:	f023 0307 	bic.w	r3, r3, #7
 800d186:	3308      	adds	r3, #8
 800d188:	9303      	str	r3, [sp, #12]
 800d18a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d18c:	443b      	add	r3, r7
 800d18e:	9309      	str	r3, [sp, #36]	; 0x24
 800d190:	e768      	b.n	800d064 <_vfiprintf_r+0x78>
 800d192:	460c      	mov	r4, r1
 800d194:	2001      	movs	r0, #1
 800d196:	fb0c 3202 	mla	r2, ip, r2, r3
 800d19a:	e7a6      	b.n	800d0ea <_vfiprintf_r+0xfe>
 800d19c:	2300      	movs	r3, #0
 800d19e:	f04f 0c0a 	mov.w	ip, #10
 800d1a2:	4619      	mov	r1, r3
 800d1a4:	3401      	adds	r4, #1
 800d1a6:	9305      	str	r3, [sp, #20]
 800d1a8:	4620      	mov	r0, r4
 800d1aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d1ae:	3a30      	subs	r2, #48	; 0x30
 800d1b0:	2a09      	cmp	r2, #9
 800d1b2:	d903      	bls.n	800d1bc <_vfiprintf_r+0x1d0>
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d0c6      	beq.n	800d146 <_vfiprintf_r+0x15a>
 800d1b8:	9105      	str	r1, [sp, #20]
 800d1ba:	e7c4      	b.n	800d146 <_vfiprintf_r+0x15a>
 800d1bc:	4604      	mov	r4, r0
 800d1be:	2301      	movs	r3, #1
 800d1c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800d1c4:	e7f0      	b.n	800d1a8 <_vfiprintf_r+0x1bc>
 800d1c6:	ab03      	add	r3, sp, #12
 800d1c8:	9300      	str	r3, [sp, #0]
 800d1ca:	462a      	mov	r2, r5
 800d1cc:	4630      	mov	r0, r6
 800d1ce:	4b13      	ldr	r3, [pc, #76]	; (800d21c <_vfiprintf_r+0x230>)
 800d1d0:	a904      	add	r1, sp, #16
 800d1d2:	f7fb fe6b 	bl	8008eac <_printf_float>
 800d1d6:	4607      	mov	r7, r0
 800d1d8:	1c78      	adds	r0, r7, #1
 800d1da:	d1d6      	bne.n	800d18a <_vfiprintf_r+0x19e>
 800d1dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d1de:	07d9      	lsls	r1, r3, #31
 800d1e0:	d405      	bmi.n	800d1ee <_vfiprintf_r+0x202>
 800d1e2:	89ab      	ldrh	r3, [r5, #12]
 800d1e4:	059a      	lsls	r2, r3, #22
 800d1e6:	d402      	bmi.n	800d1ee <_vfiprintf_r+0x202>
 800d1e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d1ea:	f7fc fdd3 	bl	8009d94 <__retarget_lock_release_recursive>
 800d1ee:	89ab      	ldrh	r3, [r5, #12]
 800d1f0:	065b      	lsls	r3, r3, #25
 800d1f2:	f53f af1d 	bmi.w	800d030 <_vfiprintf_r+0x44>
 800d1f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d1f8:	e71c      	b.n	800d034 <_vfiprintf_r+0x48>
 800d1fa:	ab03      	add	r3, sp, #12
 800d1fc:	9300      	str	r3, [sp, #0]
 800d1fe:	462a      	mov	r2, r5
 800d200:	4630      	mov	r0, r6
 800d202:	4b06      	ldr	r3, [pc, #24]	; (800d21c <_vfiprintf_r+0x230>)
 800d204:	a904      	add	r1, sp, #16
 800d206:	f7fc f8f1 	bl	80093ec <_printf_i>
 800d20a:	e7e4      	b.n	800d1d6 <_vfiprintf_r+0x1ea>
 800d20c:	0800e231 	.word	0x0800e231
 800d210:	0800e237 	.word	0x0800e237
 800d214:	0800e23b 	.word	0x0800e23b
 800d218:	08008ead 	.word	0x08008ead
 800d21c:	0800cfc9 	.word	0x0800cfc9

0800d220 <__swbuf_r>:
 800d220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d222:	460e      	mov	r6, r1
 800d224:	4614      	mov	r4, r2
 800d226:	4605      	mov	r5, r0
 800d228:	b118      	cbz	r0, 800d232 <__swbuf_r+0x12>
 800d22a:	6a03      	ldr	r3, [r0, #32]
 800d22c:	b90b      	cbnz	r3, 800d232 <__swbuf_r+0x12>
 800d22e:	f7fc fc99 	bl	8009b64 <__sinit>
 800d232:	69a3      	ldr	r3, [r4, #24]
 800d234:	60a3      	str	r3, [r4, #8]
 800d236:	89a3      	ldrh	r3, [r4, #12]
 800d238:	071a      	lsls	r2, r3, #28
 800d23a:	d525      	bpl.n	800d288 <__swbuf_r+0x68>
 800d23c:	6923      	ldr	r3, [r4, #16]
 800d23e:	b31b      	cbz	r3, 800d288 <__swbuf_r+0x68>
 800d240:	6823      	ldr	r3, [r4, #0]
 800d242:	6922      	ldr	r2, [r4, #16]
 800d244:	b2f6      	uxtb	r6, r6
 800d246:	1a98      	subs	r0, r3, r2
 800d248:	6963      	ldr	r3, [r4, #20]
 800d24a:	4637      	mov	r7, r6
 800d24c:	4283      	cmp	r3, r0
 800d24e:	dc04      	bgt.n	800d25a <__swbuf_r+0x3a>
 800d250:	4621      	mov	r1, r4
 800d252:	4628      	mov	r0, r5
 800d254:	f7ff fa30 	bl	800c6b8 <_fflush_r>
 800d258:	b9e0      	cbnz	r0, 800d294 <__swbuf_r+0x74>
 800d25a:	68a3      	ldr	r3, [r4, #8]
 800d25c:	3b01      	subs	r3, #1
 800d25e:	60a3      	str	r3, [r4, #8]
 800d260:	6823      	ldr	r3, [r4, #0]
 800d262:	1c5a      	adds	r2, r3, #1
 800d264:	6022      	str	r2, [r4, #0]
 800d266:	701e      	strb	r6, [r3, #0]
 800d268:	6962      	ldr	r2, [r4, #20]
 800d26a:	1c43      	adds	r3, r0, #1
 800d26c:	429a      	cmp	r2, r3
 800d26e:	d004      	beq.n	800d27a <__swbuf_r+0x5a>
 800d270:	89a3      	ldrh	r3, [r4, #12]
 800d272:	07db      	lsls	r3, r3, #31
 800d274:	d506      	bpl.n	800d284 <__swbuf_r+0x64>
 800d276:	2e0a      	cmp	r6, #10
 800d278:	d104      	bne.n	800d284 <__swbuf_r+0x64>
 800d27a:	4621      	mov	r1, r4
 800d27c:	4628      	mov	r0, r5
 800d27e:	f7ff fa1b 	bl	800c6b8 <_fflush_r>
 800d282:	b938      	cbnz	r0, 800d294 <__swbuf_r+0x74>
 800d284:	4638      	mov	r0, r7
 800d286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d288:	4621      	mov	r1, r4
 800d28a:	4628      	mov	r0, r5
 800d28c:	f000 f806 	bl	800d29c <__swsetup_r>
 800d290:	2800      	cmp	r0, #0
 800d292:	d0d5      	beq.n	800d240 <__swbuf_r+0x20>
 800d294:	f04f 37ff 	mov.w	r7, #4294967295
 800d298:	e7f4      	b.n	800d284 <__swbuf_r+0x64>
	...

0800d29c <__swsetup_r>:
 800d29c:	b538      	push	{r3, r4, r5, lr}
 800d29e:	4b2a      	ldr	r3, [pc, #168]	; (800d348 <__swsetup_r+0xac>)
 800d2a0:	4605      	mov	r5, r0
 800d2a2:	6818      	ldr	r0, [r3, #0]
 800d2a4:	460c      	mov	r4, r1
 800d2a6:	b118      	cbz	r0, 800d2b0 <__swsetup_r+0x14>
 800d2a8:	6a03      	ldr	r3, [r0, #32]
 800d2aa:	b90b      	cbnz	r3, 800d2b0 <__swsetup_r+0x14>
 800d2ac:	f7fc fc5a 	bl	8009b64 <__sinit>
 800d2b0:	89a3      	ldrh	r3, [r4, #12]
 800d2b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d2b6:	0718      	lsls	r0, r3, #28
 800d2b8:	d422      	bmi.n	800d300 <__swsetup_r+0x64>
 800d2ba:	06d9      	lsls	r1, r3, #27
 800d2bc:	d407      	bmi.n	800d2ce <__swsetup_r+0x32>
 800d2be:	2309      	movs	r3, #9
 800d2c0:	602b      	str	r3, [r5, #0]
 800d2c2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d2c6:	f04f 30ff 	mov.w	r0, #4294967295
 800d2ca:	81a3      	strh	r3, [r4, #12]
 800d2cc:	e034      	b.n	800d338 <__swsetup_r+0x9c>
 800d2ce:	0758      	lsls	r0, r3, #29
 800d2d0:	d512      	bpl.n	800d2f8 <__swsetup_r+0x5c>
 800d2d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d2d4:	b141      	cbz	r1, 800d2e8 <__swsetup_r+0x4c>
 800d2d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d2da:	4299      	cmp	r1, r3
 800d2dc:	d002      	beq.n	800d2e4 <__swsetup_r+0x48>
 800d2de:	4628      	mov	r0, r5
 800d2e0:	f7fd fbda 	bl	800aa98 <_free_r>
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	6363      	str	r3, [r4, #52]	; 0x34
 800d2e8:	89a3      	ldrh	r3, [r4, #12]
 800d2ea:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d2ee:	81a3      	strh	r3, [r4, #12]
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	6063      	str	r3, [r4, #4]
 800d2f4:	6923      	ldr	r3, [r4, #16]
 800d2f6:	6023      	str	r3, [r4, #0]
 800d2f8:	89a3      	ldrh	r3, [r4, #12]
 800d2fa:	f043 0308 	orr.w	r3, r3, #8
 800d2fe:	81a3      	strh	r3, [r4, #12]
 800d300:	6923      	ldr	r3, [r4, #16]
 800d302:	b94b      	cbnz	r3, 800d318 <__swsetup_r+0x7c>
 800d304:	89a3      	ldrh	r3, [r4, #12]
 800d306:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d30a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d30e:	d003      	beq.n	800d318 <__swsetup_r+0x7c>
 800d310:	4621      	mov	r1, r4
 800d312:	4628      	mov	r0, r5
 800d314:	f000 f883 	bl	800d41e <__smakebuf_r>
 800d318:	89a0      	ldrh	r0, [r4, #12]
 800d31a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d31e:	f010 0301 	ands.w	r3, r0, #1
 800d322:	d00a      	beq.n	800d33a <__swsetup_r+0x9e>
 800d324:	2300      	movs	r3, #0
 800d326:	60a3      	str	r3, [r4, #8]
 800d328:	6963      	ldr	r3, [r4, #20]
 800d32a:	425b      	negs	r3, r3
 800d32c:	61a3      	str	r3, [r4, #24]
 800d32e:	6923      	ldr	r3, [r4, #16]
 800d330:	b943      	cbnz	r3, 800d344 <__swsetup_r+0xa8>
 800d332:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d336:	d1c4      	bne.n	800d2c2 <__swsetup_r+0x26>
 800d338:	bd38      	pop	{r3, r4, r5, pc}
 800d33a:	0781      	lsls	r1, r0, #30
 800d33c:	bf58      	it	pl
 800d33e:	6963      	ldrpl	r3, [r4, #20]
 800d340:	60a3      	str	r3, [r4, #8]
 800d342:	e7f4      	b.n	800d32e <__swsetup_r+0x92>
 800d344:	2000      	movs	r0, #0
 800d346:	e7f7      	b.n	800d338 <__swsetup_r+0x9c>
 800d348:	200000b0 	.word	0x200000b0

0800d34c <_raise_r>:
 800d34c:	291f      	cmp	r1, #31
 800d34e:	b538      	push	{r3, r4, r5, lr}
 800d350:	4604      	mov	r4, r0
 800d352:	460d      	mov	r5, r1
 800d354:	d904      	bls.n	800d360 <_raise_r+0x14>
 800d356:	2316      	movs	r3, #22
 800d358:	6003      	str	r3, [r0, #0]
 800d35a:	f04f 30ff 	mov.w	r0, #4294967295
 800d35e:	bd38      	pop	{r3, r4, r5, pc}
 800d360:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d362:	b112      	cbz	r2, 800d36a <_raise_r+0x1e>
 800d364:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d368:	b94b      	cbnz	r3, 800d37e <_raise_r+0x32>
 800d36a:	4620      	mov	r0, r4
 800d36c:	f000 f830 	bl	800d3d0 <_getpid_r>
 800d370:	462a      	mov	r2, r5
 800d372:	4601      	mov	r1, r0
 800d374:	4620      	mov	r0, r4
 800d376:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d37a:	f000 b817 	b.w	800d3ac <_kill_r>
 800d37e:	2b01      	cmp	r3, #1
 800d380:	d00a      	beq.n	800d398 <_raise_r+0x4c>
 800d382:	1c59      	adds	r1, r3, #1
 800d384:	d103      	bne.n	800d38e <_raise_r+0x42>
 800d386:	2316      	movs	r3, #22
 800d388:	6003      	str	r3, [r0, #0]
 800d38a:	2001      	movs	r0, #1
 800d38c:	e7e7      	b.n	800d35e <_raise_r+0x12>
 800d38e:	2400      	movs	r4, #0
 800d390:	4628      	mov	r0, r5
 800d392:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d396:	4798      	blx	r3
 800d398:	2000      	movs	r0, #0
 800d39a:	e7e0      	b.n	800d35e <_raise_r+0x12>

0800d39c <raise>:
 800d39c:	4b02      	ldr	r3, [pc, #8]	; (800d3a8 <raise+0xc>)
 800d39e:	4601      	mov	r1, r0
 800d3a0:	6818      	ldr	r0, [r3, #0]
 800d3a2:	f7ff bfd3 	b.w	800d34c <_raise_r>
 800d3a6:	bf00      	nop
 800d3a8:	200000b0 	.word	0x200000b0

0800d3ac <_kill_r>:
 800d3ac:	b538      	push	{r3, r4, r5, lr}
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	4d06      	ldr	r5, [pc, #24]	; (800d3cc <_kill_r+0x20>)
 800d3b2:	4604      	mov	r4, r0
 800d3b4:	4608      	mov	r0, r1
 800d3b6:	4611      	mov	r1, r2
 800d3b8:	602b      	str	r3, [r5, #0]
 800d3ba:	f7f7 fb96 	bl	8004aea <_kill>
 800d3be:	1c43      	adds	r3, r0, #1
 800d3c0:	d102      	bne.n	800d3c8 <_kill_r+0x1c>
 800d3c2:	682b      	ldr	r3, [r5, #0]
 800d3c4:	b103      	cbz	r3, 800d3c8 <_kill_r+0x1c>
 800d3c6:	6023      	str	r3, [r4, #0]
 800d3c8:	bd38      	pop	{r3, r4, r5, pc}
 800d3ca:	bf00      	nop
 800d3cc:	20000894 	.word	0x20000894

0800d3d0 <_getpid_r>:
 800d3d0:	f7f7 bb84 	b.w	8004adc <_getpid>

0800d3d4 <__swhatbuf_r>:
 800d3d4:	b570      	push	{r4, r5, r6, lr}
 800d3d6:	460c      	mov	r4, r1
 800d3d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3dc:	4615      	mov	r5, r2
 800d3de:	2900      	cmp	r1, #0
 800d3e0:	461e      	mov	r6, r3
 800d3e2:	b096      	sub	sp, #88	; 0x58
 800d3e4:	da0c      	bge.n	800d400 <__swhatbuf_r+0x2c>
 800d3e6:	89a3      	ldrh	r3, [r4, #12]
 800d3e8:	2100      	movs	r1, #0
 800d3ea:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d3ee:	bf0c      	ite	eq
 800d3f0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d3f4:	2340      	movne	r3, #64	; 0x40
 800d3f6:	2000      	movs	r0, #0
 800d3f8:	6031      	str	r1, [r6, #0]
 800d3fa:	602b      	str	r3, [r5, #0]
 800d3fc:	b016      	add	sp, #88	; 0x58
 800d3fe:	bd70      	pop	{r4, r5, r6, pc}
 800d400:	466a      	mov	r2, sp
 800d402:	f000 f849 	bl	800d498 <_fstat_r>
 800d406:	2800      	cmp	r0, #0
 800d408:	dbed      	blt.n	800d3e6 <__swhatbuf_r+0x12>
 800d40a:	9901      	ldr	r1, [sp, #4]
 800d40c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d410:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d414:	4259      	negs	r1, r3
 800d416:	4159      	adcs	r1, r3
 800d418:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d41c:	e7eb      	b.n	800d3f6 <__swhatbuf_r+0x22>

0800d41e <__smakebuf_r>:
 800d41e:	898b      	ldrh	r3, [r1, #12]
 800d420:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d422:	079d      	lsls	r5, r3, #30
 800d424:	4606      	mov	r6, r0
 800d426:	460c      	mov	r4, r1
 800d428:	d507      	bpl.n	800d43a <__smakebuf_r+0x1c>
 800d42a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d42e:	6023      	str	r3, [r4, #0]
 800d430:	6123      	str	r3, [r4, #16]
 800d432:	2301      	movs	r3, #1
 800d434:	6163      	str	r3, [r4, #20]
 800d436:	b002      	add	sp, #8
 800d438:	bd70      	pop	{r4, r5, r6, pc}
 800d43a:	466a      	mov	r2, sp
 800d43c:	ab01      	add	r3, sp, #4
 800d43e:	f7ff ffc9 	bl	800d3d4 <__swhatbuf_r>
 800d442:	9900      	ldr	r1, [sp, #0]
 800d444:	4605      	mov	r5, r0
 800d446:	4630      	mov	r0, r6
 800d448:	f7fd fb96 	bl	800ab78 <_malloc_r>
 800d44c:	b948      	cbnz	r0, 800d462 <__smakebuf_r+0x44>
 800d44e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d452:	059a      	lsls	r2, r3, #22
 800d454:	d4ef      	bmi.n	800d436 <__smakebuf_r+0x18>
 800d456:	f023 0303 	bic.w	r3, r3, #3
 800d45a:	f043 0302 	orr.w	r3, r3, #2
 800d45e:	81a3      	strh	r3, [r4, #12]
 800d460:	e7e3      	b.n	800d42a <__smakebuf_r+0xc>
 800d462:	89a3      	ldrh	r3, [r4, #12]
 800d464:	6020      	str	r0, [r4, #0]
 800d466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d46a:	81a3      	strh	r3, [r4, #12]
 800d46c:	9b00      	ldr	r3, [sp, #0]
 800d46e:	6120      	str	r0, [r4, #16]
 800d470:	6163      	str	r3, [r4, #20]
 800d472:	9b01      	ldr	r3, [sp, #4]
 800d474:	b15b      	cbz	r3, 800d48e <__smakebuf_r+0x70>
 800d476:	4630      	mov	r0, r6
 800d478:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d47c:	f000 f81e 	bl	800d4bc <_isatty_r>
 800d480:	b128      	cbz	r0, 800d48e <__smakebuf_r+0x70>
 800d482:	89a3      	ldrh	r3, [r4, #12]
 800d484:	f023 0303 	bic.w	r3, r3, #3
 800d488:	f043 0301 	orr.w	r3, r3, #1
 800d48c:	81a3      	strh	r3, [r4, #12]
 800d48e:	89a3      	ldrh	r3, [r4, #12]
 800d490:	431d      	orrs	r5, r3
 800d492:	81a5      	strh	r5, [r4, #12]
 800d494:	e7cf      	b.n	800d436 <__smakebuf_r+0x18>
	...

0800d498 <_fstat_r>:
 800d498:	b538      	push	{r3, r4, r5, lr}
 800d49a:	2300      	movs	r3, #0
 800d49c:	4d06      	ldr	r5, [pc, #24]	; (800d4b8 <_fstat_r+0x20>)
 800d49e:	4604      	mov	r4, r0
 800d4a0:	4608      	mov	r0, r1
 800d4a2:	4611      	mov	r1, r2
 800d4a4:	602b      	str	r3, [r5, #0]
 800d4a6:	f7f7 fb7e 	bl	8004ba6 <_fstat>
 800d4aa:	1c43      	adds	r3, r0, #1
 800d4ac:	d102      	bne.n	800d4b4 <_fstat_r+0x1c>
 800d4ae:	682b      	ldr	r3, [r5, #0]
 800d4b0:	b103      	cbz	r3, 800d4b4 <_fstat_r+0x1c>
 800d4b2:	6023      	str	r3, [r4, #0]
 800d4b4:	bd38      	pop	{r3, r4, r5, pc}
 800d4b6:	bf00      	nop
 800d4b8:	20000894 	.word	0x20000894

0800d4bc <_isatty_r>:
 800d4bc:	b538      	push	{r3, r4, r5, lr}
 800d4be:	2300      	movs	r3, #0
 800d4c0:	4d05      	ldr	r5, [pc, #20]	; (800d4d8 <_isatty_r+0x1c>)
 800d4c2:	4604      	mov	r4, r0
 800d4c4:	4608      	mov	r0, r1
 800d4c6:	602b      	str	r3, [r5, #0]
 800d4c8:	f7f7 fb7c 	bl	8004bc4 <_isatty>
 800d4cc:	1c43      	adds	r3, r0, #1
 800d4ce:	d102      	bne.n	800d4d6 <_isatty_r+0x1a>
 800d4d0:	682b      	ldr	r3, [r5, #0]
 800d4d2:	b103      	cbz	r3, 800d4d6 <_isatty_r+0x1a>
 800d4d4:	6023      	str	r3, [r4, #0]
 800d4d6:	bd38      	pop	{r3, r4, r5, pc}
 800d4d8:	20000894 	.word	0x20000894

0800d4dc <atan2>:
 800d4dc:	f000 ba8c 	b.w	800d9f8 <__ieee754_atan2>

0800d4e0 <sqrt>:
 800d4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4e2:	4606      	mov	r6, r0
 800d4e4:	460f      	mov	r7, r1
 800d4e6:	f000 f9ad 	bl	800d844 <__ieee754_sqrt>
 800d4ea:	4632      	mov	r2, r6
 800d4ec:	4604      	mov	r4, r0
 800d4ee:	460d      	mov	r5, r1
 800d4f0:	463b      	mov	r3, r7
 800d4f2:	4630      	mov	r0, r6
 800d4f4:	4639      	mov	r1, r7
 800d4f6:	f7f3 fa89 	bl	8000a0c <__aeabi_dcmpun>
 800d4fa:	b990      	cbnz	r0, 800d522 <sqrt+0x42>
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	2300      	movs	r3, #0
 800d500:	4630      	mov	r0, r6
 800d502:	4639      	mov	r1, r7
 800d504:	f7f3 fa5a 	bl	80009bc <__aeabi_dcmplt>
 800d508:	b158      	cbz	r0, 800d522 <sqrt+0x42>
 800d50a:	f7fc fc17 	bl	8009d3c <__errno>
 800d50e:	2321      	movs	r3, #33	; 0x21
 800d510:	2200      	movs	r2, #0
 800d512:	6003      	str	r3, [r0, #0]
 800d514:	2300      	movs	r3, #0
 800d516:	4610      	mov	r0, r2
 800d518:	4619      	mov	r1, r3
 800d51a:	f7f3 f907 	bl	800072c <__aeabi_ddiv>
 800d51e:	4604      	mov	r4, r0
 800d520:	460d      	mov	r5, r1
 800d522:	4620      	mov	r0, r4
 800d524:	4629      	mov	r1, r5
 800d526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d528 <atan>:
 800d528:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d52c:	4bb6      	ldr	r3, [pc, #728]	; (800d808 <atan+0x2e0>)
 800d52e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800d532:	429e      	cmp	r6, r3
 800d534:	4604      	mov	r4, r0
 800d536:	460d      	mov	r5, r1
 800d538:	468b      	mov	fp, r1
 800d53a:	dd17      	ble.n	800d56c <atan+0x44>
 800d53c:	4bb3      	ldr	r3, [pc, #716]	; (800d80c <atan+0x2e4>)
 800d53e:	429e      	cmp	r6, r3
 800d540:	dc01      	bgt.n	800d546 <atan+0x1e>
 800d542:	d109      	bne.n	800d558 <atan+0x30>
 800d544:	b140      	cbz	r0, 800d558 <atan+0x30>
 800d546:	4622      	mov	r2, r4
 800d548:	462b      	mov	r3, r5
 800d54a:	4620      	mov	r0, r4
 800d54c:	4629      	mov	r1, r5
 800d54e:	f7f2 fe0d 	bl	800016c <__adddf3>
 800d552:	4604      	mov	r4, r0
 800d554:	460d      	mov	r5, r1
 800d556:	e005      	b.n	800d564 <atan+0x3c>
 800d558:	f1bb 0f00 	cmp.w	fp, #0
 800d55c:	4cac      	ldr	r4, [pc, #688]	; (800d810 <atan+0x2e8>)
 800d55e:	f300 8121 	bgt.w	800d7a4 <atan+0x27c>
 800d562:	4dac      	ldr	r5, [pc, #688]	; (800d814 <atan+0x2ec>)
 800d564:	4620      	mov	r0, r4
 800d566:	4629      	mov	r1, r5
 800d568:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d56c:	4baa      	ldr	r3, [pc, #680]	; (800d818 <atan+0x2f0>)
 800d56e:	429e      	cmp	r6, r3
 800d570:	dc11      	bgt.n	800d596 <atan+0x6e>
 800d572:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800d576:	429e      	cmp	r6, r3
 800d578:	dc0a      	bgt.n	800d590 <atan+0x68>
 800d57a:	a38b      	add	r3, pc, #556	; (adr r3, 800d7a8 <atan+0x280>)
 800d57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d580:	f7f2 fdf4 	bl	800016c <__adddf3>
 800d584:	2200      	movs	r2, #0
 800d586:	4ba5      	ldr	r3, [pc, #660]	; (800d81c <atan+0x2f4>)
 800d588:	f7f3 fa36 	bl	80009f8 <__aeabi_dcmpgt>
 800d58c:	2800      	cmp	r0, #0
 800d58e:	d1e9      	bne.n	800d564 <atan+0x3c>
 800d590:	f04f 3aff 	mov.w	sl, #4294967295
 800d594:	e027      	b.n	800d5e6 <atan+0xbe>
 800d596:	f000 f951 	bl	800d83c <fabs>
 800d59a:	4ba1      	ldr	r3, [pc, #644]	; (800d820 <atan+0x2f8>)
 800d59c:	4604      	mov	r4, r0
 800d59e:	429e      	cmp	r6, r3
 800d5a0:	460d      	mov	r5, r1
 800d5a2:	f300 80b8 	bgt.w	800d716 <atan+0x1ee>
 800d5a6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800d5aa:	429e      	cmp	r6, r3
 800d5ac:	f300 809c 	bgt.w	800d6e8 <atan+0x1c0>
 800d5b0:	4602      	mov	r2, r0
 800d5b2:	460b      	mov	r3, r1
 800d5b4:	f7f2 fdda 	bl	800016c <__adddf3>
 800d5b8:	2200      	movs	r2, #0
 800d5ba:	4b98      	ldr	r3, [pc, #608]	; (800d81c <atan+0x2f4>)
 800d5bc:	f7f2 fdd4 	bl	8000168 <__aeabi_dsub>
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	4606      	mov	r6, r0
 800d5c4:	460f      	mov	r7, r1
 800d5c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d5ca:	4620      	mov	r0, r4
 800d5cc:	4629      	mov	r1, r5
 800d5ce:	f7f2 fdcd 	bl	800016c <__adddf3>
 800d5d2:	4602      	mov	r2, r0
 800d5d4:	460b      	mov	r3, r1
 800d5d6:	4630      	mov	r0, r6
 800d5d8:	4639      	mov	r1, r7
 800d5da:	f7f3 f8a7 	bl	800072c <__aeabi_ddiv>
 800d5de:	f04f 0a00 	mov.w	sl, #0
 800d5e2:	4604      	mov	r4, r0
 800d5e4:	460d      	mov	r5, r1
 800d5e6:	4622      	mov	r2, r4
 800d5e8:	462b      	mov	r3, r5
 800d5ea:	4620      	mov	r0, r4
 800d5ec:	4629      	mov	r1, r5
 800d5ee:	f7f2 ff73 	bl	80004d8 <__aeabi_dmul>
 800d5f2:	4602      	mov	r2, r0
 800d5f4:	460b      	mov	r3, r1
 800d5f6:	4680      	mov	r8, r0
 800d5f8:	4689      	mov	r9, r1
 800d5fa:	f7f2 ff6d 	bl	80004d8 <__aeabi_dmul>
 800d5fe:	a36c      	add	r3, pc, #432	; (adr r3, 800d7b0 <atan+0x288>)
 800d600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d604:	4606      	mov	r6, r0
 800d606:	460f      	mov	r7, r1
 800d608:	f7f2 ff66 	bl	80004d8 <__aeabi_dmul>
 800d60c:	a36a      	add	r3, pc, #424	; (adr r3, 800d7b8 <atan+0x290>)
 800d60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d612:	f7f2 fdab 	bl	800016c <__adddf3>
 800d616:	4632      	mov	r2, r6
 800d618:	463b      	mov	r3, r7
 800d61a:	f7f2 ff5d 	bl	80004d8 <__aeabi_dmul>
 800d61e:	a368      	add	r3, pc, #416	; (adr r3, 800d7c0 <atan+0x298>)
 800d620:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d624:	f7f2 fda2 	bl	800016c <__adddf3>
 800d628:	4632      	mov	r2, r6
 800d62a:	463b      	mov	r3, r7
 800d62c:	f7f2 ff54 	bl	80004d8 <__aeabi_dmul>
 800d630:	a365      	add	r3, pc, #404	; (adr r3, 800d7c8 <atan+0x2a0>)
 800d632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d636:	f7f2 fd99 	bl	800016c <__adddf3>
 800d63a:	4632      	mov	r2, r6
 800d63c:	463b      	mov	r3, r7
 800d63e:	f7f2 ff4b 	bl	80004d8 <__aeabi_dmul>
 800d642:	a363      	add	r3, pc, #396	; (adr r3, 800d7d0 <atan+0x2a8>)
 800d644:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d648:	f7f2 fd90 	bl	800016c <__adddf3>
 800d64c:	4632      	mov	r2, r6
 800d64e:	463b      	mov	r3, r7
 800d650:	f7f2 ff42 	bl	80004d8 <__aeabi_dmul>
 800d654:	a360      	add	r3, pc, #384	; (adr r3, 800d7d8 <atan+0x2b0>)
 800d656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d65a:	f7f2 fd87 	bl	800016c <__adddf3>
 800d65e:	4642      	mov	r2, r8
 800d660:	464b      	mov	r3, r9
 800d662:	f7f2 ff39 	bl	80004d8 <__aeabi_dmul>
 800d666:	a35e      	add	r3, pc, #376	; (adr r3, 800d7e0 <atan+0x2b8>)
 800d668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d66c:	4680      	mov	r8, r0
 800d66e:	4689      	mov	r9, r1
 800d670:	4630      	mov	r0, r6
 800d672:	4639      	mov	r1, r7
 800d674:	f7f2 ff30 	bl	80004d8 <__aeabi_dmul>
 800d678:	a35b      	add	r3, pc, #364	; (adr r3, 800d7e8 <atan+0x2c0>)
 800d67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d67e:	f7f2 fd73 	bl	8000168 <__aeabi_dsub>
 800d682:	4632      	mov	r2, r6
 800d684:	463b      	mov	r3, r7
 800d686:	f7f2 ff27 	bl	80004d8 <__aeabi_dmul>
 800d68a:	a359      	add	r3, pc, #356	; (adr r3, 800d7f0 <atan+0x2c8>)
 800d68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d690:	f7f2 fd6a 	bl	8000168 <__aeabi_dsub>
 800d694:	4632      	mov	r2, r6
 800d696:	463b      	mov	r3, r7
 800d698:	f7f2 ff1e 	bl	80004d8 <__aeabi_dmul>
 800d69c:	a356      	add	r3, pc, #344	; (adr r3, 800d7f8 <atan+0x2d0>)
 800d69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6a2:	f7f2 fd61 	bl	8000168 <__aeabi_dsub>
 800d6a6:	4632      	mov	r2, r6
 800d6a8:	463b      	mov	r3, r7
 800d6aa:	f7f2 ff15 	bl	80004d8 <__aeabi_dmul>
 800d6ae:	a354      	add	r3, pc, #336	; (adr r3, 800d800 <atan+0x2d8>)
 800d6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6b4:	f7f2 fd58 	bl	8000168 <__aeabi_dsub>
 800d6b8:	4632      	mov	r2, r6
 800d6ba:	463b      	mov	r3, r7
 800d6bc:	f7f2 ff0c 	bl	80004d8 <__aeabi_dmul>
 800d6c0:	4602      	mov	r2, r0
 800d6c2:	460b      	mov	r3, r1
 800d6c4:	4640      	mov	r0, r8
 800d6c6:	4649      	mov	r1, r9
 800d6c8:	f7f2 fd50 	bl	800016c <__adddf3>
 800d6cc:	4622      	mov	r2, r4
 800d6ce:	462b      	mov	r3, r5
 800d6d0:	f7f2 ff02 	bl	80004d8 <__aeabi_dmul>
 800d6d4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800d6d8:	4602      	mov	r2, r0
 800d6da:	460b      	mov	r3, r1
 800d6dc:	d144      	bne.n	800d768 <atan+0x240>
 800d6de:	4620      	mov	r0, r4
 800d6e0:	4629      	mov	r1, r5
 800d6e2:	f7f2 fd41 	bl	8000168 <__aeabi_dsub>
 800d6e6:	e734      	b.n	800d552 <atan+0x2a>
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	4b4c      	ldr	r3, [pc, #304]	; (800d81c <atan+0x2f4>)
 800d6ec:	f7f2 fd3c 	bl	8000168 <__aeabi_dsub>
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	4606      	mov	r6, r0
 800d6f4:	460f      	mov	r7, r1
 800d6f6:	4620      	mov	r0, r4
 800d6f8:	4629      	mov	r1, r5
 800d6fa:	4b48      	ldr	r3, [pc, #288]	; (800d81c <atan+0x2f4>)
 800d6fc:	f7f2 fd36 	bl	800016c <__adddf3>
 800d700:	4602      	mov	r2, r0
 800d702:	460b      	mov	r3, r1
 800d704:	4630      	mov	r0, r6
 800d706:	4639      	mov	r1, r7
 800d708:	f7f3 f810 	bl	800072c <__aeabi_ddiv>
 800d70c:	f04f 0a01 	mov.w	sl, #1
 800d710:	4604      	mov	r4, r0
 800d712:	460d      	mov	r5, r1
 800d714:	e767      	b.n	800d5e6 <atan+0xbe>
 800d716:	4b43      	ldr	r3, [pc, #268]	; (800d824 <atan+0x2fc>)
 800d718:	429e      	cmp	r6, r3
 800d71a:	da1a      	bge.n	800d752 <atan+0x22a>
 800d71c:	2200      	movs	r2, #0
 800d71e:	4b42      	ldr	r3, [pc, #264]	; (800d828 <atan+0x300>)
 800d720:	f7f2 fd22 	bl	8000168 <__aeabi_dsub>
 800d724:	2200      	movs	r2, #0
 800d726:	4606      	mov	r6, r0
 800d728:	460f      	mov	r7, r1
 800d72a:	4620      	mov	r0, r4
 800d72c:	4629      	mov	r1, r5
 800d72e:	4b3e      	ldr	r3, [pc, #248]	; (800d828 <atan+0x300>)
 800d730:	f7f2 fed2 	bl	80004d8 <__aeabi_dmul>
 800d734:	2200      	movs	r2, #0
 800d736:	4b39      	ldr	r3, [pc, #228]	; (800d81c <atan+0x2f4>)
 800d738:	f7f2 fd18 	bl	800016c <__adddf3>
 800d73c:	4602      	mov	r2, r0
 800d73e:	460b      	mov	r3, r1
 800d740:	4630      	mov	r0, r6
 800d742:	4639      	mov	r1, r7
 800d744:	f7f2 fff2 	bl	800072c <__aeabi_ddiv>
 800d748:	f04f 0a02 	mov.w	sl, #2
 800d74c:	4604      	mov	r4, r0
 800d74e:	460d      	mov	r5, r1
 800d750:	e749      	b.n	800d5e6 <atan+0xbe>
 800d752:	4602      	mov	r2, r0
 800d754:	460b      	mov	r3, r1
 800d756:	2000      	movs	r0, #0
 800d758:	4934      	ldr	r1, [pc, #208]	; (800d82c <atan+0x304>)
 800d75a:	f7f2 ffe7 	bl	800072c <__aeabi_ddiv>
 800d75e:	f04f 0a03 	mov.w	sl, #3
 800d762:	4604      	mov	r4, r0
 800d764:	460d      	mov	r5, r1
 800d766:	e73e      	b.n	800d5e6 <atan+0xbe>
 800d768:	4b31      	ldr	r3, [pc, #196]	; (800d830 <atan+0x308>)
 800d76a:	4e32      	ldr	r6, [pc, #200]	; (800d834 <atan+0x30c>)
 800d76c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d774:	f7f2 fcf8 	bl	8000168 <__aeabi_dsub>
 800d778:	4622      	mov	r2, r4
 800d77a:	462b      	mov	r3, r5
 800d77c:	f7f2 fcf4 	bl	8000168 <__aeabi_dsub>
 800d780:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800d784:	4602      	mov	r2, r0
 800d786:	460b      	mov	r3, r1
 800d788:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d78c:	f7f2 fcec 	bl	8000168 <__aeabi_dsub>
 800d790:	f1bb 0f00 	cmp.w	fp, #0
 800d794:	4604      	mov	r4, r0
 800d796:	460d      	mov	r5, r1
 800d798:	f6bf aee4 	bge.w	800d564 <atan+0x3c>
 800d79c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d7a0:	461d      	mov	r5, r3
 800d7a2:	e6df      	b.n	800d564 <atan+0x3c>
 800d7a4:	4d24      	ldr	r5, [pc, #144]	; (800d838 <atan+0x310>)
 800d7a6:	e6dd      	b.n	800d564 <atan+0x3c>
 800d7a8:	8800759c 	.word	0x8800759c
 800d7ac:	7e37e43c 	.word	0x7e37e43c
 800d7b0:	e322da11 	.word	0xe322da11
 800d7b4:	3f90ad3a 	.word	0x3f90ad3a
 800d7b8:	24760deb 	.word	0x24760deb
 800d7bc:	3fa97b4b 	.word	0x3fa97b4b
 800d7c0:	a0d03d51 	.word	0xa0d03d51
 800d7c4:	3fb10d66 	.word	0x3fb10d66
 800d7c8:	c54c206e 	.word	0xc54c206e
 800d7cc:	3fb745cd 	.word	0x3fb745cd
 800d7d0:	920083ff 	.word	0x920083ff
 800d7d4:	3fc24924 	.word	0x3fc24924
 800d7d8:	5555550d 	.word	0x5555550d
 800d7dc:	3fd55555 	.word	0x3fd55555
 800d7e0:	2c6a6c2f 	.word	0x2c6a6c2f
 800d7e4:	bfa2b444 	.word	0xbfa2b444
 800d7e8:	52defd9a 	.word	0x52defd9a
 800d7ec:	3fadde2d 	.word	0x3fadde2d
 800d7f0:	af749a6d 	.word	0xaf749a6d
 800d7f4:	3fb3b0f2 	.word	0x3fb3b0f2
 800d7f8:	fe231671 	.word	0xfe231671
 800d7fc:	3fbc71c6 	.word	0x3fbc71c6
 800d800:	9998ebc4 	.word	0x9998ebc4
 800d804:	3fc99999 	.word	0x3fc99999
 800d808:	440fffff 	.word	0x440fffff
 800d80c:	7ff00000 	.word	0x7ff00000
 800d810:	54442d18 	.word	0x54442d18
 800d814:	bff921fb 	.word	0xbff921fb
 800d818:	3fdbffff 	.word	0x3fdbffff
 800d81c:	3ff00000 	.word	0x3ff00000
 800d820:	3ff2ffff 	.word	0x3ff2ffff
 800d824:	40038000 	.word	0x40038000
 800d828:	3ff80000 	.word	0x3ff80000
 800d82c:	bff00000 	.word	0xbff00000
 800d830:	0800e308 	.word	0x0800e308
 800d834:	0800e2e8 	.word	0x0800e2e8
 800d838:	3ff921fb 	.word	0x3ff921fb

0800d83c <fabs>:
 800d83c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d840:	4619      	mov	r1, r3
 800d842:	4770      	bx	lr

0800d844 <__ieee754_sqrt>:
 800d844:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 800d9e8 <__ieee754_sqrt+0x1a4>
 800d848:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d84c:	ea3c 0c01 	bics.w	ip, ip, r1
 800d850:	460b      	mov	r3, r1
 800d852:	4606      	mov	r6, r0
 800d854:	460d      	mov	r5, r1
 800d856:	460a      	mov	r2, r1
 800d858:	4604      	mov	r4, r0
 800d85a:	d10e      	bne.n	800d87a <__ieee754_sqrt+0x36>
 800d85c:	4602      	mov	r2, r0
 800d85e:	f7f2 fe3b 	bl	80004d8 <__aeabi_dmul>
 800d862:	4602      	mov	r2, r0
 800d864:	460b      	mov	r3, r1
 800d866:	4630      	mov	r0, r6
 800d868:	4629      	mov	r1, r5
 800d86a:	f7f2 fc7f 	bl	800016c <__adddf3>
 800d86e:	4606      	mov	r6, r0
 800d870:	460d      	mov	r5, r1
 800d872:	4630      	mov	r0, r6
 800d874:	4629      	mov	r1, r5
 800d876:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d87a:	2900      	cmp	r1, #0
 800d87c:	dc0d      	bgt.n	800d89a <__ieee754_sqrt+0x56>
 800d87e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800d882:	ea5c 0c00 	orrs.w	ip, ip, r0
 800d886:	d0f4      	beq.n	800d872 <__ieee754_sqrt+0x2e>
 800d888:	b139      	cbz	r1, 800d89a <__ieee754_sqrt+0x56>
 800d88a:	4602      	mov	r2, r0
 800d88c:	f7f2 fc6c 	bl	8000168 <__aeabi_dsub>
 800d890:	4602      	mov	r2, r0
 800d892:	460b      	mov	r3, r1
 800d894:	f7f2 ff4a 	bl	800072c <__aeabi_ddiv>
 800d898:	e7e9      	b.n	800d86e <__ieee754_sqrt+0x2a>
 800d89a:	1512      	asrs	r2, r2, #20
 800d89c:	f000 8089 	beq.w	800d9b2 <__ieee754_sqrt+0x16e>
 800d8a0:	2500      	movs	r5, #0
 800d8a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d8a6:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800d8aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d8ae:	07d2      	lsls	r2, r2, #31
 800d8b0:	bf5c      	itt	pl
 800d8b2:	005b      	lslpl	r3, r3, #1
 800d8b4:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800d8b8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d8bc:	bf58      	it	pl
 800d8be:	0064      	lslpl	r4, r4, #1
 800d8c0:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800d8c4:	0062      	lsls	r2, r4, #1
 800d8c6:	2016      	movs	r0, #22
 800d8c8:	4629      	mov	r1, r5
 800d8ca:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 800d8ce:	1076      	asrs	r6, r6, #1
 800d8d0:	190f      	adds	r7, r1, r4
 800d8d2:	429f      	cmp	r7, r3
 800d8d4:	bfde      	ittt	le
 800d8d6:	1bdb      	suble	r3, r3, r7
 800d8d8:	1939      	addle	r1, r7, r4
 800d8da:	192d      	addle	r5, r5, r4
 800d8dc:	005b      	lsls	r3, r3, #1
 800d8de:	3801      	subs	r0, #1
 800d8e0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d8e4:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800d8e8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d8ec:	d1f0      	bne.n	800d8d0 <__ieee754_sqrt+0x8c>
 800d8ee:	4604      	mov	r4, r0
 800d8f0:	2720      	movs	r7, #32
 800d8f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800d8f6:	428b      	cmp	r3, r1
 800d8f8:	eb0c 0e00 	add.w	lr, ip, r0
 800d8fc:	dc02      	bgt.n	800d904 <__ieee754_sqrt+0xc0>
 800d8fe:	d113      	bne.n	800d928 <__ieee754_sqrt+0xe4>
 800d900:	4596      	cmp	lr, r2
 800d902:	d811      	bhi.n	800d928 <__ieee754_sqrt+0xe4>
 800d904:	f1be 0f00 	cmp.w	lr, #0
 800d908:	eb0e 000c 	add.w	r0, lr, ip
 800d90c:	da56      	bge.n	800d9bc <__ieee754_sqrt+0x178>
 800d90e:	2800      	cmp	r0, #0
 800d910:	db54      	blt.n	800d9bc <__ieee754_sqrt+0x178>
 800d912:	f101 0801 	add.w	r8, r1, #1
 800d916:	1a5b      	subs	r3, r3, r1
 800d918:	4641      	mov	r1, r8
 800d91a:	4596      	cmp	lr, r2
 800d91c:	bf88      	it	hi
 800d91e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d922:	eba2 020e 	sub.w	r2, r2, lr
 800d926:	4464      	add	r4, ip
 800d928:	005b      	lsls	r3, r3, #1
 800d92a:	3f01      	subs	r7, #1
 800d92c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d930:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800d934:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d938:	d1dd      	bne.n	800d8f6 <__ieee754_sqrt+0xb2>
 800d93a:	4313      	orrs	r3, r2
 800d93c:	d01b      	beq.n	800d976 <__ieee754_sqrt+0x132>
 800d93e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800d9ec <__ieee754_sqrt+0x1a8>
 800d942:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800d9f0 <__ieee754_sqrt+0x1ac>
 800d946:	e9da 0100 	ldrd	r0, r1, [sl]
 800d94a:	e9db 2300 	ldrd	r2, r3, [fp]
 800d94e:	f7f2 fc0b 	bl	8000168 <__aeabi_dsub>
 800d952:	e9da 8900 	ldrd	r8, r9, [sl]
 800d956:	4602      	mov	r2, r0
 800d958:	460b      	mov	r3, r1
 800d95a:	4640      	mov	r0, r8
 800d95c:	4649      	mov	r1, r9
 800d95e:	f7f3 f837 	bl	80009d0 <__aeabi_dcmple>
 800d962:	b140      	cbz	r0, 800d976 <__ieee754_sqrt+0x132>
 800d964:	e9da 0100 	ldrd	r0, r1, [sl]
 800d968:	e9db 2300 	ldrd	r2, r3, [fp]
 800d96c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d970:	d126      	bne.n	800d9c0 <__ieee754_sqrt+0x17c>
 800d972:	463c      	mov	r4, r7
 800d974:	3501      	adds	r5, #1
 800d976:	106b      	asrs	r3, r5, #1
 800d978:	0864      	lsrs	r4, r4, #1
 800d97a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800d97e:	07ea      	lsls	r2, r5, #31
 800d980:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d984:	bf48      	it	mi
 800d986:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 800d98a:	4620      	mov	r0, r4
 800d98c:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800d990:	e76d      	b.n	800d86e <__ieee754_sqrt+0x2a>
 800d992:	0ae3      	lsrs	r3, r4, #11
 800d994:	3915      	subs	r1, #21
 800d996:	0564      	lsls	r4, r4, #21
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d0fa      	beq.n	800d992 <__ieee754_sqrt+0x14e>
 800d99c:	02d8      	lsls	r0, r3, #11
 800d99e:	d50a      	bpl.n	800d9b6 <__ieee754_sqrt+0x172>
 800d9a0:	f1c2 0020 	rsb	r0, r2, #32
 800d9a4:	fa24 f000 	lsr.w	r0, r4, r0
 800d9a8:	1e55      	subs	r5, r2, #1
 800d9aa:	4094      	lsls	r4, r2
 800d9ac:	4303      	orrs	r3, r0
 800d9ae:	1b4a      	subs	r2, r1, r5
 800d9b0:	e776      	b.n	800d8a0 <__ieee754_sqrt+0x5c>
 800d9b2:	4611      	mov	r1, r2
 800d9b4:	e7f0      	b.n	800d998 <__ieee754_sqrt+0x154>
 800d9b6:	005b      	lsls	r3, r3, #1
 800d9b8:	3201      	adds	r2, #1
 800d9ba:	e7ef      	b.n	800d99c <__ieee754_sqrt+0x158>
 800d9bc:	4688      	mov	r8, r1
 800d9be:	e7aa      	b.n	800d916 <__ieee754_sqrt+0xd2>
 800d9c0:	f7f2 fbd4 	bl	800016c <__adddf3>
 800d9c4:	e9da 8900 	ldrd	r8, r9, [sl]
 800d9c8:	4602      	mov	r2, r0
 800d9ca:	460b      	mov	r3, r1
 800d9cc:	4640      	mov	r0, r8
 800d9ce:	4649      	mov	r1, r9
 800d9d0:	f7f2 fff4 	bl	80009bc <__aeabi_dcmplt>
 800d9d4:	b120      	cbz	r0, 800d9e0 <__ieee754_sqrt+0x19c>
 800d9d6:	1ca1      	adds	r1, r4, #2
 800d9d8:	bf08      	it	eq
 800d9da:	3501      	addeq	r5, #1
 800d9dc:	3402      	adds	r4, #2
 800d9de:	e7ca      	b.n	800d976 <__ieee754_sqrt+0x132>
 800d9e0:	3401      	adds	r4, #1
 800d9e2:	f024 0401 	bic.w	r4, r4, #1
 800d9e6:	e7c6      	b.n	800d976 <__ieee754_sqrt+0x132>
 800d9e8:	7ff00000 	.word	0x7ff00000
 800d9ec:	20000220 	.word	0x20000220
 800d9f0:	20000228 	.word	0x20000228
 800d9f4:	00000000 	.word	0x00000000

0800d9f8 <__ieee754_atan2>:
 800d9f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9fc:	4617      	mov	r7, r2
 800d9fe:	4692      	mov	sl, r2
 800da00:	4699      	mov	r9, r3
 800da02:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800da06:	427b      	negs	r3, r7
 800da08:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800db88 <__ieee754_atan2+0x190>
 800da0c:	433b      	orrs	r3, r7
 800da0e:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800da12:	4543      	cmp	r3, r8
 800da14:	4604      	mov	r4, r0
 800da16:	460d      	mov	r5, r1
 800da18:	d809      	bhi.n	800da2e <__ieee754_atan2+0x36>
 800da1a:	4246      	negs	r6, r0
 800da1c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800da20:	4306      	orrs	r6, r0
 800da22:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800da26:	4546      	cmp	r6, r8
 800da28:	468e      	mov	lr, r1
 800da2a:	4683      	mov	fp, r0
 800da2c:	d908      	bls.n	800da40 <__ieee754_atan2+0x48>
 800da2e:	4652      	mov	r2, sl
 800da30:	464b      	mov	r3, r9
 800da32:	4620      	mov	r0, r4
 800da34:	4629      	mov	r1, r5
 800da36:	f7f2 fb99 	bl	800016c <__adddf3>
 800da3a:	4604      	mov	r4, r0
 800da3c:	460d      	mov	r5, r1
 800da3e:	e019      	b.n	800da74 <__ieee754_atan2+0x7c>
 800da40:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 800da44:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800da48:	433e      	orrs	r6, r7
 800da4a:	d103      	bne.n	800da54 <__ieee754_atan2+0x5c>
 800da4c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da50:	f7ff bd6a 	b.w	800d528 <atan>
 800da54:	ea4f 76a9 	mov.w	r6, r9, asr #30
 800da58:	f006 0602 	and.w	r6, r6, #2
 800da5c:	ea53 0b0b 	orrs.w	fp, r3, fp
 800da60:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800da64:	d10a      	bne.n	800da7c <__ieee754_atan2+0x84>
 800da66:	2e02      	cmp	r6, #2
 800da68:	d067      	beq.n	800db3a <__ieee754_atan2+0x142>
 800da6a:	2e03      	cmp	r6, #3
 800da6c:	d102      	bne.n	800da74 <__ieee754_atan2+0x7c>
 800da6e:	a53a      	add	r5, pc, #232	; (adr r5, 800db58 <__ieee754_atan2+0x160>)
 800da70:	e9d5 4500 	ldrd	r4, r5, [r5]
 800da74:	4620      	mov	r0, r4
 800da76:	4629      	mov	r1, r5
 800da78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da7c:	4317      	orrs	r7, r2
 800da7e:	d106      	bne.n	800da8e <__ieee754_atan2+0x96>
 800da80:	f1be 0f00 	cmp.w	lr, #0
 800da84:	da64      	bge.n	800db50 <__ieee754_atan2+0x158>
 800da86:	a536      	add	r5, pc, #216	; (adr r5, 800db60 <__ieee754_atan2+0x168>)
 800da88:	e9d5 4500 	ldrd	r4, r5, [r5]
 800da8c:	e7f2      	b.n	800da74 <__ieee754_atan2+0x7c>
 800da8e:	4542      	cmp	r2, r8
 800da90:	d10f      	bne.n	800dab2 <__ieee754_atan2+0xba>
 800da92:	4293      	cmp	r3, r2
 800da94:	f106 36ff 	add.w	r6, r6, #4294967295
 800da98:	d107      	bne.n	800daaa <__ieee754_atan2+0xb2>
 800da9a:	2e02      	cmp	r6, #2
 800da9c:	d851      	bhi.n	800db42 <__ieee754_atan2+0x14a>
 800da9e:	4b3b      	ldr	r3, [pc, #236]	; (800db8c <__ieee754_atan2+0x194>)
 800daa0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800daa4:	e9d3 4500 	ldrd	r4, r5, [r3]
 800daa8:	e7e4      	b.n	800da74 <__ieee754_atan2+0x7c>
 800daaa:	2e02      	cmp	r6, #2
 800daac:	d84d      	bhi.n	800db4a <__ieee754_atan2+0x152>
 800daae:	4b38      	ldr	r3, [pc, #224]	; (800db90 <__ieee754_atan2+0x198>)
 800dab0:	e7f6      	b.n	800daa0 <__ieee754_atan2+0xa8>
 800dab2:	4543      	cmp	r3, r8
 800dab4:	d0e4      	beq.n	800da80 <__ieee754_atan2+0x88>
 800dab6:	1a9b      	subs	r3, r3, r2
 800dab8:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800dabc:	ea4f 5223 	mov.w	r2, r3, asr #20
 800dac0:	da21      	bge.n	800db06 <__ieee754_atan2+0x10e>
 800dac2:	f1b9 0f00 	cmp.w	r9, #0
 800dac6:	da01      	bge.n	800dacc <__ieee754_atan2+0xd4>
 800dac8:	323c      	adds	r2, #60	; 0x3c
 800daca:	db20      	blt.n	800db0e <__ieee754_atan2+0x116>
 800dacc:	4652      	mov	r2, sl
 800dace:	464b      	mov	r3, r9
 800dad0:	4620      	mov	r0, r4
 800dad2:	4629      	mov	r1, r5
 800dad4:	f7f2 fe2a 	bl	800072c <__aeabi_ddiv>
 800dad8:	f7ff feb0 	bl	800d83c <fabs>
 800dadc:	f7ff fd24 	bl	800d528 <atan>
 800dae0:	4604      	mov	r4, r0
 800dae2:	460d      	mov	r5, r1
 800dae4:	2e01      	cmp	r6, #1
 800dae6:	d015      	beq.n	800db14 <__ieee754_atan2+0x11c>
 800dae8:	2e02      	cmp	r6, #2
 800daea:	d017      	beq.n	800db1c <__ieee754_atan2+0x124>
 800daec:	2e00      	cmp	r6, #0
 800daee:	d0c1      	beq.n	800da74 <__ieee754_atan2+0x7c>
 800daf0:	a31d      	add	r3, pc, #116	; (adr r3, 800db68 <__ieee754_atan2+0x170>)
 800daf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daf6:	4620      	mov	r0, r4
 800daf8:	4629      	mov	r1, r5
 800dafa:	f7f2 fb35 	bl	8000168 <__aeabi_dsub>
 800dafe:	a31c      	add	r3, pc, #112	; (adr r3, 800db70 <__ieee754_atan2+0x178>)
 800db00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db04:	e016      	b.n	800db34 <__ieee754_atan2+0x13c>
 800db06:	a51c      	add	r5, pc, #112	; (adr r5, 800db78 <__ieee754_atan2+0x180>)
 800db08:	e9d5 4500 	ldrd	r4, r5, [r5]
 800db0c:	e7ea      	b.n	800dae4 <__ieee754_atan2+0xec>
 800db0e:	2400      	movs	r4, #0
 800db10:	2500      	movs	r5, #0
 800db12:	e7e7      	b.n	800dae4 <__ieee754_atan2+0xec>
 800db14:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800db18:	461d      	mov	r5, r3
 800db1a:	e7ab      	b.n	800da74 <__ieee754_atan2+0x7c>
 800db1c:	a312      	add	r3, pc, #72	; (adr r3, 800db68 <__ieee754_atan2+0x170>)
 800db1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db22:	4620      	mov	r0, r4
 800db24:	4629      	mov	r1, r5
 800db26:	f7f2 fb1f 	bl	8000168 <__aeabi_dsub>
 800db2a:	4602      	mov	r2, r0
 800db2c:	460b      	mov	r3, r1
 800db2e:	a110      	add	r1, pc, #64	; (adr r1, 800db70 <__ieee754_atan2+0x178>)
 800db30:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db34:	f7f2 fb18 	bl	8000168 <__aeabi_dsub>
 800db38:	e77f      	b.n	800da3a <__ieee754_atan2+0x42>
 800db3a:	a50d      	add	r5, pc, #52	; (adr r5, 800db70 <__ieee754_atan2+0x178>)
 800db3c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800db40:	e798      	b.n	800da74 <__ieee754_atan2+0x7c>
 800db42:	a50f      	add	r5, pc, #60	; (adr r5, 800db80 <__ieee754_atan2+0x188>)
 800db44:	e9d5 4500 	ldrd	r4, r5, [r5]
 800db48:	e794      	b.n	800da74 <__ieee754_atan2+0x7c>
 800db4a:	2400      	movs	r4, #0
 800db4c:	2500      	movs	r5, #0
 800db4e:	e791      	b.n	800da74 <__ieee754_atan2+0x7c>
 800db50:	a509      	add	r5, pc, #36	; (adr r5, 800db78 <__ieee754_atan2+0x180>)
 800db52:	e9d5 4500 	ldrd	r4, r5, [r5]
 800db56:	e78d      	b.n	800da74 <__ieee754_atan2+0x7c>
 800db58:	54442d18 	.word	0x54442d18
 800db5c:	c00921fb 	.word	0xc00921fb
 800db60:	54442d18 	.word	0x54442d18
 800db64:	bff921fb 	.word	0xbff921fb
 800db68:	33145c07 	.word	0x33145c07
 800db6c:	3ca1a626 	.word	0x3ca1a626
 800db70:	54442d18 	.word	0x54442d18
 800db74:	400921fb 	.word	0x400921fb
 800db78:	54442d18 	.word	0x54442d18
 800db7c:	3ff921fb 	.word	0x3ff921fb
 800db80:	54442d18 	.word	0x54442d18
 800db84:	3fe921fb 	.word	0x3fe921fb
 800db88:	7ff00000 	.word	0x7ff00000
 800db8c:	0800e328 	.word	0x0800e328
 800db90:	0800e340 	.word	0x0800e340

0800db94 <_init>:
 800db94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db96:	bf00      	nop
 800db98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db9a:	bc08      	pop	{r3}
 800db9c:	469e      	mov	lr, r3
 800db9e:	4770      	bx	lr

0800dba0 <_fini>:
 800dba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dba2:	bf00      	nop
 800dba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dba6:	bc08      	pop	{r3}
 800dba8:	469e      	mov	lr, r3
 800dbaa:	4770      	bx	lr
